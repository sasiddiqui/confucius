{
    "documents": [
        {
            "body": {
                "answer": "<p>Thanks professor bro.</p>", 
                "question": "I<sq>ve taught 30000 students how to code. Now I<sq>m offering my course for free forever."
            }, 
            "id": "dabst53"
        }, 
        {
            "body": {
                "answer": "<p>Going to give this a try!  I<sq>m pushing 40 and have zero coding knowledge, but I need a new direction in life.  Thanks so much for doing this!</p>", 
                "question": "I<sq>ve taught 30000 students how to code. Now I<sq>m offering my course for free forever."
            }, 
            "id": "dabsvm7"
        }, 
        {
            "body": {
                "answer": "<p>This is the best thing that happened to me today. Thank you very much for this course. I wish you all the best!</p>", 
                "question": "I<sq>ve taught 30000 students how to code. Now I<sq>m offering my course for free forever."
            }, 
            "id": "dabns0k"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome! You<sq>re doing humanity a great service!</p>", 
                "question": "I<sq>ve taught 30000 students how to code. Now I<sq>m offering my course for free forever."
            }, 
            "id": "dabnm8w"
        }, 
        {
            "body": {
                "answer": "<p>I cannot recommend CS50 enough. It<sq>s a fantastic course. It<sq>s tough, but it<sq>s probably the best intro course I have ever taken.<br><br>Plus, DJ Malan is in da house.</p>", 
                "question": "I highly recommend Harvard<sq>s free online 2016 CS50 <dq>Intro to CS<dq> course for anyone new to programming"
            }, 
            "id": "d4qqayu"
        }, 
        {
            "body": {
                "answer": "<p>Mom! I<sq>m going to Harvard!</p>", 
                "question": "I highly recommend Harvard<sq>s free online 2016 CS50 <dq>Intro to CS<dq> course for anyone new to programming"
            }, 
            "id": "d4qvzmk"
        }, 
        {
            "body": {
                "answer": "<p>Took this class before entering uni as a cis/computer science majors. I was still using stuff I learned 2-3 years in and the amount of things it touches on is amazing. From programing to even running a small database. It<sq>s by no means a easy class but if you stick with it you will learn so much. <br><br>The class is mainly in C. C is one of the tougher language to grasp, especially for beginners, but if you can learn C you can learn almost anything after.<br><br>If you<sq>re going to take it don<sq>t give up, the subreddit is extremely helpful if you get stuck. Some problems may take you hours, days, or even weeks, but if you stick with it you<sq>ll have a awesome grasp on computers and programming.<br><br>Also the problems are actually fun. One of the projects was where hey give you a <dq>deleted<dq> sd card file and you have to write a program to recover all the files. Another cool one was making a fake stock trading game.<br><br>All in all this class was one of the best things I<sq>ve ever done for my self in terms of gaining the most knowledge about computers and programming. If youre a beginner and want to truly learn this class will teach you better then a million YouTube tutorials or any book.<br></p>", 
                "question": "I highly recommend Harvard<sq>s free online 2016 CS50 <dq>Intro to CS<dq> course for anyone new to programming"
            }, 
            "id": "d4qx0gd"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m actually a teaching fellow for this course, so I<sq>d anyone has questions about it I<sq>d be happy to answer!</p>", 
                "question": "I highly recommend Harvard<sq>s free online 2016 CS50 <dq>Intro to CS<dq> course for anyone new to programming"
            }, 
            "id": "d4qx4in"
        }, 
        {
            "body": {
                "answer": "<p>I read that as <dq>I made 47 years of free c++ tutorials<dq> and was like T_T</p>", 
                "question": "I made 47 free C++ tutorials on YouTube and wanted to share them with you guys"
            }, 
            "id": "cy6cno1"
        }, 
        {
            "body": {
                "answer": "<p>Your 47th link is the same as your 46th, you might want to fix that.</p>", 
                "question": "I made 47 free C++ tutorials on YouTube and wanted to share them with you guys"
            }, 
            "id": "cy6id26"
        }, 
        {
            "body": {
                "answer": "<p>Awesome, thank you! Will have to check out the vectors tutorial soon. Had more trouble with that in my CS class than anything else <br><br>Edit<colon> Is there a playlist link you can post? Would make it easier to follow the lessons that way </p>", 
                "question": "I made 47 free C++ tutorials on YouTube and wanted to share them with you guys"
            }, 
            "id": "cy6cbi7"
        }, 
        {
            "body": {
                "answer": "<p>I am brand new to programming. I<sq>ll give them a go! Thanks!</p>", 
                "question": "I made 47 free C++ tutorials on YouTube and wanted to share them with you guys"
            }, 
            "id": "cy6cdmr"
        }, 
        {
            "body": {
                "answer": "<p>They actually mentioned your project on Fox Business today. Pretty sure it was on Cavuto<sq>s show. </p>", 
                "question": "I just made my first large project! It scrapes Trump<sq>s tweets and if a company is mentioned it monitors that companies shares for a week!"
            }, 
            "id": "dckcidr"
        }, 
        {
            "body": {
                "answer": "<p>How about also using Twitter handles for the companies since that is most likely what he<sq>d use?</p>", 
                "question": "I just made my first large project! It scrapes Trump<sq>s tweets and if a company is mentioned it monitors that companies shares for a week!"
            }, 
            "id": "dck88lb"
        }, 
        {
            "body": {
                "answer": "<p>* [Why this class?](https<colon>//github.com/Mhyles/DonaldTrumpStockMonitor/blob/master/Trump.py#L17) Just do `config = json.loads(CONFIG_FILE)`<br>* [Why this class, as well?](https<colon>//github.com/Mhyles/DonaldTrumpStockMonitor/blob/master/Trump.py#L40) <br>* Should run `flake8` against this so the code style is correct<br>* [Use double quotes and only 1 pair, it<sq>s multiline](https<colon>//github.com/Mhyles/DonaldTrumpStockMonitor/blob/master/Trump.py#L62)<br>* [Typically shouldn<sq>t catch all exceptions, linter will probably yell about this anyway](https<colon>//github.com/Mhyles/DonaldTrumpStockMonitor/blob/master/Trump.py#L80)<br>* Also shouldn<sq>t be wrapping almost everything in try/excepts, only specific pieces<br>* `punc = [<dq>!<dq>, <dq>,<dq>, <dq>.<dq>, <dq><colon><dq>, <dq>;<dq>]` could be `punc = <dq>!,.<colon>;<dq>` -- a little more readable since the commas and such mix in<br>* [This](https<colon>//github.com/Mhyles/DonaldTrumpStockMonitor/blob/master/Trump.py#L182) could be rewritten as `for p in punc<colon> self.tweet.replace(p, <sq><sq>)`<br>* Why use phantomjs instead of regular old requests?! That<sq>s a neat way of doing it, but seems a bit overkill?<br>* My overall suggestion<colon> write code more pythonic instead of like Java -- why use all these classes?! <colon>)<br>* Also, this should be a website!<br><br><br>If I was you, I<sq>d turn this into a website project using Heroku (web host, super easy, beautiful), Django (website backend), Semantic (website frontend, easy to use) and Celery (schedule tasks like analyze trump feed every hour or something).</p>", 
                "question": "I just made my first large project! It scrapes Trump<sq>s tweets and if a company is mentioned it monitors that companies shares for a week!"
            }, 
            "id": "dckgiyh"
        }, 
        {
            "body": {
                "answer": "<p>I was talking to friends that this is a very valid investing strategy now. ... annnnd someone else did it.<br><br>Though id bet a few thousand dollars that some smart day traders already had their code monkeys working on th is as early as this summer.</p>", 
                "question": "I just made my first large project! It scrapes Trump<sq>s tweets and if a company is mentioned it monitors that companies shares for a week!"
            }, 
            "id": "dckcgft"
        }, 
        {
            "body": {
                "answer": "<p>I like what you<sq>re doing. <br><br>I<sq>d make some code structure tweaks. First, in all your classes you have an odd mix of class variables and instance variables. <br><br>When you do this<colon><br><br>    class SpeedTest(object)<colon><br>    <br>        download = <dq><dq><br>        upload = <dq><dq><br>        latency = <dq><dq><br>        jitter = <dq><dq><br><br>You<sq>re defining class variables here. And then later accessing them as instance variables. If you<sq>re limiting things to only one instance it<sq>s still better to use instance variables here, by initializing them in an `__init__(self)<colon>` function.<br><br>    class SpeedTest(object)<colon><br>        def __init__(self)<colon>    <br>            self.download = <dq><dq><br>            self.upload = <dq><dq><br>            self.latency = <dq><dq><br>            self.jitter = <dq><dq><br><br>Second, in your `__main__`, you 1) make a SpeedTest instance, 2) call its init_driver function to initialize a driver, then 3) call a method of your SpeedTest instance and inject that driver back in as a parameter.<br><br>That<sq>s kind of wonky. What I<sq>d do is have a separate class that would create and initialize a driver, then create a SpeedTest object with that driver as a parameter<colon><br><br>    if __name__==<sq>__main__<sq><colon><br>        driver = DriverFactory.createFireFoxDriver(wait=5)<br>        speedtest = SpeedTest(driver)<br><br>then <br><br>    class SpeedTest<colon><br>        def __init__(self, driver)<colon><br>            self.driver = driver<br><br>It makes sense since your SpeedTest class can<sq>t do anything without a web driver, so you can constrain instantiation to require a driver. Then you could easily test other web drivers if you so needed. <br><br>Third,<br><br>Some naming schemes don<sq>t sit well with me.<br><br>    speedtest.get_data()<br><br>Implies that it would return some form of data. But that<sq>s not what<sq>s happening. Also, what happens if you call `get_data()` before you call `run_test(driver)`?  It looks like you<sq>ll just log that you couldn<sq>t find the data, which is good, but there<sq>s probably a safer way to deal with the workflow here. <br><br>Anyway, it<sq>s a good script. There<sq>s a lot of room for improvement and plenty of ground to get lost in feature creep ;-p </p>", 
                "question": "I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them."
            }, 
            "id": "db6ue6e"
        }, 
        {
            "body": {
                "answer": "<p>I ***almost*** wish my ISP was crappy enough to run these. <br><br>Almost.<br><br>Thanks charter! Always get my advertise speed (and often more!)</p>", 
                "question": "I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them."
            }, 
            "id": "db6qnkn"
        }, 
        {
            "body": {
                "answer": "<p>This is amazing.</p>", 
                "question": "I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them."
            }, 
            "id": "db6q76w"
        }, 
        {
            "body": {
                "answer": "<p>Very cool!  If you have an interruption will it tweet them when it comes back online?  <dq>Just so you know, ISP, my service was disconnected last night from xxxx to xxxx.<dq></p>", 
                "question": "I was pissed at Comcast(Time Warner) so I wrote another python script - This one tweets poor speed test results at them."
            }, 
            "id": "db6qv9u"
        }, 
        {
            "body": {
                "answer": "<p>You should cross post this to /r/cscareerquestions, I think they would be really interested in it, as this whole topic comes up so frequently there. <br><br>Also<colon> Congratulations and Good Luck!</p>", 
                "question": "I<sq>m 32 years old and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned I found via /r/learnprogramming so just wanted to share my experience."
            }, 
            "id": "cqxapxd"
        }, 
        {
            "body": {
                "answer": "<p>What was the time commitment like? I<sq>m a bit confused about your filming gig since it doesn<sq>t sound like a 9-5 job.<br><br>What projects did you put on your resume/cover letter?</p>", 
                "question": "I<sq>m 32 years old and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned I found via /r/learnprogramming so just wanted to share my experience."
            }, 
            "id": "cqxcg97"
        }, 
        {
            "body": {
                "answer": "<p>Wait, if you<sq>ve only been programming for a year, you can still get a job as a developer? Is this typical?</p>", 
                "question": "I<sq>m 32 years old and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned I found via /r/learnprogramming so just wanted to share my experience."
            }, 
            "id": "cqxhxh5"
        }, 
        {
            "body": {
                "answer": "<p>Perfect timing.  About three different threads have popped up just today asking about what it takes to get started from scratch without a degree.</p>", 
                "question": "I<sq>m 32 years old and just started my first full-time job as a developer. One year ago my programming knowledge was basically nil. Everything I learned I found via /r/learnprogramming so just wanted to share my experience."
            }, 
            "id": "cqxdcya"
        }, 
        {
            "body": {
                "answer": "<p>One thing I can tell you is, that you should be incredibly proud of yourself. That was a good post. The realities of having a remote job... I wish someone could emphasize more on that for people, really.<br><br>Keep up the good work, OP!</p>", 
                "question": "I began teaching myself to code a year ago. I got hired at my first job 4 months ago. Here is a breakdown of somethings I was not ready for (FYI job is remote ruby/rails dev)"
            }, 
            "id": "d6ll337"
        }, 
        {
            "body": {
                "answer": "<p>That was one hell of a post and it really spoke to me man. Really. I<sq>m in this part of my life where I feel like a big transition is needed, but getting there is hard. Yes, you can say <dq>Well look at what you got. The entirety of human knowledge is available online. Just read a lot and you can learn anything!<dq> So much easier said than done. There are so many things I<sq>ve been reading lately that seem to go right over my head, make me feel dumb and my lifelong habit when I feel dumb has been to back away and quit, so I won<sq>t feel like that anymore. Having the perseverance to push through is something I<sq>ve had a hard time finding, but I<sq>ll get there. It<sq>s just....it feels weird starting over at 32 in something that even 14 year olds are better at me in. I feel like I<sq>m in kindergarten and everybody else is in high school </p>", 
                "question": "I began teaching myself to code a year ago. I got hired at my first job 4 months ago. Here is a breakdown of somethings I was not ready for (FYI job is remote ruby/rails dev)"
            }, 
            "id": "d6lp2pp"
        }, 
        {
            "body": {
                "answer": "<p>> I had wasted a lot of time building out features that were not wanted.<br><br><br>As a developer for the past coming up to 4 years, i can not stress this point enough to anyone getting in to the industry.<br><br>&nbsp;<br><br>Code to your requirements, no more, no less. Do exactly what it says on the tin.<br><br>&nbsp;<br><br>The extra time you may spend on adding cool little features of functionality you think will be useful or the client will really like will most likely go unused, the code will never be touched and will end up becoming this horrible monster that sits in your application that will cost you time and effort to remove or refactor later down the road.<br><br><br>Instead spend that time refactoring the code that meets the specifications, building automated tests (both unit and integration) that tests as many aspects of your code as possible. hell spend time at the start of the project designing and architecting your project, because it will highlight issues you will never think of once you get tunnel vision<sq>d on writing code.<br><br><br>All of this will make the project easier to come back to in the future, make it easier to extend / update and know that any changes you make have plenty of tests covering you so that you dont break existing functionality, and if you do, will highlight exactly where the bug you have introduced is.<br><br><br>It may be less fun doing all this than messing around with the code, but you will be so happy you did.<br></p>", 
                "question": "I began teaching myself to code a year ago. I got hired at my first job 4 months ago. Here is a breakdown of somethings I was not ready for (FYI job is remote ruby/rails dev)"
            }, 
            "id": "d6lsypb"
        }, 
        {
            "body": {
                "answer": "<p>> I wanted to become a developer so I could build and create, not so I could spend 3 hours reading through Twitter\u2019s API documentation about rate limits.<br><br>HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA<br><br>*<colon><colon>breathe<colon><colon>*<br><br>HAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA<br><br><br>*<colon><colon>sigh<colon><colon>*  <colon>D<br><br>Welcome to the tech world!</p>", 
                "question": "I began teaching myself to code a year ago. I got hired at my first job 4 months ago. Here is a breakdown of somethings I was not ready for (FYI job is remote ruby/rails dev)"
            }, 
            "id": "d6m1hqc"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for your hard work and commitment. </p>", 
                "question": "Here<sq>s a SANITIZED list of 530+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (December 2016)"
            }, 
            "id": "daujn6e"
        }, 
        {
            "body": {
                "answer": "<p>Guess this was removed for some reason? </p>", 
                "question": "Here<sq>s a SANITIZED list of 530+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (December 2016)"
            }, 
            "id": "dauhu95"
        }, 
        {
            "body": {
                "answer": "<p>... so is this the last month that /u/dhawal will be making the list? Kinda sucks. It was obvious he was making referral money off of it but as no one else seemed willing to do the work it kinda seemed ok. </p>", 
                "question": "Here<sq>s a SANITIZED list of 530+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (December 2016)"
            }, 
            "id": "dausjm5"
        }, 
        {
            "body": {
                "answer": "<p>DEADPOOL, the real MVP</p>", 
                "question": "Here<sq>s a SANITIZED list of 530+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (December 2016)"
            }, 
            "id": "dauptu8"
        }, 
        {
            "body": {
                "answer": "<p>Some mirrors just incase dropbox starts to limit downloads<colon><br><br>[https<colon>//www.speedyshare.com/CVfXg/Let-s-Build-Instagram-with-Ruby-on-Rails-Free-Edition.pdf](https<colon>//www.speedyshare.com/CVfXg/Let-s-Build-Instagram-with-Ruby-on-Rails-Free-Edition.pdf)<br><br>[https<colon>//www.sendspace.com/file/mbiuf1](https<colon>//www.sendspace.com/file/mbiuf1)<br><br>[http<colon>//uploaded.net/file/7jlzyrxl](http<colon>//uploaded.net/file/7jlzyrxl)<br><br>[http<colon>//en.file-upload.net/download-11351506/LetsBuildInstagramwithRubyonRails-FreeEdition.pdf.html](http<colon>//en.file-upload.net/download-11351506/LetsBuildInstagramwithRubyonRails-FreeEdition.pdf.html)<br><br>[http<colon>//www.uploadmb.com/dw.php?id=1456756693](http<colon>//www.uploadmb.com/dw.php?id=1456756693)<br><br>[http<colon>//www.filetolink.com/e60950d911](http<colon>//www.filetolink.com/e60950d911)<br><br>[http<colon>//www.file-upload.cc/96hd1grz04zv](http<colon>//www.file-upload.cc/96hd1grz04zv)<br><br>[http<colon>//uploadduck.com/SEz](http<colon>//uploadduck.com/SEz)<br><br>[http<colon>//1file.co/tm](http<colon>//1file.co/tm)</p>", 
                "question": "I<sq>ve written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It<sq>s yours for free (no sign up required)."
            }, 
            "id": "d0i253w"
        }, 
        {
            "body": {
                "answer": "<p>Woah you hit almost exactly what I wanted to learn how to do with near perfect timing.<br><br>Thank you very much Devwalks.</p>", 
                "question": "I<sq>ve written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It<sq>s yours for free (no sign up required)."
            }, 
            "id": "d0i15cj"
        }, 
        {
            "body": {
                "answer": "<p>You are not just giving us an e-book on a subject, you are giving us YOUR TIME, the most precious commodity in any universe and for that, we are grateful.<br><br></p>", 
                "question": "I<sq>ve written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It<sq>s yours for free (no sign up required)."
            }, 
            "id": "d0icuam"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for the book. Does anyone know if there is something like this for Python/django?</p>", 
                "question": "I<sq>ve written a 200 page e-book on how to build an Instagram like social network from scratch with Ruby on Rails. It<sq>s yours for free (no sign up required)."
            }, 
            "id": "d0i40qv"
        }, 
        {
            "body": {
                "answer": "<p>In general, your post is very encouraging and nicely written.<br><br>It just irks me when people mix two distinct things (like you do as well)<colon><br><br>+ learning *a programming language*<br>+ learning *to program*<br><br>The two items above are distinct and not the same in any matter. Especially beginners often confuse learning a programming language (in syntax and grammar) with learning to program (the actual, difficult part).<br><br>Sure, in order to be able to program, one needs both, a language and knowing how to program.<br><br>----<br><br>Your order of things<colon><br><br>1. Learn syntax<br>2. Solve problems<br>3. Make stuff<br><br>is definitely not the worst approach, but it brings one major problem<colon><br><br>*Learning out of context is more difficult than learning with relatable context.*<br><br>If you just initially focus on the syntax, you learn without context - you *memorize* and memorizing and programming don<sq>t go together. Memorizing kills programming *creativity* because after having memorized the general syntax (which up to a certain degree is a necessary evil), many beginners start memorizing *algorithms* in the context of their current programming language - and here is exactly where the problem lies. It doesn<sq>t make sense to memorize an algorithm in a certain programming language - algorithms need to be understood on a *conceptual, abstract level* independent from programming languages.<br><br>As an example<colon><br><br>In Java, you use a `Scanner` instance to obtain keyboard input, so people will write something along<colon><br><br>    Scanner keyboard = new Scanner(System.in);<br><br>    // more code<br><br>    int value = keyboard.nextInt();<br><br>A beginner might want to memorize the above snippet for later reuse.<br><br>Rather than memorizing the code, it is essential to understand what the code does and why it does what it does in a certain way.<br><br>So, instead of memorizing the code, it is better to memorize<colon><br><br>+ When I need input from a keyboard, I need some object that can acquire that input<br>+ When I need a certain value, I use one of the methods of the object above to obtain what I need<br><br>This abstract concept transfers well across many languages. Once understood, all that needs to be done is to translate the concept into the actual implementation in the required language. Be it Java, C#, C++, or any other language.<br><br>Another example<colon><br><br>I want to iterate through an array<colon><br><br>    for(int i = 0; i <= myArray.length, i++) {<br>        // do something with myArray[i]<br>    }<br><br>Again, the actual code is secondary. I only need to know that I need a way to access each and every element in the array. How exactly I do that depends on the language implementation.<br><br>This *abstract* or *conceptual* learning becomes even more important with data structures and algorithms. It is hardly ever necessary to be able to recite the implementation of any algorithm in any language, but it is very important to understand the algorithm on a *conceptual* level so that it can be implemented in any given language.<br><br>----<br><br>Your item #2<colon> **Solve problems** is where most people drop out of programming.<br><br>Why?<br><br>Because *solving problems* requires to learn a different way of thinking - thinking in *algorithms* or *abstract thinking*. This is a purely acquired and trained skill that initially requires lots and lots of effort and is very hard. It definitely gets easier over time and with more practice.<br><br>Especially in this step, beginners often make one major mistake<colon> They give up too quickly (<dq>I<sq>ve been on that problem for half an hour and can<sq>t come up with a solution<dq>) and resort to resources on the internet, which, in turn frustrates them because often the solution is either very easy, or way over their head.<br><br>When I learned programming, there was no internet and there were hardly any knowledgeable people around that could be asked, so I was forced to struggle and find the solutions on my own. Often, it took *days* to come up with something useful, but there was no other choice.<br><br>The internet with all its benefits has made people too much dependent and lots less self-sustaining. Instead of really biting through a problem it is way easier to fire up our good and essential friend, Dr. Google, and get the solution in a matter of seconds. Then, they implement the solution without spending time to actually understand it (copy-paste code monkey style) - which is a huge red flag. It is fine to look at other<sq>s code, but only as a reference and help to understand it. Especially beginners should write every piece of code on their own. This trains problem solving and analysing skills.<br><br>I am definitely stating that the more and longer you struggle with a problem, the better you will become as a programmer because you rely less on external sources.<br><br>----<br><br>Another issue<colon><br><br>When attacking a new problem or task, beginners often directly rush to the keyboard and start programming away. Again, this is the wrong approach. Before even thinking about going near the computer, especially beginners should spend considerable time to analyse the problem and to devise a solution on paper (not necessarily in a real programming language). The time spent planning and thinking about the task is not wasted, rather the contrary is the case. The better a problem is analysed, the more time is spent on consideration, the better the final result will be.<br><br>Again, back when I learned to program (before I bought my own computer), access to computers was extremely limited. I could access our school<sq>s Apple ][ Europlus for two hours per week in a single session. So, the majority of my programming was done offline - without access to a computer. I planned, I wrote my code, I debugged the code in my mind, and then, when I was sure that it would work and produce the desired output, I used my session to actually type in the program. Most of the time, the programs worked without problems - besides occasional syntax errors produced during typing.<br><br>IMO, learning to produce and trace code without a computer is an essential skill in the toolbelt of a programmer. This way, again, a programmer becomes self-sustaining.</p>", 
                "question": "The Best Way To Learn How To Code"
            }, 
            "id": "dewxieh"
        }, 
        {
            "body": {
                "answer": "<p>Learning solid approaches to problem solving, making them become second nature, then approaching problem solving. Makes learning a language significantly easier.<br><br>Understanding the problem, pulling it apart, putting it back together again, knowing how to solve the problem in a more familiar setting (physical world, maths, etc.), then translating the steps of that solution into pseudo-code, followed by translating pseudo-code into an actual algorithm. Then it is a case of ironing out bugs, or going back and forth for a bit until your solution works.<br><br>The same goes for making things. Break the project down into easily digestible chunks, find similarities between these chunks and pre-existing experiences/knowledge. Then follow the problem solving steps, gradually adding those chunks together. Until you suddenly find you have made what you set out to make, or more often than not, something much better.<br><br>All the time while doing these you are learning your language naturally. As you would learn anything else, through experience and curiosity.</p>", 
                "question": "The Best Way To Learn How To Code"
            }, 
            "id": "dewy0q7"
        }, 
        {
            "body": {
                "answer": "<p>Please, **no hidden advertisements**!<br><br>Otherwise, I am forced to remove this, generally good, content.</p>", 
                "question": "The Best Way To Learn How To Code"
            }, 
            "id": "dewyac2"
        }, 
        {
            "body": {
                "answer": "<p>No one tells me how to learn.</p>", 
                "question": "The Best Way To Learn How To Code"
            }, 
            "id": "dex3198"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t want to irk you, but you should attach some sort of license to your notes since you<sq>re sharing them with everyone. To protect your work, that is.</p>", 
                "question": "My Programming Notes (141 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets"
            }, 
            "id": "d2xjbru"
        }, 
        {
            "body": {
                "answer": "<p>Obligatory thanks fam.  <br>I<sq>ve already taken courses that cover the first two topics, and I<sq>ll be taking a data structures course in the Fall. I<sq>ve always wondered how my college experience compares specifically to those who are self taught - now I can find out! Hope it doesn<sq>t tempt me to drop out XD</p>", 
                "question": "My Programming Notes (141 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets"
            }, 
            "id": "d2xjxkq"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m glad you got it fixed. The notes are incredibly helpful!</p>", 
                "question": "My Programming Notes (141 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets"
            }, 
            "id": "d2xhmes"
        }, 
        {
            "body": {
                "answer": "<p>Could you maybe post a tutorial or a small write up on how you made your notes so organized? Would be really damn useful not just in programming.</p>", 
                "question": "My Programming Notes (141 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets"
            }, 
            "id": "d2xqmy7"
        }, 
        {
            "body": {
                "answer": "<p>Cool! I<sq>ll totally add this to my bookmarks and forget about it while playing Fifa 17.</p>", 
                "question": "Here<sq>s a list of 520+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2016)"
            }, 
            "id": "d8c5szs"
        }, 
        {
            "body": {
                "answer": "<p>Advice for everyone<colon>  <br>Pick one course, the course you want to complete the most. Start that one and wait until he posts another list to start the next. Don<sq>t go through the list adding every course that pertains to you.  <br>I did the latter and never got anything done, did intro videos for all the courses and then promptly forgot about it.  <br>I did the former, and I<sq>ve finished three courses already<colon> Data Structures and Algorithms by UCSD through Coursera, Intro Android Development Udacity and CS50x through EdX.  <br>Now I<sq>m going to do DS & Algorithms by Stanford Part I and that<sq>s it. I<sq>ll wait until he posts next time and probably do Part II.  </p>", 
                "question": "Here<sq>s a list of 520+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2016)"
            }, 
            "id": "d8cbcww"
        }, 
        {
            "body": {
                "answer": "<p>dhawal is doing it again ;). Thanks, will check some of those out for sure! </p>", 
                "question": "Here<sq>s a list of 520+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2016)"
            }, 
            "id": "d8c5yg0"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for putting this together, it looks awesome! Cant wait to pick a few out to do <colon>)</p>", 
                "question": "Here<sq>s a list of 520+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2016)"
            }, 
            "id": "d8c62io"
        }, 
        {
            "body": {
                "answer": "<p>Dan Ross<br><br>And now, we shall paint a happy little calculator, in python.</p>", 
                "question": "Why doesn<sq>t this guy get more views? Really good teacher proffesional video quality. Learning programming is fun again!"
            }, 
            "id": "d81b4oq"
        }, 
        {
            "body": {
                "answer": "<p>He does. This guy is huge in the scene of getting people excited about coding. He was the main guy behind Processing, which is essentially a Java API / coding environment built for visual coding. It<sq>s used by artists to create these amazing experiences that transcend the keyboard and mouse. Check out the Nature of Code for more info on what I<sq>m talking about (it<sq>s free).</p>", 
                "question": "Why doesn<sq>t this guy get more views? Really good teacher proffesional video quality. Learning programming is fun again!"
            }, 
            "id": "d8194fd"
        }, 
        {
            "body": {
                "answer": "<p>this guy<sq>s intro is lol fucking great.</p>", 
                "question": "Why doesn<sq>t this guy get more views? Really good teacher proffesional video quality. Learning programming is fun again!"
            }, 
            "id": "d81arpf"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing, I<sq>ll definitely check these out</p>", 
                "question": "Why doesn<sq>t this guy get more views? Really good teacher proffesional video quality. Learning programming is fun again!"
            }, 
            "id": "d816k41"
        }, 
        {
            "body": {
                "answer": "<p>This is the work of gods. Thanks for compiling and informing us of this! </p>", 
                "question": "Here<sq>s a list of 227 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2016)"
            }, 
            "id": "d3y0w5c"
        }, 
        {
            "body": {
                "answer": "<p>I just started Coursera<sq>s python specialization last month. I don<sq>t know why I waited so long. It<sq>s really great. I could always have picked up a book on it and started reading but the exercises and structure makes it so much more easy to motivate myself.</p>", 
                "question": "Here<sq>s a list of 227 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2016)"
            }, 
            "id": "d3y36en"
        }, 
        {
            "body": {
                "answer": "<p>Bookmarked so as to never look at it again.</p>", 
                "question": "Here<sq>s a list of 227 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2016)"
            }, 
            "id": "d3yh5o5"
        }, 
        {
            "body": {
                "answer": "<p>I see you do this quite a bit. <br><br>Have you considered doing one for maths?</p>", 
                "question": "Here<sq>s a list of 227 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2016)"
            }, 
            "id": "d3y1s2q"
        }, 
        {
            "body": {
                "answer": "<p>Saved, for later use!<br><br>Quick question as well<colon> I am a programmer by trade, but have never used c++ before, would this be a problem? I am more familiar with c# and javascript mostly.</p>", 
                "question": "Learn to make a game in C++!"
            }, 
            "id": "cvi1uiw"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m learning C++ as my first programming language! This looks awesome and I<sq>ll definitely give it a try. </p>", 
                "question": "Learn to make a game in C++!"
            }, 
            "id": "cvi4nfn"
        }, 
        {
            "body": {
                "answer": "<p>Surely saved!<br>Thanks you really!<br><br>I started with SDL2 but just showed an image, would probably be following this!</p>", 
                "question": "Learn to make a game in C++!"
            }, 
            "id": "cvi2vhq"
        }, 
        {
            "body": {
                "answer": "<p>Link to playlist <br><br>Remaking Cavestory in C++<colon> https<colon>//www.youtube.com/playlist?list=PLNOBk_id22bw6LXhrGfhVwqQIa-M2MsLa</p>", 
                "question": "Learn to make a game in C++!"
            }, 
            "id": "cvifkgk"
        }, 
        {
            "body": {
                "answer": "<p>This is interesting and useful to anyone looking to get into web development. <br><br>However, there<sq>s very little *programming* involved here, and most of it is in the Grunt link. I know we<sq>re all sick of this argument, but markup isn<sq>t programming.<br><br>If you<sq>re looking for an intro to HTML/CSS, this is a pretty good tutorial, since it also includes how to deploy your output to Amazon. But if you<sq>re looking to improve your *programming* skills, this isn<sq>t where you should start.</p>", 
                "question": "For those that keep posting<colon> <dq>I am new to coding and not sure where to start?<dq> <dq>I am overwhelmed by the options!<dq> <dq>Which language should I learn first?<dq> - You can try and start here >> An easy to follow 5 part tutorial on how to build a simple website and deploy it aimed at complete beginners."
            }, 
            "id": "dcsu7p9"
        }, 
        {
            "body": {
                "answer": "<p>Unless of course your interests have nothing to do with web development...</p>", 
                "question": "For those that keep posting<colon> <dq>I am new to coding and not sure where to start?<dq> <dq>I am overwhelmed by the options!<dq> <dq>Which language should I learn first?<dq> - You can try and start here >> An easy to follow 5 part tutorial on how to build a simple website and deploy it aimed at complete beginners."
            }, 
            "id": "dcstg2s"
        }, 
        {
            "body": {
                "answer": "<p>I mean, its pretty good when you waste your free time to help for begginers, but this tutorial is not helpful in anyway for someone who ask question <sq>Which language should i learn first?<sq>, because all you do here, is presenting some html and css, not even sure if you should consider it as a language.<br><br>I am not talking about quality of ur tutorial, those may be good, but i just make a small complain about title.</p>", 
                "question": "For those that keep posting<colon> <dq>I am new to coding and not sure where to start?<dq> <dq>I am overwhelmed by the options!<dq> <dq>Which language should I learn first?<dq> - You can try and start here >> An easy to follow 5 part tutorial on how to build a simple website and deploy it aimed at complete beginners."
            }, 
            "id": "dcsucrb"
        }, 
        {
            "body": {
                "answer": "<p>I recommend learning the hard stuff first (C, C++), then moving to more abstract languages like python and javascript. You will gain a more thorough understanding of the underlying hardware that way, particular if you are interested in high performance programming and building high traffic websites. You can learn html/css by installing developer tools on your browser and right-clicking the page. The industry demand for mobile and web developers is blowing up right now, but at some point the bubble will burst and the people who understand computer hardware, threading, and memory management will have a considerable advantage. </p>", 
                "question": "For those that keep posting<colon> <dq>I am new to coding and not sure where to start?<dq> <dq>I am overwhelmed by the options!<dq> <dq>Which language should I learn first?<dq> - You can try and start here >> An easy to follow 5 part tutorial on how to build a simple website and deploy it aimed at complete beginners."
            }, 
            "id": "dct6sf8"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Last year I was unemployed and miserable. Using this sub and resources I<sq>ve been full time employed for a year. I did it with all free resources. I wanna share with you how I did it."
            }, 
            "id": "d950me4"
        }, 
        {
            "body": {
                "answer": "<p>What do you think was the hardest part of everything you<sq>ve done since you started learning programming? Follow up, when did you first feel like a real programmer? Thanks!</p>", 
                "question": "Last year I was unemployed and miserable. Using this sub and resources I<sq>ve been full time employed for a year. I did it with all free resources. I wanna share with you how I did it."
            }, 
            "id": "d94r6fn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been trying to learn to program for 10 years and all i know how to is print hello world on the screen 10 times. </p>", 
                "question": "Last year I was unemployed and miserable. Using this sub and resources I<sq>ve been full time employed for a year. I did it with all free resources. I wanna share with you how I did it."
            }, 
            "id": "d95aly5"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s cool. I take it given your background that you<sq>ve done MATLAB? I think it<sq>s also pretty cool that you have a similar background as I do actually. Minus the Android stuff. How do you feel about the difference between Android vs iOS programming? Also congrats on making one year! </p>", 
                "question": "Last year I was unemployed and miserable. Using this sub and resources I<sq>ve been full time employed for a year. I did it with all free resources. I wanna share with you how I did it."
            }, 
            "id": "d952v2q"
        }, 
        {
            "body": {
                "answer": "<p>all links from this thread<colon><br><br>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.epub<br>    <br>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.mobi<br>    <br>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/2016-software-development-salary-survey-report.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.pdf</p>", 
                "question": "O<sq>Reilly Offering Programming eBooks for Free (Direct Links Included)"
            }, 
            "id": "d885tbo"
        }, 
        {
            "body": {
                "answer": "<p>thanks downloaded some of them which I am probably never going to read. </p>", 
                "question": "O<sq>Reilly Offering Programming eBooks for Free (Direct Links Included)"
            }, 
            "id": "d8831r3"
        }, 
        {
            "body": {
                "answer": "<p>If anyone else is interested in the books not included in the original post (the Open Source and Software Architecture sections), here they are<colon><br><br>Ten Steps to Linux Survival <colon><br>[epub](http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.pdf)<br><br>Open By Design <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/open-by-design.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/open-by-design.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/open-by-design.pdf)<br><br>Getting Started with InnerSource <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.pdf)<br><br>Microservices AntiPatterns and Pitfalls <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.pdf)<br><br>Microservices vs. Service-Oriented Architecture <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.pdf)<br><br>Software Architecture Patterns <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.pdf)<br><br>Migrating to Cloud-Native Application Architectures <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.pdf)<br><br>Reactive Microservices Architecture <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.pdf)<br><br>An Engineering Manager<sq>s Guide to Design Patterns <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.pdf)<br><br>Azure for Developers <colon> <br>[epub](http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.epub) / <br>[mobi](http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.mobi) / <br>[pdf](http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.pdf)<br><br></p>", 
                "question": "O<sq>Reilly Offering Programming eBooks for Free (Direct Links Included)"
            }, 
            "id": "d880dzg"
        }, 
        {
            "body": {
                "answer": "<p>Any book that is a must read or highly recommended?</p>", 
                "question": "O<sq>Reilly Offering Programming eBooks for Free (Direct Links Included)"
            }, 
            "id": "d882axn"
        }, 
        {
            "body": {
                "answer": "<p>Well if anyone is drawn to the subreddit by this - stay. It<sq>s worth it. I had little to no knowledge of programming 6 months ago and now I<sq>m writing increasingly sophisticated programs/GUIs that have helped me immensely at work, and have a few fun little projects I use as a hobby at home.<br><br>Obviously it depends what you do and what you want, but the guides/people on this subreddit are an incredibly valuable resource that does not exist for other topics/subject matter. They are easy to take for granted. Well, don<sq>t. And if you<sq>re interested in the subject dig in. It really is a whole new world. </p>", 
                "question": "r/LearnProgramming is the Subreddit Of The Day!"
            }, 
            "id": "cs8bsg5"
        }, 
        {
            "body": {
                "answer": "<p>No everyone stop! Stop promoting programming. If kids grow up to learn this shit I<sq>ll stop getting paid as much! <br><br>Seriously though programming cool, welcome. </p>", 
                "question": "r/LearnProgramming is the Subreddit Of The Day!"
            }, 
            "id": "cs8gxll"
        }, 
        {
            "body": {
                "answer": "<p>Wooho! Very proud of this subreddit! It not only helps people to learn to code , it also helps them with their emotional life and also provides a life advice. People here are beautiful! Thank you.</p>", 
                "question": "r/LearnProgramming is the Subreddit Of The Day!"
            }, 
            "id": "cs8agoh"
        }, 
        {
            "body": {
                "answer": "<p>is it worth learning programming just so you can control robots when they take over?</p>", 
                "question": "r/LearnProgramming is the Subreddit Of The Day!"
            }, 
            "id": "cs8fooa"
        }, 
        {
            "body": {
                "answer": "<p>>They said you don<sq>t need to know algorithms to land you a job.<br><br>Forget a full-time job. DS and algos are standard knowledge for a part-time internship.<br><br>I can<sq>t imagine any tech company offering a full developer<sq>s salary to a team who doesn<sq>t know their basic DS/algos lasting very long.</p>", 
                "question": "Please stop selling us BS. This sub-reddit is to help developers not sell us on bogus non-sense."
            }, 
            "id": "cuxcdkl"
        }, 
        {
            "body": {
                "answer": "<p>Is Udemy ever worth looking at? It seems like any arsehole can publish a course on there. I always see courses get linked there and I look at the outline and if its a Unity course they spend an entire fucking chapter on installing and downloading Unity. Or they do a blender kickstarter when neither of them have ever used the program and then get paid to learn how to use it(probably by watching free tutorials by people that aren<sq>t arseholes) while they publish their blender course. Shitty Udemy courses get linked everywhere on reddit. Seems like a joke of a website in terms of quality</p>", 
                "question": "Please stop selling us BS. This sub-reddit is to help developers not sell us on bogus non-sense."
            }, 
            "id": "cuxd5et"
        }, 
        {
            "body": {
                "answer": "<p>burn those posts at the stake imo<br><br>Once money enters the equation, its no longer good-will help, its <dq>give me money<dq> help, which goes completely against the spirit of the sub<br><br>> **No Rewards**<colon> LearnProgramming does not condone monetary or other rewards for work within the community.<br><br>Asking for money first, and offering help /after/, is a predatory transaction unless there is a massive reputation of the course-giver to actually fulfill their part of the deal (e.g. taking a notable course at a university or the such)  (and even then, I don<sq>t feel I could comfortably recommend any paid course that exists)</p>", 
                "question": "Please stop selling us BS. This sub-reddit is to help developers not sell us on bogus non-sense."
            }, 
            "id": "cuxey7p"
        }, 
        {
            "body": {
                "answer": "<p>I think there<sq>s a balance that needs to be struck here.<br><br>I<sq>ve been participating in this sub for a while now, and from what I can see, there appears to be a bit of a divide between people who answer questions, and people who lurk/ask questions.<br><br>For example, I answer questions, and upon reading this post, my first instinct was to suggest that we ban Udemy course posts entirely on the grounds that encouraging people to pay to learn programming feels exploitative and unnecessary given the amount of high-quality free material out there. (I also think the vast majority of people who posts these udemy posts are breaking reddit<sq>s rules on [self-promotion](https<colon>//www.reddit.com/wiki/selfpromotion), so there<sq>s that as well)<br><br>Other answerers also seem to dislike these sorts of posts on the grounds that programming genuinely does take time to learn, and that any course that purports to turn somebody into a professional or an expert in a very short period of time is most likely a scam. (Peter Norvig does a good job of explaining this sentiment in his article [Teach Yourself Programming in 10 Years](http<colon>//norvig.com/21-days.html)).<br><br>But that said, I _have_ also noticed that a lot of beginners/question-askers do seem to value this sort of content. In particular, I do think that a fair chunk of people learn best when presented with material in a structured manner, and setting aside all their flaws, Udemy courses usually do seem to do that. Unlike free materials, they also seem to usually have some form of customer support<colon> you<sq>ll often have access to some online forum + will be able to contact an instructor directly, which I do think is something worth paying for.<br><br>And despite the fact that I don<sq>t think it<sq>s worth paying to learn programming, the fact that many (most?) people _do_ pay to learn to code (either via Udemy, courses like Lynda or Treehouse, or by Bootcamps, or by attending college/university) does indicate that I<sq>m wrong on some level.<br><br>So then, in the end, I<sq>m not really sure what the best course of action is. Is it better to ban these sorts of posts entirely? To allow them, but only if the poster has contributed to this community/is an active redditor/is following the self-promotion rules? To allow and encourage them? To allow only free content? Just maintain the status quo and let the community decide? To only allow posts if they include an honest assessment of their weaknesses/limitations (and how do you even assess that)?<br><br>Perhaps this is a sign that this community needs to do a better job at advertising and directing people towards high-quality and free learning material?</p>", 
                "question": "Please stop selling us BS. This sub-reddit is to help developers not sell us on bogus non-sense."
            }, 
            "id": "cuxel0k"
        }, 
        {
            "body": {
                "answer": "<p>Serious question, I see massive learning resource dumps like this get posted consistently, but does anybody actually get valuable use from them? Reading half a book is better than owning a thousand, after all. This is learnprogramming, where we<sq>re helping each other climb hills, and this is like presenting the Himalayan mountain range.</p>", 
                "question": "Amazing Repository of Hundreds of Free Programming Books. Includes All Possible Subjects and Is Updated Frequently."
            }, 
            "id": "df36oca"
        }, 
        {
            "body": {
                "answer": "<p>Just looked at the C++ one <dq>C++ Tricks<dq>. Have an entire chapter on auto_ptr. NOT good. Like auto_ptr is deprecated and must be replaced by the sane unique_ptr.<br><br>So, beware of outdated stuff there.</p>", 
                "question": "Amazing Repository of Hundreds of Free Programming Books. Includes All Possible Subjects and Is Updated Frequently."
            }, 
            "id": "df34dec"
        }, 
        {
            "body": {
                "answer": "<p>I have saved about 10 of these PDF dumps, it is hard to separate signal from noise here; by what metric do I choose a book? If I have 100 <dq>free<dq> books on a topic, do I go through each of them? Do I pick one at random?<br><br>To me, individual recommendations are more valuable than <dq>here are 1000 books<dq>.<br><br>I appreciate you posting it! Though, some filter would be helpful.</p>", 
                "question": "Amazing Repository of Hundreds of Free Programming Books. Includes All Possible Subjects and Is Updated Frequently."
            }, 
            "id": "df39d2o"
        }, 
        {
            "body": {
                "answer": "<p>Python/Django link for instance doesn<sq>t work for me. Gonna try it from my PC.</p>", 
                "question": "Amazing Repository of Hundreds of Free Programming Books. Includes All Possible Subjects and Is Updated Frequently."
            }, 
            "id": "df2xpdn"
        }, 
        {
            "body": {
                "answer": "<p>Are these available just this month, or are they permanently available for free?</p>", 
                "question": "Here<sq>s a list of 221 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2016)"
            }, 
            "id": "cylr3oj"
        }, 
        {
            "body": {
                "answer": "<p>From /r/all. Thanks for this! I<sq>m looking to start learning to program with useful, real world applications (I<sq>ve heard Ruby on Rails and Python are good jumping off points that pertain to real world solutions and development).<br><br>My current career feels a little dead-end but I have ample time to start self-learning the basics via these courses and hopefully get to reasonably proficient point that might jump-start a career shift.<br><br>Thanks again!</p>", 
                "question": "Here<sq>s a list of 221 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2016)"
            }, 
            "id": "cylpd80"
        }, 
        {
            "body": {
                "answer": "<p>Brilliant idea! <br><br>Suggestions <colon> make the courses more distingushiable by categorizing more thoroughly and/or putting them up in a table view like you have done here (talking about the report, here). Listing them all out like that verbosely makes it incredibly though to read and even more so to keep track of them. Maybe add a <dq>favourite<dq> button to each of them so you can add MOOCs of interest to a list that you can easily revisit and not forget about it, too.</p>", 
                "question": "Here<sq>s a list of 221 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2016)"
            }, 
            "id": "cylnw5n"
        }, 
        {
            "body": {
                "answer": "<p>So many fucking resources, I feel like I just messed with Age of Empires<sq>s proto.xml file for the first time. </p>", 
                "question": "Here<sq>s a list of 221 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2016)"
            }, 
            "id": "cylor3e"
        }, 
        {
            "body": {
                "answer": "<p>> Dynamic Programming<br><br>> Dad<colon> *Writes down \u201c1+1+1+1+1+1+1+1 =\u201d on a sheet of paper*  <br>> Dad<colon> What\u2019s that equal to?  <br>> Kid<colon> *counting and 3 seconds later* Eight!  <br>> Dad<colon> *Writes down another \u201c+1\u2033 on the left*  <br>> Dad<colon> What about now?  <br>> Kid<colon> *instantly* Nine!  <br>> Dad<colon> Wow, how did you calculate so fast?  <br>> Kid<colon> You just added one more!  <br>> Dad<colon> So you didn\u2019t need to recount because you remembered it was eight before. Brilliant!  <br>> Dynamic programming breaks down a complex problem and attempt to solve each simpler subproblem only once, by remembering the computed solution (memoization).<br><br>Holy shit. I now know DP. {Company that<sq>s hard to get into}, prepare your anus!!</p>", 
                "question": "40 Key Computer Science Concepts Explained In Layman\u2019s Terms (x-post from r/interestingasfuck)"
            }, 
            "id": "cqlb3oz"
        }, 
        {
            "body": {
                "answer": "<p>>JavaScript is like the ugly, buck-toothed girl your parents forced you to take to the prom. JQuery is like the fairy godmother who swoops in and, with one sweep of the wand, turns her into a total babe before your eyes.<br><br>That<sq>s beautiful.</p>", 
                "question": "40 Key Computer Science Concepts Explained In Layman\u2019s Terms (x-post from r/interestingasfuck)"
            }, 
            "id": "cqlauib"
        }, 
        {
            "body": {
                "answer": "<p>The recursion example is brilliant - http<colon>//carlcheo.com/compsci#this-is-recursion-lol.</p>", 
                "question": "40 Key Computer Science Concepts Explained In Layman\u2019s Terms (x-post from r/interestingasfuck)"
            }, 
            "id": "cql66tm"
        }, 
        {
            "body": {
                "answer": "<p>That P-vs-NP problem is something I<sq>ve often thought about, but never put into words. Are there people working on this (if you can?)? Or are we really just hoping that one day someone will <dq>oh!<dq> and figure it out?<br><br>It<sq>s fascinating, but it just doesn<sq>t seem like the logic exists.</p>", 
                "question": "40 Key Computer Science Concepts Explained In Layman\u2019s Terms (x-post from r/interestingasfuck)"
            }, 
            "id": "cql9qqp"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t want to discourage anyone who wants to help. That<sq>s first and most important. <br><br>However, with this, because it will be one the internet and publicly available, I would be absolutely certain in what you are saying/doing before posting videos. I<sq>ve seen this done really well, and i<sq>ve been raging at the monitor against people who were making these sorts of videos and were wrong but were making authoritative statements. This isn<sq>t a big deal in a somewhat fluid environment like Reddit where things are taken with a grain of salt by default, or IRC which is in flux by its very nature. With a video series, the problem lies in the fact that the people most likely to search for these kinds of materials (beginners) won<sq>t know enough to be able to catch when a <dq>white lie<dq> is told or when a mistake is made. <br><br>The consequence of this is a growing number of tutorials that quickly become outdated, or are just wrong/incomplete when they are made. <br><br>If you want to help others and at the same time learn a lot, I would suggest the #learnprogramming IRC or just commenting and posting on here. Another good alternative is finding smallish open source projects and forking them and adding improvements or bug fixes and submitting a pull request. This way, you can pursue new things that keep you interested (the basics get kind of dull fairly quickly) while also providing code and advice that will be used. <br><br>Word of caution<colon> not everyone who seeks help is grateful. You<sq>ll encounter quite a few people who will not at all pause to consider the human on the other side of they keyboard, whether it<sq>s with someone who is asking for help or someone criticizing you for making a mistake in public. You<sq>ll have to learn to roll with the punches. <br><br>Over all though, I have personally found that it<sq>s helped me a lot with cementing things I had already learned in the past, and making me more confident about things I know when someone challenges me and I can prove (usually politely) that I was not mistaken in what I said. <br><br>I<sq>m always glad to see more people helping though, so please don<sq>t be shy and feel free to PM me if you have any questions in general.</p>", 
                "question": "Who would be interested in a YouTube series of C++ intro tutorials?"
            }, 
            "id": "d4b8muz"
        }, 
        {
            "body": {
                "answer": "<p>I honestly think it would be a pretty big waste of time for you, but that is just my personal opinion. You simply do not know enough to be an effective teacher. There are already plenty of ineffective resources out there that teach syntax without any sort of context, and I think that is a bad road to go down.<br><br>Instead of trying to prove that you know something, via tutorials or some other means, I would suggest just starting a non-trivial project. Obviously, you<sq>re not going to be writing something that is <sq>state-of-the-art<sq>, but try to automate something, or just do something that you think is neat. Use proper commenting and post it on GitHub once you<sq>re done so that you can show potential employers.<br><br>The best way to learn how to program, is to do it. Making up cookie cutter examples might help you remember certain syntactical things, but it is not going to help you become a better programmer. Sorry if that sounds harsh, but that<sq>s my advice.<br><br></p>", 
                "question": "Who would be interested in a YouTube series of C++ intro tutorials?"
            }, 
            "id": "d4b92yy"
        }, 
        {
            "body": {
                "answer": "<p>There was a redditor that actually did this along with his own subreddit named CarlH. It was a fantastic idea. Unfortunately he was arrested for some some very horrendous shit</p>", 
                "question": "Who would be interested in a YouTube series of C++ intro tutorials?"
            }, 
            "id": "d4bapv4"
        }, 
        {
            "body": {
                "answer": "<p>Well I think you should ask yourself if you<sq>d do anything different from all the other programming tutorials on YouTube. <br><br>Talking to yourself while coding does help, I do it all the time and it helps clear my ideas, but think about how others may perceive that!<br><br>I think you should do it for yourself, like make your YouTube videos because you *want* to, and *then* get feedback from viewers. Make a test video, see how you like recording and talking into the microphone and if you feel that<sq>s for you, and then maybe link it in this thread to see what<sq>s up. <br><br> > Now although I<sq>d love to talk to myself while I code I figure if any upcoming freshmen would find this useful than why not make it public?<br><br>Yeah, make it public! I think the best thing is when you do something that other people find useful, and they<sq>ll let you know once you make it ;)<br><br>Cheers!</p>", 
                "question": "Who would be interested in a YouTube series of C++ intro tutorials?"
            }, 
            "id": "d4b7ub4"
        }, 
        {
            "body": {
                "answer": "<p>Yeah I really dont understand why people act like that. I always assume that the real programmers reading learnprogramming and SO would be someone who is a good teacher and wants to share their experience with the world, while helping out some newbs. But OH BOY  am I ever wrong. How dare I be this positive human being, trying to ask questions and get better at things.<br><br>EDIT<colon> Thanks for the support guys, I think a lot of you are spot on. I would also like to add something here since its on top and hopefully it will get more exposure. There absolutely is a right way! I have a friend who graduated from University of Waterloo CompSci and one of the things I admire about him the most is the way he pushes me in the right direction without giving me any answers but making me want to look into whatever it is I<sq>m struggling with. I never feel stupid and inadequate. I think that in itself is an art that I hope one day I<sq>ll be perfect and be able to share with others.</p>", 
                "question": "The #learnprogramming IRC channel is too hostile for people to even have a chance to LEARN."
            }, 
            "id": "d0ke5i4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a professional programmer and even I stopped going to the IRC because people are too much of dicks. Nothing you can really do to fix it though </p>", 
                "question": "The #learnprogramming IRC channel is too hostile for people to even have a chance to LEARN."
            }, 
            "id": "d0kdely"
        }, 
        {
            "body": {
                "answer": "<p>The elitism in programming is palpable. <br><br>Ignore it, I<sq>ve found the elitist, unhelpful ones tend to be below average anyways. <br><br>The gumpy, yet nice, helpful guy on the other hand.</p>", 
                "question": "The #learnprogramming IRC channel is too hostile for people to even have a chance to LEARN."
            }, 
            "id": "d0kj187"
        }, 
        {
            "body": {
                "answer": "<p>Solution<colon> All the nice people that have posted in this thread so far, lets go to #learnprogramming on Freenode and offer help. <colon>)</p>", 
                "question": "The #learnprogramming IRC channel is too hostile for people to even have a chance to LEARN."
            }, 
            "id": "d0ki34e"
        }, 
        {
            "body": {
                "answer": "<p>At least post a link to where you got this from.<br><br>http<colon>//lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf<br><br>EDIT<colon> Courtesy of /r/programming. Here<sq>s a link to the post <br><br>https<colon>//www.reddit.com/r/programming/comments/4nexot/how_nasa_writes_c_for_spacecraft_jpl/</p>", 
                "question": "10 Coding practices which allows NASA to write millions of lines of code with handful of errors"
            }, 
            "id": "d45ujhg"
        }, 
        {
            "body": {
                "answer": "<p>These rules are not meant for general programming and you shouldn<sq>t follow them blindly. Satellites, space probes etc. have some special requirements that most software doesn<sq>t. Here are my guesses why some of these rules exist<colon><br><br>>1\\. Restrict all code to very simple control flow constructs<br><br>Makes the code easier to understand for humans and static analyzers. Recursion can also cause stack overflow.<br><br>>2\\. All loops must have a fixed upper-bound.<br><br>This rule ensures that the program will always return to the main loop. If there<sq>s an infinite loop anywhere in the program, the hardware is useless because it can<sq>t be controlled anymore. This rule is not useful in normal software because you can just press the reset button if it gets stuck.<br><br>>3\\. Do not use dynamic memory allocation after initialization.<br><br>It can fail. It<sq>s safer to allocate one big block when the program starts and make sure that it never uses more than that.<br><br>>9\\. [...] Function pointers are not permitted.<br><br>Function pointers can cause infinite loops, which would break rule 2.</p>", 
                "question": "10 Coding practices which allows NASA to write millions of lines of code with handful of errors"
            }, 
            "id": "d45xbvf"
        }, 
        {
            "body": {
                "answer": "<p>Programmers hate them!</p>", 
                "question": "10 Coding practices which allows NASA to write millions of lines of code with handful of errors"
            }, 
            "id": "d45u3dn"
        }, 
        {
            "body": {
                "answer": "<p>Pretty good, I would add<colon><br><br>1.  Verifying an index before using it ex. a[-1] = 6 bad and fairly common.<br><br>2.  Checking for overflow/underflow/wrap on counters (reference counters, tick counters, etc...).<br><br>3.  If floating point numbers are used, making sure that precision loss will not be an issue.  Depending on the application and bit size I might forbid using them to count time, as an example.<br><br>4.  Write conditionals with const on rhs ex.  if (7 == var) instead of if (var == 7).<br><br>The more interesting thing to me would be how they enforce these.  Enforcement of coding standards in my experience almost requires automation so I<sq>m curious what they use for it.</p>", 
                "question": "10 Coding practices which allows NASA to write millions of lines of code with handful of errors"
            }, 
            "id": "d45xl0p"
        }, 
        {
            "body": {
                "answer": "<p>Mods should sticky this each month. Nothing else is ever really stickied, and this is a great resource to have right at the top, both for active subbed members and new people finding the sub</p>", 
                "question": "Here<sq>s a list of 234 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2016)"
            }, 
            "id": "d51uvj6"
        }, 
        {
            "body": {
                "answer": "<p>Oh that<sq>s interesting. I<sq>m the instructor of one of these ([Knowledge-Based AI<colon> Cognitive Systems](https<colon>//www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409) via **Udacity**), and the instructor for one that isn<sq>t listed here ([Educational Technology](https<colon>//www.udacity.com/course/educational-technology--ud915) via **Udacity**), and the [guide](https<colon>//www.youtube.com/watch?v=HG5IYufgDAo) through the Machine Learning Engineer Nanodegree assembled from the Udacity Machine Learning courses listed here.<br><br>Happy to answer any questions about the $6600 Georgia Tech MSCS program that gave rise to those classes, or the Machine Learning Nanodegree from Udacity!</p>", 
                "question": "Here<sq>s a list of 234 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2016)"
            }, 
            "id": "d51yt56"
        }, 
        {
            "body": {
                "answer": "<p>Did Coursera get rid of the Princeton Algorithms courses? I took part 1 and was looking to do part 2. Is the Stanford course a good substitute, does anyone know? Thanks. </p>", 
                "question": "Here<sq>s a list of 234 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2016)"
            }, 
            "id": "d51ouad"
        }, 
        {
            "body": {
                "answer": "<p>If anyone is working in a computer repair store and knows general computer knowledge. Yet you really get curious what exactly everything is that you<sq>re working on. Well, watch this https<colon>//www.coursera.org/learn/build-a-computer <br><br>It seems FANTASTIC so far. </p>", 
                "question": "Here<sq>s a list of 234 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2016)"
            }, 
            "id": "d52ct0v"
        }, 
        {
            "body": {
                "answer": "<p>I recently signed a contract with Google, and had to answer <dq>I don<sq>t know<dq> so many times during my interview, that I can<sq>t count it.<br><br>Honesty is the way forward, there<sq>s always room to grow your skill, growing your personality and nature is not as easy.</p>", 
                "question": "Thanks /r/learnprogramming. After failing multiple interviews I finally landed a great position at Google. This is what I learned from my experience"
            }, 
            "id": "d0au10m"
        }, 
        {
            "body": {
                "answer": "<p>When you speak of learning algorithms, what specifically do you mean? Do you really mean design patterns? Or something else?<br><br>Also, in interviews how much would you say you coded in pseudocode vs real code (eg. Was there a focus on C or Java (etc) specific syntax, or was the focus more on higher-level concepts?<br><br>Thanks for the post, interesting stuff!</p>", 
                "question": "Thanks /r/learnprogramming. After failing multiple interviews I finally landed a great position at Google. This is what I learned from my experience"
            }, 
            "id": "d0atlq0"
        }, 
        {
            "body": {
                "answer": "<p>Did you study computer science? If you did, and/or went to school for something else, did you have other projects that you were working on? How did you balance school and those projects? </p>", 
                "question": "Thanks /r/learnprogramming. After failing multiple interviews I finally landed a great position at Google. This is what I learned from my experience"
            }, 
            "id": "d0aum17"
        }, 
        {
            "body": {
                "answer": "<p>How did you build your portfolio? I<sq>m currently studying Computer Science and am trying to think of things to build my portfolio. I<sq>m interested in game development but I<sq>ve heard from a lot of game dev companies that your portfolio doesn<sq>t really need to be game centered and as long as it shows good understanding and knowledge then it<sq>s as good as any. So I<sq>m wondering what your process was. I<sq>m so shit at thinking up ideas.</p>", 
                "question": "Thanks /r/learnprogramming. After failing multiple interviews I finally landed a great position at Google. This is what I learned from my experience"
            }, 
            "id": "d0b30zb"
        }, 
        {
            "body": {
                "answer": "<p>I figured it was Daniel when you described him as <sq>Lovable<sq>. Dude is just a ball of pure positivity. </p>", 
                "question": "Lovable dude does 30 min or less <dq>coding challenges<dq> in Processing while giving in-depth explanations of the process. Really informative and entertaining stuff."
            }, 
            "id": "db06dx5"
        }, 
        {
            "body": {
                "answer": "<p>I wish my professor had a quarter of this guys enthusiasm. im in my last semester of my computer science degree and he had the balls to ask me (in front of the whole class) if i was making the right choice career wise, all because i had asked how to initialize a background worker inside a class method..... im glad i can watch ths guy and get excited about programming again <colon>)</p>", 
                "question": "Lovable dude does 30 min or less <dq>coding challenges<dq> in Processing while giving in-depth explanations of the process. Really informative and entertaining stuff."
            }, 
            "id": "db0hxxk"
        }, 
        {
            "body": {
                "answer": "<p>Awesome channel! Any other channel that teaches Python in a fun way?</p>", 
                "question": "Lovable dude does 30 min or less <dq>coding challenges<dq> in Processing while giving in-depth explanations of the process. Really informative and entertaining stuff."
            }, 
            "id": "db0hlyr"
        }, 
        {
            "body": {
                "answer": "<p>HEY it<sq>s the Coding Rainbow guy! He<sq>s awesome. I just realized that he clearly got slammed with some copyright junk because he removed all references to coding rainbow. It now just says [undefined]. He even edited the coding rainbow song <colon>(</p>", 
                "question": "Lovable dude does 30 min or less <dq>coding challenges<dq> in Processing while giving in-depth explanations of the process. Really informative and entertaining stuff."
            }, 
            "id": "db0jvil"
        }, 
        {
            "body": {
                "answer": "<p>I guess that<sq>s because the guideline #3 isn<sq>t enforced per se. I agree with you.</p>", 
                "question": "Why don<sq>t we tag each post on /r/learnprogramming with a specific language tag (C/C++/Python) so its easier to search?"
            }, 
            "id": "d0y9n8l"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re supposed to, but many people don<sq>t.</p>", 
                "question": "Why don<sq>t we tag each post on /r/learnprogramming with a specific language tag (C/C++/Python) so its easier to search?"
            }, 
            "id": "d0ya7ts"
        }, 
        {
            "body": {
                "answer": "<p>Agreed! And even tags such as IDE, general, algorithmic, etc. </p>", 
                "question": "Why don<sq>t we tag each post on /r/learnprogramming with a specific language tag (C/C++/Python) so its easier to search?"
            }, 
            "id": "d0ya2dx"
        }, 
        {
            "body": {
                "answer": "<p>This has been proposed in the past, but when opening deeper discussion to determine _which_ tags to use, there has never been consensus, and thus we<sq>ve never implemented it.  Here are some open questions<colon><br><br>1. If we use language tags, there would be many more tags than would be easily presentable to search by. C, C++, C#, Perl, Python, Javascript, Java, Ruby, Haskell, Lisp, PHP, Erlang, VB, Assembly, Swift, Objective-C, Android(Java), SQL, etc.<br>2. If we don<sq>t use languages, we could use _types_ of questions, it has a similar issue, and also can derail discussion. In many cases, users who are trying to learn will not know what <dq>type<dq> of question they are asking (eg. Framework Vs. Library), and this may derail the discussion by trying to teach the person the difference between tag terminology, rather than answering their question.<br>3. LearnProgramming does have a subset of flairs already implemented, and each question can be tagged as one of<colon> Tutorial, Homework, Resource, Topic (of discussion), and Solved. We can add to this list in the future, as the demand seems to be there.<br><br>Long story short, we<sq>ve addressed this in the past, but it has been a _while_ since that discussion. If I<sq>m not mistaken, we last asked about flair when we hit 100K subscribers. Since it seems there<sq>s some high demand, I will open up a discussion thread about this once I<sq>m back from my vacation (next weekend).</p>", 
                "question": "Why don<sq>t we tag each post on /r/learnprogramming with a specific language tag (C/C++/Python) so its easier to search?"
            }, 
            "id": "d0yzpju"
        }, 
        {
            "body": {
                "answer": "<p>I agree with the increasing bitterness in the sub which often results from seeing the same *elementary* (not code related) questions over and over.<br><br>There are a few *minor tricks* to make one<sq>s posts be better received<colon><br><br>+ *Before posting* - read the [**FAQ**](https<colon>//www.reddit.com/r/learnprogramming/wiki/faq) - very often it will answer OP<sq>s question and make a post unnecessary. This is typical for the <dq>How do I start<dq> questions<br>+ Read the **Sidebar** - there is much more information than one would expect (especially the *Recommended Resources* section) - we get so many <dq>Where can I find programming ideas/challenges<dq> questions. The answer is in the sidebar. <br>+ Show some effort<br>+ Explain what you have tried<br>+ Be precise in *all* descriptions (we often see <dq>I have to do x<dq> where x is not clearly described - or <dq>I get error y<dq> without any indication where the error occurs)<br>+ When posting assignments - best link the original assignment - often by transcribing the assignments some vital information is lost<br>+ Format your code / or post on a code host - it<sq>s not that difficult and unformatted code is basically unreadable<br>+ be somewhat humble and don<sq>t request - sometimes people word their posts in ways that give the feeling that OP has the impression that we here are at their disposal and have nothing better to do than answering their posts<br><br>Honestly, the reception of any post is directly proportional to the quality of the post. <br><br>People are asking for help and many better skilled people are willing to spend their time and share their knowledge, so anybody asking should show some courtesy and respect.<br><br>The most downvoted posts are usually the <dq>How do I get started<dq>, <dq>Where can I find practice examples<dq>, and <dq>Do my homework<dq> posts that all have one thing in common<colon> OP did not spend sufficient effort. In case of the first two questions, OP did not bother checking the available resources on the sidebar, and in case of the last question, OP either didn<sq>t formulate their post well enough, or they were just too lazy and want their work done.<br><br>So, in general it<sq>s **<dq>What comes around, goes around<dq>** - a properly written post will usually be well received, regardless of the subject.</p>", 
                "question": "This sub is quite unfriendly"
            }, 
            "id": "czukyfb"
        }, 
        {
            "body": {
                "answer": "<p>I just published an article about this general topic today, partly inspired by this subreddit<colon><br><br>[Friction Between Programming Professionals and Beginners](http<colon>//www.programmingforbeginnersbook.com/blog/friction_between_programming_professionals_and_beginners/)</p>", 
                "question": "This sub is quite unfriendly"
            }, 
            "id": "czum06j"
        }, 
        {
            "body": {
                "answer": "<p>If you think this sub is unfriendly, wait until you see StackOverflow...</p>", 
                "question": "This sub is quite unfriendly"
            }, 
            "id": "czum135"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been on this sub for nearly two years, from first writing <dq>hello world<dq> to now being six months into my first job as a professional and I have to say, I<sq>ve rarely seen hostility on here. Looking through the past week<sq>s posts there are hardly any with a large number of downvotes and even those who are just looking for an easy answer without putting in the effort are still given constructive criticism. This is probably the second most welcoming sub I know other than /r/learnpython. <br><br>The only hostility I have seen has often stemmed from beginners claiming professional devs are rude and elitist, resulting in mini flame wars between the two camps. In fact, I have seen far more rudeness from beginners than anyone else on this sub, either claiming aggressively that they are right and anyone who says something against them is a noob-hating professional or that they should be given the answer without doing the work and anyone not doing so is being obstructive. <br><br>I personally never experienced any hostility during my learning experience and have found the programming community in general to always be ready to help, as long as you take the time to appreciate the level of effort expected from both parties.</p>", 
                "question": "This sub is quite unfriendly"
            }, 
            "id": "czuny8w"
        }, 
        {
            "body": {
                "answer": "<p>1. No-one would actually do that to someone reporting an issue. Most developers would appreciate knowing that their project has been used by someone else, and would find it helpful to know if there are bugs. After all, it<sq>s nearly impossible to test *every* case, so bug reports are vital for improving the code.<br><br>2. Pull requests are certainly not going to lead to being laughed at - if anything, most people would be truly grateful if you sent a fix as well as a bug report, because it saves the project maintainer a lot of time.<br><br>3. If you<sq>re *really* worried about it, no-one<sq>s forcing you to share your real identity on GitHub - you can register with just a username, so you don<sq>t have to worry about everyone knowing that you sent an issue/pull request.<br><br>If it makes you feel any better, I<sq>ve never seen one GitHub conversation where people have been laughed at, even if the patch wasn<sq>t quite right - almost all developers want to improve the code rather than insult their contributors.</p>", 
                "question": "I<sq>m afraid if I say anything on Github people will laugh at me and I will die."
            }, 
            "id": "d4kntwl"
        }, 
        {
            "body": {
                "answer": "<p>Who told you you can post on reddit without five years of experience?? hahaha<br><br>*PULLS OUT THE FLAME THROWER*<br><br></p>", 
                "question": "I<sq>m afraid if I say anything on Github people will laugh at me and I will die."
            }, 
            "id": "d4kp9qe"
        }, 
        {
            "body": {
                "answer": "<p>As someone who has projects on github which people have submitted things to, don<sq>t worry. Even if the issue/pull request is *totally wrong*, it<sq>s nice to know that I have a user.</p>", 
                "question": "I<sq>m afraid if I say anything on Github people will laugh at me and I will die."
            }, 
            "id": "d4kp071"
        }, 
        {
            "body": {
                "answer": "<p><dq>Oh my god that<sq>s terrible! What did he die of?<dq><br><br><dq>Idiot, tried correcting a pro on GitHub.The guy had such a witty response; people were laughing for days. Died instantly.<dq></p>", 
                "question": "I<sq>m afraid if I say anything on Github people will laugh at me and I will die."
            }, 
            "id": "d4kv4n0"
        }, 
        {
            "body": {
                "answer": "<p>First requirement, must be [under 40](http<colon>//finance.yahoo.com/news/more-software-engineers-over-age-195308179.html).</p>", 
                "question": "github.com/jwasham/google-interview-university<colon> <dq>A complete daily plan for studying to become a Google software engineer<dq>"
            }, 
            "id": "d8kczav"
        }, 
        {
            "body": {
                "answer": "<p>If today<sq>s cool kids<sq> goal is to become a google software engineer and not a good software engineer above all, then I<sq>m happy to stay as nerdy as I can. There are other valuable carrier plans folks!</p>", 
                "question": "github.com/jwasham/google-interview-university<colon> <dq>A complete daily plan for studying to become a Google software engineer<dq>"
            }, 
            "id": "d8kdkfh"
        }, 
        {
            "body": {
                "answer": "<p>Hats off the the author of this.  Lot<sq>s of great links and information. <br><br>However.  I seriously wouldn<sq>t recommend this kind of study plan for someone considering a career in software development.  Aside from one or two niche algorithms I have never had to develop a fundamental data structure like linked lists or hashmaps and if I ever saw this in code review I would rip them a new one.  You *always* use the standard libraries.  They have stood the test of widespread usage and you are wasting valuable resources doing it half assed.  Knowing how and when to apply these tools is worth a lot more than fine grained knowledge of implementation details.<br><br>Google (and a few other top dogs) can get away with expecting candidates to jump through these kind of hoops because they have  a supply glut.<br><br>If you want my opinion the best path to a successful career is to produce results. Things that your company can sell and bootstrap more projects.   Who knows, a few years and a novel application and Google might buy you out.    </p>", 
                "question": "github.com/jwasham/google-interview-university<colon> <dq>A complete daily plan for studying to become a Google software engineer<dq>"
            }, 
            "id": "d8kf81v"
        }, 
        {
            "body": {
                "answer": "<p>Before any of you start investing time in it, go through the comments from this thread<colon>  https<colon>//www.reddit.com/r/programming/comments/565i1n/google_interview_university_multimonth_study_plan/<br><br></p>", 
                "question": "github.com/jwasham/google-interview-university<colon> <dq>A complete daily plan for studying to become a Google software engineer<dq>"
            }, 
            "id": "d8kgoav"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m glad you found a new profession you enjoy and I hope everything works out! What advice would you give newcomers that have zero knowledge and wish to pursue a career in programming? Also, what kept you motivated throughout the three years you spent learning?</p>", 
                "question": "I did it from zero knowledge to full-time programming job"
            }, 
            "id": "czf2wk1"
        }, 
        {
            "body": {
                "answer": "<p>would you mind mentioning your salary range and if you<sq>re in a densely populated area or not?<br><br>i know people like to keep their pay hidden, but it helps everyone get a better grasp of what they are worth if things are out in the clear, generally.<br><br><colon>)<br><br>congratulations!!<br></p>", 
                "question": "I did it from zero knowledge to full-time programming job"
            }, 
            "id": "czf4obr"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations, I am just starting to learn to program myself at 30+ and really great and motivational to hear your success story. All the best to your new career!</p>", 
                "question": "I did it from zero knowledge to full-time programming job"
            }, 
            "id": "czf4d3z"
        }, 
        {
            "body": {
                "answer": "<p>Congrats <br>  <br>How old were you, btw, when you decided to start programming?</p>", 
                "question": "I did it from zero knowledge to full-time programming job"
            }, 
            "id": "czf2xss"
        }, 
        {
            "body": {
                "answer": "<p>Well, I guess it<sq>s time for me to go learn SQL</p>", 
                "question": "Khan Academy releases new interactive SQL course"
            }, 
            "id": "cr6aqc2"
        }, 
        {
            "body": {
                "answer": "<p>Gahh khan academy helped me pass biology and calc i</p>", 
                "question": "Khan Academy releases new interactive SQL course"
            }, 
            "id": "cr6aol0"
        }, 
        {
            "body": {
                "answer": "<p>Anyone know a good place/way to learn advanced SQL?<br><br>I know the basics, the w3schools stuff. I can select all day, join, insert, whatever. But I got sent a screener test for a SQL dev job today and it<sq>s way over my head.</p>", 
                "question": "Khan Academy releases new interactive SQL course"
            }, 
            "id": "cr6bfkm"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d really like to have SQL as my career. I took a database class this semester and fell in love with databases. Can anybody tell me how can I make it as my career? What<sq>s the work environment like?</p>", 
                "question": "Khan Academy releases new interactive SQL course"
            }, 
            "id": "cr6brha"
        }, 
        {
            "body": {
                "answer": "<p>[There is a name for this.](https<colon>//en.wikipedia.org/wiki/Four_stages_of_competence)</p>", 
                "question": "A beginners trick I learned way too late in the game of learning to code<colon> repetition repetition repetition"
            }, 
            "id": "dcuzuq8"
        }, 
        {
            "body": {
                "answer": "<p>Yep - code, eat, rave repeat. Code, eat, rave, repeat! </p>", 
                "question": "A beginners trick I learned way too late in the game of learning to code<colon> repetition repetition repetition"
            }, 
            "id": "dcuymey"
        }, 
        {
            "body": {
                "answer": "<p>This is a good opportunity to repost something that I typed into another post. Nobody saw it. It<sq>s relevant here.. tl;dr at the bottom for the inpatient.<br><br>I<sq>m in a unique position but it may be familiar to some. As I mentioned in another post, I<sq>m the sole developer at my place of employment so I will use literally any resource available to me. That might be SDK documentation, Google, Stackoverflow, a forum, online documentation, youtube, a book, trial and error, some old word document with a <sq>fix<sq> that the last guy made and hid somewhere in the network, paying a consultant to help out and trying to get them to let me watch/teach me, etc etc. It<sq>s not easy by any means but i have learned a lot already and have a very patchy but wide skillset. I enjoy my job but man, it<sq>s a mindfuck and having only about 30<percent> of my time available (outside of other responsibilities such as training, escalated helpdesk calls, project work, testing, management...) doesn<sq>t help either.<br><br>The hardest thing is figuring best practices out and understanding more complicated subjects like security. It<sq>s always a wormhole leading from something like a simple compile error to a major catalogue of errors that needs to be fixed.<br><br>Think of an enterprise application. It<sq>s usually an extremely complicated beast, written by a team much better than you, who do things you don<sq>t yet know about, let alone understand. This is assuming you can even see the code. It<sq>s probably closed source because it cost your company a lot of money and they don<sq>t just open source this shit. Then add another 5 enterprise systems, link them all together and try to follow the problem, find it, then figure out how to fix it, test it (important!!), deploy it and hope for the best. It might require input from a DBA, network admin, security consultant and some other specialist, but we don<sq>t have those, so it<sq>s pretty much all down to me (outside of my own very small IT team, 2 of whom are less knowledgeable than me). That<sq>s when things get difficult as I<sq>m not only trying to fix my initial code problem but also investigating a multitude of problems that I don<sq>t fully understand.<br><br>A typical example for me might be<colon> <br>Oh you need a new internal website to do that thing? Sure. It<sq>s just a form to fill in and a database entry, then an email gets sent to someone and they open the page to do their bit, and so on. So I<sq>ll need to perhaps create a .net application, as we<sq>ve got a few servers already running IIS. C# will be fine as I know a bit. Is there a framework I can use to do this? Way too complicated, perhaps I should try to make my own project and learn something as it seems like a relatively easy set of requirements, in theory. I could use asp.net web pages as I<sq>ve used that before but when I google it, there<sq>s loads of stuff saying use MVC instead. Ok, what<sq>s MVC? Model, view, controller. Wtf? 30 tabs are open now. Eventually, I<sq>ve created a model, view and controller to put some text on the page. Only took a few hours. Great, nearly there! Let<sq>s create a database. I know a bit of SQL, no problem. Oh what<sq>s this? Entity framework can do <sq>code first<sq> and create it for me? That<sq>ll save me time, lemme read this microsoft article. What is a migration? Seeding? hmm, more reading. Eventually, I add the connection string and it tells me that it<sq>s insecure to have credentials stored in web.config. Cue more investigation into how to fix this. I need to encrypt it, but only part of it. How do I do that? More reading... 2 days later, I have a database connection and have cobbled together my model database and some seed data, awesome! Now I need to define some logic to do something useful. So I do this in the controller, ok, how the fuck do I display some data and allow users to add/remove it, but only those users who have permission. First, I need to look into authentication. Stackoverflow has mixed results. One guy says use this, one guy says use that. Both have loads of votes. Hmm. Google it then. I come across <dq>ASP.Net Identity<dq>, but this is only for ASP.Net Core, I<sq>ve used MVC5 with .Net 4.5.2! Fuck, what do I do? Windows authentication should work. How do I get the user<sq>s name? Where do I store it? Can I just get it from AD? If I do that, will it cause a problem if it connects to AD all the time? Maybe I should store it in a database. But this violates <sq>DRY<sq> by duplicating data. I<sq>ll try it out, change my model. Oh, now the database won<sq>t update. I<sq>ll google it... ok, delete the existing database and run the project again. Cool, it worked. but now I<sq>m getting an object reference error that wasn<sq>t there before...... FUCK THIS I<sq>M GOING HOME!<br><br>This is my life. I spend countless hours on the internet looking for solutions to my problems. Unfortunately, one leads to another and another and another. If I had that base level of knowledge i<sq>d probably be ok but I don<sq>t.<br><br>I don<sq>t know what my point is, I<sq>m venting. Maybe I<sq>m saying that while you can figure out some stuff on your own, it may be best to seek some kind of mentoring from someone who already knows what they<sq>re doing. Training courses are great, until you leave and try to do something bespoke. Then you<sq>re on your own again.<br><br>**TL;DR** Unique situation where I<sq>m a sole developer with junior levels of experience. Struggle to do simple things. Never know what I should be using, there<sq>s way too many options. Need a mentor, or a new job. Enjoy it most of the time. Brain is broken. Too much to learn.</p>", 
                "question": "A beginners trick I learned way too late in the game of learning to code<colon> repetition repetition repetition"
            }, 
            "id": "dcv15cz"
        }, 
        {
            "body": {
                "answer": "<p>I really enjoyed your rant on that other thread and I think your points above are decent advice.<br><br>As a self-deprecating frontend designer monkey - and someone who<sq>s always been stuck in that tutorial loop that you allude to - useful programming has always felt like a bridge too far for me. And, sure, sometimes that<sq>s the fault of the community and the tuition resources available. But also that<sq>s possibly *my* fault - not just for failing to exercise the steps you exclaim above (namely <sq>practice<sq>) - but just because perhaps it *is* beyond me.<br><br>I<sq>ve struggled a lot in my professional career with constantly trying to better myself and get to the <sq>next step<sq>; whatever that means. I sometimes feel like there is a perception that online tuition is a silver bullet; but in actual fact sometimes it<sq>s just that you<sq>re not focusing on the things that your mind is good at. Not everyone is going to have the ability to be able to do certain things; and I think that<sq>s an important difference to realise.<br><br>Focus on what you<sq>re good at and try and be the best you can at that specific field; would be my advice. I<sq>m happy with my skill set, which I<sq>m very good at and earns me a decent living.<br><br>None of the above really conflicts with what you<sq>re saying, I just thought I<sq>d chime in!</p>", 
                "question": "A beginners trick I learned way too late in the game of learning to code<colon> repetition repetition repetition"
            }, 
            "id": "dcv0caq"
        }, 
        {
            "body": {
                "answer": "<p>Going to add this to my list of untouched bookmarks</p>", 
                "question": "Here<sq>s a list of 155 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2015)"
            }, 
            "id": "cvklryc"
        }, 
        {
            "body": {
                "answer": "<p>Not to be a negative Nelly, but is there a reason [Programming by Doing](http<colon>//programmingbydoing.com/) isn<sq>t listed?<br><br>It<sq>s free, it<sq>s online and it<sq>s 100<percent> <dq>homework<dq>.<br><br>Edit<colon> I<sq>m dumb. It<sq>s because it<sq>s not a MOOC.</p>", 
                "question": "Here<sq>s a list of 155 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2015)"
            }, 
            "id": "cvkj9mn"
        }, 
        {
            "body": {
                "answer": "<p>You might add http<colon>//www.freecodecamp.com to this list, for a free self-paced beginners program. It<sq>s full stack JavaScript with the ability to code for nonprofit organizations at the end.</p>", 
                "question": "Here<sq>s a list of 155 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2015)"
            }, 
            "id": "cvkr6yi"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 155 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2015)"
            }, 
            "id": "cvkkj2w"
        }, 
        {
            "body": {
                "answer": "<p>People are getting far too complex for entry level development... i<sq>m mid Level in a FTSE 100 and these are the things i use everyday in the order that i would lean them (examples are object oriented .Net based as that<sq>s what i use most, but there are equivalents in most OOP languages like Java and Python etc)<colon><br><br>**Section 1. 2nd nature Basics<colon>** these should be things you don<sq>t have to think about<br><br>* Simple Types. If you can<sq>t deal with words (Strings), numbers (integers, doubles, floats etc) and binary options (booleans), you cant really do anything useful for non technical humans to understand<br><br>* Type Manipulation. if you cant convert 11 (as a string) into 11 (as an integer) then you cannot do a calculation with written numbers. If you don<sq>t know how <br><br>* Logical loops and conditions. (e.g If, Else If, For Each, While, Switch Case etc. ) if you cant do this you cannot program anything useful... and for gods sake don<sq>t create a potentially infinite loop in your program.<br><br>* I/O or Read/Write. if you cant take inputs from somewhere and provide an output, what<sq>s the point?!<br><br>* Functions/methods and overloads. Learn how to create them and reuse them as often as you can whenever a similar problem presents itself.<br><br>* Error handling **AND LOGGING**. ~~no function should be without a try catch~~ [turns out this is fairly specific to my specific application specifications]. use what you learned doing I/O and output the errors to a log file so you can see where things are going wrong, even if they don<sq>t cause unexpected behaviour.<br><br>**Section 2. Necessary basics**<colon> these might require a little more thought in terms of how you optimise certain things, but definitely not challenging on a day to day basis<br><br>* Complex Types. Lists, collections, multidimensional arrays. all very useful when dealing with lots of data<br><br>* Interfacing<colon> how to create reusable interfaces to be used throughout your application<br><br>* Classes and inheritance and class structure<colon> This will form the basic structure of all your programs<br><br>* I/O 2 Database transactions. so how to query SQL to get your data, and how to update tables with the results. <br><br>**Section 3. stuff you should know but might want to look up occasionally**<br><br>* learn a structural framework (MVVM, MVC) <br><br>* Front end (Xaml if you<sq>re doing WPF, HTML/CSS + a bit of JS for web)<br><br>**Section 4 Everything Else<colon>**<br><br>* Google.... no i<sq>m serious, google has the answer to every question you could possibly want to ask about programming. so unless you are doing something groundbreaking and new, google will likely have your answer. so long as you have a solid grasp of everything i put above you should be able to integrate any solution provided on the web into your own code. but it<sq>s up to you to make it as efficient as possible...<br><br><br>There is obviously much more to programming but that<sq>s pretty much all i have needed to use on a day to day basis for the last 3 years and everyone in my company seems to think i<sq>m, competent enough to be tasked with major projects. </p>", 
                "question": "A List of the 20 or So Things You Need to be Able to Do in Every Programming Language You <dq>Know<dq> and Use..."
            }, 
            "id": "del2evc"
        }, 
        {
            "body": {
                "answer": "<p>>anyone new to a programming language can try to implement these<br><br>ITT<colon> Complex tasks.</p>", 
                "question": "A List of the 20 or So Things You Need to be Able to Do in Every Programming Language You <dq>Know<dq> and Use..."
            }, 
            "id": "dekv8an"
        }, 
        {
            "body": {
                "answer": "<p>* Type casting<colon> return int with reversed digits of int input<br>* Map<colon> return a dict of letter counts in a string<br>* Recursion<colon> Fibonacci<br>* Pattern matching<colon> extract phone numbers from a text file<br>* DB<colon> parse CSV and store in (no)SQL db<br>* Net<colon> API endpoint that returns aggregate results from multiple external API request (use some sort of concurrency for requests and/or aggs?)<br>* Data structures, text input<colon> tic tac toe, battleship, or some similar game<br>* Graphics, visual input<colon> flood fill, line drawing, A* pathing, or somesuch<br>* Data statistics<colon> calc mean, max, min, 95<percent> from a time series dataset for various time intervals (and graph them?)</p>", 
                "question": "A List of the 20 or So Things You Need to be Able to Do in Every Programming Language You <dq>Know<dq> and Use..."
            }, 
            "id": "deku8le"
        }, 
        {
            "body": {
                "answer": "<p>Twenty is a lot... I would say ( for what I do )<br><br>* Consume an API ( REST / SOAP ) <br><br>* Create an API ( REST / SOAP )<br><br>* Implement a few data structures ( Linked List / ArrayList / Binary Search Tree )<br><br>* Implement a few algorithms ( A*, DFS, BFS, etc. )<br><br>* Create some bot ( Discord, Reddit )<br><br>* Scrape some website that doesn<sq>t have a public-facing API ( Craigslist ) <br><br>* Various side projects related / tied into your personal hobbies ( for me, cars ) </p>", 
                "question": "A List of the 20 or So Things You Need to be Able to Do in Every Programming Language You <dq>Know<dq> and Use..."
            }, 
            "id": "deks2uf"
        }, 
        {
            "body": {
                "answer": "<p>130 upvotes and no comments...well this all looks awesome, thanks for making and maintaining all of this! I<sq>m excited to try out the Anki flashcards...I<sq>ve never heard of them before.</p>", 
                "question": "Learn algorithms and data structures (and prep for coding interviews) with interactive python coding challenges"
            }, 
            "id": "dfv7sq5"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this, do you have any material that would get a person new to Python up to speed so that they would be able to start on this? </p>", 
                "question": "Learn algorithms and data structures (and prep for coding interviews) with interactive python coding challenges"
            }, 
            "id": "dfv83sa"
        }, 
        {
            "body": {
                "answer": "<p>As a first year CS student that has only really learned Java, how important is Big O? It was briefly mentioned in one of my classes and I<sq>m just kinda interested how largeof a role it plays in my future studies. </p>", 
                "question": "Learn algorithms and data structures (and prep for coding interviews) with interactive python coding challenges"
            }, 
            "id": "dfve15w"
        }, 
        {
            "body": {
                "answer": "<p>Will definitely give this a go, great stuff. </p>", 
                "question": "Learn algorithms and data structures (and prep for coding interviews) with interactive python coding challenges"
            }, 
            "id": "dfv8fe6"
        }, 
        {
            "body": {
                "answer": "<p>I rarely post in _any_ sub, but I would absolutely *LOVE* this! I<sq>ve always wanted to know how to make a bot, just for shits and giggles, but I would still love to learn! </p>", 
                "question": "Any interest for a Reddit bot tutorial?"
            }, 
            "id": "cuc3u70"
        }, 
        {
            "body": {
                "answer": "<p>Everyone is down-voting /u/__baxx__, but he is so sound in his replies; There already exists a super simple, intuitive tutorial written by the writer of praw himself, outlining how to write a simple reddit bot. </p>", 
                "question": "Any interest for a Reddit bot tutorial?"
            }, 
            "id": "cuc61z9"
        }, 
        {
            "body": {
                "answer": "<p>Another tutorial couldn<sq>t hurt, but be aware that there are several out there already. /r/watchpeoplecode has various streams about these. [Here<sq>s a search](https<colon>//www.reddit.com/r/WatchPeopleCode/search?q=reddit+bot&restrict_sr=on&sort=relevance&t=all). Most appear to be from /u/godlikesme . </p>", 
                "question": "Any interest for a Reddit bot tutorial?"
            }, 
            "id": "cuc5r4s"
        }, 
        {
            "body": {
                "answer": "<p>I am really interested in this. The idea of starting something from scratch still scares me. I<sq>ve been learning to code in school for quiet some time now.. but still I get stuck on how to start a project on my own... I<sq>d have no idea where to begin... <br><br>This would be an awesome learning experience!<br></p>", 
                "question": "Any interest for a Reddit bot tutorial?"
            }, 
            "id": "cuc4l86"
        }, 
        {
            "body": {
                "answer": "<p>Your website class central is exactly what I was looking for. Do you know if there are any courses on basic drawing? (digital or on paper)</p>", 
                "question": "Here<sq>s a list of 223 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2016)"
            }, 
            "id": "czmq150"
        }, 
        {
            "body": {
                "answer": "<p>Hello, I was enrolled in edX<sq>s CS50 and it says that things changed moving on to 2016. I was enrolled in 2015 in like November; do I have to un-enroll and the enroll once more, or is the course updated automatically?</p>", 
                "question": "Here<sq>s a list of 223 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2016)"
            }, 
            "id": "czmi23f"
        }, 
        {
            "body": {
                "answer": "<p>Er, many Courseras only offer audits now. You can<sq>t submit work for grading.</p>", 
                "question": "Here<sq>s a list of 223 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2016)"
            }, 
            "id": "czmr541"
        }, 
        {
            "body": {
                "answer": "<p>wow thanks <colon>O</p>", 
                "question": "Here<sq>s a list of 223 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2016)"
            }, 
            "id": "czmp34i"
        }, 
        {
            "body": {
                "answer": "<p>Full disclosure, I<sq>m an immersive student at Viking, but even before I joined the program I found the prep courses really valuable.<br><br>Basic prep is especially useful if you don<sq>t come from an engineering or technical background.  I<sq>d read a lot of material and been through a few free online courses that would mention things like TDD, design patterns, or modularity without going too in depth to what those things are and why they<sq>re relevant - they were just words for me.  The prep course (and Viking, too) has a lot of foundational concepts about software design and a great section on Agile that really lifted the veil for me.</p>", 
                "question": "300+ hours of free bootcamp prep work (HTML/CSS Ruby JavaScript)"
            }, 
            "id": "ddibh03"
        }, 
        {
            "body": {
                "answer": "<p>I thought boot camps were the prep work...</p>", 
                "question": "300+ hours of free bootcamp prep work (HTML/CSS Ruby JavaScript)"
            }, 
            "id": "ddil6c7"
        }, 
        {
            "body": {
                "answer": "<p>>  $3000 prep courses for bootcamps <br><br>lol those are a thing? A $3k course to prep for a $10k course to prep for an unpaid internship? or perhaps the internship costs another $5k?<br><br>Shit you could just go into business for yourself and be done with it. Maybe easier to start a bootcamp business then signup to one ;-)<br><br>People so ready to throw money around. All feels like a get rich quick sales thing. </p>", 
                "question": "300+ hours of free bootcamp prep work (HTML/CSS Ruby JavaScript)"
            }, 
            "id": "dditf3o"
        }, 
        {
            "body": {
                "answer": "<p>Very cool but the link appears to be broken. <br><br>Edit<colon> appears the Reddit app for iOS is inserting a period into the URL at the end. How dumb. </p>", 
                "question": "300+ hours of free bootcamp prep work (HTML/CSS Ruby JavaScript)"
            }, 
            "id": "ddiixb4"
        }, 
        {
            "body": {
                "answer": "<p>I didn<sq>t know you could sign up for **free** MIT online courses! Amazing share! Thank you OP!</p>", 
                "question": "FYI today is the start date for MIT<sq>s online Intro to CS and Programming course. It will be the first edition of the class using Python 3.5"
            }, 
            "id": "d72kcsq"
        }, 
        {
            "body": {
                "answer": "<p>I have been planning to start this for two weeks downloading the IDE now... I am so excited.<br> <br>Do you think we can get a sticky thread on the sub for this course?</p>", 
                "question": "FYI today is the start date for MIT<sq>s online Intro to CS and Programming course. It will be the first edition of the class using Python 3.5"
            }, 
            "id": "d72nakq"
        }, 
        {
            "body": {
                "answer": "<p>This course is great! But challenging. Don<sq>t feel ashamed if you don<sq>t do well the first time. It runs at least twice a year, so there<sq>s always next time around. <br><br>The first time I tried it, I dropped out around recursion. I got the basics of it, but my brain just got tired of base cases, inductive reasoning, etc. So I got frustrated and quit, went and read some programming books in the meantime, and took the next session. That one I passed with a 99<percent>, and I completed 6.00.2 with a similar score. <br><br>This class will challenge you if the only experience you have with programming is syntax/small problems. But that<sq>s *a good thing*. Challenge is how you grow. It<sq>s how your brain expands. It doesn<sq>t do it on its own, it take energy for your nerves to grow new connections.  Think of it like marathon training -- the first time you run maybe you only run a few hundred meters. But after a few months, you<sq>re up to a dozen or more miles.<br><br>There<sq>s no doubt about it<colon> this is a computer science course. It<sq>s for beginners, and it<sq>s gentle, but the subject matter involved is straight comp sci. If you have an interest in that branch of programming, I strongly believe this is your best intro. CS50 is great, but I think this beats it out in the pure CS realm.<br><br>Since this class I<sq>ve taken online courses from Stanford and Princeton on algorithms; a course from MIT open courseware on discrete math for comp sci; courses from the creator of Scala on functional programming; and others, and I trace my success in those back to this one.<br><br>Another great edX course series to check out is Systematic Program Design. It uses racket, a LISP-like, and it<sq>s phenomenal. It will blow your mind -- but I recommend completing this one first.</p>", 
                "question": "FYI today is the start date for MIT<sq>s online Intro to CS and Programming course. It will be the first edition of the class using Python 3.5"
            }, 
            "id": "d72sfo6"
        }, 
        {
            "body": {
                "answer": "<p>I am enrolled in this course! My MBA program didn<sq>t have a programming course per se, but I did switch one for an analytics course. This seemed too good to pass up considering my career path and appreciation of numbers. My BIGGEST concern is the math elements. I never was good at algebra or anything beyond stats even though I got two Accounting degrees. Is that cause for concern going into a programming course???<br><br></p>", 
                "question": "FYI today is the start date for MIT<sq>s online Intro to CS and Programming course. It will be the first edition of the class using Python 3.5"
            }, 
            "id": "d72otfi"
        }, 
        {
            "body": {
                "answer": "<p>* [automagic playlist for videos](http<colon>//radd.it/r/learnprogramming/comments/4ot69a/vids) in this post  <br><br><br>*^Comment ^will ^update ^with ^media ^shared ^in ^comments.*  <br>*^Downvote ^if ^unwanted, ^self-deletes ^if ^score ^is ^0.*  <br>[^about ^this ^bot](/1vjdw9) ^| [^recent ^playlists](/r/radditplaylists) ^| [^plugins ^that ^interfere](/1m21ku)</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d4fbbtk"
        }, 
        {
            "body": {
                "answer": "<p>Thanks alot for taking the time and energy to pass on knowledge to others.<br>Perhaps you could turn it into a playlist and then, if you want to create more content, put that in an other playlist. So it does not end up a 300 episode playlist after a while <colon>-)</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d4fean5"
        }, 
        {
            "body": {
                "answer": "<p>Hey, great series, thank you, really.<br><br>I want know, I have very little experience em C and none in C++, i<sq>m most java developer for some years e with some C# pratice.<br><br>I could follow this tutorial with greater problems?<br><br>Thank you again.</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d4fh82q"
        }, 
        {
            "body": {
                "answer": "<p>This tutorial is for the Mac... using Eclipse, SDL2 and Clang++, I doubt it will work with Windows. Two people below commented that Eclipse doesn<sq>t work with the SDL. The only reason I<sq>m making this comment is because 80<percent> of the time I try these tutorials and sample games, I can<sq>t get them to compile in visual studio on Windows. And it<sq>s a waste of time.<br><br>Edit<colon><br>However, this guy really seems to know what he<sq>s doing... and I<sq>ve only been through the introduction.</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d4g00mq"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting these every month.</p>", 
                "question": "Here<sq>s a list of 156 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2015)"
            }, 
            "id": "ctsfb0l"
        }, 
        {
            "body": {
                "answer": "<p>Rating for your post<colon> \u2605\u2605\u2605\u2605\u2605</p>", 
                "question": "Here<sq>s a list of 156 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2015)"
            }, 
            "id": "ctskeqf"
        }, 
        {
            "body": {
                "answer": "<p>Are there any C++ courses?</p>", 
                "question": "Here<sq>s a list of 156 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2015)"
            }, 
            "id": "ctsh91k"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 156 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2015)"
            }, 
            "id": "ctslic2"
        }, 
        {
            "body": {
                "answer": "<p>So OP I have had a somewhat dealing with this turd. I graduated from General Assembly in Austin and few other Vets who have graduated as well created a Vets that Code meetup (yes very similar name). So this dude reached out and threatened us with copyright infringement because of our meetup name. We did our due diligence and he didn<sq>t have any Trademarks filed and approved for anything relating close to it so we were happy to keep the name. Besides its a fucking meetup. <br><br>He then told us we could work together and use that meetup name but we<sq>d get his resources and we<sq>d have to pay a yearly fee and if we made any money we<sq>d have to pay a royalty fee to him. We literally laughed at him and told him to go pound sand. So shortly after that he contacted his contacts at the New York General Assembly because that is where the CEO (more than likely the same user that responded to you) learned to code. The New York GA contacted the Austin GA and mentioned something to us about it and said we were stealing IP from him and we told them what he tried to do. They laughed as well. So yeah he and his organization is very scummy. </p>", 
                "question": "Veteran<sq>s beware<colon> vetswhocode.io is a scam that is only in it for donations and not helping vets."
            }, 
            "id": "dcwuh8f"
        }, 
        {
            "body": {
                "answer": "<p>If you are looking for a place for Vets and coding check out Operation Code they are a great community of Vets helping Vets. When you sign up (no donations necessary but I am sure welcome) you join a Slack group where we all talk and learn. Really great community! </p>", 
                "question": "Veteran<sq>s beware<colon> vetswhocode.io is a scam that is only in it for donations and not helping vets."
            }, 
            "id": "dcwf3xv"
        }, 
        {
            "body": {
                "answer": "<p>He did try to make this a race thing i see<br>> @JeromeHardaway  <br>> And thinking about how entitled this White Male Veteran was and just how he acted.</p>", 
                "question": "Veteran<sq>s beware<colon> vetswhocode.io is a scam that is only in it for donations and not helping vets."
            }, 
            "id": "dcwvaa1"
        }, 
        {
            "body": {
                "answer": "<p>My question is how do we get them arrested for fraud?</p>", 
                "question": "Veteran<sq>s beware<colon> vetswhocode.io is a scam that is only in it for donations and not helping vets."
            }, 
            "id": "dcwrrai"
        }, 
        {
            "body": {
                "answer": "<p>Seriously, there is something about the design of that page that ticks every box. This is a great example of how important simplicity is when trying to communicate.</p>", 
                "question": "Learn (Python) programming with a beginner-friendly IDE"
            }, 
            "id": "d8gapwp"
        }, 
        {
            "body": {
                "answer": "<p>in general Python need more IDE<sq>s. Had to get Pycharm full version just to learn Django (I am a student so its free, but I get it only for one year)</p>", 
                "question": "Learn (Python) programming with a beginner-friendly IDE"
            }, 
            "id": "d8g9dwk"
        }, 
        {
            "body": {
                "answer": "<p>Looks great! Like Spyder but with a lot less distraction.<br><br>Take this over to /r/learnpython also, I<sq>m sure many people there would love to see it. Contact the mods too, see if they<sq>ll throw it in the sidebar.</p>", 
                "question": "Learn (Python) programming with a beginner-friendly IDE"
            }, 
            "id": "d8g943p"
        }, 
        {
            "body": {
                "answer": "<p>Looks cool but also there<sq>s  a site called Python Tutor that lets you paste in your code and then run it step by step, you can<sq>t program in it though</p>", 
                "question": "Learn (Python) programming with a beginner-friendly IDE"
            }, 
            "id": "d8gaxjs"
        }, 
        {
            "body": {
                "answer": "<p>I know nothing about python. I recently did an MTA in software development and had to learn some C# so weirdly I understood some of what was going on. <br><br>I<sq>m gonna have a stab at making a bot. That video is fucking fantastic. Thank you. </p>", 
                "question": "Here<sq>s a tutorial I made on creating a reddit bot using Python"
            }, 
            "id": "ddwn24i"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so much for sharing this. Awesome example.</p>", 
                "question": "Here<sq>s a tutorial I made on creating a reddit bot using Python"
            }, 
            "id": "ddwip5v"
        }, 
        {
            "body": {
                "answer": "<p>Why are you using 2.7?   Not trying to be rude, but considering the thing is going to be deprecated in a few years, and most newcomers start in 3.+ I would think it more helpful for them to not have to get bogged down in abandoned versions of the language.  Unless you are working with a library that only supports 2.7, or large amounts of legacy code, there really doesn<sq>t seem to be a reason to use 2.7</p>", 
                "question": "Here<sq>s a tutorial I made on creating a reddit bot using Python"
            }, 
            "id": "ddwtzqb"
        }, 
        {
            "body": {
                "answer": "<p>Part 2?</p>", 
                "question": "Here<sq>s a tutorial I made on creating a reddit bot using Python"
            }, 
            "id": "ddwj3vh"
        }, 
        {
            "body": {
                "answer": "<p>Finally; A tutorial that doesn<sq>t talk about <dq>this is a var, now do var1 - var2 = var3<dq>. It<sq>s like we are learning algebra all over again. I<sq>m hoping this turns out as you intented it to do and we can find some insight on how to actually build products and how they are made in the real world. Good luck!</p>", 
                "question": "Hey /r/learnprogramming my name<sq>s Tim and I want to teach you to build products using javascript. For free."
            }, 
            "id": "d5d5iq1"
        }, 
        {
            "body": {
                "answer": "<p>Excellent! I<sq>ll be checking this out sometime this weekend. Thanks for sharing.</p>", 
                "question": "Hey /r/learnprogramming my name<sq>s Tim and I want to teach you to build products using javascript. For free."
            }, 
            "id": "d5d4ypw"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m in. Don<sq>t let me down, Tim x</p>", 
                "question": "Hey /r/learnprogramming my name<sq>s Tim and I want to teach you to build products using javascript. For free."
            }, 
            "id": "d5d6c2p"
        }, 
        {
            "body": {
                "answer": "<p>Just...pretty please promise me you won<sq>t sexually abuse your child and then hang yourself in a prison cell ala /r/carlhprogramming<br><br>Thanks I<sq>ll definitely check out the course.</p>", 
                "question": "Hey /r/learnprogramming my name<sq>s Tim and I want to teach you to build products using javascript. For free."
            }, 
            "id": "d5dc03e"
        }, 
        {
            "body": {
                "answer": "<p>This is a really cool <dq>why<dq> quesiton, love those.   <br><br>Data is data, just a pile of random bytes without meaning, until you provide with it an algorithm that tells you what those bytes mean and how to read them. Image viewers know how to interpret  bytes into pixel maps, text editors know how to interpret bytes into text symbols. If you feed an image to a text editor it will try to interpret image bytes as text, and if it cannot find a suitable text symbol that maps to the byte, it will try to replace it without telling you - depending on the encoding of your choosing. For example, if you try to output a binary (executable) into a plain terminal window, it will vomit a bunch of ASCII symbols and beep randomly, cause that<sq>s the mapping they have - for example, 0x7 maps to the <dq>bell<dq> character in ASCII and the terminal will interpret it by making the beep sound.     <br><br>It<sq>s possible that advanced editors as Sublime do some voodoo magic on <dq>special<dq> bytes they cannot find direct text mappings for, either truncating them or replacing them with something else (like some would replace the NUL character with space and encode it accordingly).  What you<sq>re copying to clipboard is the result of Sublime<sq>s attempt to convert image bytes to text - using the default encoding, - and not the original raw bytes that the image file had. </p>", 
                "question": "A jpg file I have is 1407kb large. I open up the jpg in Sublime and copy all the code in it to a blank new jpg file that I just created called new.jpg. Why is new.jpg 3607kb large instead of the same size as the original jpg file?"
            }, 
            "id": "ct4iaqe"
        }, 
        {
            "body": {
                "answer": "<p>Okay, so here is what *actually* happens<colon> You<sq>re looking at the [raw data represented with hexadecimal](http<colon>//i.imgur.com/vOxKEO9.png) when you open your image that way. (I opened a random EXE file, images are displayed as images for me in sublime, but it works the same, bear with me)<br><br>The size of your file is indicated in bytes, 1407 kilobytes in your example. Every byte is a number within a certain range (0-255).<br><br>Sublime displays every single byte for you. It displays them in groups of two, 16 bytes total per line. In the image, you can see that I<sq>ve selected some bytes individual bytes.<br><br>If you count the number of characters on every line that sublime dispalys, you get 41<colon> 8 blocks of 4, 7 spaces in between, and a newline at the very end of the line (you must be on Windows, then it<sq>s two characters for the newline). That<sq>s 4*8 + 7 + 2 = 41. (We<sq>ll ignore the last line, which may be shorter, it doesn<sq>t really matter)<br><br>Recall that every line represents exactly 16 bytes. It takes 41 characters to display a line. That<sq>s a factor of 2.5625.<br><br>1407 * 2.5625 gives you 3605. What a coincidence! The difference is due to the rounding when displaying 1407, which could be 1407.4, for instance.<br><br><br>When you save the all the text you<sq>re seeing as a file, Sublime will store the file in <dq>plain text mode<dq>. That means roughly, that every single character will be stored as one single byte. Hence, the size in bytes increases by a factor of 2.5</p>", 
                "question": "A jpg file I have is 1407kb large. I open up the jpg in Sublime and copy all the code in it to a blank new jpg file that I just created called new.jpg. Why is new.jpg 3607kb large instead of the same size as the original jpg file?"
            }, 
            "id": "ct4prs3"
        }, 
        {
            "body": {
                "answer": "<p>Because a JPEG file is not text, but when you open it in a text editor the editor attempts to interpret it as text, and when you copy it to the clipboard you are copying the interpreted text, not the original bytes of the file.<br><br>Why are you doing this, anyway? If you want to copy a file, then just copy the file. Opening a non-text file like a JPEG in a text editor is hardly ever a meaningful thing to do.</p>", 
                "question": "A jpg file I have is 1407kb large. I open up the jpg in Sublime and copy all the code in it to a blank new jpg file that I just created called new.jpg. Why is new.jpg 3607kb large instead of the same size as the original jpg file?"
            }, 
            "id": "ct4ccgr"
        }, 
        {
            "body": {
                "answer": "<p>The other answers are correct. To see exactly what Sublime is doing to the data though, you could try using a diff tool like [BeyondCompare](http<colon>//www.scootersoftware.com/) or something to show the two files side by side and see the differences. Since it<sq>s a binary file, you<sq>ll want to use a tool that can show you the data in hex. It<sq>s not going to be terrible useful to see this, but if you want to know exactly what has changed between the two, this is how you could do it.</p>", 
                "question": "A jpg file I have is 1407kb large. I open up the jpg in Sublime and copy all the code in it to a blank new jpg file that I just created called new.jpg. Why is new.jpg 3607kb large instead of the same size as the original jpg file?"
            }, 
            "id": "ct4cj1v"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Calling out all seeders. I<sq>ve been uploading a few Coursera courses for the past 10 days on kat.cr and more are coming. Contribute by either seeding or downloading the other courses from Coursera."
            }, 
            "id": "d4dt6uf"
        }, 
        {
            "body": {
                "answer": "<p>On my seedbox now!<br>Also, I like how your kat.cr[ profile picture](https<colon>//yuq.me/userpics/59/583/0856253a3d45cca4d336ed2950570c08.png) is the TPB logo.</p>", 
                "question": "Calling out all seeders. I<sq>ve been uploading a few Coursera courses for the past 10 days on kat.cr and more are coming. Contribute by either seeding or downloading the other courses from Coursera."
            }, 
            "id": "d4dtiyb"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for uploading these, I hope you<sq>re able to upload many of them before they remove them. I<sq>m seeding away for people like me who want to hold onto these. <br><br>http<colon>//i.imgur.com/2lZMQwr.png</p>", 
                "question": "Calling out all seeders. I<sq>ve been uploading a few Coursera courses for the past 10 days on kat.cr and more are coming. Contribute by either seeding or downloading the other courses from Coursera."
            }, 
            "id": "d4dvcwa"
        }, 
        {
            "body": {
                "answer": "<p>Might want to add [safe mirror](https<colon>//kastatus.com/) for those who can<sq>t access kat.cr;<br><br>https<colon>//thekat.tv/user/eru_melkor/uploads/</p>", 
                "question": "Calling out all seeders. I<sq>ve been uploading a few Coursera courses for the past 10 days on kat.cr and more are coming. Contribute by either seeding or downloading the other courses from Coursera."
            }, 
            "id": "d4du44n"
        }, 
        {
            "body": {
                "answer": "<p>CheckIO was essentially *the* resource that got me to be able to use python without having to stare at the docs all the time. Honestly, I think that one of the best uses for these algorithm challenge sites is to learn the standard library for languages.<br><br>Also never seen Vim Adventures before. Going to check that out.<br><br>Edit<colon> Awww, Vim Adventures is just one level before asking you to buy it for $25.00. Nope.</p>", 
                "question": "12 free games to learn programming."
            }, 
            "id": "d2oaguk"
        }, 
        {
            "body": {
                "answer": "<p>Looks like a decent list! I<sq>ve enjoyed Code Combat and Vim Adventures before and look forward to giving some of those others a go. I<sq>d also add Regex Crossword to that list. </p>", 
                "question": "12 free games to learn programming."
            }, 
            "id": "d2oaakh"
        }, 
        {
            "body": {
                "answer": "<p>I finally kinda got a hang of git after playing through [this](http<colon>//pcottle.github.io/learnGitBranching/) interactive tutorial.</p>", 
                "question": "12 free games to learn programming."
            }, 
            "id": "d2oe0w8"
        }, 
        {
            "body": {
                "answer": "<p>Is prior knowledge required to play these or are they noob friendly?</p>", 
                "question": "12 free games to learn programming."
            }, 
            "id": "d2ofviw"
        }, 
        {
            "body": {
                "answer": "<p>Signed up for MIT<sq>s intro course with Python! Will any of you be my classmates?</p>", 
                "question": "Here<sq>s a list of 450+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2016)"
            }, 
            "id": "d62oe0u"
        }, 
        {
            "body": {
                "answer": "<p>These are always a godsend. Always finding something else to sink my teeth into. Thanks for always doing this.</p>", 
                "question": "Here<sq>s a list of 450+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2016)"
            }, 
            "id": "d62h4ue"
        }, 
        {
            "body": {
                "answer": "<p>Edit<colon> nevermind. See below.<br><br>I appreciate the sentiment, but in this day and age, I don<sq>t think lists like this are particularly useful. Its not difficult to find resources, it<sq>s difficult to find the *right* resources amidst a sea of alternatives. The whole modern problem of the internet is a superabundance of data. The problem is one of filtering and curation. I have no idea whether or not any of these courses are worth taking, or which are better or worse than the others, or which are right for me. I need some way of picking one thats better than throwing a dart at my monitor.</p>", 
                "question": "Here<sq>s a list of 450+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2016)"
            }, 
            "id": "d63fyzh"
        }, 
        {
            "body": {
                "answer": "<p>This should be a git repo so we can all add and modify it as needed.<br><br>Damn good resource and thank you for this!<br></p>", 
                "question": "Here<sq>s a list of 450+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2016)"
            }, 
            "id": "d62rjuy"
        }, 
        {
            "body": {
                "answer": "<p>Casey Muratori is doing something similar at https<colon>//handmadehero.org/<br><br>His project introduction video is outstanding and is guaranteed to leave a smile on your face<colon> https<colon>//www.youtube.com/watch?v=A2dxjOjWHxQ <br><br>He keeps a YouTube archive of Twitch streams here https<colon>//www.youtube.com/user/handmadeheroarchive, which now contains 327 episodes usually around an hours worth of really high qualiity stuff.</p>", 
                "question": "[Tutorial] Learn to make a game in C++"
            }, 
            "id": "d6k2l8u"
        }, 
        {
            "body": {
                "answer": "<p>Also bookmarked! I greatly appreciate the time and effort that is put into tutorials such as these, so thank you! </p>", 
                "question": "[Tutorial] Learn to make a game in C++"
            }, 
            "id": "d6jrrtv"
        }, 
        {
            "body": {
                "answer": "<p>/r/gamedev might also be interested in this.</p>", 
                "question": "[Tutorial] Learn to make a game in C++"
            }, 
            "id": "d6ju9za"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, this looks cool! I saved it for later. </p>", 
                "question": "[Tutorial] Learn to make a game in C++"
            }, 
            "id": "d6jqaeh"
        }, 
        {
            "body": {
                "answer": "<p>You are one cool ass mother fucker. Thank you for all you do.</p>", 
                "question": "Online course for <dq>Automate the Boring Stuff with Python<dq> is now available. Sign up for free with code THANKS_REDDIT"
            }, 
            "id": "cv9q7mw"
        }, 
        {
            "body": {
                "answer": "<p>Hey, Al! Thanks for making this resource available to us. I purchased your book when it came out earlier this summer but never ended up getting too deep into it. I<sq>ll look forward to this more interactive approach to really tackle some of these tools and ideas.</p>", 
                "question": "Online course for <dq>Automate the Boring Stuff with Python<dq> is now available. Sign up for free with code THANKS_REDDIT"
            }, 
            "id": "cv9jgsr"
        }, 
        {
            "body": {
                "answer": "<p>Would this be a good course for someone with no programming experience? I finally decided today that I would finally commit to learn Python and this shows up!<br><br>Thanks in advance!</p>", 
                "question": "Online course for <dq>Automate the Boring Stuff with Python<dq> is now available. Sign up for free with code THANKS_REDDIT"
            }, 
            "id": "cv9vqy0"
        }, 
        {
            "body": {
                "answer": "<p>Hey everyone! Author here. Just to answer some questions I<sq>ve seen<colon><br><br>* This course covers the same material as the [Automate the Boring Stuff with Python](https<colon>//automatetheboringstuff.com) book, which is freely available online under a [Creative Commons](https<colon>//creativecommons.org/about) license.<br>* The course is free with code THANKS_REDDIT. Udemy gives you lifetime access to the courses you sign up for (though the free code will expire on Oct 12th). <br>* You don<sq>t need the book to take the course. But if you want to buy a print or ebook, you can get it at the [No Starch](https<colon>//www.nostarch.com/automatestuff) site. Use discount code TGIPYTHON to get 30<percent> off. No Starch includes the pdf/mobi/epub file of any print book you buy.<br>* The course skips some of the chapters in the later half of the book (the stuff that covers time, csv files, and images is skipped).<br>* The course has 50 videos, about 10 to 15 minutes long each. [The first 15 videos are on YouTube](https<colon>//www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW).<br><br>And while I have the attention, I also have a series of [Scratch programming screencasts](http<colon>//inventwithscratch.com) for kids and hobbyists.<br><br>Thanks to everyone! It<sq>s a thrill that people find the material I make useful, and I really encourage everyone to learn to code. Learning how to make simple scripts to automate stuff on your computer can be a huge time saver, especially if you have an office job.<br><br>but like learning a foreign language or musical instrument, even if you don<sq>t use it all the time, it<sq>s one of those things that helps make you an interesting person.</p>", 
                "question": "Online course for <dq>Automate the Boring Stuff with Python<dq> is now available. Sign up for free with code THANKS_REDDIT"
            }, 
            "id": "cvabtzu"
        }, 
        {
            "body": {
                "answer": "<p>Looks like a lot of really great resources, but it kinda bugs me that it says <dq>Full Stack Web Development<dq> when this doesn<sq>t include any resources for ( or even any mention of ) Back-end Languages, Databases, Server Administration, etc.<br><br>The <dq>Full Stack<dq> in <dq>Full Stack Developer<dq> generally means *everything* that makes up the full web stack, not just the front end.<br><br>Perhaps it should be renamed to <dq>100+ Free resources for learning **Front End** Web Development.<dq><br><br>For someone getting started, this seems misleading to exclude at least some mention that all of these resources only focus on the front end. <br><br><br>Edit<colon> since posting this comment, looks like some node resources were added. It<sq>s a start.</p>", 
                "question": "Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!"
            }, 
            "id": "df1a3qg"
        }, 
        {
            "body": {
                "answer": "<p>> 18 months ago I dove head first into Full Stack Web Development.<br><br>And what are your results in that timeframe?</p>", 
                "question": "Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!"
            }, 
            "id": "df0vp29"
        }, 
        {
            "body": {
                "answer": "<p>This is great stuff, thank you for making this! <colon>)</p>", 
                "question": "Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!"
            }, 
            "id": "df0oetd"
        }, 
        {
            "body": {
                "answer": "<p>Good job OP.<br><br>I recommend makes another repo for paid resources. Also if you add or remove resources make sure your git commit comment says why.<br><br>Example<colon> <dq>Removed Rails Tutorial because it<sq>s based on an older, obsolete version of Rails.<dq></p>", 
                "question": "Github Repo with 100+ Free resources to learn Full Stack Web Development. Thank you r/learnprogramming!"
            }, 
            "id": "df0zk4h"
        }, 
        {
            "body": {
                "answer": "<p>What an amazing time to study CS and programming ! Thank you for these.</p>", 
                "question": "Here<sq>s a list of 120 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2015)"
            }, 
            "id": "cngh5yt"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for these amazing resources. I would just add this excellent mooc I recently completed from Helsinki University in Finland (totally in englissh and free, also self-paced), Is a beginner level intro to programming and java<colon><br><br>http<colon>//mooc.cs.helsinki.fi/programming-part1<br><br>http<colon>//mooc.cs.helsinki.fi/programming-part2</p>", 
                "question": "Here<sq>s a list of 120 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2015)"
            }, 
            "id": "cnghfju"
        }, 
        {
            "body": {
                "answer": "<p>I really wish there was some sort of all-encompassing course on front-end web development. I would ideally want to learn about HTML, CSS, JavaScript, and JQuery in one course, but there (surprisingly) doesn<sq>t seem to be anything like this.<br><br>am I missing one that would be a good fit for me? any other recommendations?</p>", 
                "question": "Here<sq>s a list of 120 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2015)"
            }, 
            "id": "cngmewd"
        }, 
        {
            "body": {
                "answer": "<p>Lets begin! http<colon>//i.imgur.com/BJzYmMi.gifv</p>", 
                "question": "Here<sq>s a list of 120 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2015)"
            }, 
            "id": "cngn8b7"
        }, 
        {
            "body": {
                "answer": "<p>I also highly recommend the [saylor.org](http<colon>//www.saylor.org/majors/computer-science/) CS MOOCs, but most of the material you have to read, unlike most of these MOOCs, where it<sq>s mostly in video format.</p>", 
                "question": "Here<sq>s a list of 48 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2014)"
            }, 
            "id": "cfv2hbl"
        }, 
        {
            "body": {
                "answer": "<p>This + a way to live Rent Free so I could do all these and I would be a happy man</p>", 
                "question": "Here<sq>s a list of 48 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2014)"
            }, 
            "id": "cfv2o3y"
        }, 
        {
            "body": {
                "answer": "<p>Awesome, thanks!<br><br>Has anyone done a course from Udacity before? Anything to say about them, good or bad?</p>", 
                "question": "Here<sq>s a list of 48 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2014)"
            }, 
            "id": "cfv2ho9"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m starting the introduction to programming- Java course. Does anyone have any experience with this course and could provide feedback on it? I<sq>m a complete beginner in programming and want to start off in the right direction. Thanks!</p>", 
                "question": "Here<sq>s a list of 48 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2014)"
            }, 
            "id": "cfv2qcd"
        }, 
        {
            "body": {
                "answer": "<p>Hey!  This is a really cool project idea, especially for a tutorial, but there are some things in the code that concern me.<br><br>Before I go any further, a disclaimer<colon>  You are not your code.<br><br>I work in the industry at a very big studio as a gameplay programmer, and there are a couple parts of this code that I saw right when opening the github that made me want to comment about code quality.  <br><br>In Animated Sprite - you take in a file path and load an image directly from disk.  This, on a large scale, will cause problems at load time.  It could be ameliorated by doing all asset loading up front and maintaining a manager to dole out references to them in memory instead of from disk.<br>Secondly, Enemy inherits from Animated Sprite.  This breaks a few rules, specifically the IS-A relationship in inheritance (also [covariant problems](https<colon>//en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science) ). This is why the industry as a whole favors [composition over inheritance]( https<colon>//en.wikipedia.org/wiki/Composition_over_inheritance).  An enemy that is renderable might have a sprite to render with, but it wouldn\u2019t BE a sprite.<br><br>There are other criticisms, but I\u2019ll stop here. What I wanted to say was \u2013 Caveat Emptor.  This is a fun project to learn what goes into a game, and no one here should quit based on these criticisms, especially if it inspires your passion. Rather, use this as an avenue to learn good software practices that can actually land you a gig in the industry. <br><br>A good resource for this project might be [Game Programming Patterns]( http<colon>//gameprogrammingpatterns.com/) or [Game Engine Architecture]( http<colon>//www.amazon.com/Engine-Architecture-Second-Jason-Gregory/dp/1466560010/ref=sr_1_1?ie=UTF8&qid=1450384612&sr=8-1&keywords=Game+Engine+Architecture).<br><br>Sorry if this came across offensive, but since this is r/learnprogramming, I figured it was a good chance to learn.<br><br>EDIT<colon> Formatting<br>EDIT<colon> GOLD?!</p>", 
                "question": "Learn to make a 2D Game in C++!"
            }, 
            "id": "cy2m6pv"
        }, 
        {
            "body": {
                "answer": "<p>* [automagic playlist for videos](http<colon>//radd.it/r/learnprogramming/comments/3x7sqb/vids) in this post  <br><br><br>*^Comment ^will ^update ^with ^media ^shared ^in ^comments.*  <br>*^Downvote ^if ^unwanted, ^self-deletes ^if ^score ^is ^0.*  <br>[^about ^this ^bot](/1vjdw9) ^| [^recent ^playlists](/r/radditplaylists) ^| [^plugins ^that ^interfere](/1m21ku)</p>", 
                "question": "Learn to make a 2D Game in C++!"
            }, 
            "id": "cy27p13"
        }, 
        {
            "body": {
                "answer": "<p>Awesome video. I know what I am going to be doing over my winter break. </p>", 
                "question": "Learn to make a 2D Game in C++!"
            }, 
            "id": "cy2au35"
        }, 
        {
            "body": {
                "answer": "<p>Hi, I<sq>ve been making a game in Python with PyGame and have been using Python for about a year now on and off. I mostly used it to teach myself OOP. Now, the game isn<sq>t too advanced, it<sq>s a Breakout clone but it<sq>s entirely built by me and I solved all the problems alone. It<sq>s completely object oriented and has relatively advanced features such as object oriented GUI elements like buttons, text boxes, scrollable tables for leaderboards etc. And I think this has really taught me how to program anything I want.<br><br>Now, for a career, game development is a path I<sq>ll be looking to take. I<sq>m a first year in Uni doing Computer Science but as far as I know there are no modules covering C++, they seem to be Python, C# and Java. I am wondering how hard would it be to learn C++ alone, given that I have an intermediate understanding of programming concepts. I<sq>ve programmed things in Javscript, PHP, Python and Java before but C++ looks *sooo* different from any of these languages. I hear that it<sq>s a complicated language to pick up but is this from a beginner point of view? Would it be fairly simple to understand with knowledge of programming already?<br><br>Also, I want to mess around with 3D but I didn<sq>t really do well with higher education maths. Is there any resources that would help me understand the concepts behind 3D programming? I<sq>ve looked at code snippets for PyGame which generate 3D cubes before but I struggle to understand the meaning behind the maths of generating these sorts of things.<br><br>Sorry if it<sq>s off topic but this seemed like the perfect thread to ask my questions in.</p>", 
                "question": "Learn to make a 2D Game in C++!"
            }, 
            "id": "cy29ei1"
        }, 
        {
            "body": {
                "answer": "<p>Another strategy that<sq>s really effective is sleeping on it. Its happened to me a number of times where I<sq>ve been stuck for hours on something and then solve it easily 5 minutes after waking up.<br><br>Stepping away from your problem and thinking about it in a different light will usually show you where you are going wrong.</p>", 
                "question": "It<sq>s two days in a row that I was about to send a question to /r/learnprogramming but I figured out the answer while typing the question. I just wanted you guys to know you<sq>ve helped me without even knowing it thanks."
            }, 
            "id": "df4hjs7"
        }, 
        {
            "body": {
                "answer": "<p>The Rubber Duck Debugging really should be taught in school. It<sq>s amazing how it can point out most mistakes.</p>", 
                "question": "It<sq>s two days in a row that I was about to send a question to /r/learnprogramming but I figured out the answer while typing the question. I just wanted you guys to know you<sq>ve helped me without even knowing it thanks."
            }, 
            "id": "df4i6hp"
        }, 
        {
            "body": {
                "answer": "<p>Np</p>", 
                "question": "It<sq>s two days in a row that I was about to send a question to /r/learnprogramming but I figured out the answer while typing the question. I just wanted you guys to know you<sq>ve helped me without even knowing it thanks."
            }, 
            "id": "df4jhxf"
        }, 
        {
            "body": {
                "answer": "<p>That one time on reddit when autocorrect saw you use the word <dq>ducking<dq>...</p>", 
                "question": "It<sq>s two days in a row that I was about to send a question to /r/learnprogramming but I figured out the answer while typing the question. I just wanted you guys to know you<sq>ve helped me without even knowing it thanks."
            }, 
            "id": "df4ny7m"
        }, 
        {
            "body": {
                "answer": "<p>Heres hoing to someone dumping them all somewhere as I and probably many others don<sq>t have time for this.</p>", 
                "question": "Many programming courses are about to be gone. \u202aCoursera\u202c is removing 472 free \u202aonline\u202c courses\u202c from the internet on June 30th. This guide will show you how to hurry up and \u202alegally\u202c download as many courses as possible before June 30th. [\u200eMOOCS\u202c]"
            }, 
            "id": "d4cfpq3"
        }, 
        {
            "body": {
                "answer": "<p>The OP<sq>s article is directly plagiarized from our article<colon> https<colon>//medium.freecodecamp.com/the-day-472-free-online-courses-will-vanish-from-the-internet-3060bb4e9704</p>", 
                "question": "Many programming courses are about to be gone. \u202aCoursera\u202c is removing 472 free \u202aonline\u202c courses\u202c from the internet on June 30th. This guide will show you how to hurry up and \u202alegally\u202c download as many courses as possible before June 30th. [\u200eMOOCS\u202c]"
            }, 
            "id": "d4d6dor"
        }, 
        {
            "body": {
                "answer": "<p>Wow, they are sacking a lot of their extremely popular courses.<br><br>I did not expect to see these courses in that list<colon><br><br>* Princeton Algs 1<br>* Princeton Algs 2<br>* Stanford Compilers<br><br>I am hoping that these courses will be reuploaded and will be offered anew on the newer platform. Though, I was really looking forward to taking all 3 of those courses.</p>", 
                "question": "Many programming courses are about to be gone. \u202aCoursera\u202c is removing 472 free \u202aonline\u202c courses\u202c from the internet on June 30th. This guide will show you how to hurry up and \u202alegally\u202c download as many courses as possible before June 30th. [\u200eMOOCS\u202c]"
            }, 
            "id": "d4ch7r6"
        }, 
        {
            "body": {
                "answer": "<p>Definitely torrenting thisnBefore i get banned for this comment,i would like to say that its legal where i live and currently i am downloading all the video lecture<sq>s using a py script.<br><br>Kindly leave a comment stating all the courses you want.I<sq>ll try my best,got way too much time on hand with summer break going on.<br><br>About time my homelab does something for the community.</p>", 
                "question": "Many programming courses are about to be gone. \u202aCoursera\u202c is removing 472 free \u202aonline\u202c courses\u202c from the internet on June 30th. This guide will show you how to hurry up and \u202alegally\u202c download as many courses as possible before June 30th. [\u200eMOOCS\u202c]"
            }, 
            "id": "d4cnb3g"
        }, 
        {
            "body": {
                "answer": "<p>This is just related to your <dq>do not upvote<dq> comment is that people are here to learn how to program. Something as a mild problem could be, it can potentially help those that did not know. I encourage people to try to spread knowledge as much as possible. It also helps this subreddit rolling. <colon>)</p>", 
                "question": "Little problem  dont upvote please"
            }, 
            "id": "cp21396"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s Json, take a look at this https<colon>//docs.python.org/2/library/json.html</p>", 
                "question": "Little problem  dont upvote please"
            }, 
            "id": "cp1w3fm"
        }, 
        {
            "body": {
                "answer": "<p>Making something for League? <br><br>Be careful with posting your ID publicly. There is, might be fixed now, an exploit in the online store where people could purchase stuff from the store to your account just using your id. That includes transferring your account to another server. <br><br>Also looks like your login name is in there too.</p>", 
                "question": "Little problem  dont upvote please"
            }, 
            "id": "cp22mht"
        }, 
        {
            "body": {
                "answer": "<p>People will upvote or down vote however much they want. And I don<sq>t mean that in a <dq>fuck you I<sq>ll upvote anyway<dq>. I mean that in a please don<sq>t put don<sq>t upvote in your title, it doesn<sq>t help anyone way </p>", 
                "question": "Little problem  dont upvote please"
            }, 
            "id": "cp21vud"
        }, 
        {
            "body": {
                "answer": "<p>> NOTE<colon> Unfortunately Coursera has converted many of its courses to <sq>Premium Grading<sq>. Which basically means that you need to pay if you want to access graded assignments <colon>(<br><br>And they seem to be making it intentionally hard to see the ones which you can audit for free and how to sign up for the audit only version. <br><br>I found one course where one previous session was audit-able while the other past session was not. The only way I figured it out was trial and error. <br><br>It<sq>s too bad, I really liked Cousera before. </p>", 
                "question": "Here<sq>s a list of 229 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2016)"
            }, 
            "id": "d2sk32e"
        }, 
        {
            "body": {
                "answer": "<p>information overload..</p>", 
                "question": "Here<sq>s a list of 229 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2016)"
            }, 
            "id": "d2t2jae"
        }, 
        {
            "body": {
                "answer": "<p>Is there a full\u2013fledged Excel course available? <br>Be it a Beginner-to-Advance level or everything that is able to do/learn with Excel  </p>", 
                "question": "Here<sq>s a list of 229 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2016)"
            }, 
            "id": "d2sjuxm"
        }, 
        {
            "body": {
                "answer": "<p>[Is the Coursera Python course](https<colon>//www.coursera.org/learn/interactive-python-1) worth paying for? <br><br>I<sq>m interested in developing some basic marketable skill in programming and this looked like it may look good on a resume. <br><br>Will it teach me what I need to know?</p>", 
                "question": "Here<sq>s a list of 229 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2016)"
            }, 
            "id": "d2squi1"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to add my book to the pile<colon> <dq>Automate the Boring Stuff with Python<dq> is free under a Creative Commons license at https<colon>//automatetheboringstuff.com<br><br>I<sq>m currently creating an online course that follows the book, and adding videos as I make them<colon> https<colon>//www.youtube.com/watch?v=7qHMXu99d88&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW</p>", 
                "question": "Here<sq>s a list of 153 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2015)"
            }, 
            "id": "csqj4tt"
        }, 
        {
            "body": {
                "answer": "<p>Goddammit it<sq>s July already!</p>", 
                "question": "Here<sq>s a list of 153 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2015)"
            }, 
            "id": "csq4zjw"
        }, 
        {
            "body": {
                "answer": "<p>wonderful, thanks for putting in the time to compile this list.</p>", 
                "question": "Here<sq>s a list of 153 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2015)"
            }, 
            "id": "csq35dl"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s the best way to go around these?<br><br>Data science particularly interests me, but at the same time I wonder what web development is like.<br><br>It<sq>s all so, so confusing and interesting.</p>", 
                "question": "Here<sq>s a list of 153 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2015)"
            }, 
            "id": "csq788z"
        }, 
        {
            "body": {
                "answer": "<p>thanks for the list! there is a typo in the title<colon><br>> this month (Feb 2015) </p>", 
                "question": "Here<sq>s a list of 188 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2015)"
            }, 
            "id": "cxkjmi0"
        }, 
        {
            "body": {
                "answer": "<p>I tweaked the format a bit and added [NEW] tags to courses that are being offered for the first time. Feedback appreciated.</p>", 
                "question": "Here<sq>s a list of 188 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2015)"
            }, 
            "id": "cxkphc6"
        }, 
        {
            "body": {
                "answer": "<p>Once again, thank you so much for going thru the work of compiling all this information.</p>", 
                "question": "Here<sq>s a list of 188 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2015)"
            }, 
            "id": "cxkiszp"
        }, 
        {
            "body": {
                "answer": "<p>advanced data structures in java isn<sq>t free but costs 265$ !!!!!!!!!</p>", 
                "question": "Here<sq>s a list of 188 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2015)"
            }, 
            "id": "cxlkn7m"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome.  Code Academy has simultaneously taught me a ton about programming and pushed me close to a nervous breakdown as I try to teach myself all this.  Glad the course is finally up.</p>", 
                "question": "Code Academy has released their full Java course!"
            }, 
            "id": "cwaae3c"
        }, 
        {
            "body": {
                "answer": "<p>Course time<colon> 4 hours. <br><br>Something<sq>s wrong... </p>", 
                "question": "Code Academy has released their full Java course!"
            }, 
            "id": "cwad85q"
        }, 
        {
            "body": {
                "answer": "<p>Did you mean<colon> Codecademy?<br><br>(I just recently noticed it when I went to codeacademy.com instead of codecademy.com.)</p>", 
                "question": "Code Academy has released their full Java course!"
            }, 
            "id": "cwabppv"
        }, 
        {
            "body": {
                "answer": "<p>Pretty nice. Ran into a problem when they want it done a specific way. PTSD flashes to myMathLab occurred. </p>", 
                "question": "Code Academy has released their full Java course!"
            }, 
            "id": "cwad3mc"
        }, 
        {
            "body": {
                "answer": "<p>Great list, exacly what I need to not do homework.</p>", 
                "question": "Here<sq>s a list of 241 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2016)"
            }, 
            "id": "d1pmoam"
        }, 
        {
            "body": {
                "answer": "<p>I appreciate the work that goes into this list. Thank you. <br><br>Should Coursera still be included now that they charge for grading?  Or perhaps footnoted?<br></p>", 
                "question": "Here<sq>s a list of 241 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2016)"
            }, 
            "id": "d1pjxvb"
        }, 
        {
            "body": {
                "answer": "<p>Analysis.paralysis == true</p>", 
                "question": "Here<sq>s a list of 241 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2016)"
            }, 
            "id": "d1prdro"
        }, 
        {
            "body": {
                "answer": "<p>I always find these types of lists intimidating </p>", 
                "question": "Here<sq>s a list of 241 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2016)"
            }, 
            "id": "d1psoox"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so much!</p>", 
                "question": "Happy Thanksgiving! We<sq>re releasing our 400 intro Java course lectures/assignments for free."
            }, 
            "id": "daecyim"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.ktbyte.com/coder#pset/123/718/prime-numbers<br><br>does the instructor here make a mistake in what his definition of a prime number is?<br><br><dq>If a number is prime it has no factors except for 2 and itself<dq><br><br>that<sq>s wrong right?<br><br>it<sq>s 1 and itself?</p>", 
                "question": "Happy Thanksgiving! We<sq>re releasing our 400 intro Java course lectures/assignments for free."
            }, 
            "id": "daew5cr"
        }, 
        {
            "body": {
                "answer": "<p>I was wondering where I saw this before, and then I stumbled on crappy birds again<colon> https<colon>//www.ktbyte.com/java-tutorial/game-walkthroughs</p>", 
                "question": "Happy Thanksgiving! We<sq>re releasing our 400 intro Java course lectures/assignments for free."
            }, 
            "id": "daeby4i"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this! Much appreciated! </p>", 
                "question": "Happy Thanksgiving! We<sq>re releasing our 400 intro Java course lectures/assignments for free."
            }, 
            "id": "daedpk1"
        }, 
        {
            "body": {
                "answer": "<p>Yes!</p>", 
                "question": "I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc. Is there interest for something like this?"
            }, 
            "id": "cbd9niu"
        }, 
        {
            "body": {
                "answer": "<p>I enjoyed your previous videos so I<sq>d love to see something like that. Is it going to be Rails? I hope its Ruby on Rails.</p>", 
                "question": "I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc. Is there interest for something like this?"
            }, 
            "id": "cbd9mi5"
        }, 
        {
            "body": {
                "answer": "<p>I would definitely watch, but please make VODs as well for those of us in other time zones / busy work schedules. Thanks</p>", 
                "question": "I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc. Is there interest for something like this?"
            }, 
            "id": "cbdb427"
        }, 
        {
            "body": {
                "answer": "<p>Yes, please</p>", 
                "question": "I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc. Is there interest for something like this?"
            }, 
            "id": "cbd9qfb"
        }, 
        {
            "body": {
                "answer": "<p>Yes please <colon>D</p>", 
                "question": "Anyone interested in a sublime text editor cheat sheet?"
            }, 
            "id": "dfdt4zg"
        }, 
        {
            "body": {
                "answer": "<p>Absolutely! It<sq>s one thing there doesn<sq>t seem to be one of. <br>If theirs any modules you have installed and found to be particularly useful, it may be worth compiling those in to a list as well<br><br>Look forward to seeing it! <br><br>Edit<colon> spelling</p>", 
                "question": "Anyone interested in a sublime text editor cheat sheet?"
            }, 
            "id": "dfdw40g"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t wanna be a downer, but put your energy elsewhere. Sublime cheatsheets have been done to the umpteenth degree<colon><br><br>https<colon>//www.google.com/search?q=sublime+cheat+sheet&espv=2&source=lnms&tbm=isch&sa=X&ved=0ahUKEwiRh5KG8_HSAhUH9mMKHdxaD4IQ_AUICCgB&biw=1920&bih=960<br><br>plus there<sq>s this app that does cheatsheets for EVERY app<colon> https<colon>//www.mediaatelier.com/CheatSheet/</p>", 
                "question": "Anyone interested in a sublime text editor cheat sheet?"
            }, 
            "id": "dfe5cbr"
        }, 
        {
            "body": {
                "answer": "<p>Yes please!!<br>It<sq>s about time someone actually did this</p>", 
                "question": "Anyone interested in a sublime text editor cheat sheet?"
            }, 
            "id": "dfduxcp"
        }, 
        {
            "body": {
                "answer": "<p>_-</p>", 
                "question": "You should know Networking. Here<sq>s a YouTube playlist by Eli the Computer guy who will stuff you full of essential and practical networking knowledge to your hearts content"
            }, 
            "id": "co5blx5"
        }, 
        {
            "body": {
                "answer": "<p>Wow, not a single child comment<br><br>Edit> welp, not anymore</p>", 
                "question": "You should know Networking. Here<sq>s a YouTube playlist by Eli the Computer guy who will stuff you full of essential and practical networking knowledge to your hearts content"
            }, 
            "id": "co5d0df"
        }, 
        {
            "body": {
                "answer": "<p>Love him! So accessible and knowledgeable. </p>", 
                "question": "You should know Networking. Here<sq>s a YouTube playlist by Eli the Computer guy who will stuff you full of essential and practical networking knowledge to your hearts content"
            }, 
            "id": "co4zleb"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m taking a class at my local community college and my teacher has us watch these videos all the time. Very helpful!</p>", 
                "question": "You should know Networking. Here<sq>s a YouTube playlist by Eli the Computer guy who will stuff you full of essential and practical networking knowledge to your hearts content"
            }, 
            "id": "co54j4j"
        }, 
        {
            "body": {
                "answer": "<p>Never any C++ courses <colon>(<br></p>", 
                "question": "Here<sq>s a list of 154 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2015)"
            }, 
            "id": "crupw7a"
        }, 
        {
            "body": {
                "answer": "<p>STRONGLY recommend CS50x for anybody that is a beginner or intermediate student. <br><br>The lectures are amazing. It made me re-evaluate my experience at a community college. I have never had a professor that taught with such enthusiasm and that was so knowledgeable and involved. <br><br>The course is about 80<percent> C but also teaches some PHP and MYSQL, as well as HTML, CSS, and teaches how to use APIs.  </p>", 
                "question": "Here<sq>s a list of 154 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2015)"
            }, 
            "id": "crv00io"
        }, 
        {
            "body": {
                "answer": "<p>INF201x<colon> Windows PowerShell Fundamentals<br><br><br>Level<colon>  Introductory<br><br>Length<colon>  5 weeks<br><br>Effort<colon>  2 - 4 hours/week<br><br>Subject<colon>  Computer Science<br><br>Institution<colon>  Microsoft<br><br>Languages<colon>  English<br><br>Video Transcripts<colon>  English<br><br>Type<colon>  Professional Education, Self-paced<br><br>Price<colon>  **$200**<br><br>MFW I thought it<sq>s FREE <colon>/</p>", 
                "question": "Here<sq>s a list of 154 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2015)"
            }, 
            "id": "cruyosw"
        }, 
        {
            "body": {
                "answer": "<p>This is very helpful. Thank you.</p>", 
                "question": "Here<sq>s a list of 154 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2015)"
            }, 
            "id": "cruowun"
        }, 
        {
            "body": {
                "answer": "<p>Is something like a Udacity <dq>nanodegree<dq> actually credible? An iOS course starts soon and offers a nanodegree and a <dq>portfolio of projects<dq> but I<sq>m not sure if that would be worth it.</p>", 
                "question": "Here<sq>s a list of 135 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2015)"
            }, 
            "id": "cp4igoc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 135 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2015)"
            }, 
            "id": "cp4gfss"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve completed all of them</p>", 
                "question": "Here<sq>s a list of 135 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2015)"
            }, 
            "id": "cp4sut8"
        }, 
        {
            "body": {
                "answer": "<p>Has anyone taken to MongoDB course? What did you think about it?</p>", 
                "question": "Here<sq>s a list of 135 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2015)"
            }, 
            "id": "cp4m1u6"
        }, 
        {
            "body": {
                "answer": "<p>Dude. You ARE a programmer. You know how to create a functional application on a computer, through a combination of your OWN code and by utilizing the resources available to you.<br><br>You are an architect that has put the pieces together. You are a builder. You are a programmer.</p>", 
                "question": "How I learned to develop Android apps in less than a year"
            }, 
            "id": "cdtikcw"
        }, 
        {
            "body": {
                "answer": "<p>Good shit man. Just wondering - how do you get ideas to start an app? I feel like starting is probably the most difficult thing to do.</p>", 
                "question": "How I learned to develop Android apps in less than a year"
            }, 
            "id": "cdtho6u"
        }, 
        {
            "body": {
                "answer": "<p>>  I coded while my League of Legends game was loading. Five minutes here and five minutes there, it adds up.<br><br>Louis L<sq>Amour said something similar about reading books. On the bus? Read. In line at the bank? Read.<br><br>That approach doesn<sq>t work for me. I have to get my head into a project, and once it<sq>s in I don<sq>t want to take it out. But for those whose brains can work that way it<sq>s a great idea.</p>", 
                "question": "How I learned to develop Android apps in less than a year"
            }, 
            "id": "cdtk20k"
        }, 
        {
            "body": {
                "answer": "<p>I think you<sq>ve inspired many folks to at least give serious programming a try.</p>", 
                "question": "How I learned to develop Android apps in less than a year"
            }, 
            "id": "cdtgs22"
        }, 
        {
            "body": {
                "answer": "<p>As someone who has actually done interview loops with various companies (Google included)<br><br>1) data structures and algorithms. <br><br>you need to know this. if you don<sq>t know binary trees, don<sq>t know associative arrays, etc, and aren<sq>t familiar with big O notation you need to study up on these. They<sq>re critical.<br><br>2) know how computers work<br><br>I got asked a bunch of seemingly random questions about how computers work under the hood. It helps to fundamentally understand computer architecture.<br><br>3) practice answering questions on a white board<br><br>Critical to getting used to technical interview formats. Focus on problem solving, explaining your thought process. Be comfortable explaining why you<sq>re doing something. Write code on the board. Explain your assumptions and validate that they are correct. Keep an eye out for mistakes. Be thorough and methodical. Ask questions when you don<sq>t know something, particularly when the question is vague. <br><br>4) Logic question<br><br>I<sq>ve seen them pop up here and there. Get used to answering questions like <dq>why are manhole covers round?<dq> or <dq>estimate the number of gas stations in the US<dq>. That sort of thing.<br><br><br>If you want specific examples you should probably google it. There<sq>s plenty of information out there. Keep in mind that people at virtually all tech companies know that this is the case and will avoid asking questions that are out in the wild.</p>", 
                "question": "[Interview Help] Began coding 3 years ago and yesterday Google asked me to interview. I<sq>m completely self-taught and this sub has helped me more than any other resource to get to where I am but I need your help one more time."
            }, 
            "id": "cvqex6h"
        }, 
        {
            "body": {
                "answer": "<p>How did you get in three years from beginner to applications architect and a team leader?<br><br>As for the interview, prepare to explain thoroughly why you didn<sq>t take CS and why that is a strength instead of a problem.</p>", 
                "question": "[Interview Help] Began coding 3 years ago and yesterday Google asked me to interview. I<sq>m completely self-taught and this sub has helped me more than any other resource to get to where I am but I need your help one more time."
            }, 
            "id": "cvqj292"
        }, 
        {
            "body": {
                "answer": "<p>Here is a general guideline that Google provided for my interview<colon><br><br>https<colon>//docs.google.com/document/d/1hxnrh7nm24IqtFXsSQqwv4Arx4cxlD9t29cfpKQRRx8/edit<br><br>To expound on this further, Google will ask a lot of deep conceptual problems, and will definitely ask coding questions. These questions are not just simple FizzBuzz questions, they will be puzzles that will require you to implement certain algorithms, and also produce the result in an efficient or specific efficiency. <br><br>I<sq>m not sure of other people, but they typically do not ask you questions you can just find anywhere. I studied <dq>Cracking the Coding Interview<dq>, and it<sq>s great and all, but the book only prepares you for the concepts. They expect you to be able to exercise those concepts.<br><br>Here is a few more things that will help you that was offered to me to study<colon><br><br>https<colon>//projecteuler.net/<br><br>https<colon>//code.google.com/codejam/contests.html<br><br>http<colon>//www.topcoder.com/<br><br>Not to be pessimistic, but this isn<sq>t something you can learn in a month. Google interviews are usually multi-stage interviews.<br><br>First, your phone interview (basic CS questions, then code without an IDE in Google Docs) *The coding is timed, btw. Meaning your thinking time is very limited*<br><br>Second, your in person interview. Here you code on the whiteboard.<br><br>Lastly, probably a panel interview to see if they like you.<br><br>Good luck.</p>", 
                "question": "[Interview Help] Began coding 3 years ago and yesterday Google asked me to interview. I<sq>m completely self-taught and this sub has helped me more than any other resource to get to where I am but I need your help one more time."
            }, 
            "id": "cvqjvrd"
        }, 
        {
            "body": {
                "answer": "<p>Good luck, OP. </p>", 
                "question": "[Interview Help] Began coding 3 years ago and yesterday Google asked me to interview. I<sq>m completely self-taught and this sub has helped me more than any other resource to get to where I am but I need your help one more time."
            }, 
            "id": "cvqhg9l"
        }, 
        {
            "body": {
                "answer": "<p>Codecademy doesn<sq>t seem to encourage repeating courses. It doesn<sq>t prevent you from doing it, but it also doesn<sq>t prompt you to do it, the way Khan Academy keeps giving you problems of the same type until you have mastered them. Basically once you have completed a project, you get the badge and you<sq>re done. I think a kind of <dq>drill mode<dq> where you work on small blocks of code (e.g., write a loop to print the keys from this collection) would be useful for practice, and for getting more fluent with syntax. What do you think?</p>", 
                "question": "I<sq>m Zach Sims CEO of Codecademy. We teach people the skills they need to find jobs."
            }, 
            "id": "crvtj1l"
        }, 
        {
            "body": {
                "answer": "<p>I was recently told by an employer that they wouldn<sq>t consider me for employment because I appear to be self taught. How would you handle that situation and do you think that is normal?</p>", 
                "question": "I<sq>m Zach Sims CEO of Codecademy. We teach people the skills they need to find jobs."
            }, 
            "id": "crvta5g"
        }, 
        {
            "body": {
                "answer": "<p>Why did you choose NYC instead of staying in the Valley?<br><br>Also, why can you not reset a whole unit? I<sq>ve found myself starting a language, getting pretty far, forgetting about it, and then getting lost when trying to jump back. </p>", 
                "question": "I<sq>m Zach Sims CEO of Codecademy. We teach people the skills they need to find jobs."
            }, 
            "id": "crvt7uc"
        }, 
        {
            "body": {
                "answer": "<p>Codeacademy is awesome!  Thanks for what you do!  Are there plans to expand to other object-oriented languages, like C++, C#, JAVA, etc??  That would be awesome.</p>", 
                "question": "I<sq>m Zach Sims CEO of Codecademy. We teach people the skills they need to find jobs."
            }, 
            "id": "crw3vwf"
        }, 
        {
            "body": {
                "answer": "<p>I feel that the 476 Euler problems are cheating. They<sq>re more math than programming imo, and I personally didn<sq>t get past more than 5 of them.</p>", 
                "question": "1000+ Beginner Programming Projects (x-post /r/programming)"
            }, 
            "id": "cit7fl3"
        }, 
        {
            "body": {
                "answer": "<p>/r/dailyprogrammer</p>", 
                "question": "1000+ Beginner Programming Projects (x-post /r/programming)"
            }, 
            "id": "cit098p"
        }, 
        {
            "body": {
                "answer": "<p>Just a small note<colon> it<sq>s not rosettastone.org, it<sq>s rosettacode.org. the link is correct but the text for it isnt.</p>", 
                "question": "1000+ Beginner Programming Projects (x-post /r/programming)"
            }, 
            "id": "cit24x7"
        }, 
        {
            "body": {
                "answer": "<p>Simulator games of your favorite sports are by far the most fun, many approaches, lots of tweaking and re-creating approaches.<br><br>/Unless of course you are a programmer for Madden, your programming is bad, and you should feel bad.</p>", 
                "question": "1000+ Beginner Programming Projects (x-post /r/programming)"
            }, 
            "id": "cit5b8j"
        }, 
        {
            "body": {
                "answer": "<p>Is this just free right now or will it always be free</p>", 
                "question": "#JavaScript 30 - Build 30 things in 30 days with 30 tutorials"
            }, 
            "id": "daybhuu"
        }, 
        {
            "body": {
                "answer": "<p>And the Reddit hug of death strikes again..</p>", 
                "question": "#JavaScript 30 - Build 30 things in 30 days with 30 tutorials"
            }, 
            "id": "daygdtq"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, I<sq>ll start tomorrow. ^ ^</p>", 
                "question": "#JavaScript 30 - Build 30 things in 30 days with 30 tutorials"
            }, 
            "id": "daybsv8"
        }, 
        {
            "body": {
                "answer": "<p>All without 30 libraries! Amazing!</p>", 
                "question": "#JavaScript 30 - Build 30 things in 30 days with 30 tutorials"
            }, 
            "id": "dayrjlz"
        }, 
        {
            "body": {
                "answer": "<p>These as well <colon>)<br><br>[http<colon>//www.watchpeoplecode.com/](http<colon>//www.watchpeoplecode.com/)<br><br>[/r/watchpeoplecode](http<colon>//www.reddit.com/r/watchpeoplecode)<br><br>[http<colon>//www.twitch.tv/directory/game/programming](http<colon>//www.twitch.tv/directory/game/programming)<br><br>[http<colon>//www.twitch.tv/directory/game/Game<percent>20Development](http<colon>//www.twitch.tv/directory/game/Game<percent>20Development)<br><br>Edit<colon> Added more</p>", 
                "question": "Really smart site for people who just want to watch coders code"
            }, 
            "id": "csn0pac"
        }, 
        {
            "body": {
                "answer": "<p>Ooh I<sq>m signing up. Who wants to watch me alt-tab between Webstorm, my terminal and Reddit all day?</p>", 
                "question": "Really smart site for people who just want to watch coders code"
            }, 
            "id": "csnbumv"
        }, 
        {
            "body": {
                "answer": "<p>Check out DevWars too! It<sq>s a live game show where you watch 2 teams of 3 battle each other to create the best website in 60 minutes. Each player is in control of their own language. All code is realtime and you can literally watch the website grow overtime! Very educational and fun, recommend you come watch http<colon>//www.twitch.tv/DevWars</p>", 
                "question": "Really smart site for people who just want to watch coders code"
            }, 
            "id": "csndvm2"
        }, 
        {
            "body": {
                "answer": "<p>Points to you, for introducing me to this awesome site! Thank you <colon>)</p>", 
                "question": "Really smart site for people who just want to watch coders code"
            }, 
            "id": "csmzb3n"
        }, 
        {
            "body": {
                "answer": "<p>Can someonme eli5 the diff between front end and back end?</p>", 
                "question": "Here<sq>s a list of 430+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2016)"
            }, 
            "id": "d750o9w"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m looking through them a couple courses are free completely but unless you pay you get no certificate! Thank you though! This seems like a great way to get a foundation in programming!!</p>", 
                "question": "Here<sq>s a list of 430+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2016)"
            }, 
            "id": "d74x9yp"
        }, 
        {
            "body": {
                "answer": "<p>I can also recommend [Introduction to Functional Programming in OCaml](https<colon>//www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/about) which does not appear to be on your list.</p>", 
                "question": "Here<sq>s a list of 430+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2016)"
            }, 
            "id": "d75b1uw"
        }, 
        {
            "body": {
                "answer": "<p>Thanks. Learning to become a good programmer surely is a bottomless pit. </p>", 
                "question": "Here<sq>s a list of 430+ free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2016)"
            }, 
            "id": "d753xpn"
        }, 
        {
            "body": {
                "answer": "<p>hey man, do you have a donation page or button? I was going to order a hard-copy of the book, but the shipping to me was more than the book itself. love your stuff, thanks for being so generous <colon>)</p>", 
                "question": "Automate the Boring Stuff with Python<colon> A free beginners book from the author of Invent with Python"
            }, 
            "id": "cqu23hd"
        }, 
        {
            "body": {
                "answer": "<p>In my very humble and amateur opinion, Mr Al Sewigart writes the most accessible and educational Python books available on the Internet. I<sq>ll be sure to download this when I get the chance, and I strongly encourage others to do the same (and check out his other stuff if you haven<sq>t already).<br><br>I feel that I only really <dq>got<dq> programming after working through his book on game design with Python. He continues to push out very high quality content.</p>", 
                "question": "Automate the Boring Stuff with Python<colon> A free beginners book from the author of Invent with Python"
            }, 
            "id": "cqu6t44"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, haven<sq>t started with Python yet, bookmarking links, hopefully will start soon <colon>)</p>", 
                "question": "Automate the Boring Stuff with Python<colon> A free beginners book from the author of Invent with Python"
            }, 
            "id": "cqu0jec"
        }, 
        {
            "body": {
                "answer": "<p>Could one use Python to automate some QA processes of a webpage? I<sq>m in sales/account management but I<sq>m always speaking with our developers and they don<sq>t test using automated tools. Something i think would help tremendously. I<sq>ve gotten a good way through learn Python the hard way and even pseudo code with the team at work from time to time. If this is a possibility it might be a nice stretch project for me. </p>", 
                "question": "Automate the Boring Stuff with Python<colon> A free beginners book from the author of Invent with Python"
            }, 
            "id": "cqu2pc0"
        }, 
        {
            "body": {
                "answer": "<p>PSA to anyone thinking of taking [Computer Science 101](https<colon>//www.coursera.org/course/cs101)<colon> roughly 50<percent> of the exercises for the class are not functional. All of the lectures work to my knowledge, and some of the exercises do work properly, but I was disappointed when I found out that not all of the content is available at the moment. </p>", 
                "question": "Here<sq>s a list of 49 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2014)"
            }, 
            "id": "cejyvca"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s one I<sq>ll be starting this month that I think sounds pretty interesting from edX<colon><br><br>Embedded Systems - Shape The World  <br>Starts<colon> 22 Jan 2014  <br>Duration<colon> 15 weeks  <br>Estimated Effort<colon> 10 hours per week  <br>Language<colon> C or C++ (as far as I can tell)  <br><br>https<colon>//www.edx.org/course/utaustinx/utaustinx-ut-6-01x-embedded-systems-1172</p>", 
                "question": "Here<sq>s a list of 49 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2014)"
            }, 
            "id": "cejoxn3"
        }, 
        {
            "body": {
                "answer": "<p>Well made list! Thanks for all of these, definitely going to follow some of these courses. Udacity has got a lot of courses, and the best is that they<sq>re free(Well, most of them. The ones you pay for will give you a verified certificate.). Thanks!</p>", 
                "question": "Here<sq>s a list of 49 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2014)"
            }, 
            "id": "cejneou"
        }, 
        {
            "body": {
                "answer": "<p>Any chance that someone has compiled this same list with a column for the programming language(s) the class is taught in? I<sq>m really struggling to find a decent intermediate python class.</p>", 
                "question": "Here<sq>s a list of 49 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Jan 2014)"
            }, 
            "id": "cejnofd"
        }, 
        {
            "body": {
                "answer": "<p>This is fantastic! Plus, what a great video explaining your process. Iterating through several versions of improved code, really sticking to it, learning the pros and cons of various approaches. Wow, you are everything we tell people they can be after a year and a half but never really expect them to actually achieve!<br><br>Is there a secret to your drive and stick-to-it-tiveness that we can share with others in the future?</p>", 
                "question": "I been learning programming for the last 1 and a half years and I finally reached my initial goal<colon> Creating a Minecraft Clone. Thank you /r/learnprogramming!"
            }, 
            "id": "d9hdzra"
        }, 
        {
            "body": {
                "answer": "<p>This is really impressive! Well done!</p>", 
                "question": "I been learning programming for the last 1 and a half years and I finally reached my initial goal<colon> Creating a Minecraft Clone. Thank you /r/learnprogramming!"
            }, 
            "id": "d9haega"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not gonna lie, I really needed to see something like this today. I<sq>m pursuing my degree in programming and have been getting rather burnt out lately. Needed a reminder of why I was pursuing this skill to begin with since I<sq>ve been stressing out over school, work, and finances.<br><br>I really dig the approach you took on the video. Explaining not only the iterations but the errors you ran into really helps to grasp what<sq>s going on. And seeing how it progressed over time is impressive!<br><br>As a side note, if your videos are having those artifacts, make sure that it has a high enough bitrate at capture AND rendering for hitting your desired FPS. Also make sure to double check what YouTube<sq>s limits are so you don<sq>t have to worry about downgrading it after rendering it a higher rate.</p>", 
                "question": "I been learning programming for the last 1 and a half years and I finally reached my initial goal<colon> Creating a Minecraft Clone. Thank you /r/learnprogramming!"
            }, 
            "id": "d9hgwgs"
        }, 
        {
            "body": {
                "answer": "<p>Minecraft was itself started like this - as a clone of an existing game just to see if he could do it.</p>", 
                "question": "I been learning programming for the last 1 and a half years and I finally reached my initial goal<colon> Creating a Minecraft Clone. Thank you /r/learnprogramming!"
            }, 
            "id": "d9hdcbd"
        }, 
        {
            "body": {
                "answer": "<p>Videos in this thread<colon> [Watch Playlist &#9654;](http<colon>//subtletv.com/_r623vu4?feature=playlist)<br><br>VIDEO|COMMENT<br>-|-<br>[Functional programming design patterns by Scott Wlaschin](http<colon>//www.youtube.com/watch?v=E8I19uA-wGY)|[+32](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfjixdk?context=10#dfjixdk) - Functional Design Patterns<br>[Insert-sort with Romanian folk dance.flv](http<colon>//www.youtube.com/watch?v=EdIKIf9mHk0)|[+17](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfjqr5u?context=10#dfjqr5u) - Sorting Algorithms as a Hungarian Dance routine. Not really something you can listen to on a commute but incredibly helpful at seeing what each sorting algorithm does.<br>(1) [The Game Boy, a hardware autopsy - Part 1<colon> the CPU [PART 2 OUT NOW!]](http<colon>//www.youtube.com/watch?v=RZUDEaLa5Nw) (2) [The Game Boy, a hardware autopsy - Part 2<colon> memory mapping](http<colon>//www.youtube.com/watch?v=ecTQVa42sJc)|[+8](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfjzbfc?context=10#dfjzbfc) - The Game Boy Autopsy, Part 1<colon> the CPU  The Game Boy Autopsy, Part 2<colon> memory mapping  This little series helped me with understanding low level basics, especially the memory mapping part. Intriguing to watch and if you have no clue what<sq>s happening be...<br>[Fisher-Yates Shuffle Modern Algorithm JavaScript Programming Tutorial](http<colon>//www.youtube.com/watch?v=tLxBwSL3lPQ)|[+4](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfjr64c?context=10#dfjr64c) - Fisher Yates Shuffle This actually has a real world application. You would use this if you wanted to , for example, create any kind of game that needs shufflling.<br>[EXTRA BITS<colon> More Silicon Physics - Computerphile](http<colon>//www.youtube.com/watch?v=gLF9z4dGKnw)|[+4](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfjwatx?context=10#dfjwatx) - I discovered a channel called Computerphile recently. Man, they are not all about programming, but about computers and technologies. Very interesting explanations and topics.  Here is one of my favorite videos<br>(1) [<dq>Uncle<dq> Bob Martin](http<colon>//www.youtube.com/watch?v=QHnLmvDxGTY) (2) [OOP 2015 Keynote - Robert C. Martin (<dq>Uncle Bob<dq>)<colon> Agility and Architecture](http<colon>//www.youtube.com/watch?v=0oGpWmS0aYQ&t=1766s)|[+2](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfk3n80?context=10#dfk3n80) - SOLID principles by Uncle Bob Agility and Architecture By Uncle Bib<br>[Bubble Sort 1- Algorithm](http<colon>//www.youtube.com/watch?v=gaC4MKqn41g)|[+2](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfk3vhm?context=10#dfk3vhm) - I like Kevin Drumm<sq>s explaination of programming concepts. Here<sq>s an ELI5 explanation of various sorting algorithms.<br>(1) [ELI5 Python - Lists - rmotr.com](http<colon>//www.youtube.com/watch?v=p4ML9YZty-E) (2) [ELI5 Python - List Comprehensions - rmotr.com](http<colon>//www.youtube.com/watch?v=RIw-_zfXAlg&t=8s)|[+1](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfk2i5m?context=10#dfk2i5m) - Introduction to Lists using Python List comprehension part 1<br>[Designing Delightful Databases](http<colon>//www.youtube.com/watch?v=SkoMsW0bRpE)|[+1](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfk6pfg?context=10#dfk6pfg) - Designing Delightful Databases<br>[Lecture 12.3<colon> The Amazing Alan Turing - Richard Buckland (extension lecture) UNSW 2008](http<colon>//www.youtube.com/watch?v=2bLCjMA0YlE)|[+1](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfkzilk?context=10#dfkzilk) - http<colon>//www.youtube.com/watch?v=2bLCjMA0YlE<br>[C# Passing Variables Between Scripts Explained](http<colon>//www.youtube.com/watch?v=0j1UQPDGLcs)|[0](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/_/dfkawkh?context=10#dfkawkh) - I don<sq>t know if this is <dq>high level<dq> per say but here<sq>s one that talks about passing variables through scripts by using a baseball metaphor.<br>I<sq>m a bot working hard to help Redditors find related videos to watch. I<sq>ll keep this updated as long as I can.<br>***<br>[Play All](http<colon>//subtletv.com/_r623vu4?feature=playlist&ftrlnk=1) | [Info](https<colon>//np.reddit.com/r/SubtleTV/wiki/mentioned_videos) | Get me on [Chrome](https<colon>//chrome.google.com/webstore/detail/mentioned-videos-for-redd/fiimkmdalmgffhibfdjnhljpnigcmohf) / [Firefox](https<colon>//addons.mozilla.org/en-US/firefox/addon/mentioned-videos-for-reddit)</p>", 
                "question": "Let<sq>s compile a list of ELI5 youtube videos explaining concepts and technologies"
            }, 
            "id": "dfjr6l7"
        }, 
        {
            "body": {
                "answer": "<p>[Functional Design Patterns](https<colon>//www.youtube.com/watch?v=E8I19uA-wGY)</p>", 
                "question": "Let<sq>s compile a list of ELI5 youtube videos explaining concepts and technologies"
            }, 
            "id": "dfjixdk"
        }, 
        {
            "body": {
                "answer": "<p>[Sorting Algorithms as a Hungarian Dance routine.](https<colon>//www.youtube.com/watch?v=EdIKIf9mHk0&list=PLOmdoKois7_FK-ySGwHBkltzB11snW7KQ) Not really something you can listen to on a commute but incredibly helpful at seeing what each sorting algorithm does.</p>", 
                "question": "Let<sq>s compile a list of ELI5 youtube videos explaining concepts and technologies"
            }, 
            "id": "dfjqr5u"
        }, 
        {
            "body": {
                "answer": "<p>[Curated list of CS resources](https<colon>//www.reddit.com/r/learnprogramming/comments/623vu4/lets_compile_a_list_of_eli5_youtube_videos/?st=j0un9ub0&sh=d406ddc4)<br><br>^^^^^^sorry</p>", 
                "question": "Let<sq>s compile a list of ELI5 youtube videos explaining concepts and technologies"
            }, 
            "id": "dfjtr9f"
        }, 
        {
            "body": {
                "answer": "<p>If you want to suggest that, [Meta Stack Overflow](https<colon>//meta.stackoverflow.com/) is probably a far better place than here - they can actually consider your suggestion there, whereas on Reddit we have no influence over SO.<br></p>", 
                "question": "[ShowerThought] StackOverflow should allow us to mark answers as <dq>deprecated<dq> <dq>no longer works<dq> so we don<sq>t have to sift through the comments."
            }, 
            "id": "d4nmkje"
        }, 
        {
            "body": {
                "answer": "<p>I think the idea of <dq>no longer works<dq> isn<sq>t right.  Answers just need to have the right version associated with it.  People get stuck writing code with old pieces of crap and still need to be able to find answers online.</p>", 
                "question": "[ShowerThought] StackOverflow should allow us to mark answers as <dq>deprecated<dq> <dq>no longer works<dq> so we don<sq>t have to sift through the comments."
            }, 
            "id": "d4np6tb"
        }, 
        {
            "body": {
                "answer": "<p>> StackOverflow should allow us to mark answers as <dq>deprecated<dq> <dq>no longer works<dq> so we don<sq>t have to sift through the comments.<br><br>If an answer no longer works, downvote it, submit an edit to the existing answer, or post a new answer altogether (explaining why the previous answer no longer works). The idea is that the community is in charge of correcting errors like these, not some central authority. <br><br>The community is the technical expert, not the mods.<br><br>> How the fuck does it have 127 upvotes if it<sq>s <sq>not constructive<sq> you idiot.<br><br>The standards of the community change over time -- things that were tolerated before may not necessarily be tolerated now.<br><br>But in any case, for more history on why StackOverflow evolved to discourage subjective questions, see...<br><br>- http<colon>//blog.stackoverflow.com/2010/09/good-subjective-bad-subjective/<br>- http<colon>//meta.stackexchange.com/questions/167516/how-can-i-encourage-stack-overflow-to-rein-in-the-subjective-vigilantes<br><br>Basically, StackOverflow had a hypothesis that allowing more subjective questions on any sort of forum will cause it to degrade over time. To test this hypothesis, StackOverflow once tried making a offshoot site specifically for subjective questions that would be considered off-topic on StackOverflow. That site became absolutely shit, so based on that evidence, and in the interests of self preservation, StackOverflow took a harder stance on subjective questions. <br><br>StackOverflow also acknowledges that while being subjective and being a good question are not mutually exclusive, that they would just simply not try and answer subjective questions, good or bad, and let other websites try and take up the challenge of doing so (for example, see Quora).<br><br>Heavy moderation, and high standards, as it turns out, is a very good way to help a community and grow survive long-term. (For further examples of this, see /r/askhistorians and /r/askscience -- they have a very strong stance on moderation, so consequently, their content is considered unusually good). And unfortunately, you sometimes have to break a few eggs in order to stay consistent with your rules and policies.<br><br>Smaller communities (like /r/learnprogramming) can afford to be more relaxed because we have an incredibly tiny amount of visitors and new questions being asked -- we get maybe only about 10-ish shitty or boring questions a day, which is manageable. However, larger communities, like StackOverflow get a ton of shitty questions (several thousand a day, maybe?)<br><br>The moderation process is therefore designed to target those low-quality (but not very visible) questions and answers, and so may unfortunately sometimes come into friction with pre-existing content that was <dq>grandfathered in<dq> or content that are <dq>on the edge<dq>, as you<sq>ve observed.<br><br>Some people, it seems, are also just not very good at asking precise questions or at showing their due diligence. So, while they might have a legitimate question, they often phrase it in a subpar manner and so get a very negative experience on StackOverflow. And to be fair, effective writing _is_ a skill that often needs to be taught -- many colleges make English comp a mandatory class for freshmen, for example (even though they were _supposed_ to have been taught how to write for at least 10-12 years...). I<sq>m not really sure how to solve _this_ problem other then to try and spend more time communicating what makes a good question and spend time just trying to promote literacy in the population at large.<br><br>tl;dr<colon> answering questions is surprisingly hard to do at scale. To try and solve this problem, StackOverflow took a somewhat stricter approach. It<sq>s not perfect, but it _is_ battle-tested, has been iterated on multiple times, and seems to be working out pretty effectively thus far.</p>", 
                "question": "[ShowerThought] StackOverflow should allow us to mark answers as <dq>deprecated<dq> <dq>no longer works<dq> so we don<sq>t have to sift through the comments."
            }, 
            "id": "d4nn5hu"
        }, 
        {
            "body": {
                "answer": "<p>people can edit other people<sq>s answers, you are free to add <dq>this works with versions x,y,z, only<dq> to an outdated answer.</p>", 
                "question": "[ShowerThought] StackOverflow should allow us to mark answers as <dq>deprecated<dq> <dq>no longer works<dq> so we don<sq>t have to sift through the comments."
            }, 
            "id": "d4nmri7"
        }, 
        {
            "body": {
                "answer": "<p>Reminded me [this](http<colon>//i.imgur.com/dTsx9XV.jpg).</p>", 
                "question": "Hackr.io - A huge collection of the best coding tutorials online."
            }, 
            "id": "ct2pqvq"
        }, 
        {
            "body": {
                "answer": "<p>...but where is the tutorial for ArnoldC?</p>", 
                "question": "Hackr.io - A huge collection of the best coding tutorials online."
            }, 
            "id": "ct2l18u"
        }, 
        {
            "body": {
                "answer": "<p>Looked at the section for C++, the first (and most upvoted) site is learncpp.com, which is listed in this sub<sq>s wiki as a [discouraged resource](https<colon>//www.reddit.com/r/learnprogramming/wiki/index#wiki_discouraged_resources).</p>", 
                "question": "Hackr.io - A huge collection of the best coding tutorials online."
            }, 
            "id": "ct2kki8"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Hackr.io - A huge collection of the best coding tutorials online."
            }, 
            "id": "ct2ray2"
        }, 
        {
            "body": {
                "answer": "<p>If you admit your mistakes, understand that you messed up and are honest about it, managers are generally less likely to give you a big talking to - what more could they possibly say that you hadn<sq>t already? <colon>)<br><br>As an engineer himself do you honestly think he hasn<sq>t made the same mistakes as a junior? We<sq>ve all been there <colon>)<br><br>However if it was to come from someone else when you slipped it under the carpet, then maybe the reaction would be different.</p>", 
                "question": "I fucked up"
            }, 
            "id": "cwec6bg"
        }, 
        {
            "body": {
                "answer": "<p>There is a double lesson here. For developers - when you discover a mistake, even a serious one affecting production, be swift and honest about it. If you get serious flak, then you<sq>ve learned that you<sq>re working under the wrong people.<br><br><br>For managers - you want to make it so that your developers feel they can come to you with such mistakes. Trust is always two-way - if you want to be able to trust them, they need to be able to trust you.</p>", 
                "question": "I fucked up"
            }, 
            "id": "cwef3ft"
        }, 
        {
            "body": {
                "answer": "<p>It was such a monumental fuckup that I dont even remember what it was. I like these people.</p>", 
                "question": "I fucked up"
            }, 
            "id": "cwefpzg"
        }, 
        {
            "body": {
                "answer": "<p>Good for him. I<sq>ve found it valuable as a manager (and I<sq>m sure even more so as a CTO) to treat my employees as my customers. <br><br>Secondly wasting time bitching about how bad some one fucked up is a waste when that time can be spent trying to solve the problem. Anyone in leadership who doesn<sq>t understand this, shouldn<sq>t be in leadership.</p>", 
                "question": "I fucked up"
            }, 
            "id": "cwegiw7"
        }, 
        {
            "body": {
                "answer": "<p>[FunFunFunction](https<colon>//m.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q) is a good one too <colon>)</p>", 
                "question": "What are your favorite youtube channel for general computer science related stuff?"
            }, 
            "id": "d5swk4s"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m still learning, but [CS50<sq>s](https<colon>//www.youtube.com/user/cs50tv) 2015 lectures have been extremely helpful. </p>", 
                "question": "What are your favorite youtube channel for general computer science related stuff?"
            }, 
            "id": "d5t8d1p"
        }, 
        {
            "body": {
                "answer": "<p>[Coding Rainbow](https<colon>//www.youtube.com/user/shiffman/) if you wanna learn some javascript. Nice lengthy tutorials</p>", 
                "question": "What are your favorite youtube channel for general computer science related stuff?"
            }, 
            "id": "d5t7qtj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll add [Bisqwit](https<colon>//www.youtube.com/channel/UCKTehwyGCKF-b2wo0RKwrcg) to witness some programming wizardry he<sq>s able to do. Lately he also started to do some video tutorials in English!<br><br>I<sq>ll also mention O<sq>Reilly<sq>s channel, specially after OSCON, they usually post very interesting talks.</p>", 
                "question": "What are your favorite youtube channel for general computer science related stuff?"
            }, 
            "id": "d5t7h4d"
        }, 
        {
            "body": {
                "answer": "<p>Building products with javascript (there is a subreddit too. also not for beginners) -  https<colon>//www.youtube.com/playlist?list=PL_gX69xPLi-ljVdNhspjZUlPmBNjRgD2X<br><br>handmade hero<colon> a game made from scratch (a year long project that<sq>s still going on)  https<colon>//www.youtube.com/user/handmadeheroarchive</p>", 
                "question": "I want to watch someone creating a full scale application so I can learn to go beyond the fundamentals of programming. I want to learn the process by which someone breaks down problems and translates them into good code. How do I find these types of videos?"
            }, 
            "id": "d9k0qft"
        }, 
        {
            "body": {
                "answer": "<p>Check out Handmade Hero.</p>", 
                "question": "I want to watch someone creating a full scale application so I can learn to go beyond the fundamentals of programming. I want to learn the process by which someone breaks down problems and translates them into good code. How do I find these types of videos?"
            }, 
            "id": "d9jzmvs"
        }, 
        {
            "body": {
                "answer": "<p>Might be a place to start? /r/WatchPeopleCode/<br><br>> Does anyone know of any decent videos that show by example good programming practices?<br><br>Good practices are often subjective; it<sq>ll be hard to do this. </p>", 
                "question": "I want to watch someone creating a full scale application so I can learn to go beyond the fundamentals of programming. I want to learn the process by which someone breaks down problems and translates them into good code. How do I find these types of videos?"
            }, 
            "id": "d9k34lt"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I want to watch someone creating a full scale application so I can learn to go beyond the fundamentals of programming. I want to learn the process by which someone breaks down problems and translates them into good code. How do I find these types of videos?"
            }, 
            "id": "d9jzq7v"
        }, 
        {
            "body": {
                "answer": "<p>I work in software development in Sydney and hire developers for a number of teams. One of the key attributes I look for in all hires but junior devs in particular is the ability and discipline to teach yourself what you need to know. The industry we work in is changing so fast that formal qualifications have almost zero value but the ability to learn quickly is invaluable.<br>I no longer write code as part of my job but I continue to try and keep up with tech (currently learning node) despite the demands of a young family.<br>If I heard your story in an interview I would hire you in a second but dont get complacent.<br>One you are where u need to be with coding checkout TDD and get comfortable with automated testing tools like cucumber and selenium.<br>Best of luck in your career and never stop learning!</p>", 
                "question": "How I learned Rails from absolute scratch \u2014 and got to the point where I get offered jobs"
            }, 
            "id": "crbsfpl"
        }, 
        {
            "body": {
                "answer": "<p>This was very interesting, saving for a later date when I get into Ruby on Rails coding because of all the resources you linked.<br><br>May I ask what your startup was?</p>", 
                "question": "How I learned Rails from absolute scratch \u2014 and got to the point where I get offered jobs"
            }, 
            "id": "crbplt0"
        }, 
        {
            "body": {
                "answer": "<p>what are your thoughts on theodinproject.com which is free or  learnhowtoprogram.com.</p>", 
                "question": "How I learned Rails from absolute scratch \u2014 and got to the point where I get offered jobs"
            }, 
            "id": "crbqw4g"
        }, 
        {
            "body": {
                "answer": "<p>Congrats, but you put so much effort into it, it wouldn<sq>t matter what language or platform you focused on. Your determination to continue without giving up is commendable and what allowed you to succeed. I teach students vb and c#, the ones who practice, get it, the ones who don<sq>t, give up. It is the same for every subject, not just software development.</p>", 
                "question": "How I learned Rails from absolute scratch \u2014 and got to the point where I get offered jobs"
            }, 
            "id": "crbul5d"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m always a little surprised not to see Saylor.org mentioned as an online resource for learning computer science/programming. It<sq>s fairly comprehensive, comparable to an undergraduate degree, and pulls free online resources from all over the web to create full-fledged courses.<br><br>It probably sounds like I work for them. I don<sq>t. It<sq>s just pretty f<sq>in sweet.<br><br>edit<colon> It focuses on Java/C++, just in case you are looking a particular language...</p>", 
                "question": "Here<sq>s a list of 52 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2014)"
            }, 
            "id": "cgi9z7f"
        }, 
        {
            "body": {
                "answer": "<p>I started the CS50x course with edX a little while ago and it is very interesting indeed. There is a huge amount of resources available (shorts, lectures and walkthroughs) for the problem sets and even a subreddit /r/cs50 for it.</p>", 
                "question": "Here<sq>s a list of 52 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2014)"
            }, 
            "id": "cgi7lnr"
        }, 
        {
            "body": {
                "answer": "<p>At work that I don<sq>t like, commenting to save this so that maybe I can do work I actually like.</p>", 
                "question": "Here<sq>s a list of 52 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2014)"
            }, 
            "id": "cgiayjg"
        }, 
        {
            "body": {
                "answer": "<p>I need to stop looking at these posts. Do you know how many of these courses I<sq>m signed up for?!</p>", 
                "question": "Here<sq>s a list of 52 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2014)"
            }, 
            "id": "cgicj0p"
        }, 
        {
            "body": {
                "answer": "<p>This is cool. I have a question.<br><br><br>If I select my level as beginner initially, will I be able to switch it to a higher level if I feel that I<sq>m up to it later on?</p>", 
                "question": "Many devs here on Reddit and on Slack were asking about open source projects they can contribute to. So I made a form for people who want to get notified about OSS contribution opportunities. (beginners are welcome)"
            }, 
            "id": "de9xd7f"
        }, 
        {
            "body": {
                "answer": "<p>Is it possible to make the skill level as a per language basis and add a years of professional/student experience? For example, i<sq>d do great contributing to a C++, or C# project but i wouldn<sq>t mind contributing to something in GO (for education purposes) but i<sq>m sure i<sq>d be torn apart on a code review in GO.<br><br>EDIT<colon> Another lad/lass asked the same thing below.</p>", 
                "question": "Many devs here on Reddit and on Slack were asking about open source projects they can contribute to. So I made a form for people who want to get notified about OSS contribution opportunities. (beginners are welcome)"
            }, 
            "id": "dea6njs"
        }, 
        {
            "body": {
                "answer": "<p>When you say beginner, what level of beginner are we talking?  </p>", 
                "question": "Many devs here on Reddit and on Slack were asking about open source projects they can contribute to. So I made a form for people who want to get notified about OSS contribution opportunities. (beginners are welcome)"
            }, 
            "id": "dea1ezd"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! I<sq>m a first year IT student and it would be awesome to apply and expand my current knowledge </p>", 
                "question": "Many devs here on Reddit and on Slack were asking about open source projects they can contribute to. So I made a form for people who want to get notified about OSS contribution opportunities. (beginners are welcome)"
            }, 
            "id": "dea3lfd"
        }, 
        {
            "body": {
                "answer": "<p>Hiya <colon> )<br><br>Firstly, I<sq>d like to congratulate you for how far you<sq>ve gotten. 2 years struggling with depression is some of the hardest crap for a human to deal with, and you<sq>re still here! That must count for something.<br><br>Now take a deep breath.<br><br>Having a job is the important thing. Any job, anything to give you a safety net and give you a psychological boost will help. Even if it feels like a grind, it<sq>s very much better than being unemployed, especially on a psychological level.<br><br>Now, in our industry, the type of situation you<sq>re describing is somewhat common. Employers won<sq>t train you, but will just throw you into the deep end expecting you to swim on your own. This may seem harsh, but it isn<sq>t entirely unreasonable; you<sq>re clearly an intelligent, useful, educated person, so some employers expect some autonomy from you.<br><br>They wouldn<sq>t just throw you out there with no way to get up to speed, though, would they? There must be a catch?<br><br>Yes, yes there is. Usually, it<sq>s your co-workers.<br><br>Ask questions. Never stop asking questions. Even if you think you<sq>re being annoying, ask away. They can help you become a better programmer and a better employee. If you can, shadow people and see what they<sq>re doing. Get in touch with a superior at some point who isn<sq>t super busy.<br><br>Programming in industry is NOT a solitary practice. Use the experience of your peers.<br><br>You<sq>ll suck for awhile. Everything will go super slowly. You might even get dinged by a superior at some point due to poor performance.<br><br>But ever so slightly, you<sq>ll begin to feel the fire come back. The love of what you<sq>re doing will return once you<sq>re oriented better. And soon, maybe you<sq>ll help some other newbie in the same situation as you <colon> )<br><br>The burnout you<sq>re describing having right now is very common, and I<sq>d imagine it<sq>s less of a product of your job right now and more of a product of the last two years, although I might be wrong. So don<sq>t worry about not enjoying it right now, it<sq>ll get better.<br><br>Everything will get better.<br><br>So go at it <colon> )<br><br><br>EDIT<colon> Some people are saying you should drop programming, but I think that if you get over this hump, you<sq>ll be able to rediscover the enjoyment you had in uni.</p>", 
                "question": "3 years unemployed. Got my first job as a programmer. Lacking skills and doing a very disappointing performance. My first job became a nightmare."
            }, 
            "id": "d7rug70"
        }, 
        {
            "body": {
                "answer": "<p>for 1, you absolutely cant neglect your health. Food is your brains fuel, and judging by what you said, youll need to do a lot of learning in the next few months, and youll need fuel to do it. force yourself to eat if you have to, but get some healthy food in you.<br><br>im just starting to learn myself, so i cant give any specific advice on your programs. all i can say, is programmers ive talked to always say google is your friend. if you dont know how to do something, you gotta look it up and do your best. <br><br>also, supply a little more detail about your project/job perhaps so that a more experienced programmer in this sub might be able to help.</p>", 
                "question": "3 years unemployed. Got my first job as a programmer. Lacking skills and doing a very disappointing performance. My first job became a nightmare."
            }, 
            "id": "d7rtdoc"
        }, 
        {
            "body": {
                "answer": "<p>Many employers don<sq>t care about your mistakes initially, they only care about how you handle the mistakes you made. My initial reaction to pressure is just like yours, shut down and become reclusive. I can<sq>t say I get as far down as you do but I always seem to trudge through and find my way. Your loss of desire to program is based on your innate response to quit rather than push through. However if you accept that as your typical response and fight on and accomplish your project you may find your desire to program come back. When you are sitting with your head in your hands stressing out over your project and not making any progress, get up, go outside, go for a walk, get the mail and don<sq>t come back until you<sq>ve calmed down. Work 5 minutes, 10 minutes, 15 minutes and as soon as you start feeling the pressure open the relief valve, get up and go outside again. Eventually you will find your sweet spot where you become more and more productive. I<sq>ve seen programmers get up, put their headphones on and leave the office just to walk around town and clear their minds. Don<sq>t let your innate defeatist personality get the best of you, overcome it and show it whose boss. </p>", 
                "question": "3 years unemployed. Got my first job as a programmer. Lacking skills and doing a very disappointing performance. My first job became a nightmare."
            }, 
            "id": "d7rviza"
        }, 
        {
            "body": {
                "answer": "<p>If you feel like you<sq>re programming like shit, just keep programming at that level until they fire you.  If they don<sq>t fire you, which is more likely, you will eventually learn to be a good programmer, if you believe you can do it, and practice it over time.</p>", 
                "question": "3 years unemployed. Got my first job as a programmer. Lacking skills and doing a very disappointing performance. My first job became a nightmare."
            }, 
            "id": "d7s3whk"
        }, 
        {
            "body": {
                "answer": "<p>Congrats to you man. It<sq>s always nice to read these types of things. Best of luck at the new job!</p>", 
                "question": "Programming got me a non tech job. Thank you all who help teach."
            }, 
            "id": "dfzyxan"
        }, 
        {
            "body": {
                "answer": "<p>Sounds like you<sq>re a very smart person and you just only took the right decisions, congrats on the job.</p>", 
                "question": "Programming got me a non tech job. Thank you all who help teach."
            }, 
            "id": "dg01qar"
        }, 
        {
            "body": {
                "answer": "<p>What is the non tech job that you got and how does your programming knowledge help you in this position?</p>", 
                "question": "Programming got me a non tech job. Thank you all who help teach."
            }, 
            "id": "dg03iup"
        }, 
        {
            "body": {
                "answer": "<p>Nice work, congratulations. Don<sq>t forget to pay it forward on the teaching front `<colon>-)`.<br></p>", 
                "question": "Programming got me a non tech job. Thank you all who help teach."
            }, 
            "id": "dg03i9p"
        }, 
        {
            "body": {
                "answer": "<p>First kudos on recognizing this trait and wanting to do something about it. That<sq>s amazing.<br><br>>how do we still this behaviour from proliferating?<br><br>Honestly, it has to do with hiring and never tolerating this behavior period. If I was managing that team, I would treat bad behavior just as bad as someone who can<sq>t code. Bad attitudes are in indeed infectious and creating an environment where people are mocked for their coding skills is a bad place to be. We fight that by having 1 on 1s with employees and making sure managers understand that employees can come to them about anything.Second we don<sq>t tolerate any rudness, if we people making fun of someone or being mean that will be addressed. If they can<sq>t correct their behavior, they<sq>re let go (and I<sq>ve seen it happen).<br><br>When we interview, a HUGE part of the process is culture fit/personality. The goal being to try and hire people that are not of this mean mentality.<br><br>The company I work for has a pretty amazing culture, with a focus on learning, coding and just being friendly. Everyone hangs out and we go there by not tolerating bad behavior and letting go of people that had a bad attitude. Even if they were good coders. <br><br>There was fear that we wouldn<sq>t find <dq>rockstars<dq> because most are jerks. That is simply not true, I<sq>ve found most rockstars are in fact nice people and confident. The ones who act high and mighty are actually insecure about their skills. <br><br>So for us we do a few things to maintain culture<colon><br><br>* We make personality/culture fit a part of the interview<br>* The team regularly has outings as a group, we have fun, hang out and get to know one another.<br>* Managers/Leads make sure to celebrate all life events, birthdays, kids etc. We also organize outings mentioned above. We have so many small parties , potlucks etc.<br>* We never tolerate people being assholes. Joking around is fine, and there<sq>s a fine line between horsing around/teasing and outright being rude and dismissive. The latter will not be tolerated.<br>* We do group code reviews and highlight ways to fix code. Even the best coders will have code that needs fixing and I<sq>ll find it. This is really humbling. I also pick on my code. This is done without making fun of insulting. It<sq>s actually a very productive positive code review where we suggest ways to make our code better.<br>* We assign mentors from different departments. So an employee can talk to them and get help if needed.<br><br>Edit<colon> Thanks for the gold!</p>", 
                "question": "Programming is making me a bitter person"
            }, 
            "id": "daqe0gc"
        }, 
        {
            "body": {
                "answer": "<p>I just want to say that programming is not making you bitter, your work environment is.<br><br>Every work environment is different, and if you do not like the person your work is turning you into, you should look for another place without that attitude.</p>", 
                "question": "Programming is making me a bitter person"
            }, 
            "id": "daqilse"
        }, 
        {
            "body": {
                "answer": "<p>So... Knock off your bullshit. Denigrating members of your team is poison. I would never tolerate that behavior. </p>", 
                "question": "Programming is making me a bitter person"
            }, 
            "id": "daqhc8y"
        }, 
        {
            "body": {
                "answer": "<p>Stack overflow is terrible for beginners <br><br>I remember asking about some code in ruby and I got bombarded with smartass comments<br><br>I then realised most people on stack are just a holes</p>", 
                "question": "Programming is making me a bitter person"
            }, 
            "id": "daqiagu"
        }, 
        {
            "body": {
                "answer": "<p>Create a site modeled like KhanAcademy or Codecademy and fill it with your courseware. Everyone would eat it up.<br><br>EDIT<colon> I may be blind, but a <dq>next<dq> button could be useful.</p>", 
                "question": "I give you the best 200+ assignments I have ever created (Java)"
            }, 
            "id": "c82o3jf"
        }, 
        {
            "body": {
                "answer": "<p>I like you. </p>", 
                "question": "I give you the best 200+ assignments I have ever created (Java)"
            }, 
            "id": "c82p7z0"
        }, 
        {
            "body": {
                "answer": "<p>Holy cow this is fantastic. Would there be any way to download this whole thing as a zip or PDF?<br><br>Great resource, thanks tons.</p>", 
                "question": "I give you the best 200+ assignments I have ever created (Java)"
            }, 
            "id": "c82p3oa"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I give you the best 200+ assignments I have ever created (Java)"
            }, 
            "id": "c82s6wc"
        }, 
        {
            "body": {
                "answer": "<p>Additionally, I<sq>m always looking for feedback on how to improve DevFactor - be it marketing, content, brand-image etc.  <br>  <br>So as always, if you have suggestions for how I can improve the project - I would love to hear them! </p>", 
                "question": "I Made 100+ Coding Tutorials - Free For All Redditors <colon>)"
            }, 
            "id": "czeehxh"
        }, 
        {
            "body": {
                "answer": "<p>Just browsed quickly but a lot look like great ways to brush up on interview skills</p>", 
                "question": "I Made 100+ Coding Tutorials - Free For All Redditors <colon>)"
            }, 
            "id": "czef2io"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I Made 100+ Coding Tutorials - Free For All Redditors <colon>)"
            }, 
            "id": "czeqzcw"
        }, 
        {
            "body": {
                "answer": "<p>Alot of great stuff, thanks for all the hard work, will definitely check this out!</p>", 
                "question": "I Made 100+ Coding Tutorials - Free For All Redditors <colon>)"
            }, 
            "id": "czefa2e"
        }, 
        {
            "body": {
                "answer": "<p>Got a tutorial for a time machine so you can send this to Notch?</p>", 
                "question": "[Tutorial] Learn to make Minecraft using C++ and OpenGL!"
            }, 
            "id": "dcav035"
        }, 
        {
            "body": {
                "answer": "<p>This here, is THE SHIT (in a good way). If you want to learn OpenGL and game architecture, you want to watch this.</p>", 
                "question": "[Tutorial] Learn to make Minecraft using C++ and OpenGL!"
            }, 
            "id": "dcajalm"
        }, 
        {
            "body": {
                "answer": "<p>Well done OP! Great tutorial!</p>", 
                "question": "[Tutorial] Learn to make Minecraft using C++ and OpenGL!"
            }, 
            "id": "dcap4kt"
        }, 
        {
            "body": {
                "answer": "<p>/r/graphicsprogramming might like this.  Im mostly commenting for bookmark to view later.</p>", 
                "question": "[Tutorial] Learn to make Minecraft using C++ and OpenGL!"
            }, 
            "id": "dcavqc2"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re an awesome dude for working hard on a book, and giving it away. It<sq>s actually something I<sq>d like to do one day. Kudos to you, and to me, for getting a free book in my quest to understand Python!</p>", 
                "question": "My new book <dq>Hacking Secret Ciphers with Python<dq> is done. 415 pages 1700 lines of code free to download. 100<percent> of proceeds go to the EFF Creative Commons and Tor Project."
            }, 
            "id": "c9fryw9"
        }, 
        {
            "body": {
                "answer": "<p>Dedicated to Aaron Swartz, 1986\u20132013<br><br>In the first minute I like your knowledge, your attitude and what appears to be (part of) your personal philosophy.<br><br>I look forward to finishing your book.<br><br>Thank you for writing it<br></p>", 
                "question": "My new book <dq>Hacking Secret Ciphers with Python<dq> is done. 415 pages 1700 lines of code free to download. 100<percent> of proceeds go to the EFF Creative Commons and Tor Project."
            }, 
            "id": "c9fu7n5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "My new book <dq>Hacking Secret Ciphers with Python<dq> is done. 415 pages 1700 lines of code free to download. 100<percent> of proceeds go to the EFF Creative Commons and Tor Project."
            }, 
            "id": "c9fwl2f"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been learning python slowly for a while now, but just never got too much practice. This book is a perfect excuse, thanks. Reading now.</p>", 
                "question": "My new book <dq>Hacking Secret Ciphers with Python<dq> is done. 415 pages 1700 lines of code free to download. 100<percent> of proceeds go to the EFF Creative Commons and Tor Project."
            }, 
            "id": "c9fr5ng"
        }, 
        {
            "body": {
                "answer": "<p>Omg I am using alien blue for like the first time and accidentally reported this thread instead of saving it etc do I do I<sq>m so sorry </p>", 
                "question": "Path to a free self-taught graduation in Computer Science"
            }, 
            "id": "cvniby2"
        }, 
        {
            "body": {
                "answer": "<p>is there a plan for the order of the classes, or is it kind of <sq>you should do all of these at some point<sq>?<br><br>this looks great, btw.</p>", 
                "question": "Path to a free self-taught graduation in Computer Science"
            }, 
            "id": "cvnifkt"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s amazing! Now where<sq>s the link for the class teaching me how to use github?</p>", 
                "question": "Path to a free self-taught graduation in Computer Science"
            }, 
            "id": "cvnjiu7"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! I<sq>ve already finished my Bachelors Degree and I<sq>m now on my Master in CS, but there are alot of courses that I would like to know about, but aren<sq>t offered at my university. Your list is great for filling gaps!<br><br>I especially like that you<sq>ve inlcuded <dq>Effective Thinking Through Mathematics<dq>. I wish my math courses taught you a systematic way of solving problem first, instead of throwing tons of proof questions at you and you relying on tricks to solve them.</p>", 
                "question": "Path to a free self-taught graduation in Computer Science"
            }, 
            "id": "cvnmlmw"
        }, 
        {
            "body": {
                "answer": "<p>No one has finished their program because they<sq>re constantly moving the goalpost by adding more stuff to the curriculum.  That<sq>s one reason I got a bit discouraged doing it. <br><br>That being said I also got a web dev job 4 months ago based in no small part on the projects I did on FCC.  It does provide some good structure, which was great for someone like me who isn<sq>t very good at coming up with original project ideas. </p>", 
                "question": "How is free code camp? <dq>No one has actually completed our entire program because campers get jobs before they<sq>re able to<dq>"
            }, 
            "id": "d0e81sv"
        }, 
        {
            "body": {
                "answer": "<p>I wish there was something like this for languages like C#, C++, Java, Python, ect.</p>", 
                "question": "How is free code camp? <dq>No one has actually completed our entire program because campers get jobs before they<sq>re able to<dq>"
            }, 
            "id": "d0ebq1z"
        }, 
        {
            "body": {
                "answer": "<p>I have been, yeah. started in the summer of 2015, and my only programming experience prior was a small bit of Python through one of MIT<sq>s intro to compsci courses. I think FCC (Free Code Camp) is pretty great, personally; I definitely wouldn<sq>t have gotten this far this quickly without such structure, and though I don<sq>t yet have a dev job, I have learned *a ton* and have become really passionate about all the cool things I<sq>m learning. being part of such a huge, open community is also pretty awesome.<br><br>so if you think you or anyone else is interested in web development at all, I would definitely give it a shot <colon>)</p>", 
                "question": "How is free code camp? <dq>No one has actually completed our entire program because campers get jobs before they<sq>re able to<dq>"
            }, 
            "id": "d0e7jrq"
        }, 
        {
            "body": {
                "answer": "<p>I did their front-end certificate. It was very helpful to me as a transition from Codecademy into actually building things.<br><br>But it is unfinished after that point. It points you to outside resources for Node, Mongo, and Angular/React (they swapped Angular for React in 2016.) All it has are challenges, but the useful part in my opinion was the lessons where they hold your hand and walk you through bit by bit.<br><br>The outside resources were above my knowledge level, and I didn<sq>t find the challenges interesting or know exactly how to start them, so I started doing my own projects. Maybe I<sq>ll come back to them later.<br><br>So I think the reason no one has completed it is because its second half is still under construction.</p>", 
                "question": "How is free code camp? <dq>No one has actually completed our entire program because campers get jobs before they<sq>re able to<dq>"
            }, 
            "id": "d0ebjy3"
        }, 
        {
            "body": {
                "answer": "<p>Hey thats neat!<colon>)<br><br>I was looking to improve my skills with Python regarding web dev/building a web crawler, so this should come in handy!<br><br>One question though<colon> why did you go with Videos instead of, say, a Text Version?</p>", 
                "question": "I made a couple Youtube tutorials on how to make a Reddit bot using Python."
            }, 
            "id": "cnupbz4"
        }, 
        {
            "body": {
                "answer": "<p>This sounds cool, might actually get me into programming for fun rather than just school assignments</p>", 
                "question": "I made a couple Youtube tutorials on how to make a Reddit bot using Python."
            }, 
            "id": "cnupdyr"
        }, 
        {
            "body": {
                "answer": "<p>You should perhaps also include links to, both in post and description of the video<colon><br><br>* /r/learnpython<br><br>* /r/Bottiquette<br> <br>* /r/botwatch<br> <br>* /r/botwatch/wiki/faq<br><br>Nice work with the videos by the way.<br></p>", 
                "question": "I made a couple Youtube tutorials on how to make a Reddit bot using Python."
            }, 
            "id": "cnurrft"
        }, 
        {
            "body": {
                "answer": "<p>Is this bot active on this subreddit? that would definetly be cool.</p>", 
                "question": "I made a couple Youtube tutorials on how to make a Reddit bot using Python."
            }, 
            "id": "cnuslz9"
        }, 
        {
            "body": {
                "answer": "<p>I think some of these answers are pretty ambitious for your first few programs in a new language. I try to hit various aspects of the language spec in basic ways. I also like to screw them up on purpose to see what the error messaging is like and how to handle exceptions.<br><br>Here are some ideas off the top of my head<colon><br><br>* Basic<colon> Hello World <br><br>* Type casting<colon> return int with reversed digits of int input<br><br>* Map<colon> return a dict of letter counts in a string<br><br>* Recursion<colon> Fibonacci<br><br>* Pattern matching<colon> extract phone numbers from a text file<br><br>* DB<colon> parse CSV and store in (no)SQL db<br><br>* Net<colon> API endpoint that returns aggregate results from multiple external API request (use some sort of concurrency for requests and/or aggs?)<br><br>* Data structures, text input<colon> tic tac toe, battleship, or some similar game<br><br>* Graphics, visual input<colon> flood fill, line drawing, A* pathing, or somesuch<br><br>* Data statistics<colon> calc mean, max, min, 95<percent> from a time series dataset for various time intervals (and graph them?)<br><br>EDIT<colon><br><br>* Performance optimization<colon> ~~bitcoin~~ gold mining<br><br>-[--->+<]>-.[---->+++++<]>-.-------.+++++++++++++.---.++++++++.+[-->+++++<]>-.</p>", 
                "question": "What are the first 5 to 10 programs you should learn how to write when learning a new programming language?"
            }, 
            "id": "ddmlzol"
        }, 
        {
            "body": {
                "answer": "<p>HelloWorld, LinkedList, File I/O, something with concurrency, networking (tcp/udp). The last two could be hard depending on the language</p>", 
                "question": "What are the first 5 to 10 programs you should learn how to write when learning a new programming language?"
            }, 
            "id": "ddmebpp"
        }, 
        {
            "body": {
                "answer": "<p>Definitely hello world, I would do a gross pay program as well (have user enter hours, pay rate, and overtime amount. If hours are greater than 40, then calculate gross pay with overtime. Overtime should only be used on hours more than 40. Example<colon> I worked 41 hours at $10/hour and overtime is say 150<percent>. That would be 400 for the first 40 hours. Then, after calculating overtime for 1 hour, add the 2 together. The total would be $415.)</p>", 
                "question": "What are the first 5 to 10 programs you should learn how to write when learning a new programming language?"
            }, 
            "id": "ddmd5tu"
        }, 
        {
            "body": {
                "answer": "<p>Randall Munroe of XKCD suggests doing [Project Euler](https<colon>//projecteuler.net/) when learning new languages.  It<sq>s a pretty good way to learn about things like handling really really big numbers and data structures and such.  </p>", 
                "question": "What are the first 5 to 10 programs you should learn how to write when learning a new programming language?"
            }, 
            "id": "ddmk5v6"
        }, 
        {
            "body": {
                "answer": "<p>I vote for this to get sidebarred</p>", 
                "question": "[Github] Beginners Guide to Github (xpost from /r/programming)"
            }, 
            "id": "cyvuxa1"
        }, 
        {
            "body": {
                "answer": "<p>Just what I was looking for. Thanks OP!</p>", 
                "question": "[Github] Beginners Guide to Github (xpost from /r/programming)"
            }, 
            "id": "cyvqscx"
        }, 
        {
            "body": {
                "answer": "<p>Useful guide for Github, thanks.<br><br>For people wanting to actually learn more about Git itself and the useful shell commands, udacity has a free course that helped me get started. There may be better walkthroughs out there, but that<sq>s the one I used.</p>", 
                "question": "[Github] Beginners Guide to Github (xpost from /r/programming)"
            }, 
            "id": "cyvs0qa"
        }, 
        {
            "body": {
                "answer": "<p>I recommend getting comfortable with git itself before really diving much into github. Practice using git locally *a lot*. For whatever reason the whole idea of git really confounded me for a long time. I didn<sq>t get what <dq>commits<dq>, <dq>branches<dq> and <dq>merges<dq> were all about. Then I forced myself to use it for a few weeks and slowly understood the concepts better.<br><br>I recommend getting used to the command line for git over other tools. I used to use sourcetree and all it did was heavily obscure my understanding of git. <br><br>If you need help with basic git commands you should follow this super handy guide<colon> http<colon>//rogerdudler.github.io/git-guide/ This guide does not get too deep and will supply you with the basic commands that you<sq>ll need for most of your git usage. <br><br>Edit<colon> and I should also mention the guild from OP is also great. Github has many aspects that are unique to github and need lessons in that of themselves. Basic git understanding cannot be underestimated however.</p>", 
                "question": "[Github] Beginners Guide to Github (xpost from /r/programming)"
            }, 
            "id": "cyw4a19"
        }, 
        {
            "body": {
                "answer": "<p>Please ask any Android questions you have, I love to answer them!</p>", 
                "question": "I<sq>m a CPA who learned Java & Android and published my first Android app in 12 months. I present to you a prioritized Android Cheat Sheet with every single resource I used!"
            }, 
            "id": "c9uzkv0"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome. Thanks very much. As someone who may be thrust into the world of Android development very, very soon, this is very useful to me. <br><br>Thanks heaps!</p>", 
                "question": "I<sq>m a CPA who learned Java & Android and published my first Android app in 12 months. I present to you a prioritized Android Cheat Sheet with every single resource I used!"
            }, 
            "id": "c9v15rc"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so much for sharing this, now that I will be off from school in the summer, I will have to time to look at this. </p>", 
                "question": "I<sq>m a CPA who learned Java & Android and published my first Android app in 12 months. I present to you a prioritized Android Cheat Sheet with every single resource I used!"
            }, 
            "id": "c9v8f5m"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m just now starting out with no programming experience, with the specific goal of designing music apps for android. I<sq>ve been off and on at this for a month, feeling a little overwhelmed.. This couldn<sq>t have come at a better time for me. Thanks, tremendously. Might shoot you a question every now and then if I run into any roadblocks.</p>", 
                "question": "I<sq>m a CPA who learned Java & Android and published my first Android app in 12 months. I present to you a prioritized Android Cheat Sheet with every single resource I used!"
            }, 
            "id": "c9v6k5r"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this. I have been reading your free book and following the exercises. Now I get to complete it on Udemy. </p>", 
                "question": "Signup for <dq>Automate the Boring Stuff with Python<dq> Udemy course is free until New Year<sq>s Day with code RESOLVE_TO_CODE_2016"
            }, 
            "id": "cye4u6i"
        }, 
        {
            "body": {
                "answer": "<p>Perfect Timing, I just bought your book last week.<br><br>Everyone asking<colon> What are you doing for Christmas?<br><br>Me<colon> I<sq>m learning Python.</p>", 
                "question": "Signup for <dq>Automate the Boring Stuff with Python<dq> Udemy course is free until New Year<sq>s Day with code RESOLVE_TO_CODE_2016"
            }, 
            "id": "cye59l5"
        }, 
        {
            "body": {
                "answer": "<p>u/AlSweigart, do you even make money on this course at this point?</p>", 
                "question": "Signup for <dq>Automate the Boring Stuff with Python<dq> Udemy course is free until New Year<sq>s Day with code RESOLVE_TO_CODE_2016"
            }, 
            "id": "cyebxff"
        }, 
        {
            "body": {
                "answer": "<p>Why are all these other courses 200-300 dollars that on the related courses thing, who buys these things? </p>", 
                "question": "Signup for <dq>Automate the Boring Stuff with Python<dq> Udemy course is free until New Year<sq>s Day with code RESOLVE_TO_CODE_2016"
            }, 
            "id": "cyea4lh"
        }, 
        {
            "body": {
                "answer": "<p>While this is true, there<sq>s also an inherent value in quiet down time. It can be therapeutic to just clean a car, without adding conscious mind activity. It<sq>s good to rest mentally just as it is good to rest physically. I<sq>m of the opinion that burnout, which people often assume they won<sq>t succumb to, happens to people when too much of their life focuses on coding.<br><br>I work with a lot of new coders that devote their every waking moment to coding. It<sq>s understandable, and everybody does it at some point, but it<sq>s not necessarily beneficial. I<sq>m a big believer in hard work, but that takes a toll. A toll that isn<sq>t easy to link to overwork. The longer a feature, bug, or story goes on the more of an impact the fatigue has on output. The more exhausted your brain, the quicker you become stressed, frustrated, or depressed. Likewise, a tired brain means solutions take to longer arrive at, and frustration/fatigue makes a <dq>bad code but I<sq>ll fix it later<dq> solution more attractive.<br><br>Don<sq>t get me wrong, almost everyone that codes will do code related things outside of work hours. This is natural and healthy, and as a new coder it<sq>s a great way to learn things specific to what your working on at the time. But there are things to learn about coding that aren<sq>t directly coding related. Recognizing when you need to walk away from something is an incredibly valuable problem solving skill.<br><br>Many new coders, and experienced coders, get too close to a problem, too wrapped up in it, and then can<sq>t see the forest for the trees. They<sq>ll spend a whole day trying to figure something out, start falling down unrelated Stack Overflow solutions, drive home thinking about the problems they<sq>re having implementing that potential SO response, get home to start trying that thing they thought of in the car, can<sq>t get some part of it to work, start searching for the answer to that...go to bed frustrated that they can<sq>t solve the issue with the issue of the issue with a SO post. They hit their daily stand-up in the morning, after having gone in early to try a new thing before stand up, only to then pair with someone afterwards that seems like such a better programmer because they show up and solved it in an hour.<br><br>But really all that happened is someone else came in that wasn<sq>t lost in the problem, who was able to reset the process, and get things back on track to <dq>what are we actually trying to do?<dq><br><br>It<sq>s why rubber ducking works. If you<sq>ve ever sought help with a question, only to realize the answer as you<sq>re explaining the problem to someone, then this probably happened to you.<br><br>Lord knows, it happens to everyone.</p>", 
                "question": "Make good use of your <dq>down time<dq> by listening to code/programming/tech related podcasts"
            }, 
            "id": "d4oxpnc"
        }, 
        {
            "body": {
                "answer": "<p>I browsed through the thread and I don<sq>t think this has been mentioned, but one of the huge bonuses of listening to podcasts is learning how to talk like a programmer. If you<sq>re learning via online tutorials and mostly in isolation, you can have the concepts down but show really poorly at an interview because you don<sq>t talk like you know. <br><br>Just putting the jargon in your ear on a regular basis can be really valuable at developing a natural language that fits the industry you<sq>re trying to be in. </p>", 
                "question": "Make good use of your <dq>down time<dq> by listening to code/programming/tech related podcasts"
            }, 
            "id": "d4pr4jm"
        }, 
        {
            "body": {
                "answer": "<p>Talk Python To Me<br><br>https<colon>//talkpython.fm/<br></p>", 
                "question": "Make good use of your <dq>down time<dq> by listening to code/programming/tech related podcasts"
            }, 
            "id": "d4owf4m"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m to lazy to link so just search these in quotes.<br>I<sq>ve filtered the list down to my favorite as a linux/programming newb<br>although there is a ton on that link Op posted i had no idea existed.<br>my Go-To<sq>s are<colon><br><br>*<sq>linux reality podcast<sq> - for the absolute newb. Its now, i guess accomplished its goal of teaching everything about linux... so just 100 episodes.<br>its actually given me life saving commands. Highly recommended.<br><br>*<sq>Talk Python to me<sq> - pretty interesting interviews with the people behind pythons biggest frameworks, and library<sq>s.<br><br>*<sq>Linux Action Show<sq> great hosts.. lots of energy, and interesting topics.<br><br>*<sq>Coder Radio<sq> Made by the same folks at linux action show... i must say i dont follow all of it.. seems more enterpris-ey/ app based. still a quality production.<br><br>*<sq>Full Stack Radio<sq> - Talks to full stack developers using Ruby... its almost entirely over my head, but its the topic I<sq>m most interested it... (mostly ruby on rails, though it would seem, which I<sq>ve never used).<br><br>*<sq>Programming Throwdown<sq> - You will want to skip the first half hour of this one as it is just random hosts, book recomendations/ cool websites(kind of interesting but it drags on, and would be better added to the end of the show).<br>- The last half of the show is their opinions on a language they each tried to use for a week. pretty interesting actually.<br><br>*<sq>Your Moms House<sq> - Not at all Programming Related but for the love of god please subscribe to this one. it wakes me up better than any cup of coffee. hosted by Tom Segura the comedian. its really great. <colon>D<br><br>**Also as a little heads up<colon>** Turn the podcasts off every now and again, talk to your co-workers, get into wood-working. It<sq>s also okay to listen to music and get pumped, or set aside some time to read a sci-fi book before going to bed.. Personally i was feeling Burnt out on Coding and decided to take a <dq>Programming Sabbatical<dq>  - it was and extremely relaxing day, but after one day i still wanted to code, and found that i can both enjoy myself, and program when i feel the need... i don<sq>t have to force myself to learn programming all the time... its nice to be in the moment even when at a shitty job you dont enjoy. it will save you stress and anxiety, and you may feel you have more energy to actually sit down with a programming issue thats been nagging at you, rather than clutter your mind with useless info. a problem i had for months of listening to podcasts about code was solved with just one day of being in the moment at work!<br></p>", 
                "question": "Make good use of your <dq>down time<dq> by listening to code/programming/tech related podcasts"
            }, 
            "id": "d4owvx8"
        }, 
        {
            "body": {
                "answer": "<p>People like you are a boon to noobies</p>", 
                "question": "[C#] Learn C# by Building a Simple RPG (PDF Book 2nd Edition)"
            }, 
            "id": "d6p045d"
        }, 
        {
            "body": {
                "answer": "<p>.</p>", 
                "question": "[C#] Learn C# by Building a Simple RPG (PDF Book 2nd Edition)"
            }, 
            "id": "d6p4bjb"
        }, 
        {
            "body": {
                "answer": "<p>Hey do you know where I should go to learn after all of Scott<sq>s Tutorials?</p>", 
                "question": "[C#] Learn C# by Building a Simple RPG (PDF Book 2nd Edition)"
            }, 
            "id": "d6otrjq"
        }, 
        {
            "body": {
                "answer": "<p>I started the <sq>Super Adventure<sq> tutorials on Thursday morning, and I feel as though these will be the ones that finally make the fundamentals <sq>click<sq> for me. </p>", 
                "question": "[C#] Learn C# by Building a Simple RPG (PDF Book 2nd Edition)"
            }, 
            "id": "d6p2fkk"
        }, 
        {
            "body": {
                "answer": "<p>I never heard of the Mobileys Award before, so I decided to do some digging. It looks like you just sold your app away for nothing (assuming you<sq>re not in the top 4).<br><br>From their [rules and regulations](http<colon>//themobileys.com/rules.html)<colon><br><br>>By submitting your Entry, you agree to be bound by these Official Rules and grant Mobile Future a non-exclusive, fully paid-up and royalty-free, worldwide license to use, modify, delete from, add to, publicly perform, publicly display, reproduce and translate your Entry, including without limitation the right to distribute all or part of your Entry in any media formats through any media channels.<br><br>That<sq>s right... a royalty free license that allows them to brand it as their own product, and then sell if they want.<br><br>I<sq>m not trying to discourage you. Competing can be fun. Learning to program is also definitely fun! Just trying to be frank. Always be leery of random awards like this.</p>", 
                "question": "How I went from newbie programmer to being a finalist in a mobile app competition. Complete with links to resources other programmingy subs and books."
            }, 
            "id": "cl01bbn"
        }, 
        {
            "body": {
                "answer": "<p>Your story is amazing to me because it<sq>s almost an exact play by play of what I<sq>ve been going through the past 6 months.<br><br>I started learning Java in January and was so overwhelmed with object orientation that I got frustrated and stopped around march. In July I started trying my hand with Python as I had heard that it was easier to grasp and didn<sq>t necessarily require object orientation.<br><br>Last month I stumbled upon Pygame and have since been spending all of my time just stomping through documentation and figuring out how I can use it to do what I want and I<sq>ve been having a blast with it. And just like you said, it started to make sense to me to break up the pieces of my game into objects and everything started clicking one after the other.<br><br>At this point I<sq>m looking for the friend to share the passion with so I can start working hard on something I<sq>m proud of and looking towards an internship somewhere.<br><br>Thanks for sharing your story as it was an inspiring read =)</p>", 
                "question": "How I went from newbie programmer to being a finalist in a mobile app competition. Complete with links to resources other programmingy subs and books."
            }, 
            "id": "ckzurht"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s the time line here? How long was the process? </p>", 
                "question": "How I went from newbie programmer to being a finalist in a mobile app competition. Complete with links to resources other programmingy subs and books."
            }, 
            "id": "cl01n3f"
        }, 
        {
            "body": {
                "answer": "<p>Great story. I remember seeing to your app and it helped me. I wish I could give you gold but this is all I can do http<colon>//i.imgur.com/FEFpMel.gif</p>", 
                "question": "How I went from newbie programmer to being a finalist in a mobile app competition. Complete with links to resources other programmingy subs and books."
            }, 
            "id": "ckzxz80"
        }, 
        {
            "body": {
                "answer": "<p>Great list! I<sq>ve used quite a few of these sites. However, one I would add that I use very regularly is http<colon>//www.codeabbey.com/</p>", 
                "question": "17 Coding Challenges to Help You Train Your Brain"
            }, 
            "id": "crntfoc"
        }, 
        {
            "body": {
                "answer": "<p>[Checkio](http<colon>//www.Checkio.org) for python challenges. </p>", 
                "question": "17 Coding Challenges to Help You Train Your Brain"
            }, 
            "id": "crnvjod"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been using codewars.com and been loving it. Great interface and community. Highly recommended. </p>", 
                "question": "17 Coding Challenges to Help You Train Your Brain"
            }, 
            "id": "crnuex9"
        }, 
        {
            "body": {
                "answer": "<p>If you really want to test your skills live against real players on a live TV show check out [DevWars](http<colon>//www.devwars.tv/)</p>", 
                "question": "17 Coding Challenges to Help You Train Your Brain"
            }, 
            "id": "crokmye"
        }, 
        {
            "body": {
                "answer": "<p>Some important notes<colon><br><br><br>>instead of focusing on legacy content that is 3-10 years old, much of which sees very limited use, we will work to create new public content that includes accessible features.\u00a0<br><br>..<br><br>>moving our content behind authentication allows us to better protect instructor intellectual property from \u201cpirates\u201d who have reused content for personal profit without consent.<br><br>..<br><br>>moving the publicly offered YouTube content made from the current legacy channel [youtube.com/ucberkeley] to a new authentication login required channel.\u00a0<br><br><br>..<br><br>>Berkeley will maintain its commitment to sharing content to the public through our partnership with EdX (edx.org). This free and accessible content includes a wide range of educational opportunities and topics from across higher ed.</p>", 
                "question": "UC Berkeley to remove free lecture videos from Youtube and iTunesU beginning 15 March 2017."
            }, 
            "id": "deezn8m"
        }, 
        {
            "body": {
                "answer": "<p>Time to *download everything!*</p>", 
                "question": "UC Berkeley to remove free lecture videos from Youtube and iTunesU beginning 15 March 2017."
            }, 
            "id": "def1sdf"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a programming project<colon> write a program that downloads it all.</p>", 
                "question": "UC Berkeley to remove free lecture videos from Youtube and iTunesU beginning 15 March 2017."
            }, 
            "id": "def8cmo"
        }, 
        {
            "body": {
                "answer": "<p>>This move will also partially address recent findings by the Department of Justice which suggests that the YouTube and iTunesU content meet higher accessibility standards as a condition of remaining publicly available. <br><br>The DOJ can tell a university what it can and can<sq>t have on YouTube? Most of YouTube doesn<sq>t have accessibility for the deaf, and the content can<sq>t if it isn<sq>t online for the community to caption. <br><br>Berkeley needs to find it<sq>s sack on this.</p>", 
                "question": "UC Berkeley to remove free lecture videos from Youtube and iTunesU beginning 15 March 2017."
            }, 
            "id": "def5re5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Do you recommend any games to learn coding in an easy and fun way?"
            }, 
            "id": "dedj4s0"
        }, 
        {
            "body": {
                "answer": "<p>Human Resource Machine to learn basic concepts. </p>", 
                "question": "Do you recommend any games to learn coding in an easy and fun way?"
            }, 
            "id": "dedfk4l"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.codingame.com </p>", 
                "question": "Do you recommend any games to learn coding in an easy and fun way?"
            }, 
            "id": "dedh1v6"
        }, 
        {
            "body": {
                "answer": "<p>I recommend you try to build your own game! It will be fun and rewarding. </p>", 
                "question": "Do you recommend any games to learn coding in an easy and fun way?"
            }, 
            "id": "dedchb0"
        }, 
        {
            "body": {
                "answer": "<p>When solving programming problems it<sq>s important to make sure you know what your going to do before you jump head first into programming it. Have you tried writing or drawing out your plan with pen and paper before you start coding? It helps a lot in building a program if you know what your approach is going to be before you even start writing it.</p>", 
                "question": "Am I not cut out to be a programmer? Months teaching myself how to code but I still can<sq>t solve simple problems. Feeling very frustrated."
            }, 
            "id": "d9r9nwn"
        }, 
        {
            "body": {
                "answer": "<p>Think of a program like a recipe. It<sq>s a set of instructions for computers to follow, step by step, to accomplish a final goal. Your job is to write out that recipe by breaking down the problem into the simplest possible steps that the computer can understand. Lets try breaking down Bubble Sort.<br><br>From Wikipedia<colon> <br><br>> Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.<br><br>Ok lets start by breaking this down.<br><br>**repeatedly steps through the list to be sorted**<br><br>Ok as soon as we see <dq>repeatedly<dq> instantly we should be thinking <dq>loop<dq>. So we need a loop that steps through the list, basically it checks each number of the list against... something. Let<sq>s read on.<br><br>**compares each pair of adjacent items**<br><br>Alright so not only do we have to check each item in the list, we have to check the next item after it. So we<sq>ll be checking <br><br>    list[0] and list[1], list[1] and list[2] etc...<br><br>until we reach the end of the list. simple enough right? We know how to find the length of the list, and we know how to make a loop that can iterate that many times right? So lets start by making a program that just prints out which number is smallest. We<sq>re not worried about sorting or anything just yet, we just want to get this one small part working. As a side note I don<sq>t know ruby, so I<sq>ll be using Python, but it should be fairly easy to understand.<br><br>    # here<sq>s my list that I need sorted.<br>    mylist = [3, 6, 4, 1, 2, 7, 9]<br><br>    # create a loop that loops through every element of that list<br>    for i in range(0, len(mylist) - 1)<colon><br>        # Remember if we try to check<br>        # the last element of the array with the <dq>next<dq> one we<sq>ll likely <br>        # get an error, if not unexpected results.<br>        # check this element and the next element<br>        if mylist[i] < mylist[i+1]<colon><br>            # if this ones smaller print it<br>            print(mylist[i])<br>        else<colon><br>            # otherwise print the other one<br>            print(mylist[i+1]<br><br>Ok we run that part and realize it works! It checks the 3 and the 6 and prints 3, it checks the 6 and 4 and prints 4, etc. Ok now for the next part.<br><br>**swaps them if they are in the wrong order**<br><br>Ok so we already have working code that checks the order, now we just need to swap them. But how do we swap two items in a list? Well if we just try to write<br><br>    mylist[i] = mylist[i+1]<br><br>then we<sq>ve essentially copied the next value in the list over the previous value without saving it. So we need some temporary storage. We<sq>ll hold the value of one of the elements in temporary storage, then when we write over the previous value, we<sq>ll still have a copy of it, and can place it in the next value<colon><br><br>    temp = myval[i]<br>    myval[i] = myval[i+1]<br>    myval[i+1] = temp<br><br>so let<sq>s plug that into our code<colon><br><br>    # here<sq>s my list that I need sorted.<br>    mylist = [3, 6, 4, 1, 2, 7, 9]<br><br>    # create a loop that loops through every element of that list<br>    for i in range(0, len(mylist) - 1)<colon><br>        # I want to sort in ascending order, from least to most, so <br>        # now I<sq>m checking if the first number is greater, because <br>        # if it is I want to swap it with the next number, and if it<sq>s <br>        # not we don<sq>t have to do anything, we can just check the<br>        # next number<br>        if mylist[i] > mylist[i+1]<colon><br>            temp = myval[i]<br>            myval[i] = myval[i+1]<br>            myval[i+1] = temp<br><br>Great, so we run it and... it<sq>s not working... Oh that<sq>s right, we forgot one other piece of the puzzle...<br><br>**The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.**<br><br>So we have to keep running this loop until the list is sorted. Which means we need another loop! A loop that will keep running this loop until the list is sorted! Great. Now how do we tell if the list is sorted?<br><br>Well if the list is perfectly sorted, then no swaps will have to be made right? So if we had a way of telling if even a single swap was made, we would know that the list isn<sq>t yet perfectly sorted. So lets use a boolean variable to check. If a swap is made, the boolean is set to true, and our outer loop will keep going. But if it<sq>s set to false, we know that no swap was made, and the list is sorted and we can break out of the loop.<br><br>    mylist = [3, 6, 4, 1, 2, 7, 9]<br>    while True<colon> # we don<sq>t know how long this loop needs to run<br>        swap = False # remember we need to reset swap every time<br>        for i in range(0, len(mylist) - 1)<colon><br>            if mylist[i] > mylist[i+1]<colon><br>                temp = myval[i]<br>                myval[i] = myval[i+1]<br>                myval[i+1] = temp<br>                swap = True # We<sq>ve made at least one swap!<br><br>       # we<sq>re outside the for loop but still inside the while loop<br>       # we need to check if swap is true, and if so, break out of <br>       # the while loop<br>       if swap == False<colon><br>           break;<br><br>    #outside of the while loop, we assume our list is sorted and print it out<br>    print(mylist)<br><br>And there we have it. BubbleSort, broken down into it<sq>s smaller pieces and tackled one piece at a time. This may not be the most elegant, pythonic, or optimized way of doing it, but it works, and when you<sq>re just starting out, that is your goal. Get it to work. Don<sq>t worry about it being <dq>the right way<dq> or there being a <dq>better way<dq>. Just get it to produce accurate results. Then, if you want, you can clean it up, make it more efficient or pretty or whatever.<br><br>Hope this helped in some way. I know it can be hard at first but give it time, things will start to click, and it<sq>ll get a whole lot easier.</p>", 
                "question": "Am I not cut out to be a programmer? Months teaching myself how to code but I still can<sq>t solve simple problems. Feeling very frustrated."
            }, 
            "id": "d9rh40j"
        }, 
        {
            "body": {
                "answer": "<p>Programming is teaching something to a computer. If you don<sq>t know something well enough to teach it to someone else, then it doesn<sq>t matter that you know how to talk to the person.</p>", 
                "question": "Am I not cut out to be a programmer? Months teaching myself how to code but I still can<sq>t solve simple problems. Feeling very frustrated."
            }, 
            "id": "d9rargm"
        }, 
        {
            "body": {
                "answer": "<p>What a great thread.  I am in a similar situation and I feel like some of the answers are what I need.  Thanks for the helpful tips guys.</p>", 
                "question": "Am I not cut out to be a programmer? Months teaching myself how to code but I still can<sq>t solve simple problems. Feeling very frustrated."
            }, 
            "id": "d9rcu91"
        }, 
        {
            "body": {
                "answer": "<p>Thanks. Will give it as hot. </p>", 
                "question": "I have created a free programming course of over 200 lessons designed to teach beginners on up."
            }, 
            "id": "c5bpc16"
        }, 
        {
            "body": {
                "answer": "<p>CarlH!  I have to endorse this man as the sole reason for my studies in Computer Science.<br><br>Almost two years ago I gave your introductory C class a spin, and found myself enthralled by what I was learning.  Flash forward to today, I am entering my fourth year of my Computer Science major and am interning as a Software Development Engineer.<br><br>I think the approach to teaching C first was brilliant -- and I realized this when my peers in school struggled to grok pointer arithmetic and the representation of data in memory, and it came almost <sq>naturally<sq> to me.<br><br>I just wanted to thank you for this tremendous resource and impact on my life!</p>", 
                "question": "I have created a free programming course of over 200 lessons designed to teach beginners on up."
            }, 
            "id": "c5by226"
        }, 
        {
            "body": {
                "answer": "<p>YOU<sq>RE ALIVE!!!!!</p>", 
                "question": "I have created a free programming course of over 200 lessons designed to teach beginners on up."
            }, 
            "id": "c5briot"
        }, 
        {
            "body": {
                "answer": "<p>I got started programming with your course two years ago. Today, I<sq>m a freelance web developer and I<sq>m going to university for a BS in computer science. Thanks!</p>", 
                "question": "I have created a free programming course of over 200 lessons designed to teach beginners on up."
            }, 
            "id": "c5bs2lh"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t get why developing a video game changed you from being an Oklahoma developer.....<br>;-)</p>", 
                "question": "3 years ago I graduated college as an OK developer then I decided to spend 2 years creating my own video game. Here<sq>s the result!"
            }, 
            "id": "cow0czr"
        }, 
        {
            "body": {
                "answer": "<p>Lol at the chat around the 20sec mark <dq>I<sq>m invading your worm hole ;)<dq><br><br>Nice work though and congrats!</p>", 
                "question": "3 years ago I graduated college as an OK developer then I decided to spend 2 years creating my own video game. Here<sq>s the result!"
            }, 
            "id": "cow2dpq"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "3 years ago I graduated college as an OK developer then I decided to spend 2 years creating my own video game. Here<sq>s the result!"
            }, 
            "id": "cow44qf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m really happy for you mate <colon>)</p>", 
                "question": "3 years ago I graduated college as an OK developer then I decided to spend 2 years creating my own video game. Here<sq>s the result!"
            }, 
            "id": "covxj8m"
        }, 
        {
            "body": {
                "answer": "<p>I have now seen at least three revisions of your massive compilation. You<sq>re doing great work maintaining this list! I have one question<colon> you removed several links compared to the last revision (43 vs 47 before) why did you remove them?</p>", 
                "question": "Here<sq>s a list of 43 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2013)"
            }, 
            "id": "ccmuruz"
        }, 
        {
            "body": {
                "answer": "<p>As a 22 years old  college dropout , I personally thank you for sharing these in a very well organized way. I think it<sq>s a good way to start my own learning experience as I always was interested in programming and C.S in general...</p>", 
                "question": "Here<sq>s a list of 43 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2013)"
            }, 
            "id": "ccmv77h"
        }, 
        {
            "body": {
                "answer": "<p>I only ask because I<sq>m taking it, but why didn<sq>t you include [Introduction to Computer Science and Programming Using Python](https<colon>//www.edx.org/course/mit/6-00-1x/introduction-computer-science/1122) from EdX?  <br>   <br>[Should be pretty cool, it<sq>s actually part of a series to give a foundation in compsci.](https<colon>//www.edx.org/xseries)</p>", 
                "question": "Here<sq>s a list of 43 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2013)"
            }, 
            "id": "ccmwumy"
        }, 
        {
            "body": {
                "answer": "<p>Can I start the self-paced ones at any time?  Will I be able to start them next month? A year from now?</p>", 
                "question": "Here<sq>s a list of 43 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2013)"
            }, 
            "id": "ccmvp9p"
        }, 
        {
            "body": {
                "answer": "<p>Very cool, but literally the #1 post right now in this sub.</p>", 
                "question": "The Open Source Society has created a solid path for you that want to graduate in a Computer Science online for free as a github repo."
            }, 
            "id": "cvo23a2"
        }, 
        {
            "body": {
                "answer": "<p>This is just what I need! I need structure, and learning website from random places on the internet seems to be a lot slower.<br><br>This community is awesome. Thanks!</p>", 
                "question": "The Open Source Society has created a solid path for you that want to graduate in a Computer Science online for free as a github repo."
            }, 
            "id": "cvo62j9"
        }, 
        {
            "body": {
                "answer": "<p>So, as someone new to programming itself but considering using it to switch careers or at the very least advance my career, how seriously should I take this course setup?  How do I know it is quite reputable?<br><br>I see that it has a good number of upvotes on this sub, and take that as a good indicator, but this looks like an intensive and rather long course load in total.</p>", 
                "question": "The Open Source Society has created a solid path for you that want to graduate in a Computer Science online for free as a github repo."
            }, 
            "id": "cvofnd0"
        }, 
        {
            "body": {
                "answer": "<p>But I don<sq>t want to be a Github repo.</p>", 
                "question": "The Open Source Society has created a solid path for you that want to graduate in a Computer Science online for free as a github repo."
            }, 
            "id": "cvot6ha"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a rising junior in college who has taken several courses but feels completely unprepared and unqualified for even an internship. Thank you so much for listing these resources. </p>", 
                "question": "Thanks /r/learnprogramming. After going through a lot of rejection and setbacks I finally have my dream job. Here are the resources that helped me over the past few months"
            }, 
            "id": "cscjha4"
        }, 
        {
            "body": {
                "answer": "<p>So where did you end up getting employed?</p>", 
                "question": "Thanks /r/learnprogramming. After going through a lot of rejection and setbacks I finally have my dream job. Here are the resources that helped me over the past few months"
            }, 
            "id": "cscjwdg"
        }, 
        {
            "body": {
                "answer": "<p>Great post! Reminded me of a few great links I had buried in bookmarks and put a couple new books on my radar. Good luck in your career.</p>", 
                "question": "Thanks /r/learnprogramming. After going through a lot of rejection and setbacks I finally have my dream job. Here are the resources that helped me over the past few months"
            }, 
            "id": "cscdxrn"
        }, 
        {
            "body": {
                "answer": "<p>Hmmm, going through some of the questions on [Coding Bat](http<colon>//codingbat.com/) and they sometimes overlook the most Pythonic answer for their solutions, so be careful about that.<br><br>For example, the [count 9<sq>s question](http<colon>//codingbat.com/prob/p166170) has this for the solution<colon><br><br>    def array_count9(nums)<colon><br>      count = 0<br>      # Standard loop to look at each value<br>      for num in nums<colon><br>        if num == 9<colon><br>          count = count + 1<br>    <br>      return count<br><br>As opposed to the obvious<colon><br><br>    def array_count9(nums)<colon><br>      return nums.count(9)<br><br>I<sq>ve found others like this, so if you<sq>re a beginner I wouldn<sq>t necessarily take their solution as the *best* answer.<br><br>Also, thanks for the tip on the Yawas highlighter, I<sq>m loving it!</p>", 
                "question": "Thanks /r/learnprogramming. After going through a lot of rejection and setbacks I finally have my dream job. Here are the resources that helped me over the past few months"
            }, 
            "id": "cscmh38"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome! Great for you, and good luck with everything!</p>", 
                "question": "Thank You r/learnprogramming."
            }, 
            "id": "d8nsjid"
        }, 
        {
            "body": {
                "answer": "<p>we are here to grow each other in any way possible!! LETS GOOOOO</p>", 
                "question": "Thank You r/learnprogramming."
            }, 
            "id": "d8ntgfd"
        }, 
        {
            "body": {
                "answer": "<p>>i am now so motivated that all i see is algorithms and codes. everyday. everytime.<br><br>One of us! One of us!</p>", 
                "question": "Thank You r/learnprogramming."
            }, 
            "id": "d8o2x77"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//media.giphy.com/media/14q2YCUbcxBxT2/giphy.gif</p>", 
                "question": "Thank You r/learnprogramming."
            }, 
            "id": "d8nz07r"
        }, 
        {
            "body": {
                "answer": "<p>And you didn<sq>t list the subreddits<colon><br><br>+ /r/dailyprogrammer<br>+ /r/CodeCombat <br>+ /r/programmingprompts<br>+ /r/programbattles<br>+ /r/nerdychallenge<br><br>And last, a nice challenge where the puzzles are still available<colon><br><br>+ [Advent Of Code](http<colon>//adventofcode.com) with its subreddit /r/adventofcode</p>", 
                "question": "31 Coders Games and Puzzle Sites"
            }, 
            "id": "czl3brg"
        }, 
        {
            "body": {
                "answer": "<p>Lumosity \ud83d\ude1d weren<sq>t they class action sued? </p>", 
                "question": "31 Coders Games and Puzzle Sites"
            }, 
            "id": "czlaifa"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.codeabbey.com/<br><br>Similar to project euler, easier problems but more features</p>", 
                "question": "31 Coders Games and Puzzle Sites"
            }, 
            "id": "czler82"
        }, 
        {
            "body": {
                "answer": "<p>Lumosity is probably bogus. <br><br>https<colon>//en.wikipedia.org/wiki/Lumosity#Effectiveness</p>", 
                "question": "31 Coders Games and Puzzle Sites"
            }, 
            "id": "czll5gw"
        }, 
        {
            "body": {
                "answer": "<p>Going to post a big list of sites I<sq>ve collected to help learn coding which should compliment this list.<br><br>Be home in an hour or so and will edit this post.<br><br>**Edit<colon>**<br><br>Coding Noooobs<br><br>[http<colon>//www.codecademy.com/]<br><br>[http<colon>//cfg.good.is/]<br><br>[http<colon>//www.learnstreet.com/]<br><br>[https<colon>//www.cs50.net/lectures/] <-- Harvard Lectures on intro to comp sci<br><br>[http<colon>//www.computerscienceforeveryone.com/Course_1/Unit_1/Lesson_1/]<br><br>[http<colon>//en.cppreference.com/w/]<br><br>[http<colon>//www.codeavengers.com/]<br><br>[http<colon>//www.codeobsessed.com/]<br><br>[http<colon>//teamtreehouse.com/]<br><br>[http<colon>//www.htmldog.com/] <-- HTML / CSS help<br><br>[http<colon>//learncodethehardway.org/] <-- Python, Ruby, C, SQL, Regex<br><br>[http<colon>//rubykoans.com/] <-- more Ruby!<br><br>[http<colon>//tryruby.org/levels/1/challenges/0] <-- Ruby!<br><br>[http<colon>//ruby-challenge.rubylearning.org/ ]<-- Cant get enough of Ruby?<br><br>[http<colon>//programming-motherfucker.com/] <-- Wanna learn How to program mother fucker???<br><br>[http<colon>//www.code.org/] <-- nice video on its home page<br><br>[http<colon>//codingbat.com/] <-- coding practice, Java/Python<br><br>[http<colon>//eclipsetutorial.sourceforge.net/totalbeginner.html] <-- eclipse/java for noobs<br><br>[http<colon>//smallbasic.com/] <-- basic<br><br>[http<colon>//codepen.io/] <-- just discovered this<br><br>[http<colon>//csinterviews.com/] <-- ...I<sq>m graduating soon, felt I should check this out<br><br>-----------------<br><br>[https<colon>//diy.org/skills/n00b] <-- interesting one<br><br>[http<colon>//www.khanacademy.org/cs/1-welcome-to-codecanvas/882454257] <-- bit on processing/visual coding +other languages<br><br>[http<colon>//arduino.cc/en/Tutorial/HomePage] <-- arduino <3<br><br>[http<colon>//processing.org/learning/] <-- or go straight to processing which is based off of java.<br><br>[http<colon>//scratch.mit.edu/] <-- more visual coding<br><br>[http<colon>//raptor.martincarlisle.com/] <-- Visual coding<br><br>-----------------<br><br>[http<colon>//corp.roblox.com/] <-- script your own games/visual coding<br><br>[http<colon>//www.lualearners.org/] <-- ^^ Helps with above<br><br>[http<colon>//www.wildbunny.co.uk/blog/] <-- Helpful Blog (gaming)<br><br>[http<colon>//www-cs-students.stanford.edu/~amitp/gameprog.html] <-- More on gaming<br><br>[http<colon>//www.kilobolt.com/game-development-tutorial.html] <-- a wee more<br><br>[http<colon>//www.kongregate.com/labs] <-- more on gaming code/development<br><br>-------------------<br><br><br>-------------------<br><br>[http<colon>//stackoverflow.com/questions/194812/list-of-freely-available-programming-books/392926#392926] <-- books<br><br>[http<colon>//en.wikibooks.org/wiki/Java_Programming] <-- one more book<br><br>[http<colon>//mitpress.mit.edu/sicp/full-text/book/book.html] <-- another book, <colon>s<br><br>[http<colon>//eloquentjavascript.net/] <-- im sorry! another book.<br><br>[http<colon>//greenteapress.com/] <-- more free books (but they<sq>re great)<br><br>-------------<br><br>I havent explored many of these sites to their full potential, but most of these I have collected over time from all the reddit posts asking for coding help...<br><br>I am a big noob programmer, and do very basic Arduino/Processing... so forgive my ignorance. <br><br>I hope these help you in your learning code endeavours! <br><br>**Edit 2<colon>** ...faak, I did not know that square brackets where for just adding titles to the links... took me so long to add them... whatever, tis art. <br><br>**Edit 2-3<colon>** removed [discouraged resources](http<colon>//www.reddit.com/r/learnprogramming/wiki/index#wiki_discouraged_resources). Thanks /u/CuBrAd & /u/jesyspa<br></p>", 
                "question": "Here<sq>s a list of 33 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2013)"
            }, 
            "id": "c9b0thc"
        }, 
        {
            "body": {
                "answer": "<p>You kick so much ass, thank you for making this list.</p>", 
                "question": "Here<sq>s a list of 33 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2013)"
            }, 
            "id": "c9axsr5"
        }, 
        {
            "body": {
                "answer": "<p>Sometimes I just **LOVE THE INTERNET, SO FUCKING MUCH.** This is one of those times. <br><br>Thanks for taking the time to compile this list for us, OP!</p>", 
                "question": "Here<sq>s a list of 33 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2013)"
            }, 
            "id": "c9b0duy"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll be doing the Python class on Coursera, will update with my results when it<sq>s over.</p>", 
                "question": "Here<sq>s a list of 33 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2013)"
            }, 
            "id": "c9b6b28"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m curious, how did you go about collecting the data? I<sq>m still learning, and I want to do something like this develop my skills. <br><br>I appreciate the fact that you made this! Especially since I<sq>m a huge book lover.</p>", 
                "question": "Top 50 Book suggestions mentioned on r/learnprogramming and programming subreddits"
            }, 
            "id": "df6atbr"
        }, 
        {
            "body": {
                "answer": "<p>Wow this is awesome. Kudos to you! <br><br>Question<colon> do you differentiate and <dq>upvote<dq> vs <dq>downvote<dq> of a book? Ie<colon> if someone commented <dq>you should read...<dq> vs <dq>this <book> is a waste of time<dq>. <br><br>Or is it just the number reddit upvotes on a book mention?. <br> <br>Edit<colon> for more clarity of what I<sq>m asking. </p>", 
                "question": "Top 50 Book suggestions mentioned on r/learnprogramming and programming subreddits"
            }, 
            "id": "df72jr0"
        }, 
        {
            "body": {
                "answer": "<p>Hi!! Is there a chance I might find any books on this list for complete and total noobs like myself?<br><br>Thanks in advance! </p>", 
                "question": "Top 50 Book suggestions mentioned on r/learnprogramming and programming subreddits"
            }, 
            "id": "df6e0df"
        }, 
        {
            "body": {
                "answer": "<p>This was a good idea!  It would be great if you could tie this into Safari Books Online.</p>", 
                "question": "Top 50 Book suggestions mentioned on r/learnprogramming and programming subreddits"
            }, 
            "id": "df64so0"
        }, 
        {
            "body": {
                "answer": "<p>Stanford and UC San Diego also have MOOCS designed for Algorithms. I had a taste of all three. UCSD is my favorite one. </p>", 
                "question": "Careful with Buying Overpriced Algorithms Books; Take a Free Princeton Algorithms Course Instead!"
            }, 
            "id": "d3ru0iv"
        }, 
        {
            "body": {
                "answer": "<p>Which are those over priced books?</p>", 
                "question": "Careful with Buying Overpriced Algorithms Books; Take a Free Princeton Algorithms Course Instead!"
            }, 
            "id": "d3rstfv"
        }, 
        {
            "body": {
                "answer": "<p>For anyone wanting to take the Sedgewick course, but unable to do so because it is closed, I put together all the videos and threw in the book. https<colon>//drive.google.com/folderview?id=0B0c121npPrN7SE9vMThGTXpIaFE&usp=sharing </p>", 
                "question": "Careful with Buying Overpriced Algorithms Books; Take a Free Princeton Algorithms Course Instead!"
            }, 
            "id": "d3smsov"
        }, 
        {
            "body": {
                "answer": "<p>Princeton<sq>s course is really awesome. The lectures are by the great Robert Sedgewick whose algo book is equally awesome.</p>", 
                "question": "Careful with Buying Overpriced Algorithms Books; Take a Free Princeton Algorithms Course Instead!"
            }, 
            "id": "d3rsh62"
        }, 
        {
            "body": {
                "answer": "<p>Data Structures<colon><br><br>1. Linked List<br>2. Queue<br>3. Stack<br>4. Binary-Tree<br>5. Hash Table<br><br>Algorithms<colon><br><br>1. Quicksort<br>2. Insertion sort<br>3. DFT<br>4. BFT<br>5. Heapsort<br>6. A*<br><br>Once you know these, any additional structures/algorithms are usually slight variations (with a few exceptions).<br><br>This list isn<sq>t all inclusive, just meant as a starting point.<br> <br>Truly, Wikipedia is a great resource for things like this. They often have infographics and examples in multiple languages as well as links to other closely related algorithms and structures.<br></p>", 
                "question": "What data structures and algorithms should every programmer know?"
            }, 
            "id": "cxo0hqo"
        }, 
        {
            "body": {
                "answer": "<p>*Every* programmer?  Arrays, lists, hashes.  Unless you<sq>re working in a low-level language like C, these are basic language constructs that do the stuff you need.  You don<sq>t usually need to implement a linked list or a queue or a stack or even a tree or a hash, because the language-provided data structures already do everything.<br><br>While A\\* is possibly, on occasion, something useful to know and to look up when it<sq>s relevant (not usually), sorting algorithms are next to useless because you can use your language<sq>s sort functionality that<sq>s already optimized.<br><br>Now, a *computer scientist* should definitely know all of these.  But as a programmer you very rarely come across them.</p>", 
                "question": "What data structures and algorithms should every programmer know?"
            }, 
            "id": "cxo4txi"
        }, 
        {
            "body": {
                "answer": "<p>Most programmers are familiar with arrays (either growable or not) and some sort of key-value structure (hashmap) and go out and solve all their problems in terms of these structures.  You can get really far, but I wish more people knew about trees and about graphs.  It<sq>s impressive the number of problems that you can easily solve using DFS or BFS once you<sq>ve converted your problem into a graph.</p>", 
                "question": "What data structures and algorithms should every programmer know?"
            }, 
            "id": "cxo1omc"
        }, 
        {
            "body": {
                "answer": "<p>The best general resource I<sq>ve found for data structures and algorithms is a free PDF from dotnetslackers.com<colon> [Data Structures and Algorithms<colon> Annotated Reference with Examples](http<colon>//dotnetslackers.com/Community/files/folders/data-structures-and-algorithms/entry30283.aspx)<br><br>Covers the vast majority of things mentioned in other answers, providing diagrams, pseudocode, and time complexity analysis.<br><br>EDIT<colon> Should probably add that it<sq>s maybe not the best resource for a programmer just starting out, but it<sq>s great when you<sq>ve got some understanding of programming and concepts.<br><br>---<br><br>In the book<colon><br><br>**Data Structures** (including inserting, searching, deleting, and traversing)<br><br>* Linked lists - single and double<br>* Binary search tree<br>* Heaps<br>* Sets<br>* Queues<br>* AVL Tree<br><br>**Algorithms**<br><br>* Sorting - bubble, merge, quick, insertion, shell, radix<br>* Numeric - is a number prime, base conversions, common denominators, factorial<br>* Searching - sequential, probability<br>* Strings - reversing, detecting palindromes, word count, counting repeated words, comparing strings<br><br>**Appendices**<br><br>* Iterative and recursive algorithms<br>* Example of converting the pseudocode into C<br>* Overview of testing</p>", 
                "question": "What data structures and algorithms should every programmer know?"
            }, 
            "id": "cxo6xt6"
        }, 
        {
            "body": {
                "answer": "<p>Let<sq>s pretend I<sq>ve never read a coding book. I<sq>ve taken more than a couple classes (a few Comp Sci classes in High School, including an AP course) along with briefly attending college for Software Engineering and Game Development programs. All of these I feel like I<sq>ve not really made it through a <dq>whole book<dq> type of thing.<br><br>I<sq>m a fairly confident coder though, and I feel like I have a strong grasp on the higher level concepts and logic.<br><br>First bit would be, is it worth it to go for all these books? Would I really ever realistically need or want to read *all* of them?<br><br>And as a secondary question, where do you start? With the number of tutorials I<sq>ve watched/read, I feel like often times you<sq>re either sifting through garbage you already know or being thoroughly and utterly confused because you<sq>re missing a major knowledge segment.<br><br>It looks like an awesome bundle, don<sq>t get me wrong. I guess I need a little extra convincing.<br><br>EDIT<colon> I was convinced.</p>", 
                "question": "Humble Bundle currently has a book bundle called <dq>The Joy of Coding<dq> which contains many great books of different coding languages and concepts."
            }, 
            "id": "d6n8zk9"
        }, 
        {
            "body": {
                "answer": "<p>I haven<sq>t read the rest, but Automate the Boring Stuff and the Linux command line are great!  Really well written, and both authors have a knack for answering questions as they pop into your head.</p>", 
                "question": "Humble Bundle currently has a book bundle called <dq>The Joy of Coding<dq> which contains many great books of different coding languages and concepts."
            }, 
            "id": "d6nd1td"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s a nice $1 bundle there. I<sq>ve gotten some of these before in a <dq>hacking<dq> humble bundle (was looking into Python and it was mostly a Python bundle), and they<sq>re a good value, but I do think that the $15 bundle isn<sq>t worth it overall. Granted I haven<sq>t read any of them, but judging by the titles alone, I would certainly wager that one could find better, more focused material on whatever they<sq>re looking to learn for much less. I<sq>ve also become skeptical of books written around doing a bunch of game projects, like the Lisp programming book.</p>", 
                "question": "Humble Bundle currently has a book bundle called <dq>The Joy of Coding<dq> which contains many great books of different coding languages and concepts."
            }, 
            "id": "d6nf7zv"
        }, 
        {
            "body": {
                "answer": "<p>$15 well spent.<br><br>Login to Google Play>Books>My Books<br><br>Drag the pdf. Poof.<br><br>I have a large collection of books there.</p>", 
                "question": "Humble Bundle currently has a book bundle called <dq>The Joy of Coding<dq> which contains many great books of different coding languages and concepts."
            }, 
            "id": "d6nqw4l"
        }, 
        {
            "body": {
                "answer": "<p>Saw this in /r/learnjavascript and have been using it for the past couple days. Just wanted to say what I like most about your approach is that it teaches the user to think like a programmer. I<sq>ve dabbled with codeacademy and a few similar sites and while they<sq>re great resources for the beginner, they<sq>re limited to only teaching syntax. You<sq>re still left wondering what to do with the syntax when you<sq>re done.<br><br>Anyway, very nice project. Get some harder challenges though! <colon>P</p>", 
                "question": "Learn JavaScript With Interactive Challenges<colon> Earn XP Unlock Achievements & Climb The Leaderboard"
            }, 
            "id": "de0v87x"
        }, 
        {
            "body": {
                "answer": "<p>After doing a few of the questions here, I<sq>m enjoying what you have put together here! <br><br>On a side note<colon> seeing other solutions being completed in just one line only lets me know how truly new I am to the developer world.</p>", 
                "question": "Learn JavaScript With Interactive Challenges<colon> Earn XP Unlock Achievements & Climb The Leaderboard"
            }, 
            "id": "de1l6ci"
        }, 
        {
            "body": {
                "answer": "<p>I would really like to see this with Java and c++ <colon>D<br>This could get really really good really fast!</p>", 
                "question": "Learn JavaScript With Interactive Challenges<colon> Earn XP Unlock Achievements & Climb The Leaderboard"
            }, 
            "id": "de16dw7"
        }, 
        {
            "body": {
                "answer": "<p>It is a fun tool indeed, even tho for complete js newbies as myself very challenging. I made it to the 3rd exercise but now I am lost. It would be nice if you could give a little introduction to the topics before you demand the correct code.<br><br>Anyway, I am aware your site is still under construction and will grow over time, it is quite impressive for a start, keep it up!</p>", 
                "question": "Learn JavaScript With Interactive Challenges<colon> Earn XP Unlock Achievements & Climb The Leaderboard"
            }, 
            "id": "de1qcw2"
        }, 
        {
            "body": {
                "answer": "<p>Make a program that gives ideas for programs.</p>", 
                "question": "The only reason I struggle motivating myself to learn programming is because I cannot think of a program to make"
            }, 
            "id": "d7uim8f"
        }, 
        {
            "body": {
                "answer": "<p>Whenever I struggled for ideas I just copied something that already existed.</p>", 
                "question": "The only reason I struggle motivating myself to learn programming is because I cannot think of a program to make"
            }, 
            "id": "d7ugw1m"
        }, 
        {
            "body": {
                "answer": "<p>Sidebar -> Recommended Resources -> [Programming Challenges](https<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F)</p>", 
                "question": "The only reason I struggle motivating myself to learn programming is because I cannot think of a program to make"
            }, 
            "id": "d7ugazf"
        }, 
        {
            "body": {
                "answer": "<p>Assuming you know the basics, check out some APIs and read their documentation. I<sq>ve always found that<sq>s a great way to learn. Try making a Twitter Bot for example. There are a few tutorials and it<sq>s relatively easy for beginners.<br><br>Here<sq>s mine<colon> https<colon>//github.com/anfederico/Fact-Bot<br><br>As you can see it<sq>s only like 25 lines and it<sq>ll get your confidence up with Python!</p>", 
                "question": "The only reason I struggle motivating myself to learn programming is because I cannot think of a program to make"
            }, 
            "id": "d7uigc7"
        }, 
        {
            "body": {
                "answer": "<p>I would also suggest to give a look at [CS course from OSS University](https<colon>//github.com/open-source-society/computer-science)</p>", 
                "question": "Computer Science Resources for ambitious self directed learners! Pursue a completely free online CS education."
            }, 
            "id": "d0oyx30"
        }, 
        {
            "body": {
                "answer": "<p>Access to information is no longer a barrier to being educated. In the internet age it is simply that I<sq>m tired and lazy.</p>", 
                "question": "Computer Science Resources for ambitious self directed learners! Pursue a completely free online CS education."
            }, 
            "id": "d0pg9w8"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Computer Science Resources for ambitious self directed learners! Pursue a completely free online CS education."
            }, 
            "id": "d0p4ekp"
        }, 
        {
            "body": {
                "answer": "<p>A tip for completing courses like this is to do it in a group setting, like a meet up.</p>", 
                "question": "Computer Science Resources for ambitious self directed learners! Pursue a completely free online CS education."
            }, 
            "id": "d0p3jnz"
        }, 
        {
            "body": {
                "answer": "<p>Does anyone have recommendation for the beginner courses? </p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2013)"
            }, 
            "id": "cbi6eqz"
        }, 
        {
            "body": {
                "answer": "<p>Moocs are great but choosing which one to take and committing to it is very hard for myself and many people i<sq>ve talked to. <br><br>Just taking a class doesn<sq>t mean you will necessarily learn anything meaningful. You need to be an active participant in the learning process<br><br>here<sq>s a few things to consider<colon><br>- what do you want to learn?  Be as specific as you can, especially if you have a project in mind that you can apply new concepts to<br>- how is the course structured? Look through the entire syllabus and make sure it matches your interests and learning style (readings vs discussions vs projects)<br>- how much time can you commit?  Try to block of time in your schedule so you can work on this class consistently, like you would if you went to a campus<br><br>Anyone else have meta mooc lessons, i.e. things you did to get the most out of them?<br><br></p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2013)"
            }, 
            "id": "cbi7kzt"
        }, 
        {
            "body": {
                "answer": "<p>Thanks a ton for this man, perfect timing for me!</p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2013)"
            }, 
            "id": "cbi3fz9"
        }, 
        {
            "body": {
                "answer": "<p>Introduction to Systematic Program Design - Part 1 stars on September 4th on Coursera (beginner course). </p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2013)"
            }, 
            "id": "cbi61a2"
        }, 
        {
            "body": {
                "answer": "<p>So did u use java for most of these games?</p>", 
                "question": "I<sq>ve spent 2 years learning programming by making games here<sq>s every project I<sq>ve done!"
            }, 
            "id": "d6tdach"
        }, 
        {
            "body": {
                "answer": "<p>Holy moly! I am one year in, C++. I started pretty much just after I left year 11 (UK, ~16-17 years old) and I did it on my own, was temped to ask a friend to do it with me but I wasn<sq>t sure if they<sq>d be interested <colon>(<br><br>The best 3D thing I have to show for it this (Made using OpenGL, SFML and GLM) https<colon>//www.youtube.com/watch?v=mrrUkoSiPJE<br><br>But wow, that final GIF! All these projects! From 0 to this? In 2 years??? Amazing! I hope I manage to catch up to be as good as you are now in the next year or so xD</p>", 
                "question": "I<sq>ve spent 2 years learning programming by making games here<sq>s every project I<sq>ve done!"
            }, 
            "id": "d6tdumm"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been following this game for a few months now actually after seeing him in the gamedev sub and was super impressed... I think he didn<sq>t want to blatantly advertise but I pledged [his Kickstarter here](https<colon>//www.kickstarter.com/projects/1973308113/lightspeed-frontier/) <colon>)<br><br><br>You<sq>re welcome OP ;)</p>", 
                "question": "I<sq>ve spent 2 years learning programming by making games here<sq>s every project I<sq>ve done!"
            }, 
            "id": "d6ti2a3"
        }, 
        {
            "body": {
                "answer": "<p>Great post!  I<sq>ve been looking back through some old projects of mine I found on a hard drive recently.  I think it<sq>d be cool to have a megathread of everybody<sq>s beginnings and their latest projects on here (or r/gamedev)<br><br>Edit<colon> made an album with my gamedev history https<colon>//imgur.com/a/1lF6S</p>", 
                "question": "I<sq>ve spent 2 years learning programming by making games here<sq>s every project I<sq>ve done!"
            }, 
            "id": "d6tu1ft"
        }, 
        {
            "body": {
                "answer": "<p>Wow, Friends, but it is my site!<br><br>Well, I<sq>m quite pleased and astonished by your attention to my small collection of problems and hope they could be useful... <colon>)<br><br>I dare to add there were two recent <dq>innovations<dq> at CodeAbbey which you may find funny<colon><br><br>- **[certificates](http<colon>//www.codeabbey.com/index/wiki/certificates)** - which simply are just funny papers you can stick on the wall (if you gain one - up till now 9 certificates were granted as could be seen in profiles of several top-users);<br>- **[interactive problems](http<colon>//www.codeabbey.com/index/wiki/interactive-problems)** - which are solved by interacting with server by POST requests - currently there are three of them (say-100, nim-game and maze-of-the-wumpus) - and I<sq>m going to add two more in few days (this feature was introduced just week ago).<br><br>**And I wanted to say Thanks** to all of our users - you greatly helped me with your participation and by it encouraged me to continue even if sometimes I was close to despair <colon>)</p>", 
                "question": "Found an awesome website with programming challenges. They range from very easy to very hard riddles and have lots of resources!"
            }, 
            "id": "cmg6fvn"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Found an awesome website with programming challenges. They range from very easy to very hard riddles and have lots of resources!"
            }, 
            "id": "cmg6j7y"
        }, 
        {
            "body": {
                "answer": "<p>Shoutout to /r/dailyprogrammer</p>", 
                "question": "Found an awesome website with programming challenges. They range from very easy to very hard riddles and have lots of resources!"
            }, 
            "id": "cmgc8ch"
        }, 
        {
            "body": {
                "answer": "<p>I teach Java and I recommend that students write a couple of programs over Christmas and several over the summer.  I will put your site out as someplace with fun projects.</p>", 
                "question": "Found an awesome website with programming challenges. They range from very easy to very hard riddles and have lots of resources!"
            }, 
            "id": "cmg9n0x"
        }, 
        {
            "body": {
                "answer": "<p>Put this in the FAQ or it gets lost.</p>", 
                "question": "Interesting Python practice problems from the internet!"
            }, 
            "id": "dbwzaa1"
        }, 
        {
            "body": {
                "answer": "<p>Can someone post ( or a link to) some similar compilation for C++.</p>", 
                "question": "Interesting Python practice problems from the internet!"
            }, 
            "id": "dbx6ffs"
        }, 
        {
            "body": {
                "answer": "<p>THis definitely should be in the FAQ</p>", 
                "question": "Interesting Python practice problems from the internet!"
            }, 
            "id": "dbxaaei"
        }, 
        {
            "body": {
                "answer": "<p>just looked over the easy string problems, these aren<sq>t beginner friendly are they.</p>", 
                "question": "Interesting Python practice problems from the internet!"
            }, 
            "id": "dbxii9q"
        }, 
        {
            "body": {
                "answer": "<p>OpenBSD (IMO) is the pinnacle of _modern_ C. Their projects are all top notch. The code they write is not only readable, but secure as well. For some small projects, look at the /bin/ directory (where the coreutils live) and read through some of them.<br><br>* http<colon>//cvsweb.openbsd.org/cgi-bin/cvsweb/<br><br>Also...<br><br>As long as you take their mailing lists with a grain of salt<colon> <br><br>* http<colon>//suckless.org/<br><br>Has some really readable C projects.<br><br>I<sq>ll link a few articles after work!<br><br>Article(s)<colon><br><br>https<colon>//matt.sh/howto-c<br>https<colon>//github.com/Keith-S-Thompson/how-to-c-response<br><br>Skim that article, then read the rebuttals. Pretty much everything linked in the article (they<sq>d be sub-articles I guess?), and it<sq>s responses are exceptional reads. As much as I love C, half the battle of learning it is knowing that it<sq>s a language that allows you to shoot yourself in the foot if you really want to.<br><br>Paging<colon> /u/atbash_ <br><br>Sorry for the late edits... work<sq>s been hectic. <colon>(</p>", 
                "question": "<dq>An important thing to become better at programming is to read good code<dq>. I agree but where do I find code for my language and skill level and how do I know it<sq>s good?"
            }, 
            "id": "d014j73"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d really like something for java along these same lines. Many of the books I<sq>ve seen are just really focused on writing specific programs to emphasize the functions of specific keywords or to highlight certain individual concepts. While that<sq>s all well and good the programs hardly seem organic or representative of what a developer would try to write in order to solve a specific problem.  </p>", 
                "question": "<dq>An important thing to become better at programming is to read good code<dq>. I agree but where do I find code for my language and skill level and how do I know it<sq>s good?"
            }, 
            "id": "d019jh3"
        }, 
        {
            "body": {
                "answer": "<p>Is there something for c#?</p>", 
                "question": "<dq>An important thing to become better at programming is to read good code<dq>. I agree but where do I find code for my language and skill level and how do I know it<sq>s good?"
            }, 
            "id": "d01r3xr"
        }, 
        {
            "body": {
                "answer": "<p>wondering same thing for c++</p>", 
                "question": "<dq>An important thing to become better at programming is to read good code<dq>. I agree but where do I find code for my language and skill level and how do I know it<sq>s good?"
            }, 
            "id": "d0191qe"
        }, 
        {
            "body": {
                "answer": "<p>Here is another great resource, based on algorithm development and general critical thinking - http<colon>//projecteuler.net/</p>", 
                "question": "Want to learn a new language? Solve these 100 projects and you<sq>ll be the best damn coder. (x-post /r/learnpython)"
            }, 
            "id": "cay8b4o"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m still in university on a Software Engineering course and i<sq>m about to finish a year long programming internship for a big company so I have around 2-3 years experience (I know it<sq>s nothing).<br><br>So i<sq>m *fairly* confident I could do some of these but then I look at things like<colon><br><br>* A web bot<br><br>* An FTP program <br><br>* A Download Manager<br><br>* Bandwidth Monitor<br><br>And I have no idea where to start.<br><br>If i<sq>ve never made anything like this where do I begin? Or how do I figure out where I should begin? I<sq>ve never made a service type app either.. Any ideas or tips would be appreciated.<br><br>My experience is in Java, C#, C++ and some PHP. I<sq>d like to learn Python but I haven<sq>t got the time at the moment. C# is my go-to language.</p>", 
                "question": "Want to learn a new language? Solve these 100 projects and you<sq>ll be the best damn coder. (x-post /r/learnpython)"
            }, 
            "id": "caya28q"
        }, 
        {
            "body": {
                "answer": "<p>This link (excluding the github repository) was posted in this sub [four days ago.](http<colon>//www.reddit.com/r/learnprogramming/comments/1hmiuv/looking_for_beginner_project_ideas_this_list_has/) Figured I<sq>d let you know.</p>", 
                "question": "Want to learn a new language? Solve these 100 projects and you<sq>ll be the best damn coder. (x-post /r/learnpython)"
            }, 
            "id": "cay639g"
        }, 
        {
            "body": {
                "answer": "<p>So can you do this with any language? or just python?</p>", 
                "question": "Want to learn a new language? Solve these 100 projects and you<sq>ll be the best damn coder. (x-post /r/learnpython)"
            }, 
            "id": "cay9l9b"
        }, 
        {
            "body": {
                "answer": "<p>You don<sq>t need 5 years to put food on the table as a programmer. It should take about 1 year if you are willing to put in the hours and are genuinely interested in computer science.<br><br>Start with java. It<sq>s a very popular language. Don<sq>t suffer from analysis-paralysis. Go through the following course<colon><br><br>http<colon>//mooc.fi/courses/2013/programming-part-1/<br><br>After finishing that course, jump into part 2 of the course and start doing projects. Here is a big list of projects you can do in any programming language<colon><br><br>https<colon>//github.com/karan/Projects<br><br>Stick to one programming language for a while. Don<sq>t jump around.<br><br>Take one course on data structures from coursera. Some of the popular ones are by  Princeton, Stanford, UC Berkeley, etc. After doing all this, look for internships and join the workforce </p>", 
                "question": "A newbie asking; how can I get started with my plan of becoming a programmer in 5 to 10 years?"
            }, 
            "id": "d9u7kqy"
        }, 
        {
            "body": {
                "answer": "<p>Disclaimer<colon> I do mostly web development, so most of this advice reflects that. And I know this is a LOT, but it<sq>s from a place of love. Hope it helps! <3<br><br>I<sq>ve only been in the game for a year and a half, but I<sq>m building web applications for a federal agency and some small startups in my area. I got started with some passing C and HTML/CSS in high school, then had classes in Java, C++, JavaScript/XML, Relational Databases in college. Once I graduated, I started PHP and MySQL for a work project. I eventually picked up Meteor (full stack JavaScript framework), ECMAScript6, some NoSQL experience (MongoDB), and now I<sq>m working with Ruby on Rails. It<sq>s ENTIRELY true that once you learn one language pretty well and get the core concepts down, that it<sq>s easier to branch out and learn more. They<sq>re all pretty similar, the syntax is just a little different. But you CAN learn a lot of marketable skills VERY quickly.<br><br>I did a lot of tutorials, read a lot of books, endlessly trawled through StackOverflow, and even went to a codecamp for funsies to get where I am (and I still have a long way to go) but if I could go back and do it again, I<sq>d learn with a little more structure<colon><br><br>The biggest benefit you can give yourself is to get the fundamentals down. Pick a single language (Ruby, JavaScript, Python) and learn the hell out of it. The three I listed are pretty simple (compared to jumping right in with like Java or C++) and you can see results pretty quickly, but can be insanely powerful when you start adding in frameworks and the like later. <br><br>**Ruby**<colon><br><br>*[Ruby - Codecademy](https<colon>//www.codecademy.com/learn/ruby) - This gives you an interactive shell (so you don<sq>t need to install anything) and teaches you the basics of the language (variables, functions, methods) and gives you a quick way to test and see the results of the code you<sq>re writing. This is what I used to pick up Ruby, and it helped a ton.<br><br>*[Learn Ruby The Hard Way](https<colon>//learnrubythehardway.org/book/) - Don<sq>t let the title intimidate you. It<sq>s all pretty straight forward, and the author makes sure you have a thorough understanding of WHY the things you<sq>re building work the way they do. That insight can help a lot later down the road.<br><br>**JavaScript**<colon><br><br>*[Free Code Camp](https<colon>//www.freecodecamp.com/) - This is an open source learning framework. This takes you from the very basics of using JavaScript as a language to learn fundamentals (not necessarily for web development, but it walks you through a LOT). It also provides you with a support network of other people to talk to about solving particular problems, and eventually folds more in (HTML, CSS, API<sq>s) to continue building bigger and better things. This is what I used to learn most of what I know now, and I consider it invaluable.<br><br>*[JavaScript - Codecademy](https<colon>//www.codecademy.com/learn/javascript) - Again, this gives you an interactive shell so that you can write, test, and see the results of your code right in your browser. This really focuses on fundamentals.<br><br>**Python**<colon> <br><br>*[Automate The Boring Stuff With Python](https<colon>//automatetheboringstuff.com/) - This is a fun way to learn a language. You pretty quickly start building some things that help you in real life.<br><br>~~*[Learn Python The Hard Way](https<colon>//learnpythonthehardway.org/book/) - This is from the same group as the <dq>Learn Ruby The Hard Way<dq> book. Same idea - the author really helps you figure out what<sq>s going on under the hood.~~ Edit<colon> I<sq>ve been told further down in this thread, that this isn<sq>t a very good resource. Check out /u/LoLmanLoLz<sq>s comment [here](https<colon>//www.reddit.com/r/learnprogramming/comments/5c740i/a_newbie_asking_how_can_i_get_started_with_my/d9vnh9d/) about it.<br><br>I know that<sq>s ^ a LOT. But like I said, pick one for now and roll with it. <colon>)<br><br>Once you have the basics of a language down, it<sq>s easy enough to jump from one to another. I find that the Codecademy courses are enough to help me understand the syntax of a new language, and anything they don<sq>t teach me, the official documentation will have information about. But now you<sq>re getting to the point of building things on your own, whether it be scripts, sites, or applications.<br><br>YOU NEED TO KNOW VERSION CONTROL.<br><br>I recommend Git. It<sq>s widely available, open source (created by the guy who made the Linux kernel), and it plays nice with [BitBucket](https<colon>//bitbucket.org/) and [GitHub](https<colon>//github.com/). It helps you keep track of changes in your code, helps you share code with others (so they can read it and recommend changes, or use it as a basis to hire you), and offers a convenient way to have offsite backups.<br><br>**Git**<colon><br><br>*[GitHub<sq>s Git Introduction](https<colon>//try.github.io/levels/1/challenges/1) - This one is awesome for beginners and mostly teaches the command line (you can do this from any operating system). Do it twice. Do it three times. Just make sure you understand it.<br><br>*[GitHub<sq>s GitHub Lesson](https<colon>//guides.github.com/activities/hello-world/) - Once you have the Git Intro down, give this one a shot. It teaches you how Git interacts with GitHub. And helps the idea of branches and pull requests make a little more sense.<br><br>**Extra Materials On Git**<colon><br><br>*[Learn Git in 20 Mintues](https<colon>//www.youtube.com/watch?v=Y9XZQO1n_7c) - This is a pretty well known talk that can help get a lot of the fundamentals down. Git is going to be a little different that anything you<sq>re used to, so it<sq>s important to understand the concepts. This uses visual aids to help it sink in.<br><br>*[Getting Git Right](https<colon>//www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud) - This is an incredible resource from Atlassian. It teaches a lot from basic to advanced Git commands, teaches about different workflows, and answers almost any question you<sq>d ever have about Git. Keep this around in your bookmarks bar or something.<br><br>From there, I<sq>d say just keep building shit. Start adding frameworks like [Meteor](https<colon>//www.meteor.com/), [Django](https<colon>//www.djangoproject.com/), or [Rails](http<colon>//rubyonrails.org/) - I know these are all for web development, but that<sq>s my life. There are plenty of tutorials for anything you<sq>d ever want to learn.<br><br>I had a [couple of very small things that I built for fun and FreeCodeCamp](http<colon>//crashthebot.net/) (haven<sq>t updated that in a while, I should get on that), and just kept rolling with it. Once you build a few things, you<sq>ll find a new piece of technology that makes a certain part of development easier. Like, using [Handlebars](http<colon>//handlebarsjs.com/) and realizing templating engines are a thing was a game changer. And then I learned about asynchronous database calls with [Meteor](https<colon>//www.meteor.com/), being able to make [applications for several platforms using one codebase](https<colon>//cordova.apache.org/#supported_platforms_section), and using frameworks like [Rails](http<colon>//rubyonrails.org/) to abstract out a lot of the boring stuff in web development. You just have to keep going and continuing to build more interesting things.<br><br>It<sq>s a big, wide world. <br><br>And /u/eru_melkor makes a really really really good point<colon><br><br>> Don<sq>t suffer from analysis-paralysis.<br><br>There are going to be points where it seems like there are far too many options out there. Don<sq>t let that stop you from building. It<sq>s a big hurdle that most of us had to get over. <br><br><dq>But /u/quinncuatro, how do I know I<sq>m using the right tool?<dq> <br><br>Honestly, in the beginning, you don<sq>t. You just build, find a pain point, find something to relieve it, and move on. I didn<sq>t even touch here on unit testing, containerization, hosting, or continuous integration - but that<sq>s because you don<sq>t need that stuff yet. Just build using what you know until you come to a logical point to add something else into the mix.<br><br>And I know this is a lot. I truly get it, but we all had to start somewhere. I mean, just check out [the first web page I built back in 2011](http<colon>//crashthebot.net/first_site/). /Cringe.<br><br>But now I have a [pretty good resume](https<colon>//henryneeds.coffee/) under my belt, with [plenty more projects](https<colon>//github.com/Quinncuatro). You just have to keep chugging away and in a year or two you<sq>ll be looking back on some of the old stuff you wrote thinking how impossible you thought it might be to get to where you are.<br><br>Life<sq>s funny like that. Hope I helped. <colon>)<br><br>Edit<colon> I<sq>m glad this is helping at least a few people. I know I wrote a lot, but if any of you ever need help with any of it (syntax, getting stuff installed, setting up a development environment, want to talk about cats and pretend the election didn<sq>t happen...) feel free to shoot me a PM. I<sq>m on pretty often, so I<sq>ll try to get back as soon as I can!</p>", 
                "question": "A newbie asking; how can I get started with my plan of becoming a programmer in 5 to 10 years?"
            }, 
            "id": "d9ueedl"
        }, 
        {
            "body": {
                "answer": "<p>I have absolutely no college education when it comes to computer science, and after hard work and reading multiple <dq>learn to program<dq> books, I got a job as an application programmer and data analyst in under a year. You can do it.</p>", 
                "question": "A newbie asking; how can I get started with my plan of becoming a programmer in 5 to 10 years?"
            }, 
            "id": "d9u9zi5"
        }, 
        {
            "body": {
                "answer": "<p>There are plenty of reasonable <dq>become a X developer in Y lessons<dq> courses online. Why do you think it will take 5-10 years? </p>", 
                "question": "A newbie asking; how can I get started with my plan of becoming a programmer in 5 to 10 years?"
            }, 
            "id": "d9u7azt"
        }, 
        {
            "body": {
                "answer": "<p>The only thing I would add to it is a fouth lumberjack who first goes to the library and does some research on (a) how others have cut down trees in the past or if trees are new, how they handled shrubs, etc. (b) is there a chainsaw factory in driving distance with reasonable prices i.e. subcontract the work out / buy others code / use a library someone else made and (c) what do the thousands upon thousands of people on the internet say to do.<br><br>* After an hour of reading the 4th guy learns if he starts cutting at the bottom of the hill and moves up all the new lumber falls down on the already cut trees, but if he starts at the top and moves down the hill he will have step over or work around already felled trees that have rolled down hill. In a few sort hour of reading he had leaned to avoid a major pitfall he didn<sq>t know about before.<br><br>* After a day of reading, he learns that if he uses a chainsaw he better not use the ones made by Miller, because they allow someone else to steal his wood (not a apt example but something along those lines of a library having an exploit.)<br><br>* The 4th lumber jack settles on hiring out five guys with axes from a different country to get to work (estonia) for really really cheap, at the brute work of cutting down trees at the bottom of the hill, while he works with a civil engineer to plot a road to haul the other trees out from deeper in the property and buys a device someone else made that strips the branches off the trees while they stand making felling them easier. He then moves the labor to a higher cost, but higher skill set or does it himself with the most efficiency chainsaw he could find. (i.e. cost vs performance / time)<br><br>* While doing this the fourth lumber jack writes out his plans (builds a library) that he can sell to other potential lumberjacks or easily pull off the shelf in the future should he have to clear trees. Perhaps while written he comes up with ways to easily clear underbrush or shape the land as well. Adding functions to his design that he might not need now but that fit with the general theme of the project and might come in handy in the future.</p>", 
                "question": "\u201cThe Code Lumberjacks\u201d \u2013 a simple analogy about how effective programmers think"
            }, 
            "id": "d2zdwzy"
        }, 
        {
            "body": {
                "answer": "<p>As a bit of background, I<sq>m a programmer at Google with about twenty years of professional experience.<br><br>If there are other topics that you think could use analogy-izing, let me know and I<sq>ll try and write more. <colon>)</p>", 
                "question": "\u201cThe Code Lumberjacks\u201d \u2013 a simple analogy about how effective programmers think"
            }, 
            "id": "d2zaj78"
        }, 
        {
            "body": {
                "answer": "<p>Checking in from the console.logging company. That axe may not be elegant but that tree is coming down. http<colon>//i.imgur.com/5dZBEVP.png</p>", 
                "question": "\u201cThe Code Lumberjacks\u201d \u2013 a simple analogy about how effective programmers think"
            }, 
            "id": "d2zeh4c"
        }, 
        {
            "body": {
                "answer": "<p>nice! A good problem solving technique I frequently rely on is to analyze the requirements to make sure your code does its job/solves the problem! Simple but can easily be overlooked. Don<sq>t be too worked up about the trees that you lose sight of the forest <colon>) piggy backing on the analogy.</p>", 
                "question": "\u201cThe Code Lumberjacks\u201d \u2013 a simple analogy about how effective programmers think"
            }, 
            "id": "d2z7you"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations man! Could you walk us through your process though? Where did you start? What courses did you take? How did you keep learning and what methods did you use?<br><br>Also, how comfortable were you with Android when you applied for the position? What were your credentials at the time of the interview?<br><br>Thanks for answering these!</p>", 
                "question": "Started learning programming 1 year ago today got a job big thanks to /learnprogramming!"
            }, 
            "id": "d47vdd8"
        }, 
        {
            "body": {
                "answer": "<p>Slow, jealous, clapping</p>", 
                "question": "Started learning programming 1 year ago today got a job big thanks to /learnprogramming!"
            }, 
            "id": "d47uqm4"
        }, 
        {
            "body": {
                "answer": "<p>Congrats! As someone who wants to start teaching myself, what kind of programming experience did you have when you first started? These are the best motivational posts.<br></p>", 
                "question": "Started learning programming 1 year ago today got a job big thanks to /learnprogramming!"
            }, 
            "id": "d47u5bf"
        }, 
        {
            "body": {
                "answer": "<p>Congrats. Keep an eye on Udacity. Half the courses there are by google on Android development</p>", 
                "question": "Started learning programming 1 year ago today got a job big thanks to /learnprogramming!"
            }, 
            "id": "d47si7d"
        }, 
        {
            "body": {
                "answer": "<p>Something puzzles me about your internship (it<sq>s not with you). If the company knew it was an internship, they should have known it was a learning experience for you and gave you more than three weeks there.<br><br>It<sq>s weird the manager got upset only after *a few days*. A good manager would have realized that getting oriented to a new company takes more time than that.<br><br>Overall, you<sq>re a great writer and that company is somewhere you likely don<sq>t want to work for very long in my opinion.</p>", 
                "question": "Story of a Self-Taught Software Engineer<colon> Part I"
            }, 
            "id": "df932iz"
        }, 
        {
            "body": {
                "answer": "<p>Part 2 part 2!<br><br>http<colon>//brittanyconstable.com/wp-content/uploads/sites/32/2014/05/woj-finding-nemo_-1080p-4.jpg</p>", 
                "question": "Story of a Self-Taught Software Engineer<colon> Part I"
            }, 
            "id": "df93phw"
        }, 
        {
            "body": {
                "answer": "<p>This is pretty inspirational and you<sq>re a great writer, looking forward to more</p>", 
                "question": "Story of a Self-Taught Software Engineer<colon> Part I"
            }, 
            "id": "df929r4"
        }, 
        {
            "body": {
                "answer": "<p>I too am a self taught programmer and my first day as paid programmer is forever burned in my memory.<br><br>I showed up and the office manager took me on a tour of the office. I was introduced one by one, and with each person I was given a pedigree, bachelors and masters all from schools I was at least familiar with, 5, 10, 15 years working experience etc. Each one asked how long I had been programming to which I responded that it was my first job, followed by where I went to school, to which I responded that I was self taught. Everyone was in their 20<sq>s (I was 32). It was incredibly intimidating, everyone working away at their shinny 27 inch iMacs, the lead developer working a Kinesis Advantage keyboard, making it sound like a machine gun.<br><br>So I am taken to my desk and am given a check list of things to install and told I will be checked on in a couple hours. I sit down and look at my iMac and go to turn it on and realize I have no idea where the power button is. I try pressing the shinny black apple under the screen, nothing. I feel along the edge and back of the computer for a switch and find nothing. I look at the keyboard for something that looks like a power button, and then slowly press each key individually hoping it might cause the computer to spring to life, but I get nothing. Panic is slowly growing. Here I am with all these professionals and I can<sq>t even figure out how to turn my computer on. At ten minutes I begin to wonder when someone will notice I haven<sq>t managed to turn it on, at 20 minutes I begin to wonder if this is some sort of test that I am failing at spectacularly.<br><br>At about 30 minutes I give up, I explain I haven<sq>t used a mac since the LCIII and I don<sq>t know how to turn it on. Several people laugh and say the same thing happened to them their first day and appoligize for not mentioning it sooner. The lead Dev then looks at me and says, <dq>You went this long without asking for help?<dq> I nod and appoligize and he responds with his first words of wisdom (he pretty much became my mentor and taught me a great deal), <dq>If you haven<sq>t spent 10 minutes figuring it out for yourself don<sq>t ask me,<br>and if you have spent more than 15 minutes on it you should have asked me<dq>.</p>", 
                "question": "Story of a Self-Taught Software Engineer<colon> Part I"
            }, 
            "id": "df9qmo9"
        }, 
        {
            "body": {
                "answer": "<p>Exactly the sort of list I am looking for, thank you very much</p>", 
                "question": "Here<sq>s a list of 107 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2014)"
            }, 
            "id": "ckxvaa0"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a beginner at programming (trying to learn JavaScript) with a decent background in Mathematics. What are my chances of surviving Algorithms<colon> Design and Analysis, Part 1?</p>", 
                "question": "Here<sq>s a list of 107 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2014)"
            }, 
            "id": "ckxwkpn"
        }, 
        {
            "body": {
                "answer": "<p>WOW!!! 10,000 thanks!</p>", 
                "question": "Here<sq>s a list of 107 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2014)"
            }, 
            "id": "ckxvcw1"
        }, 
        {
            "body": {
                "answer": "<p>Is there any course that teaches C++? </p>", 
                "question": "Here<sq>s a list of 107 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (October 2014)"
            }, 
            "id": "cky7jfv"
        }, 
        {
            "body": {
                "answer": "<p>What you<sq>re doing is completely normal. The earlier you are in your career, the more you<sq>ll Google solutions, as time passes, you<sq>ll simply remember and be able to bang it out by hand. <br><br>Eventually, you<sq>ll have worked on so many different projects in so many different languages you<sq>ll have to start googling things again, just to remind yourself what the specific syntax of language x is. <br><br></p>", 
                "question": "All I do at work is Google how to do things then modify the code I find on Stack Overflow. I don<sq>t feel like I<sq>m actually programming."
            }, 
            "id": "cptsmms"
        }, 
        {
            "body": {
                "answer": "<p>I employ developers. I really don<sq>t want them writing new code they could find already in libraries. I really don<sq>t want them working out problems already answered on stackoverflow. Be lazy, and DRY. What you<sq>re doing is right.</p>", 
                "question": "All I do at work is Google how to do things then modify the code I find on Stack Overflow. I don<sq>t feel like I<sq>m actually programming."
            }, 
            "id": "cpttmve"
        }, 
        {
            "body": {
                "answer": "<p>One thing that<sq>s true to life is that you end up **using other people<sq>s inventions** much more often than you **invent your own things**. This is probably true even for the worlds best inventors, engineers, and designers.<br><br>------<br><br>If you were trying to design a radically new type of car, you<sq>d probably run into many unique design challenges. Maybe it uses a new type of fuel, or maybe it has a sophisticated AI co-diver, or maybe it can turn invisible and blast off to outer-space! Lots of challenging design problems there! But, at the same time, there are a lot of pre-existing, solved problems. Remember the saying <dq>don<sq>t reinvent the wheel!<dq>, the reason you don<sq>t reinvent the wheel is because you probably don<sq>t need to! That is, unless your new car idea is so radically different that it requires you to rethink the wheel altogether! Hover car maybe? If you<sq>re making a new type of car, you ~might~ not have to reinvent the wheels, or the seats, or the airbags, or the steering wheel, etc., depending on your idea.<br><br>Here<sq>s another example, when people like Les Paul were developing early examples of solid body electric guitars, they probably had to overcome numerous design challenges and problems that were completely new. Yet, there were some parts of the existing traditional guitar design that were still viable, and they could just <sq>copy and paste<sq> those solutions into their new design. Solid body electric guitars didn<sq>t require them to reinvent the guitar<sq>s neck/fretboard, and doing so would probably create something that wasn<sq>t even really a guitar at all by changing the interface too much. So, Les Paul took an existing guitar neck, stuck it onto a 2x4 piece of wood and popped a few pickups (transducers) in it. It seems trivial in retrospect, but that inventive spirit was instrumental in the creation of modern music. Totally awesome!<br><br>------<br><br>Software isn<sq>t much different! As programmers it<sq>s not unusually to have to design/engineer solutions to new problems that stand in the way of our goals. You (or your team) has a cool idea that you believe in. You might think you can change the world with your project, or maybe you just think you can compete in a market and make some cash. Because you idea is unique, you<sq>ll run into design problems that nobody has faced before, and you<sq>ll have to use every ounce of your creative energy to proceed. But, at the same time you<sq>ll run into a lot of things like the *wheel* and the *guitar neck* - things that are solved problems that you didn<sq>t invent that you just need to learn about and use to further *your design*. These things might be design patterns, they might be common data structures and algorithms, they might even be someone else<sq>s framework, toolkit, middleware product, or an existing software library. <br><br>Face it, you<sq>re not going to invent/design/engineer every solution in the entire problem domain. <br><br>Even the best inventors rely on existing inventions; screws, bolts, wheels, gears, capacitors, transistors, batteries, displays, motors, rockets, etc. <br><br>Even the best programmers rely on existing solutions; design patterns, common data structures and algorithms, 3rd party libraries, operating systems, hardware and communication buses, the internet infrastructure, etc.<br><br>Look at the big picture. Remember what you are making and think about how that serves you. If you<sq>re just learning, you<sq>re not going to be inventing anything new! And if you<sq>re starting a new, unique project, I hope you<sq>ll be inventing all kinds of cool, new stuff - but even still, the vast majority of your unique project will be made up of little bits and pieces of solved programming problems.</p>", 
                "question": "All I do at work is Google how to do things then modify the code I find on Stack Overflow. I don<sq>t feel like I<sq>m actually programming."
            }, 
            "id": "cptxhvl"
        }, 
        {
            "body": {
                "answer": "<p>Oh god I<sq>m not the only one. This literally made my day</p>", 
                "question": "All I do at work is Google how to do things then modify the code I find on Stack Overflow. I don<sq>t feel like I<sq>m actually programming."
            }, 
            "id": "cptxn10"
        }, 
        {
            "body": {
                "answer": "<p>Its funny, this game engine is designed to minimize programming and this subreddit is about learning it =P. I guess it is good beginner material.<br><br>I bought the pack and I<sq>m mostly interested in the code for some of the games. Even if the language is limited, I<sq>m sure I<sq>ll learn a lot from looking at it.</p>", 
                "question": "Not sure if this is quite your guys thing but HumbeBundle has $1250 worth of game creating software up for $15."
            }, 
            "id": "d7h8k4k"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll probably pick it up, I mean for $15 the source code is definitely worth it. But does anyone have any experience with the Delphi language or GML scripts? It sounds like it<sq>d lead to a place with sparse resources for help and not much transferable skills. Of course Unity is out there for free with its C# ~~C++~~ and JS but the scale of it demotivates me extremely quickly I haven<sq>t really gotten past programming movement / crouching / gravity etc.</p>", 
                "question": "Not sure if this is quite your guys thing but HumbeBundle has $1250 worth of game creating software up for $15."
            }, 
            "id": "d7h8qs8"
        }, 
        {
            "body": {
                "answer": "<p>Never used Humble Bundle or Steam before, so forgive my ignorance, but could I buy it now and wait to install until I have better programming chops/a better computer than I do now?</p>", 
                "question": "Not sure if this is quite your guys thing but HumbeBundle has $1250 worth of game creating software up for $15."
            }, 
            "id": "d7h7nb8"
        }, 
        {
            "body": {
                "answer": "<p>Was just about to post this. Anyone thinking of trying this out to make some games?</p>", 
                "question": "Not sure if this is quite your guys thing but HumbeBundle has $1250 worth of game creating software up for $15."
            }, 
            "id": "d7h4gld"
        }, 
        {
            "body": {
                "answer": "<p>Now explain what the hardware does with the binary code. </p>", 
                "question": "For those of you wondering how code becomes <dq>ones and zeros<dq>"
            }, 
            "id": "cd6dpg3"
        }, 
        {
            "body": {
                "answer": "<p>I think what you are doing here to try and demystify the process is great, but you must be careful of accuracy. <br><br>> Pretty simple. Now, C as you know is a compiled language. **1. It gets compiled into assembly**, and then **2. the assembly tells the processor what to actually do**. Here<sq>s what the above would look like approximately in 6502 assembly. (I don<sq>t know if this is exactly what a compiler would actually write, but this code does the same thing).<br><br>[Numbers and emphasis are my own, to identify statements that require clarification.]<br><br>1. Not necessarily. This is implementation specific.<br>2. Not without being assembled first into machine code. Only machine code can be understood by the processor.<br><br>Sorry, but this statement <dq>It gets compiled into assembly<dq> is simply not true in many cases. C code is *not* necessarily compiled into assembly language (or any other language). You can compile C code directly into machine code. It all depends on the compiler you are using.<br><br>However, assembly language is more or less a human readable version of that machine code. The confusion that can arise here is the idea that you go from C code, to human readable assembly code, to machine code. The truth is that your compiler can take your C code (your file.c) and immediately convert it to machine code, not a human readable assembly language source code file (something.asm).<br><br>Using options in your C compiler (such as gcc) you can see what the assembly language translation of your program would look like, but C code generally does not need to go through a process of<colon> C Code -> Assembly -> Machine code. It can go straight from C code to machine code.<br><br>Further, assembly language does not <dq>tell the processor what to actually do.<dq> The processor cannot understand assembly language, any more than it could understand C (which is to say, not at all.) Only machine code can tell the processor what to actually do, not assembly language code.<br><br>Everything else I read about your explanation seems to be spot on, well done. I really support what you are doing here. <br><br>----<br><br>Some additional <dq>cool stuff<dq> you might want to add<colon><br><br>If you are using the gcc compiler, and you want to see the actual assembly language translation of your code, type<colon><br><br>    gcc -S file.c   <br><br>where file.c is your actual C source code. The file ending in .s will be the actual assembly language version of the code (so that you don<sq>t have to guess). Other compilers have similar options. This is also a great way to learn the basics of assembly language.<br><br>----<br><br>Very small nitpick, your conversion from hexadecimal to binary is slightly off. See line 2. <br><br>0x69 (hexadecimal 69) converts to<colon> 01101001 <br><br></p>", 
                "question": "For those of you wondering how code becomes <dq>ones and zeros<dq>"
            }, 
            "id": "cd6j2tn"
        }, 
        {
            "body": {
                "answer": "<p>Nice writeup. For anyone interested in going into this topic further, I recommend Charles Petzold<sq>s amazing book [Code.](http<colon>//www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319) It explains how you can build a computer from the ground up, starting with a simple logic circuit and ending with High Level Languages. Read the amazon reviews, anyone interested in knowing how computers work will get a lot out of this.</p>", 
                "question": "For those of you wondering how code becomes <dq>ones and zeros<dq>"
            }, 
            "id": "cd6e3c1"
        }, 
        {
            "body": {
                "answer": "<p>Hot damn, an entire Computer Organization and Architecture course summed up in a single reddit post. Not bad at all.</p>", 
                "question": "For those of you wondering how code becomes <dq>ones and zeros<dq>"
            }, 
            "id": "cd6f2dl"
        }, 
        {
            "body": {
                "answer": "<p>Wow - A reddit about me <colon>)  Cool  - The latest version of my Python 3.0 course and book are available at www.py4e.com - always free, self-paced and available.</p>", 
                "question": "For those out there trying to wrap their heads around Python. This guy Chuck Severance makes excellent tutorials"
            }, 
            "id": "daktut0"
        }, 
        {
            "body": {
                "answer": "<p>He is a professor in Michigan state university. I took a coursera course under him. Databases to be exact. Was a very good instructor. </p>", 
                "question": "For those out there trying to wrap their heads around Python. This guy Chuck Severance makes excellent tutorials"
            }, 
            "id": "daka3am"
        }, 
        {
            "body": {
                "answer": "<p>His Python for Informatics book is brilliant, as is the related Coursera course.<br><br>Edit<colon> fat thumbs!</p>", 
                "question": "For those out there trying to wrap their heads around Python. This guy Chuck Severance makes excellent tutorials"
            }, 
            "id": "dakagbu"
        }, 
        {
            "body": {
                "answer": "<p>His introductory Coursera class is what I used as my introduction to programming. It was the perfect level for me and I recommend it to everyone I know. Have yet to find another instructor that makes material as open and accessible to everyone as he does.</p>", 
                "question": "For those out there trying to wrap their heads around Python. This guy Chuck Severance makes excellent tutorials"
            }, 
            "id": "dakco31"
        }, 
        {
            "body": {
                "answer": "<p>Switched companies a few months ago. Got hired as the Java Lead for all the Java projects in the company. People are assuming I am a guru, and I know everything about the existing frameworks and stacks...<br><br>I decided that in order to progress I need to actually start asking questions... And I did. It was leap in modesty and initial concerns proved to be wrong. There<sq>s no shame in asking the intern about the gradle build (I<sq>ve only used maven before), or the devops guy about Docker.</p>", 
                "question": "If you want to learn you<sq>ll need to be willing to look stupid."
            }, 
            "id": "dbhdhvi"
        }, 
        {
            "body": {
                "answer": "<p>As a corollary to this, if you do ask question, be prepared to listen to the answer and even if you don<sq>t like the answer don<sq>t question it. By all means, you don<sq>t have to accept the answer, but before questioning it take some time to think it over.<br><br>As an example, I had been working at a big bank for about three years when we had a new developer join. The new developer approach me with some questions on how the trading system worked. <br><br>I gave him my reply and then he promptly insisted I was wrong and that I had no clue. So I said fine, just you go and figure it out for yourself.<br><br>He never did manage to make his code work and two months later he was sacked.</p>", 
                "question": "If you want to learn you<sq>ll need to be willing to look stupid."
            }, 
            "id": "dbhhodj"
        }, 
        {
            "body": {
                "answer": "<p>So if I<sq>m new at a job, and I<sq>m asking a lot of questions about <dq>obvious knowledge<dq>, doesn<sq>t that make me look like I lied about my experience? What would stop them from letting me go on the spot?<br></p>", 
                "question": "If you want to learn you<sq>ll need to be willing to look stupid."
            }, 
            "id": "dbhbxcf"
        }, 
        {
            "body": {
                "answer": "<p>I see something similar on forums, especially Linux forums. People will just spout out commands without explaining what they do. I<sq>d the OP doesn<sq>t all for clarification, they<sq>ve solved their current problem but haven<sq>t learned how to fix similar problems. When I answer a question, I try to explain what the problem is and how the answer helps solve the problem. This allows OP (and others who find it though search engines) to tailor the answers to any specific situations they have.</p>", 
                "question": "If you want to learn you<sq>ll need to be willing to look stupid."
            }, 
            "id": "dbhpxro"
        }, 
        {
            "body": {
                "answer": "<p>so I envisioned working 11-7 every day<br><br>I used to think that. I actually got a job that would allow me to do that. However, being almost 30, I find I like starting at 6 or 7 am, because my day is done by 3 or 4, sometimes even earlier. I do still hate getting up in the morning though. <br><br>But I think you hit the nail on the head. I could easily leave my job now for another job and get a 20k a year raise. But I have great benefits, and work from home. I wouldn<sq>t give that up for double my salary. </p>", 
                "question": "My first year and a half as a professional software developer<colon> what I expected and what I got"
            }, 
            "id": "crl8c35"
        }, 
        {
            "body": {
                "answer": "<p>Awesome writeup, and very valuable life experiences.  Thanks for sharing!  I have a similar story.<br><br>> So now I\u2019m contemplating another job switch, but I\u2019m afraid that if I keep switching jobs, future employers will look negatively on that.<br><br>That<sq>s a common thing that everyone (not just devs) always keep in the back of their heads.  Fortunately, in our market, this doesn<sq>t apply.  The reason why the recruiter called you even before you pulled your car out is because there are more development jobs out there right now then there are quality engineers.  Don<sq>t ever be afraid to invest in yourself.  That might mean sticking it out for another 6 months to see how things go, or quitting just to save yourself some mental sanity while you pick up some freelance jobs to pay the bills.  Make a decision that you think will be beneficial for your career, and do it the best you can.<br><br>I had a similar experience fresh out of college.  Worked for a massive multi-billion dollar corporation and they demanded 60-70 hours a week.  I (<dq>we<dq> is probably a better term) burnt out pretty quickly, and I left after 6 months.  I think pursued a self-employed career picking up any odd jobs I could find on sites like <sq>freelancer.com<sq> or <sq>guru.com<sq>.  It was very rewarding, but extremely difficult.  Remember, you<sq>re not only the engineer in your business, but the CEO, CTO, CFO, the entire marketing department. <br><br>Over the course of the years (about 8), I have built up about a 3 page resume (probably going to update it to about 4 pages soon).  I now have 6 positions under the experience, but this is not my primary focus of the resume.  I have a <sq>research<sq> section, which identifies the side-projects I have or am working on, and am really trying to sell the point that I love this stuff and I<sq>m not just doing it because it pays well.  (There are a lot of people in the industry that are doing it because it just pays well, and you can point them out after working a day with them.)  My last job I accepted I had 2 other offers at the exact same time, and was able to really negotiate out the best options for my career.  <br><br>> So this is what I extend to people looking to be developers<colon> your workplace is probably just as, if not more important that the actual job itself<br><br>I could not agree more.  The environment, and *who* you work with is probably the biggest dealbreaker when it comes to company morale and turnover rate.  <br><br>> Just because you major in CS doesn<sq>t mean you are pigeonholed to certain careers. <br><br>Agreed.  Anyone can do anything IT-related with a CS degree.  It<sq>s completely your option in which field you go after college.  I highly suggest you find out what you want to do and really get good at it.  Just pick 1 strong, broad thing (mine is C# & .NET dev) and really go nuts.  I have found it to be much easier to market yourself if you<sq>re really good at one thing, rather than being decent at quite a number of things.  <br><br>Sorry, didn<sq>t mean to write a book.  TLDR; What OP said.</p>", 
                "question": "My first year and a half as a professional software developer<colon> what I expected and what I got"
            }, 
            "id": "crl9z3o"
        }, 
        {
            "body": {
                "answer": "<p>I am new to CS and thank you for this post. I certainly got something out of it.</p>", 
                "question": "My first year and a half as a professional software developer<colon> what I expected and what I got"
            }, 
            "id": "crlblg8"
        }, 
        {
            "body": {
                "answer": "<p></p>", 
                "question": "My first year and a half as a professional software developer<colon> what I expected and what I got"
            }, 
            "id": "crlh354"
        }, 
        {
            "body": {
                "answer": "<p>Its a good collection, but its missing(because you say <dq>core cs courses<dq>)<br><br>1. automata theory<br>2. compiler design<br>3. programming language theory<br><br></p>", 
                "question": "The Open-Source Computer Science Degree"
            }, 
            "id": "cspl218"
        }, 
        {
            "body": {
                "answer": "<p>I have a trello compiled of becoming a full stack JavaScript developer. I would love to share it with you. I am a CS student at a university right now, and although the courses you have are great, you actually have to learn to develop, and JavaScript is a pretty easy language for it. Much easier then C, in my opinion.</p>", 
                "question": "The Open-Source Computer Science Degree"
            }, 
            "id": "csphm67"
        }, 
        {
            "body": {
                "answer": "<p>As someone who knows extremely little programming (did some code academy courses), is this something I can dive right into or is there anything I should cover on my own before beginning this? I<sq>m looking to broaden my knowledge before starting my bachelors in computer science in a year or two. </p>", 
                "question": "The Open-Source Computer Science Degree"
            }, 
            "id": "cspk0o6"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s missing from a standard US university CS degree is a collection of math requirements and some kind of elective science requirement.<br><br>This includes at any level of interest (e.g. from 1/2 a semester up to two semesters, depending on how flexible the university is with math reqs)<colon><br><br>* Pre calculus<colon> Trig and algebra.<br>* Calculus<colon> Differentiation, Integration on 2D and 3D surfaces, and Vectors and vector calculus.<br>* Linear algebra<br>* Differential equations<br>* Probability and stats<br>* Graph theory<br>* Control theory<br>* Physics xor Chemistry xor Biology (Introductory courses, one or two terms)<br><br>Also fun, but not mandatory<colon><br><br>* Introduction to electrical engineering<br>* Courses involved with designing and implementing on FPGAs or asynchs.<br>* Intro to technical writing<br><br><br>UX Design, Mobile Dev, Database systems, and Intro to web dev are optional courses one might take leading them on a track to graduation. At a university, one might take courses in the following fields, as they seem more interesting, setting them on a <dq>track<dq> to graduation<colon>  <br><br>* AI<br>* Compilers<br>* Distributed and Parallel Processing<br>* Graphics and Data visualization<br>* Human Computer Interaction<br>* Networks<br>* Robotics<br>* Security<br>* Video Games<br><br>Then there are all sorts of fun things you can take that might help in these fields<colon>  <br><br>* Art, e.g. computer art<br>* Economics, e.g. game theory<br>* Ethics, e.g. ethics in science<br>* Film and digital media<br>* Linguistics<br>* Music, e.g. electronic sound synthesizing<br>* Theater<colon> Digital media</p>", 
                "question": "The Open-Source Computer Science Degree"
            }, 
            "id": "csq2q9v"
        }, 
        {
            "body": {
                "answer": "<p>> The creativity comes out along the way, but you need to learn to play some cover songs first.<br><br>This is the most important thing I<sq>ve read on this entire sub.</p>", 
                "question": "<dq>I know how to program but I don<sq>t know what to program<dq>"
            }, 
            "id": "d89m808"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s a problem that affects novices and seasoned developers alike. If I had an ounce of creativity and/or market sense, I<sq>d be a millionaire by now <colon>(</p>", 
                "question": "<dq>I know how to program but I don<sq>t know what to program<dq>"
            }, 
            "id": "d89koig"
        }, 
        {
            "body": {
                "answer": "<p>If only there was a website to match these programmers with people with ideas and no programming knowledge.</p>", 
                "question": "<dq>I know how to program but I don<sq>t know what to program<dq>"
            }, 
            "id": "d89loa0"
        }, 
        {
            "body": {
                "answer": "<p>For me; I<sq>m consuming my own product, and that is what I decided to build. <br><br>Do that.</p>", 
                "question": "<dq>I know how to program but I don<sq>t know what to program<dq>"
            }, 
            "id": "d89yi55"
        }, 
        {
            "body": {
                "answer": "<p>Hey Al, did some messing around with your Hacking Secret Ciphers book a while ago and thoroughly enjoyed it. Thanks for writing such an interesting resource! <colon>)</p>", 
                "question": "My latest book for total beginners Automate the Boring Stuff with Python is almost ready! Free under a Creative Commons license and 30<percent> discount code (70<percent> for my other books) for physical copy"
            }, 
            "id": "cqjt4gl"
        }, 
        {
            "body": {
                "answer": "<p>Just bought a precopy. <br><br>Do you plan on doing video lessons in the near future? I am always looking for something educational to listen to while commuting.</p>", 
                "question": "My latest book for total beginners Automate the Boring Stuff with Python is almost ready! Free under a Creative Commons license and 30<percent> discount code (70<percent> for my other books) for physical copy"
            }, 
            "id": "cqjxm2y"
        }, 
        {
            "body": {
                "answer": "<p>Hey Al!<br>I<sq>ve got all your books and looking forward to adding this to the collection. Any clue when it<sq>ll be available in the UK? On the No Starch Press website shipping is more expensive than the book <colon>D</p>", 
                "question": "My latest book for total beginners Automate the Boring Stuff with Python is almost ready! Free under a Creative Commons license and 30<percent> discount code (70<percent> for my other books) for physical copy"
            }, 
            "id": "cqjyfid"
        }, 
        {
            "body": {
                "answer": "<p>I just bought it. Thanks!<br></p>", 
                "question": "My latest book for total beginners Automate the Boring Stuff with Python is almost ready! Free under a Creative Commons license and 30<percent> discount code (70<percent> for my other books) for physical copy"
            }, 
            "id": "cqjtief"
        }, 
        {
            "body": {
                "answer": "<p>TBH I watched the lambda video and it seems like you explained nothing at all in that video.</p>", 
                "question": "Video series of short TL;DRs that explain programming concepts simply (with example code)"
            }, 
            "id": "ddh6rie"
        }, 
        {
            "body": {
                "answer": "<p>Love it, very clear voice, simple explanations, good visual.<br><br>Well done!<br><br>May I ask what software you use to create them? <colon>P</p>", 
                "question": "Video series of short TL;DRs that explain programming concepts simply (with example code)"
            }, 
            "id": "ddgeqrk"
        }, 
        {
            "body": {
                "answer": "<p>Good job I like this idea. I subscribed.<br><br>TL;DR<colon> subbed</p>", 
                "question": "Video series of short TL;DRs that explain programming concepts simply (with example code)"
            }, 
            "id": "ddgyk4b"
        }, 
        {
            "body": {
                "answer": "<p>Love it. Short, sweet and to the freaking point. <br><br> Most videos you have to go through the shitty movie maker intro, an obligatory <dq>hey, what<sq>s up guys it<sq>s _______ and today I<sq>m gonna show you how to do ______<dq>, then it cuts to cellphone footage of a computer screen while someone talks 1/4 of an inch away from their mic. </p>", 
                "question": "Video series of short TL;DRs that explain programming concepts simply (with example code)"
            }, 
            "id": "ddh1kqa"
        }, 
        {
            "body": {
                "answer": "<p>This sub does the world a whole lot of good <colon>)</p>", 
                "question": "Congratulations /r/LearnProgramming- you<sq>re our Subreddit of the Day!"
            }, 
            "id": "c824rky"
        }, 
        {
            "body": {
                "answer": "<p>WooHoo!!!  As an <dq>experienced<dq> professional programmer, I love /r/LearnProgramming.  I always find useful tips and tricks here.  Glad to see it getting recognized.  </p>", 
                "question": "Congratulations /r/LearnProgramming- you<sq>re our Subreddit of the Day!"
            }, 
            "id": "c824qqd"
        }, 
        {
            "body": {
                "answer": "<p>Bring on the <dq>i iz total newb, how does i start programing lolz?<dq> posts...</p>", 
                "question": "Congratulations /r/LearnProgramming- you<sq>re our Subreddit of the Day!"
            }, 
            "id": "c826ego"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not ready for this place yet but I<sq>ve subscribed in preparation! </p>", 
                "question": "Congratulations /r/LearnProgramming- you<sq>re our Subreddit of the Day!"
            }, 
            "id": "c8269qo"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for doing these submissions.</p>", 
                "question": "Here<sq>s a list of 134 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2015)"
            }, 
            "id": "cpy7avl"
        }, 
        {
            "body": {
                "answer": "<p>This post should be stickied. Seems like half of posts on the subreddit are looking for these kinds of resources.<br><br>Well done.</p>", 
                "question": "Here<sq>s a list of 134 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2015)"
            }, 
            "id": "cpy8git"
        }, 
        {
            "body": {
                "answer": "<p>There is also a free course on Practical Numerical Methods with Python (Using Numpy, Scipy, and matplotlib) that has homework, quizzes, and exams here if you want to add it to the list! I just started it 2 days ago.<br><br>http<colon>//openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about</p>", 
                "question": "Here<sq>s a list of 134 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2015)"
            }, 
            "id": "cpymipj"
        }, 
        {
            "body": {
                "answer": "<p>Is there a way to get Udacity cheaper? 200/month is a quite hefty price. </p>", 
                "question": "Here<sq>s a list of 134 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (April 2015)"
            }, 
            "id": "cpy8vfy"
        }, 
        {
            "body": {
                "answer": "<p>How did you get your first job/ experience that led to you being able to be seen as qualified to be a developer? I<sq>m assuming that you<sq>ve worked on multiple projects, of course.</p>", 
                "question": "I am a software developer and have been for 15 years yet have zero qualifications in computer science or programming. I get along just fine. AmA if you want advice on being a software developer."
            }, 
            "id": "cxbskgb"
        }, 
        {
            "body": {
                "answer": "<p>Why not put information about yourself in the post rather than just a title? </p>", 
                "question": "I am a software developer and have been for 15 years yet have zero qualifications in computer science or programming. I get along just fine. AmA if you want advice on being a software developer."
            }, 
            "id": "cxbzzg4"
        }, 
        {
            "body": {
                "answer": "<p>I recently dropped out of college (computer engineering) to take a software developer position. The pay is low for the average developer, however I am learning a lot. What is your opinion on university and making the most out of my career? Should I work full/part time while doing an accelerated computer science degree or should I just devote my time to work and side projects?</p>", 
                "question": "I am a software developer and have been for 15 years yet have zero qualifications in computer science or programming. I get along just fine. AmA if you want advice on being a software developer."
            }, 
            "id": "cxbxw51"
        }, 
        {
            "body": {
                "answer": "<p>Is there really a point where things just clicked? Or was there a super useful piece of knowledge that made it come together for you? </p>", 
                "question": "I am a software developer and have been for 15 years yet have zero qualifications in computer science or programming. I get along just fine. AmA if you want advice on being a software developer."
            }, 
            "id": "cxc0lnz"
        }, 
        {
            "body": {
                "answer": "<p>Its actually in the faq but i doubt anyone reads it. </p>", 
                "question": "The holy grail of programming resources (hope it<sq>s useful to everyone)"
            }, 
            "id": "ckied8e"
        }, 
        {
            "body": {
                "answer": "<p>I made a simple list of links for learning stuff a while ago for some friends of mine that you might find useful<colon> www.hitchhiketheinternet.com/learn.html</p>", 
                "question": "The holy grail of programming resources (hope it<sq>s useful to everyone)"
            }, 
            "id": "ckiiwfe"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not sure if anyone has seen this before, but [I found some more books](http<colon>//www.reddit.com/r/learnprogramming/wiki/books)! OP maybe you can add it to your post.</p>", 
                "question": "The holy grail of programming resources (hope it<sq>s useful to everyone)"
            }, 
            "id": "ckife48"
        }, 
        {
            "body": {
                "answer": "<p>ANyone have good resources for code to read? I am looking for ruby sepcifically but any is cool. Ideally something that escalates in complesxity or length?</p>", 
                "question": "The holy grail of programming resources (hope it<sq>s useful to everyone)"
            }, 
            "id": "ckiopxt"
        }, 
        {
            "body": {
                "answer": "<p>Fuck the people downvoting this, this whole sub is about learning how to program and people don<sq>t like the idea when someone has a model on learning exactly what we<sq>re all fucking here for.</p>", 
                "question": "Hey r/learnprogramming. I<sq>m with LambdaSchool (a new code bootcamp in San Francisco) and we<sq>re launching a completely free livestreamed after-hours web development mini-bootcamp in February. No strings attached."
            }, 
            "id": "dbrkod4"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Hey r/learnprogramming. I<sq>m with LambdaSchool (a new code bootcamp in San Francisco) and we<sq>re launching a completely free livestreamed after-hours web development mini-bootcamp in February. No strings attached."
            }, 
            "id": "dbrcx3f"
        }, 
        {
            "body": {
                "answer": "<p>How can we be confident in your courses teaching programming/web dev when your website isn<sq>t using https when registering with private data? </p>", 
                "question": "Hey r/learnprogramming. I<sq>m with LambdaSchool (a new code bootcamp in San Francisco) and we<sq>re launching a completely free livestreamed after-hours web development mini-bootcamp in February. No strings attached."
            }, 
            "id": "dbrz68w"
        }, 
        {
            "body": {
                "answer": "<p>I work irregular hours. Will there be vod of the lessons available?</p>", 
                "question": "Hey r/learnprogramming. I<sq>m with LambdaSchool (a new code bootcamp in San Francisco) and we<sq>re launching a completely free livestreamed after-hours web development mini-bootcamp in February. No strings attached."
            }, 
            "id": "dbrcqhq"
        }, 
        {
            "body": {
                "answer": "<p>Currently failing my Discrete Math course.</p>", 
                "question": "PSA<colon> Learn Discrete Math"
            }, 
            "id": "d02rsrs"
        }, 
        {
            "body": {
                "answer": "<p>I tried. Barely pulled a C-, and it was more than I deserved.</p>", 
                "question": "PSA<colon> Learn Discrete Math"
            }, 
            "id": "d02pyzb"
        }, 
        {
            "body": {
                "answer": "<p>Excuse my ignorance, but what do I gain from it and how does it make me better as a programmer overall?<br><br>I<sq>m not disagreeing, I just want to know more. I<sq>m someone who wasted like 8 years of his life and no longer remembers any of the algebra/pre-calculus from my short time in college.</p>", 
                "question": "PSA<colon> Learn Discrete Math"
            }, 
            "id": "d02semg"
        }, 
        {
            "body": {
                "answer": "<p>If you want to be a good software developer, then learn software development, not discrete maths. It<sq>s far more useful to have a good understanding of the language you<sq>re using and the frameworks available than to know Ramsey Theory and the Pigeonhole Principle.<br><br>Though I absolutely agree that knowing mathematics helps, as a mathematician I disagree with what people consider to be discrete mathematics. [The first 8 chapters of Discrete Mathematics by Epps](http<colon>//www.cengage.com/search/productOverview.do;jsessionid=70B42A87B812C581C10551A136F3C562?N=0&Ntk=P_Isbn13&Ntt=9780495391326&Ntx=mode<percent>2Bmatchallpartial) are basically things you will learn in ANY mathematical discipline at the University level, I<sq>ve been introduced to these independently from Linear Algebra, Probability, Real Analysis and Discrete Maths classes.<br><br>It<sq>s essentially the basics to rigorous mathematics and does not belong uniquely to Discrete Maths, it<sq>s like telling someone to learn Fluid Dynamics because it<sq>s worth knowing how to take derivatives.<br><br>All the useful <dq>discrete maths<dq> you need will pretty much sit in the appendices or even the main text of any decent algorithms textbook. It<sq>s much more efficient to just learn the necessary discrete maths in context of computer science than to go take a full course on it independently from any programming.<br><br>I<sq>m in no way discouraging people from learning Discrete Maths, it<sq>s useful to now, but studying Discrete Maths will not improve your abilities as a software developer faster than learning Software Development (which is not mutually exclusive from maths). This is coming from someone studying a Masters in Mathematics and also programs for his day job.</p>", 
                "question": "PSA<colon> Learn Discrete Math"
            }, 
            "id": "d02xx6l"
        }, 
        {
            "body": {
                "answer": "<p>Absolutely. Seeing a practical project being executed is so valuable. It makes the abstract into something tangible. Also nice to see how different people approach the same problem</p>", 
                "question": "I would like to create programming projects and step-by-step explanations that will accompany them. Would like to know if you are interested."
            }, 
            "id": "dfopkc7"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d love to watch the web server one ... I get the individual parts to web development but really struggle when it comes to putting them together into a project. Would be interested in the n body one as well as it will bring back memories from my college years.</p>", 
                "question": "I would like to create programming projects and step-by-step explanations that will accompany them. Would like to know if you are interested."
            }, 
            "id": "dfossbe"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d love this. And I<sq>d use it too if these aren<sq>t videos. I personally can<sq>t deal with them because the pace is often too slow and hard to skip ahead to something that<sq>s new for me.  </p>", 
                "question": "I would like to create programming projects and step-by-step explanations that will accompany them. Would like to know if you are interested."
            }, 
            "id": "dfov4j4"
        }, 
        {
            "body": {
                "answer": "<p>I look forward to this project.</p>", 
                "question": "I would like to create programming projects and step-by-step explanations that will accompany them. Would like to know if you are interested."
            }, 
            "id": "dforb4g"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for your efforts. This is great!</p>", 
                "question": "~250 free online courses and MOOCs categorized by the programming language they are taught in"
            }, 
            "id": "d6c0snb"
        }, 
        {
            "body": {
                "answer": "<p>Great work, looking for a place to start learning nodejs. Anyone got any recommendations based on course list here?</p>", 
                "question": "~250 free online courses and MOOCs categorized by the programming language they are taught in"
            }, 
            "id": "d6cfwr5"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome. Would love to separate the courses based on which have a project-oriented approach (learn by doing/making/building) vs those that teach the language in the classical way(<dq>this is a function<dq>).<br></p>", 
                "question": "~250 free online courses and MOOCs categorized by the programming language they are taught in"
            }, 
            "id": "d6bw5zq"
        }, 
        {
            "body": {
                "answer": "<p>A wonderful resource. Thank you for your work on this!</p>", 
                "question": "~250 free online courses and MOOCs categorized by the programming language they are taught in"
            }, 
            "id": "d6c58mb"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 87 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2014)"
            }, 
            "id": "clu3cy8"
        }, 
        {
            "body": {
                "answer": "<p>Cay Horstman is the instructor for the Intro to Java programming from Udacity. He<sq>s also the author of Big Java which is the text book my university used for 2 or maybe 3 programming courses. Intro to Java, Intermediate Programming (Java), and maybe for portions of our Data Structures class.<br><br>That was a very good book and I was actually looking for an updated copy of it last week. But now that I found this class I think I<sq>ll just take it instead.</p>", 
                "question": "Here<sq>s a list of 87 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2014)"
            }, 
            "id": "clu4js3"
        }, 
        {
            "body": {
                "answer": "<p>dhawal, you are a wonderful human being. Thank you.</p>", 
                "question": "Here<sq>s a list of 87 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2014)"
            }, 
            "id": "clu5hq5"
        }, 
        {
            "body": {
                "answer": "<p>Yeee, boyeeee. I<sq>m about to enroll in two of these.<br><br>FYI, the third one from the top (Internetworking with TCP/IP) is in German and outdated. The current course, in English, is included toward the bottom.</p>", 
                "question": "Here<sq>s a list of 87 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2014)"
            }, 
            "id": "clue91b"
        }, 
        {
            "body": {
                "answer": "<p><br>Its so damm hard because people think about learning to code. But what they really should be doing is figuring out how to turn problems into code.</p>", 
                "question": "Why learning to code is so damn hard"
            }, 
            "id": "cob5nhf"
        }, 
        {
            "body": {
                "answer": "<p>Why is learning to...<br><br>* Play the piano<br>* Play basketball<br>* Paint<br>* Write a novel<br><br>...so damn hard! I mean if you want to play the piano at a high level, you are talking *literally years* of training!<br><br>Sorry for the sarcasm. I<sq>ve just always found it strange that people expect programming to be simple even though nothing else in life works this way. Nobody blames the piano just because it takes years to get good at it. But people expect to be able to program like a god after just trying it for a couple of months. <br><br>*Things worth learning to do well are usually hard to do.*</p>", 
                "question": "Why learning to code is so damn hard"
            }, 
            "id": "cob758i"
        }, 
        {
            "body": {
                "answer": "<p>This is fantastic. I want to say that even after building a working application, you can still fall into the Desert of Despair. It<sq>s like a roller coaster of sorts even after being <dq>job ready<dq>. <br><br>I have a functioning web application with active users, I<sq>m coding at least a few times a week now (and being paid to do so) and I<sq>ve gotten much better at building out the features, but I still suffer from [impostor syndrome](http<colon>//en.wikipedia.org/wiki/Impostor_syndrome), especially when hanging out with other developers. <br><br>I can deploy a basic CRUD app pretty quickly, create pretty neat features but when [reviewing things like this Programmer<sq>s Competency Matrix](http<colon>//www.reddit.com/r/learnprogramming/comments/2rda1t/came_across_something_useful_the_programmer/) I quickly realize I have so much to fucking learn.</p>", 
                "question": "Why learning to code is so damn hard"
            }, 
            "id": "cob5g6d"
        }, 
        {
            "body": {
                "answer": "<p>Yo the top 1/4th of your mobile site is blocked by your gigantic header </p>", 
                "question": "Why learning to code is so damn hard"
            }, 
            "id": "cob7cpq"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t try to understand everything. If you<sq>re programming on a computer, you<sq>re using thousands of layers of abstraction. Once you try to think about the underlying processes that don<sq>t really matter to what you<sq>re currently doing, you start to lose focus.<br><br>Take things one step at a time, and just appreciate it for what it is.</p>", 
                "question": "The complexity of programming blows my mind"
            }, 
            "id": "caikwxi"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been programming for something like 22 years and have worked on everything from operating system kernels, cell phone radio firmware and cockpit display units to scientific simulations to web and mobile applications.<br><br>I<sq>m still learning how everything works.<br><br>Learning to program is all about black boxes. A black box is something where you know the inputs and outputs, and you know generally what it does inside. A good black box appears to be simple from the outside and lets you have a simple mental model that<sq>s still accurate enough for most purposes.<br><br>When you start off, the computer as a whole is a black box. You type stuff and move the mouse and whatnot and the computer does stuff you want it to do. That<sq>s how users see a computer. Then you look inside the box and learn that there<sq>s such thing as <sq>hardware<sq> and <sq>software<sq> and that people can make software. Both of those are still black boxes. Then you look inside the software one (since this is /r/learnprogramming not /r/learnelectronics or something) and you find that there<sq>s an <sq>operating system<sq> which talks to the hardware, and there<sq>s <sq>applications<sq> that people write to do stuff that users want.<br><br>And so on and so forth. As you grow as a developer, you should take opportunities to look inside the black boxes and see the machinery inside. You also end up creating your own that you yourself use, and that you give to others to use. Either way you need to be able to close the box, forget how it works inside, and rely on your mental model of it in order to use it inside other boxes.<br><br>Once you<sq>ve looked inside a box, you can then open and close the box at will<colon> look inside to fix your mental model when its behaviour doesn<sq>t make sense, then close it and forget about the machinery once your mental model is accurate enough for the time being. <br><br>The key to being a productive developer then becomes<colon> which ones do you have open and which ones should be closed?<br><br>Your problem is that you<sq>ve opened too many at once and you<sq>ve gotten overwhelmed. You got vertigo from looking down too many layers of abstraction at once. So you need to go back to the beginning<colon> look at it from the user<sq>s perspective again, and then one by one open the boxes again one step at a time. Then close the ones you don<sq>t need at the moment.</p>", 
                "question": "The complexity of programming blows my mind"
            }, 
            "id": "cairnlh"
        }, 
        {
            "body": {
                "answer": "<p>The intimidation factor comes from thinking you have to be a know-it-all like John Carmack or some Hackathon finalist. Code an entire Super Mario hack over the weekend and an OpenGL driver when you<sq>re bored. <br><br>Everything seems to be easier now. I probably wouldn<sq>t survive as a coder in the 90s. Today all the hardcore stuff is already abstracted by middleware and libraries. Horsepower is plentiful so I don<sq>t have jump through hoops. A project gets broken down to small digestible parts for different teams.</p>", 
                "question": "The complexity of programming blows my mind"
            }, 
            "id": "caio5ys"
        }, 
        {
            "body": {
                "answer": "<p>Computer Engineering is cool. You learn how to go from a transistor all the way up to a fully functional computer <colon>D. It<sq>s magical and awesome. </p>", 
                "question": "The complexity of programming blows my mind"
            }, 
            "id": "cailzsi"
        }, 
        {
            "body": {
                "answer": "<p>> Google everything , even if you know what you are doing , google everything anyway. Double checking your code can<sq>t harm anyone .<br><br>Hmm. I don<sq>t know about this one. This is what code review / peer review is supposed to be for. If all I ever did was google my code, it<sq>d take me forever to get everything done. <br><br>You seem really new to this. So, I<sq>ll tell you what a peer recently told me... Your problem solving ability is far more important than your <dq>coding<dq> ability. What this means is that, you<sq>ll learn about different paradigms(SOLID,D.R.Y, etc.) with experience. So no need to constantly check Google. In **my** opinion, a defensive coder is a good coder. <br><br>Now, once (if) you have aspirations to be a developer/engineer you<sq>ll be googling error messages, not how to do something. <br><br>But that<sq>s just my 3.50.</p>", 
                "question": "I became a developer that has <sq>googling well<sq> as most valuable skill."
            }, 
            "id": "d8rlqbp"
        }, 
        {
            "body": {
                "answer": "<p>Not a bad post, mate. I did notice that you said English is your second language, but a bit of touching up on grammar and spelling would make this much easier to read. </p>", 
                "question": "I became a developer that has <sq>googling well<sq> as most valuable skill."
            }, 
            "id": "d8rlqb5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.3935 <br> > ...</p>", 
                "question": "I became a developer that has <sq>googling well<sq> as most valuable skill."
            }, 
            "id": "d8s0zzy"
        }, 
        {
            "body": {
                "answer": "<p>How much do you make?</p>", 
                "question": "I became a developer that has <sq>googling well<sq> as most valuable skill."
            }, 
            "id": "d8rkyqm"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been paid to code for 20 years, and I still type in everything I<sq>m learning. Every. Single. Line. And that includes when I<sq>m going through a <dq>getting started<dq> online tutorial for a new language.<br><br>The reason I do this goes back to, of all people, Richard Feynman. When he was in college and studying mathematics, the legend/story goes that he had his own book of integration tables that he calculated himself. This was before easy-access computing was available, but well after a book of common integrations was available to buy (as most of his fellow students did). Apparently he later said that the mechanical act of getting doing all those calculations over and over and over resulted in a familiarity with the <dq>feel<dq> of calculus and numbers that he couldn<sq>t get otherwise.<br><br>This is why I continue to do lots of things <dq>from scratch<dq> over and over again. Getting involved repeatedly with the core concepts of coding or a toolkit or a syntax has an amazing effect. This and code reading are what have made me the <dq>ask him<dq> guy at each job, learning the tools more deeply and intimately than my coworkers.</p>", 
                "question": "n00b Tip. Do not copy and paste code. Write it line by line."
            }, 
            "id": "cmkj0b3"
        }, 
        {
            "body": {
                "answer": "<p>Good tip, works too. I<sq>ve learned a number of things from writing code line-by-line and researching the parts that didn<sq>t seem clear.</p>", 
                "question": "n00b Tip. Do not copy and paste code. Write it line by line."
            }, 
            "id": "cmkdhpa"
        }, 
        {
            "body": {
                "answer": "<p>Copy and paste errors will plague you for the rest of your life as a programmer.<br><br>Normally, it<sq>s a bug that gets caught by the compiler.<br><br>We recently had one that caused massive invoice issues. We had to do major roll backs and rerun days worth of invoicing.<br><br>Another one accidentally double copied our mandatory audit data, resulting in the loss of 4 years worth of data, irrecoverably.</p>", 
                "question": "n00b Tip. Do not copy and paste code. Write it line by line."
            }, 
            "id": "cmke3dq"
        }, 
        {
            "body": {
                "answer": "<p>I copied and pasted some simple PHP mail() code and the guy who I got it from had a CC header in there with his own email address. He got about 150 emails before I figured it out. DOH!</p>", 
                "question": "n00b Tip. Do not copy and paste code. Write it line by line."
            }, 
            "id": "cmkf61p"
        }, 
        {
            "body": {
                "answer": "<p>I want to endorse this book so hard. <br><br>I struggled first with a Python course that had a ridiculously arbitrary autograder. It had the computer math tutor problem<colon> if you didn<sq>t do things just so, it would count you as wrong, which made it even more confusing when you could copy/paste your program into something like PyScripter and have it work perfectly.<br><br>I got this book two days ago and, with very little prior programming experience, just created my first iteration of rock/paper/scissors by myself. It<sq>s a small thing, I know, but it makes me happy because I feel like I<sq>m really learning the material instead of wondering whether I<sq>m actually getting something wrong or if it<sq>s just the machine.<br><br>Thanks, Mr. Sweigart.</p>", 
                "question": "3rd edition of <dq>Invent Your Own Computer Games with Python<dq> free to read online."
            }, 
            "id": "cpank5a"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m the author of <sq>Learn Java the Hard Way<sq> and I can confirm that this book is solid.</p>", 
                "question": "3rd edition of <dq>Invent Your Own Computer Games with Python<dq> free to read online."
            }, 
            "id": "cpapzud"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!</p>", 
                "question": "3rd edition of <dq>Invent Your Own Computer Games with Python<dq> free to read online."
            }, 
            "id": "cpah5au"
        }, 
        {
            "body": {
                "answer": "<p>Hi Al,<br><br>Just wanted to say your book was one of the first programming books I read about 4 years ago when I first got started. It was the first book to really grip me and make me really <dq>get<dq> programming. Thanks a lot!<br><br>new programmers - i cant recommend this book enough as a starting point regardless of what you want to do. I work in web development now.<br></p>", 
                "question": "3rd edition of <dq>Invent Your Own Computer Games with Python<dq> free to read online."
            }, 
            "id": "cpap42d"
        }, 
        {
            "body": {
                "answer": "<p>Quincy with Free Code Camp here. I don<sq>t think we<sq>ve ever proclaimed that FCC is a one-stop shop, and I agree with the OP that you should be skeptical of such claims. Here are a bunch of other free resources that we recommend our students for filling in the gaps<colon> https<colon>//medium.freecodecamp.com/25-free-resources-for-new-javascript-developers-11342cf1f4df#.tuc8r5zav</p>", 
                "question": "A review of FreeCodeCamp - the first 25 hours from an intermediate learner who was a skeptic. TLDR<colon> It<sq>s fantastic and any beginner should jump at it."
            }, 
            "id": "d1i4abl"
        }, 
        {
            "body": {
                "answer": "<p>Never used JS before, but what does this line do exactly<colon><br><br>    var numOfFactors = num / 1;<br><br>Isn<sq>t it the same as<br><br>    var numOfFactors = num;</p>", 
                "question": "A review of FreeCodeCamp - the first 25 hours from an intermediate learner who was a skeptic. TLDR<colon> It<sq>s fantastic and any beginner should jump at it."
            }, 
            "id": "d1hktve"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve come to agree with the notion of doing a bunch of different types of courses. I always wanted a one stop shop, but I think pounding things into your head, from multiple teaching/learning styles, is the best thing. So yeah, do codecademy (probably first), do FCC, watch youtube videos (there really are a lot of good ones, and it<sq>s nice to have someone explain it orally), google, practice, make websites, etc.  <br>  <br>  It<sq>s a pain though, after going through the first <sq>basics<sq> tutorial, having to skim through different resources, going over stuff you already know and remember, again and again because there ISN<sq>T a one stop shop that can prevent that.  <br>  <br>  That said, FCC is as close as you<sq>ll get.</p>", 
                "question": "A review of FreeCodeCamp - the first 25 hours from an intermediate learner who was a skeptic. TLDR<colon> It<sq>s fantastic and any beginner should jump at it."
            }, 
            "id": "d1hlbew"
        }, 
        {
            "body": {
                "answer": "<p>While I don<sq>t think that it<sq>s a <dq>one stop shop<dq> for getting hired, it certainly helped me. I have a degree in business, but landed an internship from just the portfolio I built with FCC (finished the front-end cert), which in turn helped me get my current full time developer position. Present yourself well, have some projects to show off that you<sq>re proud of and willing to talk about, and grind it out and you can certainly get a job from the knowledge you gain from FCC</p>", 
                "question": "A review of FreeCodeCamp - the first 25 hours from an intermediate learner who was a skeptic. TLDR<colon> It<sq>s fantastic and any beginner should jump at it."
            }, 
            "id": "d1ijg84"
        }, 
        {
            "body": {
                "answer": "<p>Only if it starts with a FAQ from each person.</p>", 
                "question": "LearnProgramming Poll<colon> Are you interested in a series of AMAs from industry professionals?"
            }, 
            "id": "c7qz1q1"
        }, 
        {
            "body": {
                "answer": "<p>I think this would be interesting, but may end up distracting from learnprogramming.<br><br>Top question<colon> How did you get to where you are/break into the world of programming?<br><br>Top answer<colon> Program, program, program (not read a bunch of answers on people<sq>s specific situation on how THEY learned programming)</p>", 
                "question": "LearnProgramming Poll<colon> Are you interested in a series of AMAs from industry professionals?"
            }, 
            "id": "c7qz2vk"
        }, 
        {
            "body": {
                "answer": "<p>Are you mostly looking for rockstar programmers or people with great jobs/at top companies sorta in the middle of their careers?   <br>I<sq>m pretty sure there<sq>s at least 10 people from Google / Amazon / wherever reading this. They might be more representative of day-to-day life programming </p>", 
                "question": "LearnProgramming Poll<colon> Are you interested in a series of AMAs from industry professionals?"
            }, 
            "id": "c7raiqc"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m looking forward to this. Especially the game programmer</p>", 
                "question": "LearnProgramming Poll<colon> Are you interested in a series of AMAs from industry professionals?"
            }, 
            "id": "c7qzhwl"
        }, 
        {
            "body": {
                "answer": "<p>This. Or if you figure out the answer to your question before anyone else post it, don<sq>t just say <dq>I<sq>ve figured it out.<dq> Explain the answer in the comments so when someone else has the same problem/question and they find your thread they won<sq>t be left feeling frustrated because all you said was that you<sq>ve figured it out.</p>", 
                "question": "People please don<sq>t delete your posts."
            }, 
            "id": "cpe2y5c"
        }, 
        {
            "body": {
                "answer": "<p>Well, the good thing is that besides OP<sq>s original post, the thread is still accessible<colon><br><br>http<colon>//www.reddit.com/r/learnprogramming/comments/2ywzzm/best_way_to_learn_oop/<br><br>Honestly, this was one of the best and most informative threads that happened here in quite some time.<br><br>Can<sq>t fathom why OP decided to delete it.</p>", 
                "question": "People please don<sq>t delete your posts."
            }, 
            "id": "cpe32vn"
        }, 
        {
            "body": {
                "answer": "<p>Of course, the kind of person that would delete their post after getting help will probably not see this thread</p>", 
                "question": "People please don<sq>t delete your posts."
            }, 
            "id": "cpe3b4t"
        }, 
        {
            "body": {
                "answer": "<p>>There was a very interesting thread earlier today about object oriented programming, with lots of people assisting and making comments on it. It was a great thread and in the end the OP deleted it. Which sucks, because now when someone searches /r/learnprogramming for <dq>OOP,<dq> <dq>how to learn OOP<dq> or <dq>object oriented programming<dq> that post will not be there. This sub is supposed to be an accumulation of knowledge and assistance. When people delete their posts, other future posters and lurkers will no longer get the benefit of the assistance they recieved. And that<sq>s not cool.<br><br>>It<sq>s right there on the sidebar<colon><br>>Posting Guidelines<br><br>>\\02. DO NOT DELETE YOUR POST<br><br>>Seriously. Don<sq>t.<br><br><br>OP just in case <br></p>", 
                "question": "People please don<sq>t delete your posts."
            }, 
            "id": "cpe27z3"
        }, 
        {
            "body": {
                "answer": "<p>maybe it would be good to take <dq>utm_source=hackernews<dq> out of the link so that their tracking doesnt get noisy.</p>", 
                "question": "CodeCademy just released a <dq>learn the command line<dq>"
            }, 
            "id": "cuefaq4"
        }, 
        {
            "body": {
                "answer": "<p>Code academy<sq>s biggest problem in my opinion is it never makes it clear about how this stuff can be applied (especially in the JS and Python sections) and it all comes across a little abstract. Windows doesn<sq>t even seem to have Command Line. elsewhere on the internet I<sq>m told you can dl a program for it, but still. <br><br>Edit<colon> Turns out Command Prompt IS a Command Line Interpreter. It just uses a different syntax to what is taught on CA.</p>", 
                "question": "CodeCademy just released a <dq>learn the command line<dq>"
            }, 
            "id": "cueiqbh"
        }, 
        {
            "body": {
                "answer": "<p>Nice tutorial, but its annoying how unresponsive the commandline is. Would have been nice if you could just ssh into somewhere to do the commands. <br><br>Could it be high server load or something causing it to be so slow? I can<sq>t imagine there<sq>s no way to make it more responsive. <br></p>", 
                "question": "CodeCademy just released a <dq>learn the command line<dq>"
            }, 
            "id": "cuefo4c"
        }, 
        {
            "body": {
                "answer": "<p>I teach an introductory MATLAB course at university. I make them use the command line to do file navigation/organization and it<sq>s always such a hassle to introduce it... they get so annoyed that they have to learn two things at once. Maybe they<sq>ll enjoy this more. ;)</p>", 
                "question": "CodeCademy just released a <dq>learn the command line<dq>"
            }, 
            "id": "cuedve7"
        }, 
        {
            "body": {
                "answer": "<p>Ground up explanation<colon><br><br>Computer and Electrical Engineers at Intel, AMD, or other CPU vendor companies come up with a design for a CPU. Various aspects of the CPU comprise its architecture<colon> register and bus bit widths, endianness, what code numbers map to what behavior executions, etc.<br><br>The last part, <dq>what code numbers map to what behavior executions,<dq> is what constitutes an Instruction Set Architecture. I<sq>m going to lie a little bit and tell you that binary numbers directly control hardware actions, based on how the hardware is built. The x86 architecture uses variable-width instruction words, so some instructions are one byte and some are huge, and Intel put a lot of work into optimizing that. Other architectures, like MIPS, have fixed-width 32-bit or 64-bit instruction words.<br><br>An instruction is a single unit of computable data. It includes the actual behavior the CPU will execute, information describing where data is fetched from and where data goes, numeric literals called <dq>immediates<dq>, or other information necessary for the CPU to act. Instructions are simply binary numbers laid out in a format defined by the CPU<sq>s Instruction Set Architecture.<br><br>These numbers are hard to work with as humans, so we created a concept called <dq>assembly language<dq> which created 1<colon>1 mappings between machine binary code and (semi-) human readable words and concepts. For instance, `addi r7, r3, $20` is a MIPS instruction which requests that the contents of register 3 and `0x20` (32) be added together, and this result stored in register 7.<br><br>The two control flow primitives are comparators and jumpers. Everything else is built off of those two fundamental behaviors.<br><br>All CPUs define comparison operators and jump operators.<br><br>Assembly language allows us to give human labels to certain memory addresses. The assembler can figure out what the actual address of those labels are at assembly or link time, and subsitute `jmp some_label` with an unconditional jump to an address, or `jnz some_other_label` with a conditional jump that will execute if the zero flag of the CPU<sq>s status register is not set (that<sq>s a whole other topic, don<sq>t worry about it, ask if you<sq>re curious).<br><br>Assembly is hard, and not portable.<br><br>So we wrote assembly programs which would scan English-esque text for certain phrases and symbols, and create assembly for them. Thus were born the initial programming languages -- programs written in assembly would scan text files, and dump assembly to another file, then the assembler (a *different* program, written either in assembly or in hex by a seriously underpaid junior engineer) would translate the assembly file to binary, and then the computer can run it.<br><br>Once, say, the C compiler was written in ASM, and able to process the full scope of the C language (a specification of keywords, grammar, and behavior that Ken Thompson and Dennis Ritchie made up, and then published), a program could be written in C to do the same thing, compiled by the C-compiler-in-ASM, and now there is a C compiler written in C. This is called boostrapping.<br><br>A language *itself* is merely a formal definition of what keywords and grammar exist, and the rules of how they can be combined in source code, for a compliant program to turn them into machine instructions. A language specification may also assert conventions such as what function calls look like, what library functions are assumed to be available, how to interface with an OS, or other things. The C and POSIX standards are closely interlinked, and provide the infrastructure on which much of our modern computing systems are built.<br><br>A language alone is pretty damn useless. So libraries exist. Libraries are collections of executable code (functions) that can be called by other functions. Some libraries are considered standard for a programming language, and thus become entwined with the language. The function `printf` is not defined by the C compiler, but it is part of the C standard library, which a valid C implementation **must have**. So `printf` is considered part of the C language, even though it is not a keyword in the language spec but is rather the name of a function in libc.<br><br>Compilers must be able to translate source files in their language to machine code (frequently, ASM text is no longer generated as an intermediate step, but can be requested), and must be able to combine multiple batches of machine code into a single whole. This last step is called linking, and enables libraries to be combined with programs so the program can use the library, rather than reinvent the wheel.<br><br>____<br><br>On to your other question<colon> how does `print()` work.<br><br>UNIX has a concept called <dq>streams<dq>, which is just indefinite amounts of data <dq>flowing<dq> from one part of the system to another. There are three <dq>standard streams<dq>, which the OS will provide automatically on program startup. Stream 0, called `stdin`, is Standard Input, and defaults to (I<sq>m slightly lying, but whatever) the keyboard. Streams 1 and 2 are called `stdout` and `stderr`, respectively, and default to (also slightly lying, but whatever) the monitor. Standard Output is used for normal information emitted by the program during its operation. Standard Error is used for *abnormal* information. Other things besides error messages can go on stderr, but it should not be used for ordinary output.<br><br>The `print()` function in Python simply instructs the interpreter to forward the string argument to the interpreter<sq>s Standard Output stream, file descriptor 2. From there, it<sq>s the Operating System<sq>s problem.<br><br>To implement `print()` on a UNIX system, you simply collect a string from somewhere, and then use the syscall `write(1, &my_string)`. The operating system will then stop your program, read your memory, and do its job and frankly that<sq>s none of your business. Maybe it will print it to the screen. Maybe it won<sq>t. Maybe it will put it in a file on disk instead. Maybe not. You don<sq>t care. You emitted the information on stdout, that<sq>s all that matters.<br><br>____<br><br>Graphical toolkits also use the operating system. They are complex, but basically consist of drawing shapes in memory, and then informing another program which may or may not be in the OS (on Windows it is, I have no clue on OSX, on Linux it isn<sq>t) about those shapes. That other program will add those shapes to its concept of what the screen looks like -- a giant array of 3-byte pixels -- and create a final output. It will then inform the OS that it has a picture to be drawn, and the OS will take that giant array and dump it to video hardware, which then renders it.<br><br>If you want to write a program that draws an entire monitor screen and asks the OS to dump it to video hardware, you are interested in compositors.<br><br>If you want to write a library that allows users to draw shapes, and your library does the actual drawing before passing it off to a compositor, you<sq>re looking at graphical toolkits like Qt, Tcl/Tk, or Cairo.<br><br>If you want to physically move memory around and have it show up on screen, you<sq>re looking at a text mode VGA driver. Incidentally, if you want to do this yourself, the [intermezzOS](https<colon>//github.com/intermezzos) project is about at that point.</p>", 
                "question": "ELI5<colon> How are programming languages made?"
            }, 
            "id": "d9z75vs"
        }, 
        {
            "body": {
                "answer": "<p>Well each command is read in and tokenized and parsed through to the assembler.. so for example in C when u do printf (<dq>hello world<dq>) the compiler sees that and finds a printf, takes in the arguments seperated by commas and irganizes it i to assembly.<br><br>So in ARM assembly the same command would be.  <br>.data<br>Hworld<colon>  .asciz <dq>hello world<dq>                                             <br>.text<br>Ldr r0, =hworld                                                                      <br>Bl printf                                    <br><br>The compilers job is to translate instructions from that language into its assembly pieces and reorganize them the way it should be ran.. if youd like to see how the compiler reformats it into assembly code compile C or C++ code using <br><dq>gcc -S filename.c<dq> and replace filename.c with ur c or cpp file. <br><br>Without a deep understanding of assembly programming or structuring a language into tokenizable things, writing your own programming language is a task that would be confusing and make no sense.</p>", 
                "question": "ELI5<colon> How are programming languages made?"
            }, 
            "id": "d9yyo6j"
        }, 
        {
            "body": {
                "answer": "<p>What I have learned from the other comments in this section is that this can<sq>t be explained to a five year old.</p>", 
                "question": "ELI5<colon> How are programming languages made?"
            }, 
            "id": "d9zf77l"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf</p>", 
                "question": "ELI5<colon> How are programming languages made?"
            }, 
            "id": "d9yy883"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2013)"
            }, 
            "id": "cav8n3k"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for the list, really appreciate you organizing all these links. For real beginners who wants to learn programming, will the beginner courses teach me the basic structure of programming or something more practical?</p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2013)"
            }, 
            "id": "cav9rk2"
        }, 
        {
            "body": {
                "answer": "<p>This should be stickied.</p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2013)"
            }, 
            "id": "cave4k2"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m going to sound incredibly stupid, but is there a class for learning to code at all, and if so, what<sq>s it called?</p>", 
                "question": "Here<sq>s a list of 31 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (July 2013)"
            }, 
            "id": "cavcuir"
        }, 
        {
            "body": {
                "answer": "<p>I work primarily in Ruby on Rails, and there<sq>s a gem called Devise that also gives you log-in/registration functionality out of the box (which you can then customize). Good stuff.</p>", 
                "question": "<dq>Hackathon Starter<dq> - I wish I found this earlier I<sq>m guessing so will you (..)"
            }, 
            "id": "d5m8kts"
        }, 
        {
            "body": {
                "answer": "<p>Also checkout http<colon>//megaboilerplate.com<br><br>It was written by the same guy.</p>", 
                "question": "<dq>Hackathon Starter<dq> - I wish I found this earlier I<sq>m guessing so will you (..)"
            }, 
            "id": "d5m999h"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//jhipster.github.io/ - Java backend (Spring Boot) + AngularJS Frontend + tons of tools. You can even design whole data model in their drag and drop tool and generate database + entity classes from it. Very helpful.</p>", 
                "question": "<dq>Hackathon Starter<dq> - I wish I found this earlier I<sq>m guessing so will you (..)"
            }, 
            "id": "d5m9shg"
        }, 
        {
            "body": {
                "answer": "<p>Django for Python is a web framework with this out of the box.</p>", 
                "question": "<dq>Hackathon Starter<dq> - I wish I found this earlier I<sq>m guessing so will you (..)"
            }, 
            "id": "d5md8vh"
        }, 
        {
            "body": {
                "answer": "<p>I love this so much!  I<sq>m learning programming at my university and it<sq>s so hard to get started.  My first experiences with programming were are university while many of the programmers are people who have programmed since they were very young and it can get discouraging to compare yourself to them.  <br><br>Learning the basics of programming is hard but absolutely necessary.  Imagine approaching a kinder-gardener and having this conversation<colon><br><br>><dq>Write an essay<dq>   <br>><dq>What, what is an essay?<dq>  <br>><dq>Well an essay is a collection of paragraphs.<dq>  <br>><dq>What<sq>s a paragraph?<dq>  <br>><dq>It<sq>s a collection of sentences?<dq>  <br>><dq>What<sq>s a sentence?<dq>  <br>><dq>It<sq>s a collection of words.<dq>  <br>><dq>What<sq>s a word?<dq>  <br>><dq>It<sq>s a collection of letters.<dq>  <br>><dq>Oh ok!  I know 8 letters can I start writing some words?<dq>  <br>><dq>Well no, you<sq>d want to learn all the 26 letters of the alphabet before moving on to words.<dq><br><br>Similarly when I started programming you have to learn basics like headers, arrays, variables, loops, classes, polymorphism, and other basics.  They<sq>re super simple but you can<sq>t move on to more complicated stuff until you get down the basics.  </p>", 
                "question": "Programmers<colon> Please don<sq>t ever say this to beginners ..."
            }, 
            "id": "cmofcul"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Programmers<colon> Please don<sq>t ever say this to beginners ..."
            }, 
            "id": "cmofl4d"
        }, 
        {
            "body": {
                "answer": "<p>copied from his site<colon><br><br>Here<sq>s a sample interaction between an experienced programmer and a beginner who is just learning programming<colon><br><br>> Programmer<colon> Hey, I hear you<sq>re learning programming. Cool, what<sq>re you learning?<br><br>> Beginner<colon> I<sq>m starting with some basic PHP and HTML using TextMate on my Mac.<br><br>> Programmer<colon> Haha, psssh, PHP is so dumb. You should learn Ruby on Rails, deploy on Heroku, and code in Vim. TextMate is for n00bs. Oh, then move onto some Node.js, that<sq>s sweeeeet. non-blocking I/O w000000t.<br><br>> Beginner<colon> uhhhhh, ok<br><br>I want to flip a shit whenever I hear something like this, because it<sq>s totally demoralizing to beginners. What a beginner hears is that someone whom they look up to is devaluing their current efforts and making what they<sq>re hard at work learning not seem like \u201creal programming.\u201d<br><br>If you<sq>re a programmer, please don<sq>t denigrate what a beginner is currently learning ... unless you<sq>re willing to personally invest the enormous amount of time to ensure that they learn what you want them to learn. Just making a snide drive-by remark about how their choice of languages or tools isn<sq>t as cool as what you use will likely drain their motivation.<br><br>I know it can be hard to resist sliding in a witty zinger dissing PHP or whatever language people love to hate on this year (I<sq>ve been guilty of this myself in the past!), especially because you know from the bottom of your hacker heart that your given language, framework, library, text editor, hosting environment, ergonomic keyboard, standing desk, etc. is soooo much better than whatever n00b rubbish they<sq>re learning. But please resist.<br><br>Just let them first learn something (anything!!!) to get hooked onto the potential of programming, and then you can offer to show them the true light later. If what they<sq>re learning is truly so terrible, then they will keep getting stuck and ask you whether there<sq>s an easier way. Then, and only then, you can unleash your treatise on pure functional programming or hygenic macros or whatever.<br><br>Also, you<sq>re probably not the only programmer the beginner is talking to. Many programmers (especially in online forums!) are probably making similar snide remarks, except they<sq>re saying that their own favorite language/library/framework/text editor/hosting environment is THE BEST EVAHHHHHHH. So now the beginner is really confused. They<sq>re repeatedly told that their given choice of tools is somehow terrible, even though they seem to be doing OK with it at the moment. But even worse, every so-called expert is recommending a different set of tools to learn. Who is right?!? What should they do next?!? For more details on this never-ending sense of frustration, read A Cautionary Tale of Learning to Code. My own. (How a reasonably balanced individual nearly went insane).<br><br>OK, so here<sq>s a more constructive version of the above interaction<colon><br><br>> Programmer<colon> Hey, I hear you<sq>re learning programming. Cool, what<sq>re you learning?<br><br>> Beginner<colon> I<sq>m starting with some basic PHP and HTML using TextMate on my Mac.<br><br>> Programmer<colon> Nice, show me something cool when you<sq>ve got your first PHP app running! Once you<sq>re more comfortable with basic web programming, I can show you my favorite framework, Ruby on Rails. Then we can see what it has in common with PHP, and how it differs.<br><br>> Beginner<colon> Thanks for the encouragement! Will keep you posted.</p>", 
                "question": "Programmers<colon> Please don<sq>t ever say this to beginners ..."
            }, 
            "id": "cmoeteg"
        }, 
        {
            "body": {
                "answer": "<p>Best thing I always say to a beginner<colon>  You have no idea what you are doing and that<sq>s ok.  You<sq>ll figure out what you did today a month or so from now.  Not understanding is part of the process.  If you just keep going you WILL learn to code.</p>", 
                "question": "Programmers<colon> Please don<sq>t ever say this to beginners ..."
            }, 
            "id": "cmofabl"
        }, 
        {
            "body": {
                "answer": "<p>Yay! Glad to hear your guide is getting some love here <colon>) [I work with Tati]. If you<sq>re looking to learn somethign besides Python, here<sq>s a few other tutorials we<sq>ve built<colon><br><br>* [Learn Ruby on Rails](http<colon>//www.thinkful.com/learn/ruby-on-rails-tutorial/) (while modifying a Craigslist clone)<br>* [Learn jQuery with StreetFighter](http<colon>//www.thinkful.com/learn/intro-to-jquery) HADOUKEN!!<br>* [Intro to Color Theory](http<colon>//www.thinkful.com/learn/color-theory-basics/) < also endorsed by /r/web_design<br>* [AngularJS tutorial](http<colon>//www.thinkful.com/learn/angularjs-tutorial-build-a-gmail-clone/) [build a Gmail clone]<br>* [Google BigQuery] (http<colon>//www.thinkful.com/learn/google-bigquery-tutorial/) - make an nGram visualization<br>* [JavaScript Best Practices](http<colon>//www.thinkful.com/learn/javascript-best-practices-1/) < a bit more intermediate<br>* [Github Pages](http<colon>//www.thinkful.com/learn/a-guide-to-using-github-pages/) + [Github Pull Request](http<colon>//www.thinkful.com/learn/github-pull-request-tutorial/) tutorials<br><br>And yes, we<sq>re working on a new template (right now!) that won<sq>t kill your back button.<br></p>", 
                "question": "I just released a beginners level Python guide where you make your own Python tamagochi <dq>pypet<dq>"
            }, 
            "id": "cnwevab"
        }, 
        {
            "body": {
                "answer": "<p>As someone trying to learn Python as a first programming language, this looks like an awesome project and guide. Thank you so much for doing it.</p>", 
                "question": "I just released a beginners level Python guide where you make your own Python tamagochi <dq>pypet<dq>"
            }, 
            "id": "cnwql27"
        }, 
        {
            "body": {
                "answer": "<p>I subbed to /r/learnprogramming on a whim while I was struggling through an SQL class then thinking I was too dumb for this stuff. Now I<sq>m reminded that there are these neat tutorials that out there and maybe even an IT dumbass like me could learn something.<br><br>My point is, thanks. </p>", 
                "question": "I just released a beginners level Python guide where you make your own Python tamagochi <dq>pypet<dq>"
            }, 
            "id": "cnwz34l"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I just released a beginners level Python guide where you make your own Python tamagochi <dq>pypet<dq>"
            }, 
            "id": "cnwfa29"
        }, 
        {
            "body": {
                "answer": "<p>Java class is 12 weeks....but only the first 2 are free. Then it<sq>s $150. So *NOT* free  <br>**edit** audit is free. I<sq>m dumb.</p>", 
                "question": "Here<sq>s a list of 77 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2014)"
            }, 
            "id": "cjcd7ie"
        }, 
        {
            "body": {
                "answer": "<p>People keep recommending Udacity. Am I an idiot or something? I only see it as a paid program. </p>", 
                "question": "Here<sq>s a list of 77 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2014)"
            }, 
            "id": "cjccmcy"
        }, 
        {
            "body": {
                "answer": "<p>Ooooh, can<sq>t decide between Programming Foundations with Python<colon> Learn Object-Oriented Programming and, Introduction to Programming in Java.<br><br>What would people suggest? Does anyone know if the Java one covers OOP?</p>", 
                "question": "Here<sq>s a list of 77 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2014)"
            }, 
            "id": "cjccvfq"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m kind of new to this education system, can somebody please explain how do these courses work exactly?<br><br>For example, some offer certificates. How does that work exactly? Are these certificates widely accepted?<br><br>In any case, great list! Thank you.</p>", 
                "question": "Here<sq>s a list of 77 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (August 2014)"
            }, 
            "id": "cjci8vp"
        }, 
        {
            "body": {
                "answer": "<p>[Gitlab](https<colon>//about.gitlab.com/)  is also free for everyone. It<sq>s really great</p>", 
                "question": "GitHub offers free premium account and much more for students."
            }, 
            "id": "d76f3o9"
        }, 
        {
            "body": {
                "answer": "<p>_Man_... being a student nowadays is awesome.<br><br>Back in my day, we had to pay $20 USD per month for a Linode if we wanted to host stuff publicly.</p>", 
                "question": "GitHub offers free premium account and much more for students."
            }, 
            "id": "d76dlk0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "GitHub offers free premium account and much more for students."
            }, 
            "id": "d76fpmh"
        }, 
        {
            "body": {
                "answer": "<p>GitLab > GitHub<br><br> <br><br><br><br> <br></p>", 
                "question": "GitHub offers free premium account and much more for students."
            }, 
            "id": "d76j2cl"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing </p>", 
                "question": "Found a brilliant Youtube channel that teaches Swift 3 from the ground up"
            }, 
            "id": "dbyevy8"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting this @Minyrmen. This is my YouTube channel.<br><br>If you<sq>re interested in learning how to make iOS apps (along with Swift 3) then I suggest you start by signing up for the free online course offered at Flatiron School (shameless plug at the place I work). I created the curriculum offered in this course which includes over 100 readings and labs which have you writing a lot of code (instead of just reading a book). I think a lot of material out there assumes SO much. They assume you already know some computer science or are familiar with some programming topics. This curriculum assumes nothing.<br><br>Here<sq>s an example of a [lab](https<colon>//github.com/learn-co-curriculum/swift-dictionaryMethods-lab) you might come across in the course.  <br>Here<sq>s an example of a [reading](https<colon>//github.com/learn-co-curriculum/swift-MapFilterReduce-reading) you will come across.<br><br>[iOS/Swift Free Online Course, Flatiron School](https<colon>//flatironschool.com/programs/online-swift-free-course/)<br><br>As well.. I never really like the advice most people give which is (sign up for THIS course which cost X amount of dollars).. then they sort of just leave you there without really telling you what I think is best road to go down.<br><br>1. Find a general resource that serves as your <dq>go-to<dq>. I really think the free iOS/Swift course we (we being where I work, Flatiron) is the best place to get started. The labs are tested and there<sq>s a community of people already going through the course (2nd time I plugged this).<br>2. Don<sq>t go at it alone. Whether it be with a friend, or a community you find in a course online. I think this step is really really important, you need to have someone or something to keep you on your toes. Frodo would have never solved that silly ring problem if it wasn<sq>t for his friends.<br>3. Accompany your writing of Swift code with reading [Apples Swift Book](https<colon>//itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11). If you live in NYC and you travel on the subway a lot, or whatever.. make it a habit to read this book (often!). If you get confused by anything, Google it. Find someone else explaining it to you in a different manner. Then re-read the part you got confused about in this Apple book. Don<sq>t expect to read something once and have it stick. This is programming, not baking brownies from the recipe on the back of a box. <br>4. This probably belongs before step 3 (too lazy to move it) but you SHOULD most definitely be coding often. It<sq>s all about being consistent. Day in and day out, will there be people that grasp concepts faster than you? Of course. Will there be people that tell you that you<sq>re wasting your time by not learning computer science first? Yup. Will there be people telling you that you<sq>re doing it all wrong? Maybe. But stick with it. If you miss a few days here and there, that<sq>s OK.. don<sq>t get too down on yourself. Just stick with it. I call it the Rocky Balboa approach, you will get beat up (a lot). But stay in the ring, keep fighting and you<sq>ll find after a month or two that things *really* begin to click.<br>5. Have others review your code. Whether that be you at the very least communicating **out-loud** as to the code you<sq>re writing or going over it with a friend (or have it reviewed by someone with more experience). Being able to communicate with what you<sq>re doing and speak through how the code works is important to solidifying the basics and building a strong foundation for yourself.<br>6. Use all the resources you have available to you. My favorite are the following<colon>    <br>. [My YouTube Channel <colon>)](https<colon>//www.youtube.com/channel/UC4PxbUhXl1W9AjphmCx06vg)    <br>. [Free iOS/Swift Course - 3rd time I<sq>ve plugged this](https<colon>//flatironschool.com/programs/online-swift-free-course/)          <br>. [Ray Wenderlich](https<colon>//www.raywenderlich.com)  <br>. [Swift Talk](https<colon>//talk.objc.io) <- This is a wee bit advanced  <br>. [Natasha](https<colon>//www.natashatherobot.com)  <br>. [Hacking With Swift](https<colon>//www.hackingwithswift.com)  <br>  <br><br></p>", 
                "question": "Found a brilliant Youtube channel that teaches Swift 3 from the ground up"
            }, 
            "id": "dbzzbxf"
        }, 
        {
            "body": {
                "answer": "<p>Sort by date oldest to follow along.</p>", 
                "question": "Found a brilliant Youtube channel that teaches Swift 3 from the ground up"
            }, 
            "id": "dbyngep"
        }, 
        {
            "body": {
                "answer": "<p>is there any prerequisite language or knowledge level needed to watch this? In other words can a relative noob watch this and follow along?</p>", 
                "question": "Found a brilliant Youtube channel that teaches Swift 3 from the ground up"
            }, 
            "id": "dbyjb4a"
        }, 
        {
            "body": {
                "answer": "<p>it<sq>s on your computer. If you<sq>re on a Mac, it<sq>s actually called <sq>Terminal<sq>. On Windows it<sq>s <sq>cmd.exe<sq>. On Linux,... no, you<sq>re not on linux.</p>", 
                "question": "Very basic question don<sq>t upvote"
            }, 
            "id": "ciq72qk"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re in /r/learnprogramming, not /r/expertcodersonlykeepoutnoobs ... basic questions are allowed. Don<sq>t let the thought that you might be asking a dumb question discourage you from learning. We<sq>ve all had them at one point or another.</p>", 
                "question": "Very basic question don<sq>t upvote"
            }, 
            "id": "ciqdwrn"
        }, 
        {
            "body": {
                "answer": "<p>Howdy!<br><br>**Windows<colon>** The terminal program is called the <dq>command prompt<dq>, which can be found by going to Start menu and just searching for it.<br><br>**Mac<colon>** Here it is actually just called <dq>Terminal<dq> and can be found just by searching for it too.<br><br>**Linux<colon>** I believe it is called <dq>Terminal<dq> too. <br><br><br>Hope this helps and good luck with the learning <colon>)</p>", 
                "question": "Very basic question don<sq>t upvote"
            }, 
            "id": "ciq7393"
        }, 
        {
            "body": {
                "answer": "<p>You really need to read appendix A before you jump into the book. (Appendix A of the book that is. It<sq>s at the bottom of the table of contents.)</p>", 
                "question": "Very basic question don<sq>t upvote"
            }, 
            "id": "ciqdo6c"
        }, 
        {
            "body": {
                "answer": "<p>I am 24 now. I am so lucky that when I was 20 I told myself <dq>failure is fine<dq>. If I always do the best I can do that what do I need to be afraid of?<br><br>Failing is so natural to me now, I forget that other people still struggle with it and become paralyzed. My attitude is to plow ahead for no other reason than because I choose to. Regardless of how I feel.</p>", 
                "question": "For anyone feeling <dq>Impostor Syndrome<dq> here<sq>s what some Google Developers have to say."
            }, 
            "id": "dfns7e5"
        }, 
        {
            "body": {
                "answer": "<p>I can totally relate to most of it. Some days you feel like a rockstar slamming through tasks on Jira like they<sq>re nothing, whereas you<sq>re stuck on the same problem for days other times, wondering why anyone would pay you when you *literally know nothing..*<br><br>The trick with going away from the problem is really true, I can<sq>t explain how many times a solution popped up in my head while I was riding my bicycle home from work, or I was at the gym. At work I started going outside for a small walk, like 2 minutes, just to clear my mind and look at whatever is there(Trees and birds, mostly). It works!</p>", 
                "question": "For anyone feeling <dq>Impostor Syndrome<dq> here<sq>s what some Google Developers have to say."
            }, 
            "id": "dfno7wu"
        }, 
        {
            "body": {
                "answer": "<p>I think software development is still in its infancy.  While I have no expertise in how a building is built, my feeling is that there are standards on how it should be built.  It<sq>s not the creation of one person.  A bunch of people are involved, and they agree on a plan for how things are to be built, and because there<sq>s a physical structure, there can be someone that can see that stuff is being built, so there<sq>s more of a communal organization.<br><br>Writing code, on the other hand, is something more creative.  What classes should you write?  How should you organize your solution?  What<sq>s the problem you<sq>re trying to solve?  What are the business cases you<sq>re trying to handle.  These aren<sq>t exactly questions that have to be addressed by those doing construction of a building.  These are problems solved ahead of time.<br><br>Meanwhile, software is still kind of a solitary activity with a lot of decisions on how to solve a problem implemented by an individual.  It usually isn<sq>t planned out (unless you do waterfall) ahead of time, and thus, when interacting with the code, you make decisions on your own that others have to decipher.<br><br>And a building has certain constraints that make it look like any other building while software can be used for a wide variety of things, so even if you<sq>re an experienced software developer, it<sq>s easy to find another code base and not understand what<sq>s going on unlike a building where you generally know what to expect.</p>", 
                "question": "For anyone feeling <dq>Impostor Syndrome<dq> here<sq>s what some Google Developers have to say."
            }, 
            "id": "dfnp3z7"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s not a syndrome, I<sq>m an impostor.</p>", 
                "question": "For anyone feeling <dq>Impostor Syndrome<dq> here<sq>s what some Google Developers have to say."
            }, 
            "id": "dfo1784"
        }, 
        {
            "body": {
                "answer": "<p>How to google things and apply the answers to solve your own challenges.</p>", 
                "question": "What is your <dq>every programmer should know<dq> list?"
            }, 
            "id": "dcdvfuf"
        }, 
        {
            "body": {
                "answer": "<p>Every programmer worth his or her salt should know<colon><br><br>* How to set breakpoints and use your debugger<br>* Version control, including branching and merging<br>* Dependency injection / inversion of control<br>* Automated tests<br>* Automated builds and deploys<br><br>Let<sq>s not forget soft skills. Every programmer should be able to<colon><br><br>* Write short, concise emails<br>* Write clear, meaningful documentation<br>* Give constructive criticism without making it personal<br>* Be friendly and courteous to everyone no matter their race, religion, sex, sexual orientation, gender identity, nationality, disability, political affiliation, or other differences.</p>", 
                "question": "What is your <dq>every programmer should know<dq> list?"
            }, 
            "id": "dcdy0ni"
        }, 
        {
            "body": {
                "answer": "<p>I would tell you, but this guy does it much better. Ive ordered six of the books recommended here and they<sq>ve been worth every penny. <br><br>http<colon>//matt.might.net/articles/what-cs-majors-should-know/</p>", 
                "question": "What is your <dq>every programmer should know<dq> list?"
            }, 
            "id": "dcdzveg"
        }, 
        {
            "body": {
                "answer": "<p>Something a mentor taught me.<br><br><dq>Format your code as if the next developer is a serial killer and has your home address and is OCD about neatness<dq>.</p>", 
                "question": "What is your <dq>every programmer should know<dq> list?"
            }, 
            "id": "dcedtrt"
        }, 
        {
            "body": {
                "answer": "<p>I just cannot keep up with everything I\u00b4d like to do.</p>", 
                "question": "Here<sq>s a list of 47 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2013)"
            }, 
            "id": "cc2bqni"
        }, 
        {
            "body": {
                "answer": "<p>Fantastic list.  Thanks for compiling (snicker snicker) this.</p>", 
                "question": "Here<sq>s a list of 47 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2013)"
            }, 
            "id": "cc2b7bc"
        }, 
        {
            "body": {
                "answer": "<p>Biggest studyboner ever. Thanks for the links!</p>", 
                "question": "Here<sq>s a list of 47 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2013)"
            }, 
            "id": "cc2bwic"
        }, 
        {
            "body": {
                "answer": "<p>My body is ready</p>", 
                "question": "Here<sq>s a list of 47 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2013)"
            }, 
            "id": "cc2ecq1"
        }, 
        {
            "body": {
                "answer": "<p>I just enrolled in the class but after reading the description I<sq>m worried it will be too basic (not that I<sq>m some expert programmer). I<sq>ve already finished an introductory class in Java at my university and am enrolled in the next course currently, but would also love to learn Python. For a complete beginner this looks like an awesome opportunity. I will at least do the first few lessons</p>", 
                "question": "MIT has an <dq>Introduction to Computer Science and Programming Using Python<dq> Course which started this week. You guys can still sign up if you want to take the course"
            }, 
            "id": "d77f1xf"
        }, 
        {
            "body": {
                "answer": "<p>New to coding, was learning python on code academy for the past month, and being about halfway through the first lecture I understand so much more about what I<sq>ve been doing for the past month. </p>", 
                "question": "MIT has an <dq>Introduction to Computer Science and Programming Using Python<dq> Course which started this week. You guys can still sign up if you want to take the course"
            }, 
            "id": "d77ijss"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!<br><br>Knew Python 2 before, forgot many things, gonna start with this course and hopefully learn some Python 3.</p>", 
                "question": "MIT has an <dq>Introduction to Computer Science and Programming Using Python<dq> Course which started this week. You guys can still sign up if you want to take the course"
            }, 
            "id": "d77a6z1"
        }, 
        {
            "body": {
                "answer": "<p>Is there anything like this that is more work at your own pace? My work schedule is not the usual nine to five, Monday thru Friday. I<sq>d love something structured like this, that worked with my schedule.</p>", 
                "question": "MIT has an <dq>Introduction to Computer Science and Programming Using Python<dq> Course which started this week. You guys can still sign up if you want to take the course"
            }, 
            "id": "d77keqn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been doing this about five years. My supervisor has been doing it for more like 15. I have never heard a rude word from him regarding my work, no matter how dumb a question I might ask him. I don<sq>t think it<sq>s <dq>experienced programmers<dq> that are rude--I think it<sq>s just some people you meet online.</p>", 
                "question": "Why are experienced programmers so hostile toward beginners?"
            }, 
            "id": "cp9l2d5"
        }, 
        {
            "body": {
                "answer": "<p>The main reason is that many people try to get you to do their work. I have seen a few posts on here already that say, <dq>My homework is this (link to homework), how do i solve it!<dq><br><br>If you come with good questions, and not questions of <dq>how do i do x<dq>, but rather <dq>i am doing x, but it isn<sq>t working as i expect<dq> is all the difference in the world. <br><br>Then we need to realize that much of software is style. I prefer small functions with no comments (clean code style), others prefer longer functions with comments (code complete style). Sometimes we clash over little things. <br><br>But I try to stay positive, but without a doubt questions need to be targeted, and not super broad. </p>", 
                "question": "Why are experienced programmers so hostile toward beginners?"
            }, 
            "id": "cp9kggf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m gonna get downvoted for saying this because I take it most people on this subreddit are Engineering majors, but...<br><br>In my experience, there seems to be large concentration of smug dickheads in Engineering fields in general. About 50<percent> of the EE/CE/CS students I<sq>ve talked to these past 5 years -- at the two Universities I<sq>ve attended -- have been pretentious twats who<sq>d talk down to you and be like <dq>what?! How do you NOT know this?<dq> when you ask a question. My experience has been entirely in-person, btw, I<sq>m not talking about IRC, or StackOverflow, or /g/ or whatever.</p>", 
                "question": "Why are experienced programmers so hostile toward beginners?"
            }, 
            "id": "cp9nqal"
        }, 
        {
            "body": {
                "answer": "<p>It perpetually amuses me that every time I google some coding idea a great reply comes up on Stack Overflow... that<sq>s been marked as <dq>off topic<dq> and closed. Nonetheless, it<sq>s the top google result for the question, haha.</p>", 
                "question": "Why are experienced programmers so hostile toward beginners?"
            }, 
            "id": "cp9rjm5"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m very interested in not-free books that will do the same as well. <br><br>Edit<colon> Not looking for magic books, just REALLY good programming books and guides. And if anyone wants to suggest specific ones, I<sq>m set course for either C++ or C# (probably C# and then C++ later) and am at best a beginner and am using C to start.<br>__________________________________________________________________________<br><br>**What has been suggested thus far<colon>**<br><br>* Code Complete<br>* The Pragmatic  Programmer<br>* Think Like a Programmer</p>", 
                "question": "9 Free Programming Books That Will Make You A Pro"
            }, 
            "id": "ckw0dza"
        }, 
        {
            "body": {
                "answer": "<p>Computer Science professors hate them!</p>", 
                "question": "9 Free Programming Books That Will Make You A Pro"
            }, 
            "id": "ckw5fa4"
        }, 
        {
            "body": {
                "answer": "<p>Upvoted, bookmarked and probably never opened again</p>", 
                "question": "9 Free Programming Books That Will Make You A Pro"
            }, 
            "id": "ckwkc2g"
        }, 
        {
            "body": {
                "answer": "<p>Ugh. I had so much trouble with Learn Python the Hardway. Either I<sq>m just retarded or that pdf is considerably overrated.</p>", 
                "question": "9 Free Programming Books That Will Make You A Pro"
            }, 
            "id": "ckw0dgq"
        }, 
        {
            "body": {
                "answer": "<p>Awesome!  Thank you for taking the time to make this list!</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2013)<br>"
            }, 
            "id": "c8tpf8v"
        }, 
        {
            "body": {
                "answer": "<p>Awesome list, thanks!<br><br>I am taking the CS101 from udacity. It<sq>s been a great intro to python, just challenging enough for someone who has some very basic knowledge of how programming languages work. <br><br>The majority of the time you<sq>ll be learning new functions and how to apply logic to solve basic problems. There are some lessons that, given what you<sq>re expected to understand in python, seem a little too basic (ie<colon> <dq>this how a computer/network/etc works<dq>), though I guess you have to cover these things to build on, so no complaint.<br><br>Btw, the Internet is awesome, with all this knowledge for free.</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2013)<br>"
            }, 
            "id": "c8tqy0h"
        }, 
        {
            "body": {
                "answer": "<p>Has anyone taken the scala course? It<sq>s taught by the creator of Scala and I<sq>m thinking of taking it.<br><br>Is Scala a fun language?</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2013)<br>"
            }, 
            "id": "c8tqbur"
        }, 
        {
            "body": {
                "answer": "<p>Im doing an edX Intro to Python class right now.  It is very challenging (keeping in mind I have at least an introductory knowledge of JavaScript and HTML and CSS) but the format and UI are really great.  Highly recommended.</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (March 2013)<br>"
            }, 
            "id": "c8tptnl"
        }, 
        {
            "body": {
                "answer": "<p>Hi! What others have explained so far aren<sq>t the kind of exploits you seem interested in, so I<sq>ll give it a go. Heartbleed is more like an info leak. SQL injection and XSS have nothing to do with rooting phones either. <br><br>> But how does one exploit? Are they able to upload their own code somehow?<br><br>Yes, this is the key idea.<br><br>People use the same techniques to gain root access to a phone as they use to gain access to a system, or exploit a service. Think about low level stuff here (C/C++). The main idea is the same<colon> confuse the faulty program and make it execute something that was not intended to be executed. Let<sq>s go over a short example in C, since your phone<sq>s kernel is written in that anyway.<br><br>    #include <stdio.h><br>    #include <string.h><br><br>    void do_stuff(char **argv) {<br>        char buffer[80];<br>        strcpy(buffer, argv[1]);<br>        printf(<dq>Your input was<colon> <percent>s\\n<dq>, buffer);<br>    }<br><br>    int main(int argc, char **argv) {<br>        do_stuff(argv);<br>        return 0;<br>    }<br><br>Can you spot the bug here? On line 6, we copy `argv[1]` into `buffer`. `buffer` is 80 bytes long and `argv[1]` is as long as the user specifies. This is a clear example of a buffer overflow. What happens if we write too much data into `buffer`? <br><br>`buffer` is on the stack, so this will be a stack-based buffer overflow. The stack is also the place for key parts of the program<sq>s internals, like return addresses. Here is how a function is called in assembly<colon><br><br>    main<colon><br>        ...<br>        call  do_stuff<br>        ...<br>    <br>    do_stuff<colon><br>        ; do stuff here...<br>        ret<br><br>The `call` instruction will store the current instruction pointer (eip) on the stack, so when `do_stuff` is finished, it can issue a `ret` instruction. `ret` simply takes the first value from the stack and jumps to it.<br><br>So if we can write unrestricted amounts of data on the stack, we can overwrite this return address and jump to any parts of the program we want! Even better, we can jump to the data we just passed as a string, and execute it as code! The payload would look like this<colon><br><br>    <assembly code> <padding to make the buffer reach the return address at the end> <address of our payload><br><br>Things aren<sq>t this simple in real life though. They were in the 80s, but people caught on and implemented features that make the hacker<sq>s job a lot harder.<br><br>* Sections have bits indicating whether they contain code or data. You can<sq>t execute code on a section that doesn<sq>t have the bit set ([NX bit](http<colon>//en.wikipedia.org/wiki/NX_bit))<br>* Addresses are randomized - you can<sq>t know in advance where your payload will be located ([ASLR](http<colon>//en.wikipedia.org/wiki/Address_space_layout_randomization))<br>* For stack-based stuff, they implemented [canaries](http<colon>//en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries) (also called cookies) - it<sq>s a random number on the stack that is checked before returning from each function - if the number changed, the program exits with a fault.<br><br>But hackers weren<sq>t lazy either, and they came up with awesome techniques to circumvent these restrictions. <br><br>To bypass the problem of randomized addresses and canaries, we usually need an info leak (think Heartbleed), which is basically one more bug to find in the code.<br><br>To bypass the NX bit, there is the [Return-to-libc attack](http<colon>//en.wikipedia.org/wiki/Return-to-libc_attack), which uses the code of the standard C library to gain access to a system. Since libc already has a `system` function that executes any OS commands, why do we need to write our own shellcode? We can just jump to the address of `system` with the parameters on the stack. It<sq>s not too hard to defend against this though - you can remove the sensitive functions from libc. <br><br>Here is where it starts to be mind-blowing to me. There is a technique called [Return oriented programming](http<colon>//en.wikipedia.org/wiki/Return-oriented_programming) (ROP), which is almost like the Return-to-libc attack, in the sense that we use the already existing code to gain access, but there<sq>s a catch! With ROP, we use tiny fractions of the code (a few bytes of bytecode at a time) and stitch the exploit together like that. There are lots of `ret` instructions in the available codebase, so we can just scan all of these and see if we have anything useful before the `ret`. Think about very basic stuff here, like moving a register<sq>s value to another register or taking a value from the stack. Since we control the values on the stack, we can put a lot of these ROP <dq>gadgets<dq> on the stack, and they will form a chain. The first one is executed, and then it returns to the next one, since its address is the next on the stack.<br><br>> To bring it back to more to programming, how do the previous questions apply to hackers that crack software. Do they have to obtain the entire source code for a piece of software to somehow modify the code and recompile it? If so, how did they get the code in the first place?<br><br>This reply will address low level things again (C/C++). In a sense, they never obtain the source code. It depends on how you look at it, because in another sense the <dq>source<dq> is already there - it<sq>s the assembly code that was compiled from the high level language (I<sq>m referring to high level here, because we are comparing it to assembly). All we need to do is reverse-engineer.<br><br>There are tools to disassemble the binary of the program we want to crack. [IDA](https<colon>//www.hex-rays.com/products/ida/support/download_freeware.shtml) (Interactive Disassembler) is probably the most famous of these tools. The paid version even contains a decompiler. A decompiler is very different from a disassembler - it turns, or at least tries to turn, the assembly code back to C. Sometimes with surprisingly good results. The disassembler simply displays the bytecode in assembly form.<br><br>To crack a program, the assembly code is more than enough, the cracker doesn<sq>t need the source at all. You asked if the code was modified and recompiled. Almost - it<sq>s modified, but it isn<sq>t recompiled, since the source is not available. The modification is called patching. It consists of simply replacing byte code values in the binary. <br><br>As an example, probably the most simple protection mechanism would be to check for a serial number and jump to a routine that quits from the program if it<sq>s incorrect. Simply changing this jump instruction or the comparison instruction before is enough to <dq>crack<dq> a simple program like that.<br><br>Ugh, I realize I wrote a lot of text, sorry. You might not be interested in all these details, but it felt good to write that down. I hope I didn<sq>t make too many mistakes. If you are interested in reverse engineering or exploitation, there are tons of resources online. Feel free to PM me too.</p>", 
                "question": "In layman<sq>s terms how exactly do hackers exploit flaws in code?"
            }, 
            "id": "cinu4f3"
        }, 
        {
            "body": {
                "answer": "<p>Xkcd has a great strip explaining how the recent heartbleed bug worked<colon> http<colon>//xkcd.com/1354/<br><br>Many attacks are possible because a computer<sq>s memory is a linear list of values.  If you can convince the software to show you values outside the range that you<sq>re supposed to see, then you can sometimes get sensitive information.  If you can *write* data outside the range that is safe, then sometimes you can gain control of the system or force it to do things that it normally wouldn<sq>t.  These are usually bug in the software that don<sq>t properly check the bounds of inputs.<br><br>Another common attack vector is in programs that use interpreted text to execute, like php, JavaScript, and SQL.  Imagine you have a form that provides a string that you<sq>re going to use to query a database.  If you just take the text that the user types in and concatenate it with your query, you now have a security vulnerability.  The user can type a really long string containing multiple SQL commands that do unwanted things to your database.  Another relevant xkcd<colon> http<colon>//xkcd.com/327/<br><br>Cracking a program is usually a matter of modifying the machine code - the hackers don<sq>t have access to the source.  There are tools out there to aid in inspecting the machine code of a program (namely debuggers).  If you<sq>re clever enough you can find the pieces of code that deal with security and disable or remove them.</p>", 
                "question": "In layman<sq>s terms how exactly do hackers exploit flaws in code?"
            }, 
            "id": "cinl97g"
        }, 
        {
            "body": {
                "answer": "<p>It usually depends on the specific exploit.  A lot of them are different.  Heartbleed was a variant on a particularly old trick, however.<br><br>In many programming languages, you have to perform what we call ***manual memory allocation.***  That means that if you are creating a variable to store some information, you have to tell the computer how much memory to set aside, and often also what type of variable it is.<br><br>Xkcd explained it reasonably well, so I will go with that analogy.  If you<sq>ve got a dumb programmer, (and generally speaking, programmers usually aren<sq>t anywhere near as intelligent as they think they are) then they might do something silly like allocating 500 bytes to a particular variable, and then only using three, to store the word HAT as an example.  <br><br>So that means that when the program runs, there is a gap that is 497 bytes or characters long in memory.  If said variable goes anywhere near the exec() kernel call on a UNIX, (Linux or FreeBSD) then if you know what you<sq>re doing, you could inject extra parameters for the exec call to get you a shell prompt, for example.  If the person running the program was doing so as root, then congratulations; you<sq>re now the owner of a new computer system.<br><br>I got into shellcode a bit several years back, and although I can<sq>t remember any of it now, from memory you could inject numerics which would give you an interactive Bash shell with only a few chars, if you knew what you were doing.<br><br>As part of my troubled adolescence, I was also playing with Back Orifice for a bit at one point.  That was not long after XP and IE 4 or so had just come out, and Microsoft hadn<sq>t patched them.  Microsoft didn<sq>t know anything about security at that point; they were used to dealing with DOS, and they wanted to give people things like the ability to put Web pages as their desktop wallpaper and such, without understanding that they were essentially giving people a giant pile of insanely easy back doors into the system.  They also had stupid things like the remote messaging service, where if you ran it, you were basically asking to get cracked.  Again, Microsoft<sq>s intention was to give people cool stuff, but they didn<sq>t understand that the main people who were going to use that sort of functionality, were sociopaths who would exploit it to root everyone<sq>s XP boxes.<br><br>There have been various other things as well, like throwing massive amounts of data at a Web server at once, and doing it in such a way that if it crashes just right, then you can again insert commands.  Not all cracks will root something completely, or give you full access; a lot of the old website crackers weren<sq>t necessarily able to do much else other than maybe upload pages onto the systems they defaced.<br><br>As things get more complex, and people get more experience at dealing with these exploits, finding ways in is getting harder and harder; but it is still possible.  The two things that can always be relied on, are human laziness and stupidity; and as it has always been said, the weakest link in any computer system, in security terms, is the ***human*** link.</p>", 
                "question": "In layman<sq>s terms how exactly do hackers exploit flaws in code?"
            }, 
            "id": "cinn84y"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m far from an expert, but here<sq>s an example of reverse engineering socket data (pretty certain that online-DRM cracks for certain ubisoft games and sc2/d3 cracks use this method to emulate a server for authentication). Cracking any other game/software that doesn<sq>t auth with a server, I<sq>m pretty sure is all done in assembly <br><br>http<colon>//resources.infosecinstitute.com/reverse-engineering-structures/<br><br>also <dq>reversing with lena<dq> tutorials to learn -> <br>https<colon>//tuts4you.com/download.php?list.17</p>", 
                "question": "In layman<sq>s terms how exactly do hackers exploit flaws in code?"
            }, 
            "id": "cinkw9k"
        }, 
        {
            "body": {
                "answer": "<p>khan academy<sq>s sql course is the best I<sq>ve seen.<br><br>https<colon>//www.khanacademy.org/computing/computer-programming/sql</p>", 
                "question": "Codecademy has launched a beta exercise called <dq>Learn SQL<dq>. Check it out!"
            }, 
            "id": "cuitlds"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s a SUPER short course, only 10 steps through the whole thing and 3 of them don<sq>t have you even typing anything. <br><br>A great introduction, and if you<sq>d like to learn more I<sq>d highly suggest http<colon>//sqlzoo.net/ they<sq>re free and gets into a lot of the joins, self joins, NULL handling. It<sq>s a good next step after this lesson from codecademy.</p>", 
                "question": "Codecademy has launched a beta exercise called <dq>Learn SQL<dq>. Check it out!"
            }, 
            "id": "cuis3wj"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Codecademy has launched a beta exercise called <dq>Learn SQL<dq>. Check it out!"
            }, 
            "id": "cuirxcl"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to recommend [SQLBolt](http<colon>//sqlbolt.com/) as well</p>", 
                "question": "Codecademy has launched a beta exercise called <dq>Learn SQL<dq>. Check it out!"
            }, 
            "id": "cuiuybh"
        }, 
        {
            "body": {
                "answer": "<p>The google docs link is editable btw.</p>", 
                "question": "We<sq>re putting on a 100<percent> free code bootcamp for anyone to learn. The first course starts 45 minutes from the time this is posted"
            }, 
            "id": "ddfa0bh"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m learning Ruby on Rails right now. Would you recommend me finish that course first or do you think I could safely learn two languages at once?</p>", 
                "question": "We<sq>re putting on a 100<percent> free code bootcamp for anyone to learn. The first course starts 45 minutes from the time this is posted"
            }, 
            "id": "ddfkis3"
        }, 
        {
            "body": {
                "answer": "<p>A mere 11 hours too late.</p>", 
                "question": "We<sq>re putting on a 100<percent> free code bootcamp for anyone to learn. The first course starts 45 minutes from the time this is posted"
            }, 
            "id": "ddful8l"
        }, 
        {
            "body": {
                "answer": "<p>Hi, I<sq>m a total beginner, I<sq>m going through codeacademy python tutorial but it<sq>s a bit boring, do you have any stuff for beginners like me?</p>", 
                "question": "We<sq>re putting on a 100<percent> free code bootcamp for anyone to learn. The first course starts 45 minutes from the time this is posted"
            }, 
            "id": "ddfgqok"
        }, 
        {
            "body": {
                "answer": "<p>>First Developer Job<br><br>> Major Bank<br><br>> Mobile App<br><br>> Own ideas as solutions for the mobile app<br><br>What could possibly go wrong?<br><br>I hope you have a solid security foundation, OP. GL, and please make sure you get a good tester to help you test weird stuff and try to break your code and inject bad stuff into the test database.</p>", 
                "question": "GUYS I JUST ACCEPTED MY FIRST DEVELOPER JOB."
            }, 
            "id": "clysnak"
        }, 
        {
            "body": {
                "answer": "<p>OMGWTFBBQ!!!</p>", 
                "question": "GUYS I JUST ACCEPTED MY FIRST DEVELOPER JOB."
            }, 
            "id": "clyoyj2"
        }, 
        {
            "body": {
                "answer": "<p>\\\\o/</p>", 
                "question": "GUYS I JUST ACCEPTED MY FIRST DEVELOPER JOB."
            }, 
            "id": "clyp905"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations!</p>", 
                "question": "GUYS I JUST ACCEPTED MY FIRST DEVELOPER JOB."
            }, 
            "id": "clyp12h"
        }, 
        {
            "body": {
                "answer": "<p>A tip for you, OP...<br><br>I found these a while back and was excited to check them out. I watched through the first episode up to the point where you start writing some actual code. The code was so tiny I figured there<sq>s no way I can sit through the rest of these straining to see it, and I gave up and looked for other tutorials. I realize only just now after randomly checking out a different episode that this is only an issue in that first episode, but if anyone else is like me, you might wanna edit that so they don<sq>t assume the whole tutorial will be the same format as the first episode and give up because it<sq>s too small to read. <br></p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d30l9wv"
        }, 
        {
            "body": {
                "answer": "<p>Hey there limeoats, I saw this the [last](https<colon>//www.reddit.com/r/gamedev/comments/3mcrt6/new_tutorial_series_remaking_cavestory_in_c/) [time](https<colon>//www.reddit.com/r/gamedev/comments/3o5tpg/update_remaking_cavestory_in_c_tutorial_series/) you [posted](https<colon>//www.reddit.com/r/learnprogramming/comments/4c5n9u/tutorial_learn_how_to_make_a_game_in_c/) it - in fact I [commented on it](https<colon>//www.reddit.com/r/gamedev/comments/3o5tpg/update_remaking_cavestory_in_c_tutorial_series/cvuf511) then! I<sq>m wondering what motivated you to repost it again?<br><br>I remember when you started it I thought <dq>What<sq>s the point, someone else is already <sq>reconstructing<sq> cave story (chris hebert).<dq> But yours obviously go past his and you progressed a lot quicker. <br><br>I was happy to see this because I was disappointed he never finished his, but now I see<br><br>> The series is currently finished<br><br>Yet - it<sq>s obviously not finished? I suspect you<sq>ve reposted because you<sq>re either looking for more feedback for motivation, or perhaps to get more $$ from views? Have you considered patreon or something like that? I think if you continue to put out quality videos then you<sq>d have no problems finding sponsors through patreon.<br><br>Anyway, love your videos I<sq>ve subscribed keep up the good work.</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d30ncvj"
        }, 
        {
            "body": {
                "answer": "<p>Hey this seems pretty awesome! I can<sq>t wait to check it out after work.</p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d30gp30"
        }, 
        {
            "body": {
                "answer": "<p>Why SDL2?  I wish these tutorials focused on more practical frameworks like SFML. </p>", 
                "question": "[Tutorial] Learn to make a game in C++!"
            }, 
            "id": "d30jxn6"
        }, 
        {
            "body": {
                "answer": "<p>May Allah bless you brother /sister...Thank you for your help. Salaam. </p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2013)."
            }, 
            "id": "c89t55b"
        }, 
        {
            "body": {
                "answer": "<p>Beautiful list!  Would love to see a list like this each month or two ;)</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2013)."
            }, 
            "id": "c89ukk1"
        }, 
        {
            "body": {
                "answer": "<p>For another intro to programming course, check out<colon><br><br>http<colon>//ProgramArcadeGames.com<br><br>* 79 free tutorial videos<br>* Start [creating graphics by Chapter 5](http<colon>//programarcadegames.com/index.php?chapter=introduction_to_graphics).<br>* Full text of the book on-line.<br>* [Cookbook of examples](http<colon>//programarcadegames.com/index.php?chapter=example_code)<br>* [On-line multiple choice quizzes track your progress](http<colon>//programarcadegames.com/quiz/progress.php).<br>* [Short-answer questions](http<colon>//programarcadegames.com/index.php?chapter=sample_worksheets) test your knowledge in more depth.<br>* [Labs](http<colon>//programarcadegames.com/index.php?chapter=labs) \u2013 see if you understand by creating your own games.<br>* [Sample tests](http<colon>//programarcadegames.com/index.php?chapter=sample_tests) \u2013 Test your knowledge.<br>* Program in Python<br>* [Track, grade, and mentor students progress](http<colon>//programarcadegames.com/user_progress_report.php) through the course<br><br>I<sq>ve put this book together and refined it from year-to-year based on student feedback during their first semester of programming at Simpson College. This is a first-semester course and assumes no prior knowledge of programming. I\u2019ve successfully run hundreds of students through this course and had them create their own arcade games. Each time I refine the course and use their questions to make the book that much better.<br><br>Plus, there are Russian and Turkish translations thanks to some volunteers!</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2013)."
            }, 
            "id": "c8ae2v8"
        }, 
        {
            "body": {
                "answer": "<p>Awesome, thank you</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (Feb 2013)."
            }, 
            "id": "c89s7id"
        }, 
        {
            "body": {
                "answer": "<p>I wouldn<sq>t call TheNewBoston high quality. Please read the [FAQ](http<colon>//www.reddit.com/r/learnprogramming/wiki/index#wiki_discouraged_resources).</p>", 
                "question": "I compiled all of YouTube<sq>s Highquality programming video series for multiple languages. Check it out!"
            }, 
            "id": "cis242i"
        }, 
        {
            "body": {
                "answer": "<p>Site appears to be down</p>", 
                "question": "I compiled all of YouTube<sq>s Highquality programming video series for multiple languages. Check it out!"
            }, 
            "id": "cis2d6i"
        }, 
        {
            "body": {
                "answer": "<p>What about C?</p>", 
                "question": "I compiled all of YouTube<sq>s Highquality programming video series for multiple languages. Check it out!"
            }, 
            "id": "cis58nc"
        }, 
        {
            "body": {
                "answer": "<p>>I **compiled** all of Youtube<sq>s Highquality porgramming video series for multiple languages.<br><br>Pun intended?</p>", 
                "question": "I compiled all of YouTube<sq>s Highquality programming video series for multiple languages. Check it out!"
            }, 
            "id": "cis5f9k"
        }, 
        {
            "body": {
                "answer": "<p>Sine sine cosine sine 3.14159</p>", 
                "question": "University of Waterloo has free open courseware for learning pre-University Calculus and Computer/Web Programming Fundamentals."
            }, 
            "id": "dfb3vrz"
        }, 
        {
            "body": {
                "answer": "<p>For math I recommend khan academy. It has assignments and is very detailed</p>", 
                "question": "University of Waterloo has free open courseware for learning pre-University Calculus and Computer/Web Programming Fundamentals."
            }, 
            "id": "dfb3sh2"
        }, 
        {
            "body": {
                "answer": "<p>Fuuuuuuuuuuuuuuuck calculus. <br><br>Edit<colon> I guess I wasn<sq>t clear enough. Fuck calculus in that it<sq>s boring. It<sq>s not useless by any means _in certain fields_, but most certainly not useful in most places as a dev.</p>", 
                "question": "University of Waterloo has free open courseware for learning pre-University Calculus and Computer/Web Programming Fundamentals."
            }, 
            "id": "dfbdpi2"
        }, 
        {
            "body": {
                "answer": "<p>Maybe this is a dumb question, but when applying for schools, will completing these help me in any way in my applications? I love learning and enjoy continuing my education outside of the classroom, but I<sq>ve always wondered if there is a way to use all of the online courses I<sq>ve completed to help me get into certain programs or even schools. </p>", 
                "question": "University of Waterloo has free open courseware for learning pre-University Calculus and Computer/Web Programming Fundamentals."
            }, 
            "id": "dfblmmj"
        }, 
        {
            "body": {
                "answer": "<p>Nice work. Some feedback<colon><br><br>> Never write your own hashing algorithm (unless you<sq>re really really smart)<br><br>I<sq>d say <dq>Never write your own hashing algorithm (you<sq>re not that smart)<dq> ;)<br><br>> HTTPS is built on top of HTTP but adds a layer of encryption using SSL/TLS to protect traffic between browsers and servers.<br><br>It<sq>s the other way around really. It<sq>s HTTP over TLS. So you first set up a secure connection and then <sq>do<sq> HTTP over that. This is why webservers use a different port for it. <br><br>> HTTPS encrypts the information that<sq>s sent along with your HTTP requests. <br><br>So it<sq>s even simpler<colon> it<sq>s simply HTTP over TLS so HTTP over a secure connection. <br><br>> HTTP Basic Authentication<br><br>You should leave out the bit about POST requests. Those headers can be sent with any request and what you<sq>re saying might be construed as if it only works for POST requests. <br><br>> Token based Authentication<br><br>You<sq>re mixing JSON Web Tokens and generic tokens<colon><br><br>> The server decodes the JWT and if the token is valid processes the request <br><br>JWT<sq>s are a very specific thing with specific use cases and specific pitfalls. You later move on to JWTs specificall so I<sq>m assuming this is just a copy-paste error. <br><br>> JWT<sq>s are verified and made secure because they are <dq>digitally signed<dq> and are created with a <dq>secret key<dq><br><br>You should explain what this means. What is a signature? How does it work?<br><br>> You should still be wary of posting confidential information in a token sent to a client.<br><br>There are two <sq>modes<sq> for JWTs<colon> [JWS](https<colon>//tools.ietf.org/html/rfc7515) and [JWE](https<colon>//tools.ietf.org/html/rfc7516). The first is signed and not encrypted (can be read client side) while the other is encrypted (and can<sq>t be read client side). </p>", 
                "question": "After breaking my brain writing authentication I wrote a large document on the basics of web authentication methods."
            }, 
            "id": "de3p8q2"
        }, 
        {
            "body": {
                "answer": "<p>It would be nice to have a big warning at the top telling people to avoid trying to roll their own authentication implementation, and warning them against storing sensitive information if they can at all avoid it.<br><br>Web services getting hacked and having user emails and passwords leaked is all to common. Its incredibly hard to do authentication correctly, and the consequences of getting it wrong are not limited to just yourself.<br><br>https<colon>//www.youtube.com/watch?v=8ZtInClXe1Q</p>", 
                "question": "After breaking my brain writing authentication I wrote a large document on the basics of web authentication methods."
            }, 
            "id": "de3tge1"
        }, 
        {
            "body": {
                "answer": "<p>Like a boss https<colon>//www.youtube.com/watch?v=NisCkxU544c</p>", 
                "question": "After breaking my brain writing authentication I wrote a large document on the basics of web authentication methods."
            }, 
            "id": "de3ehm6"
        }, 
        {
            "body": {
                "answer": "<p>I just implemented (in php) my own basic email+username+password authentication and it was a really helpful way to learn the basics and the why<sq>s and what<sq>s of how it all comes together. I highly recommend it for anyone who is learning.<br><br>Thanks so much for this doc, it shows more or less a <dq>roadmap of complexity<dq> in dealing with auth that I really appreciate. On to tokens!</p>", 
                "question": "After breaking my brain writing authentication I wrote a large document on the basics of web authentication methods."
            }, 
            "id": "de3o9ib"
        }, 
        {
            "body": {
                "answer": "<p>How much of this is self promotion for your site?<br></p>", 
                "question": "Taught Myself to Code at age 30 for a Career Shift. Employed Within the Year as an iOS Developer AMA."
            }, 
            "id": "crtp0rc"
        }, 
        {
            "body": {
                "answer": "<p>how the hell does one become a blacksmith.</p>", 
                "question": "Taught Myself to Code at age 30 for a Career Shift. Employed Within the Year as an iOS Developer AMA."
            }, 
            "id": "crtqym5"
        }, 
        {
            "body": {
                "answer": "<p>What is your starting salary if I may ask? </p>", 
                "question": "Taught Myself to Code at age 30 for a Career Shift. Employed Within the Year as an iOS Developer AMA."
            }, 
            "id": "crtt2l3"
        }, 
        {
            "body": {
                "answer": "<p>Attorney who hasn<sq>t coded since freshman year of undergrad writing an iOS app here. Congrats. </p>", 
                "question": "Taught Myself to Code at age 30 for a Career Shift. Employed Within the Year as an iOS Developer AMA."
            }, 
            "id": "crtq3dh"
        }, 
        {
            "body": {
                "answer": "<p>Not sure why you left out C# / ASP.NET from the back-end languages section...<br></p>", 
                "question": "How to become a web developer later in life"
            }, 
            "id": "d82nbry"
        }, 
        {
            "body": {
                "answer": "<p> Are C and C++ really that commonly used in backend?  I<sq>m not doubting some big places looking for speed  or scale use them, but as a suggestion for getting into backend they seem out of place.  .NET (C# or ASP) and javascript (as in Nodejs) are popular backend languages that probably deserve mention before those.<br></p>", 
                "question": "How to become a web developer later in life"
            }, 
            "id": "d82owrq"
        }, 
        {
            "body": {
                "answer": "<p>>  could do with improving.<br><br>Well. Since you<sq>re trying to explain people how to become a web dev; create an actual website with clickable links instead of just a bunch of images?</p>", 
                "question": "How to become a web developer later in life"
            }, 
            "id": "d82v33n"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s seems odd to not have javascript at least mentioned in the back-end languages</p>", 
                "question": "How to become a web developer later in life"
            }, 
            "id": "d82spmj"
        }, 
        {
            "body": {
                "answer": "<p>Google and stack exchange are totally your friends. <br><br>So many people out there doing so Mich programming, its almost guaranteed someone else has tried to do something much like you are now trying. There<sq>s no shame in comparing notes. Yoiu learn new techniques. <br><br>Its pretty rare that you can just cut/paste the code. So often, you see how someone did something, and to make it work for you you have to go look it up. But you now have a starting point to build from.<br><br></p>", 
                "question": "How to become a programmer or the art of Googling well [Motivation]"
            }, 
            "id": "climtxt"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s the problem I<sq>m having with Googling and learning to program<colon> It<sq>s too damn good. Every time I Google something on some assignment I<sq>m working on, I get pages of that exact problem already solved. It<sq>s so damn easy to cheat instead of waiting for that <dq>aha<dq> moment that means you actually understand and figure it out for yourself. It takes some willpower.<br><br>But on the flip side, if I just need help understanding the concepts, I don<sq>t get that easily. Sure I could ask on a forum but all the info is already Google-able. Where<sq>s the line between copying and learning?</p>", 
                "question": "How to become a programmer or the art of Googling well [Motivation]"
            }, 
            "id": "clinkwq"
        }, 
        {
            "body": {
                "answer": "<p>irrelevant  thought<colon><br><br>me<colon> <dq>How do I center a div?<dq><br><br>google<colon> <dq>you must first invent the universe<dq></p>", 
                "question": "How to become a programmer or the art of Googling well [Motivation]"
            }, 
            "id": "clinzt2"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s kind of awesome that you can use a company<sq>s tool to actually get hired at said company. <br><br>I like many others are fighting this battle right now, the battle to become competent, confident software developer. Only difference is I spent my college years reading fiction and not studying CS... guess I just have to approximate 4 years of CS instruction alongside learning the actual ins and outs of development. Easy, right? <colon>p</p>", 
                "question": "How to become a programmer or the art of Googling well [Motivation]"
            }, 
            "id": "clinako"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s interesting how most tutorials talk about how to set up your own Github account (and why), when most people are there because they<sq>ve been told that<sq>s where some software is located.  They simply want to access stuff, but they need to know enough to do it.  I don<sq>t think I<sq>ve ever seen a tutorial from that perspective.</p>", 
                "question": "Git and Github in Plain English"
            }, 
            "id": "dawewmn"
        }, 
        {
            "body": {
                "answer": "<p>As someone working as a programmer/tech person who was self-taught It<sq>s often at the back of my mind that in anything more than fiddling around with yourself it<sq>s probably more important to know git and the principles of version control like the back of your hand and how to do version control and collaborate than to actually know the deepest depths of code that can 90<percent> of the time be found on stackoverflow anyway. Really useful post thanks I learnt something as well. </p>", 
                "question": "Git and Github in Plain English"
            }, 
            "id": "dawos2k"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve found the [Udacity Git course](https<colon>//www.udacity.com/course/how-to-use-git-and-github--ud775) to be worthwhile.</p>", 
                "question": "Git and Github in Plain English"
            }, 
            "id": "dawng8m"
        }, 
        {
            "body": {
                "answer": "<p>anyone else find it confusing that Pull means two different things? One for pulling code down from the master branch and another for discussing code before it<sq>s merged with the master?</p>", 
                "question": "Git and Github in Plain English"
            }, 
            "id": "dawhm7p"
        }, 
        {
            "body": {
                "answer": "<p>I would add that you also don<sq>t need to invent stuff. I don<sq>t know why but some of my peers told me<colon> <dq>Why do you want to build that? Someone already did it!<dq><br><br>And I would always answer<colon> <dq>Well, but I did not.<dq><br><br>And I think it<sq>s really useful to remake a thing someone already did, because you know it<sq>s possible, and you will learn a lot about the process of building that thing.<br><br>It always surprised me when people didin<sq>t see the value of making something that already exists. <colon>p</p>", 
                "question": "Stop limiting your projects to things that are <dq>useful<dq>"
            }, 
            "id": "dg4xt15"
        }, 
        {
            "body": {
                "answer": "<p>As far as ideas go, a few that come to mind (and in a random order - not the order you should complete them)  are<colon><br><br>1. Build a basic text editor. http<colon>//viewsourcecode.org/snaptoken/kilo/index.html describes this for C, but you could adapt it for any language.<br>2. Build a twitter clone. You need to know most things about a web app to do this, but if you are looking to push your knowledge this is a good fully fledged app to start on.<br>3. A tic tac toe game (player vs player, then ai vs player)<br>4. Blackjack (player vs player then ai vs player)<br>5. Poker (player vs player then ai vs player)<br>6. An app that downloads images from somewhere (eg r/wallpapers)<br>7. An app that sets backgrounds on your computer daily/hourly based on a folder of images<br>8. Merge 6&7 for a daily background program (someone did this in the python subreddit iirc)<br>9. Build a single page application that invites people to a slack group. There are lots of examples of this and they are useful.<br>10. A game where the AI will ask you to pick a number between 1 and 100, guess at your number, then ask you higher o rlower and guess again. This helps teach binary searching and is a fairly simple text based game to write.<br>11. A TODO list in your terminal. Have it read from a text file and delete lines as you complete them, add new lines as you add items.<br><br>I<sq>m sure there are more, but this is the type of list I was thinking of. It would be great to even break it into prereqs or an order for beginners to follow along with.</p>", 
                "question": "Stop limiting your projects to things that are <dq>useful<dq>"
            }, 
            "id": "dg5020v"
        }, 
        {
            "body": {
                "answer": "<p>Imo the most important thing while choosing your next project (for learning purposes) is <dq>go out of your comfort zone<dq>.<br><br>The problem with beginners is that they will avoid it at all cost, because it requires them to deal with the toughest things in programming - frustration and feeling like a moron. I<sq>ve seen way too many new people who were writing the same software over and over again with little to no improvement introduced with each iteration.<br><br>Choosing to create something useful encourages you to complete the task, because it won<sq>t feel like a waste of time. It also helps to deal with frustration.<br><br>Those are just my observations.</p>", 
                "question": "Stop limiting your projects to things that are <dq>useful<dq>"
            }, 
            "id": "dg4w6jw"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t remember the last time I made a project which was genuinely useful to anyone but myself.<br><br>I have projects I<sq>d *like* to be useful to others, and which I put effort into making useful, but whether anyone actually does find them useful is another matter entirely.</p>", 
                "question": "Stop limiting your projects to things that are <dq>useful<dq>"
            }, 
            "id": "dg51rwz"
        }, 
        {
            "body": {
                "answer": "<p>Great for someone trying to understand the ropes of this field. Well written too. I<sq>d also like to pitch in that the Reddit community is great , for any sort of nudge or cookie you can<sq>t crack. But thanks for putting this out there <colon>) </p>", 
                "question": "I<sq>ve been teaching myself to program for about 6 months. I wanted to help other people build up their programming skills so I wrote this post about how to find your learning style how to find the right resources where to go for help and just generally how to learn to code."
            }, 
            "id": "cvavstj"
        }, 
        {
            "body": {
                "answer": "<p>As  someone who is just beginning to learn how to code, this is a great post.  Just wanted to point out that the Myer Briggs-test is generally frowned upon in psychology academia - it<sq>s not based on any kind of science.</p>", 
                "question": "I<sq>ve been teaching myself to program for about 6 months. I wanted to help other people build up their programming skills so I wrote this post about how to find your learning style how to find the right resources where to go for help and just generally how to learn to code."
            }, 
            "id": "cvb3qht"
        }, 
        {
            "body": {
                "answer": "<p>Terrific post!  I will be sending this to a friend who just started to dip his toes. Thank you!</p>", 
                "question": "I<sq>ve been teaching myself to program for about 6 months. I wanted to help other people build up their programming skills so I wrote this post about how to find your learning style how to find the right resources where to go for help and just generally how to learn to code."
            }, 
            "id": "cvatgx2"
        }, 
        {
            "body": {
                "answer": "<p>Will read this when I am home. Can<sq>t wait. I want to start learning programming soon. </p>", 
                "question": "I<sq>ve been teaching myself to program for about 6 months. I wanted to help other people build up their programming skills so I wrote this post about how to find your learning style how to find the right resources where to go for help and just generally how to learn to code."
            }, 
            "id": "cvay8a9"
        }, 
        {
            "body": {
                "answer": "<p>my instructor showed us this video to learn sorting https<colon>//www.youtube.com/watch?v=lyZQPjUT5B4</p>", 
                "question": "For all of you who are starting programming here is a site that lets you visualise some data structures and algorithms involving them. I wish I had this in college."
            }, 
            "id": "d4cvaou"
        }, 
        {
            "body": {
                "answer": "<p>The thing is the typical programmer only consciously uses a fraction of these algorithms. Modern programming languages provide abstractions for most so you really don<sq>t need to think about them. It<sq>s a good idea to know them well enough to describe them in an interview though. You never know when someone will ask you to describe a Fenwick Tree during that front end dev interview.</p>", 
                "question": "For all of you who are starting programming here is a site that lets you visualise some data structures and algorithms involving them. I wish I had this in college."
            }, 
            "id": "d4cxc6g"
        }, 
        {
            "body": {
                "answer": "<p>Every year multiple international programming contests are held. One of the biggest problem archives is <colon> uva.onlinejudge.org  [UVa]<br><br>The author of visualgo.net created a tool called uHunt for UVa. Here is his accout<colon>   uhunt.felix-halim.net/id/339<br><br>Why am I writing all this? Because you need to practice your algorithms and data structures. There are about 4000 problems on UVa. You will never appreciate time and space complexity unless you solve some of the competitive programming problems and submit them to the vJudge online. And space/time complexities, data structures and algorithms are things that you always should think about when writing a program.<br><br>Good luck!</p>", 
                "question": "For all of you who are starting programming here is a site that lets you visualise some data structures and algorithms involving them. I wish I had this in college."
            }, 
            "id": "d4dazi7"
        }, 
        {
            "body": {
                "answer": "<p>YES YES YES YES YES YES THIS IS EXACTLY WHAT I NEED I LOVE YOU</p>", 
                "question": "For all of you who are starting programming here is a site that lets you visualise some data structures and algorithms involving them. I wish I had this in college."
            }, 
            "id": "d4cvdfi"
        }, 
        {
            "body": {
                "answer": "<p>--force</p>", 
                "question": "Learn Enough Git to be Dangerous"
            }, 
            "id": "czp7ona"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t get it, is that the whole e-book or is there more to it when you buy?</p>", 
                "question": "Learn Enough Git to be Dangerous"
            }, 
            "id": "czp5tpq"
        }, 
        {
            "body": {
                "answer": "<p>Can someone explain to me what <dq>git<dq> is? I hear so much about but I have no idea. I am a college freshman in an intro to programming course (java) and have only hear people talk about git.</p>", 
                "question": "Learn Enough Git to be Dangerous"
            }, 
            "id": "czpdwxj"
        }, 
        {
            "body": {
                "answer": "<p>Good grief. Don<sq>t listen when he says <dq>ignore rebase.<dq> Rebase is love. Rebase is life. Actually, git pull --rebase is life. <br><br>Honestly, git was some mysterious beast to me for a good long while. Then I learned to use gitk (I develop in an open source shop, no idea if that<sq>s available outside Linux), and to look at commits as a just (effectively) the differences from the previous commit.<br><br>So, instead of trying to smash things together with a complicated merge (especially if there are multiple deviations, developers, etc.), rebase! Rebase effectively rewinds your commits and applies the specified branch, then reapplies your commits. <br><br>So, here<sq>s my daily flow<colon> <br>git status<br><br>git checkout master<br><br>git pull --rebase<br><br>(Hopefully we just fast-forwarded to the tip of origin/master).<br><br>gitk (to review any new commits to see if my stuff has been touched)<br><br>git checkout -b <jira task number><br><br>..... Do work .....<br><br>git status<br><br>git add <directory> (as many times as necessary)<br><br>git commit -m <dq><task number>- useful description in a twitter length message<dq><br><br>git log<br><br>(Copy the hash of the commit you just made)<br><br>git checkout master<br><br>git pull --rebase<br><br>git cherry-pick <hash you copied><br><br>git push origin master<br><br>git branch -D <task number><br><br>Skip those swirly fancy branching lines  and keep everything in a tidy and orderly single file line.<br></p>", 
                "question": "Learn Enough Git to be Dangerous"
            }, 
            "id": "czpsqu6"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re in an interesting dilemma.  Most books, these days, assume you have a computer, and rely on that fact.  However, many years ago (say, the 1970s) when computers were rather rare (at least, personal computers), it was common to make students sign up for computer time to share one of the few computers possible.<br><br>This meant the students mostly spent their time typing in the code while they could, and had little time to debug their code.  So, they had to learn to debug on paper, emulating the steps of a running program.  So by the time they typed the program, they knew it would work.  I suppose you could do something like that.  The problem is what happens if you get stuck or have a misunderstanding.<br><br>Here<sq>s something by computer scientist, Peter Norvig<colon> http<colon>//norvig.com/21-days.html<br><br>He references this book<colon> http<colon>//www.amazon.com/exec/obidos/ASIN/0805803092<br><br>It<sq>s about problem solving in general.<br><br>The hardest part about programming is gaining the experience to write programs, so reading a book often does not give you that experience.  At least, tracing out programs (imitating what a computer does) gives you practice that might be useful for debugging.<br><br>Also, I might suggest a simpler language (C++ has some difficult gotchas).<br><br>I found this link<colon> http<colon>//www.greenteapress.com/thinkpython/thinkpython.pdf<br><br>Anyway, you<sq>re in an unusual situation, so it<sq>s hard to provide good advice.  Good luck!</p>", 
                "question": "What books or methods can I use to study computer science while in prison? [Serious]"
            }, 
            "id": "cwpdk0y"
        }, 
        {
            "body": {
                "answer": "<p>My best advice would be to pick up some books on Discrete Math as well as algorithms (They dip into each other a fair amount as well). Possibly a book on computer architecture as well since you generally don<sq>t _need_ a computer to follow along with these as they tend to be very basic compared to the computers we have out there today. The math and algorithms can be done with pen and paper. Perhaps even data structures or design patterns as well would be a place to look, but those might have a lot of code samples.<br><br><br>These will give you a strong backing into the theory of computer science.<br><br><br>I can give you the books I used for these subjects, but I<sq>ll ask the others on this sub-reddit to give possibly better resources.<br><br><br>[Computer Organization and Design](http<colon>//www.amazon.com/Computer-Organization-Design-Fourth-Architecture/dp/0123747503/ref=sr_1_6?ie=UTF8&qid=1446732569&sr=8-6&keywords=computer+architecture)<br><br><br>[Discrete Mathematics](http<colon>//www.amazon.com/Discrete-Mathematics-Elementary-Beyond-Undergraduate/dp/0387955852/ref=sr_1_1?ie=UTF8&qid=1446732675&sr=8-1)<br><br><br>[Introduction to Algorithms](http<colon>//www.amazon.com/Introduction-Algorithms-3rd-Thomas-Cormen/dp/0262033844/ref=sr_1_3?s=books&ie=UTF8&qid=1446732778&sr=1-3&keywords=algorithms) - There are _a lot_ of resources on algorithms. Again, this is simply the one I used. I haven<sq>t done much in terms of comparing different texts.<br><br><br><br>Good luck with your situation. I hope others here can possibly give alternative resources for books.</p>", 
                "question": "What books or methods can I use to study computer science while in prison? [Serious]"
            }, 
            "id": "cwpdlql"
        }, 
        {
            "body": {
                "answer": "<p>No book suggestions pe se, but focus on the mathematics of problem solving, algorithms and logic. It<sq>ll give you a great head start for when you<sq>ll be able to access a computer. Half of what we do in programming is to solve problems with code.</p>", 
                "question": "What books or methods can I use to study computer science while in prison? [Serious]"
            }, 
            "id": "cwpdfc1"
        }, 
        {
            "body": {
                "answer": "<p>If you want a general understanding of how computers and code work, I could not recommend a better book than <sq>Code<colon> The Hidden Language of Computer Hardware and Software.<sq> I<sq>m not sure it would help you learn coding or algorithms, but it does give you a big picture view of how computers work and it<sq>s a very interesting read. <br><br>http<colon>//www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?s=books&ie=UTF8&qid=1446733942&sr=1-1&keywords=code</p>", 
                "question": "What books or methods can I use to study computer science while in prison? [Serious]"
            }, 
            "id": "cwpe93y"
        }, 
        {
            "body": {
                "answer": "<p>Is entrollment where I learn how to be a troll? <br><br>This is great though! I<sq>m getting a little frustrated at code academy. </p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c7puhez"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c7pv5tq"
        }, 
        {
            "body": {
                "answer": "<p>My daughter and I just finished the Intro Python course at Coursera and it was fantastic.  The profs at ~~Waterloo~~ U of T were great, and the course was paced well.<br><br>The tests and assignments were structured to teach and deepen your learning, rather than just parroting the material back.<br><br>I<sq>m definitely going for more.</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c7pvwgv"
        }, 
        {
            "body": {
                "answer": "<p>I have a quick question about CS 253<colon> Web Application Engineering - Building a Blog. The site says, <dq>A moderate amount of programming and computer science experience is necessary for this course.<dq><br><br>So I<sq>m assuming that knowing a bit of CSS and HTML is definitely not going to cover it.<br><br>1. Can anyone recommend a course I could use to get up to speed before the April 1st start date?<br>2. If we can<sq>t enroll in this bout of courses, can we audit and save the materials for later when we have enough experience to follow them?</p>", 
                "question": "Here<sq>s a list of 32 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c7pv6jq"
        }, 
        {
            "body": {
                "answer": "<p>Nice initiative!<br><br>> If Git in particular isn\u2019t your thing, I\u2019d personally recommend TortoiseSVN if you\u2019re a beginner to Source Control\u2013 it keeps the process as straightforward as possible and has a very **untuitive** user interface. <br><br>Intuitive you mean? <colon>)<br><br>I<sq>d personally recommend against including that bit. Beginners should just go learn Git. Period. No need to confuse / tempt them with <sq>easier<sq> source control systems like SVN<colon> Subversion isn<sq>t actually <sq>easy<sq> at all when you start needed to do merges. Git is much better at that.</p>", 
                "question": "Hey everyone! I<sq>m writing a complete beginner<sq>s guide on how to use Git / Source Control. Thought some of you might find this helpful."
            }, 
            "id": "co6xhnn"
        }, 
        {
            "body": {
                "answer": "<p>What made you want to write yet another guide to Git?<br><br>I finally learned Git from this (http<colon>//rogerdudler.github.io/git-guide/) guide, myself. </p>", 
                "question": "Hey everyone! I<sq>m writing a complete beginner<sq>s guide on how to use Git / Source Control. Thought some of you might find this helpful."
            }, 
            "id": "co6yxq4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m new to git and I enjoyed reading your blog post. In the spirit of iterative development (or in this case learning), I<sq>m glad I read your blog first before reading the more in-depth stuff. So thanks.</p>", 
                "question": "Hey everyone! I<sq>m writing a complete beginner<sq>s guide on how to use Git / Source Control. Thought some of you might find this helpful."
            }, 
            "id": "co74s4j"
        }, 
        {
            "body": {
                "answer": "<p>Atlassian has some pretty good guides as well<colon> https<colon>//www.atlassian.com/git/tutorials/</p>", 
                "question": "Hey everyone! I<sq>m writing a complete beginner<sq>s guide on how to use Git / Source Control. Thought some of you might find this helpful."
            }, 
            "id": "co75qx0"
        }, 
        {
            "body": {
                "answer": "<p>In my experience there are virtually no good tutorials on the internet and very few books are even passable, let alone any good. <br><br>They<sq>re all basically written for the guy who wrote them. By which I mean, they make perfect sense if you understand the concepts but none whatsoever if you don<sq>t. The writers of blog posts are the worst for this but most writers are guilty of it, it<sq>s an example of writers writing for themselves. <br><br>I genuinely think it<sq>s just a case of struggling with it and trying to carve some sense out of the madness, using multiple sources of information on the same thing in order to help clear things up. <br><br>I<sq>m not saying everything is awful of course, some stuff is pretty good but most is terrible from a learning point of view and most of the recommendations people give to beginners are a joke in my opinion. Those authors should never have been published. </p>", 
                "question": "Most beginner tutorials are really poorly done. Here<sq>s one that I found that breaks things down very well."
            }, 
            "id": "d8ewi4l"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know but your posted link is not good at all... If you want to have somewhat quality tutorials you can try scotch.io. This is what I used for an university project to get to know REST and nodeJS https<colon>//scotch.io/tutorials/build-a-restful-api-using-node-and-express-4</p>", 
                "question": "Most beginner tutorials are really poorly done. Here<sq>s one that I found that breaks things down very well."
            }, 
            "id": "d8et6yx"
        }, 
        {
            "body": {
                "answer": "<p>Anthony Alicea<sq>s Javascript the weird parts is an excellent course. It<sq>s much more rigorous and covers the fundamentals MUCH better imo. Also, it may not be project oriented, but once you are done with the lectures, you can go and pick up any of the <dq>not so great<dq> tutorials out there, while being able to take whatever you can from it, without worrying about not getting the best practies right, and also understanding *why* you<sq>re doing it that way.</p>", 
                "question": "Most beginner tutorials are really poorly done. Here<sq>s one that I found that breaks things down very well."
            }, 
            "id": "d8ew0db"
        }, 
        {
            "body": {
                "answer": "<p>> If any of you have found similar <sq>gateway<sq> tutorials for Javascript projects, please post them in a comment!<br><br>- [Eloquent Javascript](http<colon>//eloquentjavascript.net/)<br>- [You Don<sq>t Know Javascript](https<colon>//github.com/getify/You-Dont-Know-JS)<br><br>Not tutorial for JS but I highly recommend for beginners<colon> <br> <br>- [MarkSheet](http<colon>//marksheet.io/)<br>- [rscss](http<colon>//rscss.io/)<br><br>EDIT<colon> Several mentioned Eloquent JS and YDKJS are not aimed at beginners. How about [JavaScript for Cats](http<colon>//jsforcats.com/) then?</p>", 
                "question": "Most beginner tutorials are really poorly done. Here<sq>s one that I found that breaks things down very well."
            }, 
            "id": "d8eunoi"
        }, 
        {
            "body": {
                "answer": "<p>> punit-shah commented 14 hours ago \u2022 edited<br>> These are design patterns for making software, not humans as the name suggests.<br><br>Goddamit dad...</p>", 
                "question": "Software Design Patterns - A comprehensible guide"
            }, 
            "id": "de0mky4"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!</p>", 
                "question": "Software Design Patterns - A comprehensible guide"
            }, 
            "id": "de0dq2o"
        }, 
        {
            "body": {
                "answer": "<p>Why is there not a table of contents? Maybe someone wants to lookup something specific. Looks good otherwise. Maybe you could also add some cons very briefly e.g. http<colon>//stackoverflow.com/questions/11619680/why-should-the-observer-pattern-be-deprecated</p>", 
                "question": "Software Design Patterns - A comprehensible guide"
            }, 
            "id": "de0jvax"
        }, 
        {
            "body": {
                "answer": "<p>i skimmed over it and I already love it! Immediately starred! <br>IMHO, the use of PHP is the only drawback of it but, it is how it is</p>", 
                "question": "Software Design Patterns - A comprehensible guide"
            }, 
            "id": "de0ri4m"
        }, 
        {
            "body": {
                "answer": "<p>Can<sq>t thank you enough senor!</p>", 
                "question": "List of 20+ free online programming/CS courses (MOOCs) with FREE certificates of accomplishments/transcripts/badges"
            }, 
            "id": "d3zr10y"
        }, 
        {
            "body": {
                "answer": "<p>Can of you give any links to coding bootcamps during the summer? These are great but honestly I feel like I<sq>d do better with some social interaction around, I<sq>m kind of exhausted just being in my room getting distracted from other important things.</p>", 
                "question": "List of 20+ free online programming/CS courses (MOOCs) with FREE certificates of accomplishments/transcripts/badges"
            }, 
            "id": "d40085v"
        }, 
        {
            "body": {
                "answer": "<p>Can someone explain why programming certificates are needed/wanted? I<sq>ve never seen nor heard of someone actually putting that on a resume for a developer position..</p>", 
                "question": "List of 20+ free online programming/CS courses (MOOCs) with FREE certificates of accomplishments/transcripts/badges"
            }, 
            "id": "d3zw497"
        }, 
        {
            "body": {
                "answer": "<p>Not sure why the Principles of Computing course is included here<colon><br><br>> There is no instructor involved, and no credit, Statement of Accomplishment, or any type of verification or certification of completion is given. The course is simply here for people who want to learn more about computing.</p>", 
                "question": "List of 20+ free online programming/CS courses (MOOCs) with FREE certificates of accomplishments/transcripts/badges"
            }, 
            "id": "d40bz7f"
        }, 
        {
            "body": {
                "answer": "<p>Some other good ones<colon><br><br>* [Rosetta Code](http<colon>//rosettacode.org/wiki/Rosetta_Code)<br>* [OverAPI](http<colon>//overapi.com/)<br>* [DevDocs](http<colon>//devdocs.io/)<br>* [Awesome Cheatsheet](https<colon>//github.com/detailyang/awesome-cheatsheet)<br>* [Hyperpolyglot](http<colon>//hyperpolyglot.org/)<br>* [Lynda](https<colon>//www.lynda.com/Developer-training-tutorials/50-0.html)<br>* [Udacity](https<colon>//www.udacity.com/courses/all)<br>* [Udemy](https<colon>//www.udemy.com/courses/development/)<br>* [Coursera](https<colon>//www.coursera.org/browse/computer-science?languages=en)<br>* [edX](https<colon>//www.edx.org/course/subject/computer-science)<br>* [Project Euler](https<colon>//projecteuler.net/)<br>* [Codecademy](https<colon>//www.codecademy.com/)<br>* [Khan Academy](https<colon>//www.khanacademy.org/computing)<br>* [Code Wars](http<colon>//www.codewars.com/)<br>* [Hacker Rank](https<colon>//www.hackerrank.com/)<br>* [Egghead](https<colon>//egghead.io/)<br>* [Scotch](https<colon>//scotch.io/)<br>* [Thinkster](https<colon>//thinkster.io/)<br>* [Code School](https<colon>//www.codeschool.com/)<br>* [Coder Byte](https<colon>//coderbyte.com/)<br>* [Code Fights](https<colon>//codefights.com/)<br>* [Top Coder](https<colon>//www.topcoder.com/)<br>* [Daily Programmer](https<colon>//www.reddit.com/r/dailyprogrammer/)<br>* [Code Chef](https<colon>//www.codechef.com/)<br>* [Exercism](http<colon>//exercism.io/)<br>* [Free Programming Books](https<colon>//github.com/vhf/free-programming-books/blob/master/free-programming-books.md)<br>* [Free Programming Interactive Tutorials](https<colon>//github.com/vhf/free-programming-books/blob/master/free-programming-interactive-tutorials-en.md)<br>* [Awesome Programming Languages](https<colon>//github.com/sindresorhus/awesome#programming-languages)<br><br>I haven<sq>t tried all of them and not all of them free, but I wanted to give a complete list. If you know of more I haven<sq>t listed, link them. <colon>D</p>", 
                "question": "I<sq>m not sure how well-known it is but learnxinyminutes was invaluable to me to quickly pick up the basics of a new language"
            }, 
            "id": "d2fmwvr"
        }, 
        {
            "body": {
                "answer": "<p>I agree, fantastic resource. Once you<sq>ve learned a language or two already, you often don<sq>t need an in depth expose on a new technology you<sq>re learning. Often a tour through the syntax, data structures, and style is enough to get you started. From there you can fill your knowledge gaps as you identify them.</p>", 
                "question": "I<sq>m not sure how well-known it is but learnxinyminutes was invaluable to me to quickly pick up the basics of a new language"
            }, 
            "id": "d2fmrxo"
        }, 
        {
            "body": {
                "answer": "<p>You could also google for cheat sheets for your language or editor or whatever.</p>", 
                "question": "I<sq>m not sure how well-known it is but learnxinyminutes was invaluable to me to quickly pick up the basics of a new language"
            }, 
            "id": "d2fg99h"
        }, 
        {
            "body": {
                "answer": "<p>Any for Spring framework?</p>", 
                "question": "I<sq>m not sure how well-known it is but learnxinyminutes was invaluable to me to quickly pick up the basics of a new language"
            }, 
            "id": "d2g8jpi"
        }, 
        {
            "body": {
                "answer": "<p>You are going to get a million congratulations and you should definitely be excited, but let me be a voice of reason. Have you done market research to make sure your salary is comparable? Have you considered applying a few other places and trying to get another offer or two just to see where you stand?<br><br>I manage a team and typically the interns that we hire into entry level roles are paid less than the entry level employees we hire. That<sq>s not because we treat them differently, its because our interns almost always accept our opening offer. They shouldn<sq>t. We have decided that they<sq>re good enough that its not worth going out and interviewing other talent. They also have domain knowledge specific to what we do. Even if we found someone with comparable skills and attitude, we<sq>d still have to pay a few grand to recruit them either through job postings or a recruiter. If anything they should negotiate like they<sq>re in the top 30<percent> of the market for their skill level.</p>", 
                "question": "Just got an offer from my internship!"
            }, 
            "id": "deokzs2"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations! </p>", 
                "question": "Just got an offer from my internship!"
            }, 
            "id": "deoe0u3"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s freakin awesome! We just hired on our IT intern (asshole took my job) and while the pay isn<sq>t totally competitive, it<sq>s a huge increase from where he was when he was being paid as an intern/temp. </p>", 
                "question": "Just got an offer from my internship!"
            }, 
            "id": "deosep4"
        }, 
        {
            "body": {
                "answer": "<p>Are you studying programming in school?</p>", 
                "question": "Just got an offer from my internship!"
            }, 
            "id": "deomr7l"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m 34 and in school for a CS degree</p>", 
                "question": "Any programmers out there who started a programming career at 30 or later?"
            }, 
            "id": "dd55t87"
        }, 
        {
            "body": {
                "answer": "<p>I have a pretty unusual story. I flunked out of comp sci twice. Dropped out of college. Worked for a few years in dead-end jobs. Joined the Air Force at 23. Finished college in the military at 29 with a degree in English. Worked as a technical writer for six years. Became a junior software engineer at 36. I<sq>m getting promoted to senior software engineer at 38. It<sq>s possible, but I also busted my ass on the side creating web games to make up for lost time.</p>", 
                "question": "Any programmers out there who started a programming career at 30 or later?"
            }, 
            "id": "dd56ybu"
        }, 
        {
            "body": {
                "answer": "<p>I had a mildly technical career (pro audio/video) before programming, but didn<sq>t actually write a line of code until I hit 30. I completed Dev Bootcamp and got my first gig within a few months. I wouldn<sq>t call the job hunt *difficult*, as I literally just clicked yes on all 800 NYC startups with JS or Ruby listings on AngelList and bombed interviews until I stopped bombing them. I landed at a tiny startup where the CTO is self taught, so no ones been in a position to try and undercut my experience.</p>", 
                "question": "Any programmers out there who started a programming career at 30 or later?"
            }, 
            "id": "dd54jqe"
        }, 
        {
            "body": {
                "answer": "<p>I am 44 years old. I graduated last May, and have started my career. I work for a software company based in India that provides software developers to client companies. I am presently working for a client that is a very big deal in the US and my home state. My job is to ensure quality of a very large amount of critical client data. I am the only one in the western hemisphere with this responsibility for this company, and I have a team of 3 very patient co-workers in India.<br><br>My job was practically handed to me before I graduated. I put very little effort into finding a job. A CS degree can really take you places. <br><br>My colleagues treat me with a great deal of respect. I look younger than I am (I am often confused with being in my mid-to-late 30s), but I am significantly older than many of my peers. In fact, I am the oldest person in my current office. People generally like me, and I generally like people, so things are nice socially.<br><br>I have absolutely no regrets. This has been the best time of my life. Just over 20 years ago I stopped being homeless after 4 1/2 years of living on the street. In the two decades following, I had never been over the poverty line until last June. I now make more than three times more than my best years previously.<br><br>Remember to be humble. Despite your age and experience, you have not paid your dues in your new career. You can be slick as shit in college, but you are a complete noob in the corporate world of computer science.</p>", 
                "question": "Any programmers out there who started a programming career at 30 or later?"
            }, 
            "id": "dd5fwrr"
        }, 
        {
            "body": {
                "answer": "<p>Person posts picture of cat that someone else posted 6 months ago = 3000 karma<br><br>Person writes helpful book and gives it for free = 20 karma<br><br>I think the meaning of <sq>karma<sq> changed when we weren<sq>t looking.</p>", 
                "question": "My free ebook - A Primer on SQL"
            }, 
            "id": "c6oh8d3"
        }, 
        {
            "body": {
                "answer": "<p>As someone who was just asking his coworkers what SQL was and what it<sq>s utility is, I thank you!!!</p>", 
                "question": "My free ebook - A Primer on SQL"
            }, 
            "id": "c6og1oj"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "My free ebook - A Primer on SQL"
            }, 
            "id": "c6oh3o0"
        }, 
        {
            "body": {
                "answer": "<p>Not to be a dick at all, but who are you?  Can I justify using this book as a reference to my professor?</p>", 
                "question": "My free ebook - A Primer on SQL"
            }, 
            "id": "c6ogyx5"
        }, 
        {
            "body": {
                "answer": "<p>Bit of a fail tbh.<br><br>They never mention that you start at<br><br>    int main () { } <br><br>...<br><br>And it is not obvious. I have seen people confused why their C++ program isn<sq>t working simply becasue they didn<sq>t realise their code is meant to start at `int main() { }`<br><br>And what<sq>s the point of teaching variables if you won<sq>t even tell them about output before hand so they can see results?<br><br>What about functions, probably one of the most useful things in programming? (IMO anyway, I used to use python when I was learning, and my life would have been so much easier if I knew about functions)</p>", 
                "question": "Nice programming tutorial found on imgur"
            }, 
            "id": "d2i0bmu"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve tried to learn programming a few times now. It always ends up with a Eve-online like difficulty curve where the VERY basic things are easy, and the next step going forward is an insurmountable spiky wall of death which totally kills all motivation to try further. Like, I can understand the basic logic and doing basic stuff like a very simple budget calculator, but doing anything more complex than that is just way beyond and nothing seems to give any tips on how to proceed from there. <br><br>Edit<colon> thanks for the tips everyone! I<sq>ll give it another shot. </p>", 
                "question": "Nice programming tutorial found on imgur"
            }, 
            "id": "d2i84y6"
        }, 
        {
            "body": {
                "answer": "<p>I think it would be better if it used Code blocks or something for multiplatform support, but other than that it<sq>s pretty good.</p>", 
                "question": "Nice programming tutorial found on imgur"
            }, 
            "id": "d2i0yra"
        }, 
        {
            "body": {
                "answer": "<p>C++ really is one of the worst languages you could start with though. I tried when I was younger and pointers are just a lot to get your head around if you<sq>re completely new. If you want to learn something easily applicable with translatable skills from the beginning, start with C# or Java. Or even Swift if you want to make iPhone apps</p>", 
                "question": "Nice programming tutorial found on imgur"
            }, 
            "id": "d2ifcom"
        }, 
        {
            "body": {
                "answer": "<p>*Note<colon> I have a relation to this site, I<sq>m an employee. The purpose of my comment is just to give a bit more information so people don<sq>t get lost unnecessarily*<br><br>*Edit<colon> formatting*<br><br>CodinGame is not for total beginners. If you don<sq>t have the programming basics, you<sq>ll have a hard time.<br><br>There are several things on the site<colon><br><br>* **programming puzzles**<colon> fun and challenging. Difficulty gradually increases. At some point, one will likely need to search for help on sites like SO <br><br>* **multiplayer games**<colon> build an AI and compete with others. A league system ensures you encounter AIs of your level.<br><br>* **a community** <colon> multiple developers spend time on this site to sharpen their skills and learn new languages (25 on the platform)<br><br>* **job opportunities** <colon> a lot of companies are searching to hire developers on the site through sponsored puzzles and sponsored programming competitions. Of course, you can choose not to be contacted and just enjoy the fun of the site.<br><br>I hope it helps. Glad to welcome new developers should you choose to test it.<br></p>", 
                "question": "Found an interactive game to learn programing"
            }, 
            "id": "d7cz9d7"
        }, 
        {
            "body": {
                "answer": "<p>I made a big list of games like this, here<colon> <br><br>https<colon>//github.com/dargaCode/LogicAndCodingGames</p>", 
                "question": "Found an interactive game to learn programing"
            }, 
            "id": "d7ddieh"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.0427 <br> > /45753^^^^ thanks spez YVR8e)</p>", 
                "question": "Found an interactive game to learn programing"
            }, 
            "id": "d7d302i"
        }, 
        {
            "body": {
                "answer": "<p>Codecombat.com is awesome as well.  It supports python, Javascript, and Lua.  They also offer modules for web development and basic game coding.</p>", 
                "question": "Found an interactive game to learn programing"
            }, 
            "id": "d7d67nd"
        }, 
        {
            "body": {
                "answer": "<p>I like these pdf files of course curriculums for the sections on what they teach. It helps me figure out what I should learn next.<br><br> **What you will learn**<br><br>* By the time you graduate, you can expect to be able to<colon>   <br>* Apply \u201csocial coding\u201d accepted and best practices (including source control, issue tracking, functional feedback, etc.)   <br>* Build a frontend website either from scratch or by utilizing a frontend framework (such as Bootstrap)   <br>* Deploy static and dynamic websites to the cloud   <br>* Implement complex logical conditions to meet an objective   <br>* Write SQL commands to perform Create, Read, Update and Delete commands   <br>* Create a full stack Single Page Application with AJAX communication   <br>* Develop your vision for a website\u2014and then build it!   <br>* Expertly navigate the file system and terminal basics   <br>* Work independently or in a group on complex projects throughout the entire development lifecycle   <br>* Understand the basics of troubleshooting and enhancing legacy code   <br>* Communicate the basics of serving a web page and how the browser renders code   <br>* Create RESTful APIs utilizing JSON as a data format   <br>*     Consume RESTful APIs properly utilizing REST verbs  <br>*     Create robust Python-based websites utilizing Django  <br>*     Create session-based applications utilizing user authentication schemes that are well-known and widely used  </p>", 
                "question": "Well it finally happened... An accredited top 10 university is now offering a coding bootcamp."
            }, 
            "id": "de8dwm2"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m in this program right now. It<sq>s actually through UC Berkeley extension. The program curriculum is by another company called Trilogy. <br><br>UCLA Extension and a few other schools offer the same program.</p>", 
                "question": "Well it finally happened... An accredited top 10 university is now offering a coding bootcamp."
            }, 
            "id": "de8l994"
        }, 
        {
            "body": {
                "answer": "<p>Edit<colon> [link](https<colon>//codingbootcamp.pe.gatech.edu/)<br>  <br>GA Tech also offers a coding program similar to a bootcamp. I think it lasts a few months like a bootcamp, and they<sq>re definitely a top tier school. </p>", 
                "question": "Well it finally happened... An accredited top 10 university is now offering a coding bootcamp."
            }, 
            "id": "de8hx3q"
        }, 
        {
            "body": {
                "answer": "<p>I was offered a teaching position at this bootcamp for $17/hour. It<sq>s not good. I<sq>d stay away until they at least have a few months to get off the ground. AMA.</p>", 
                "question": "Well it finally happened... An accredited top 10 university is now offering a coding bootcamp."
            }, 
            "id": "de94zb8"
        }, 
        {
            "body": {
                "answer": "<p>Good article!<br><br>Maybe you could add 3 more items<colon><br><br>+ **Programming requires determination.**<br><br>   More than often enough you will be tempted to give up, but with determination you can push through these periods.<br>+ **Programming requires effort and initiative.**<br><br>  If you don<sq>t work hard, you will not progress. Your progress and achievements are entirely up to you. ~~Programming~~ *Learning to program* is definitely not for the lazy.<br>+ **Programming requires a different approach to failure.**<br><br>  We are trained to see failure as something negative, something we should avoid at all cost. Sure, in programming, failure should also be avoided, but will happen more than often. In programming, failure is not necessarily something negative as it is *gained experience* and in programming, experience is all that counts. It<sq>s equally important to know how not to do something as it is to know how to do something.<br><br>**Edit<colon>** rephrased <dq>Programming is definitely not for the lazy.<dq> to <dq>*Learning to program* is definitely not for the lazy.<dq></p>", 
                "question": "Why learning to program is tough"
            }, 
            "id": "d0jdcex"
        }, 
        {
            "body": {
                "answer": "<p>Your analogies are... imperfect. <br><br>Motivation is not just a simple matter of path of least resistance. Diets often fail because people can<sq>t see gradual, incremental changes. Body composition changes are subtle and happen over realtively long term horizons. If you aren<sq>t prepared for this reality, then you lose motivation quickly.<br><br>On the other hand, it<sq>s much easier to get small, immediate victories when learning to program, provided you are not trying to learn by jumping into the middle of the language and fighting your way out. <br><br>Microsoft<sq>s visual languages and similar paradigms are great in the sense that you can put stuff on the screen immediately and then iterate on that. Then it becomes a matter of googling what the next challenge is, implementing it, and creating the next challenge. <br><br>In a similar vein, physical sports are often MORE complicated than coding. YEah, you can boil basketball to <dq>get the ball in the net<dq>, but that<sq>s too simplistic to be a useful comparison. Learning to code and learning to be competent at a sport are comparable. And that can be very challenging. Imagine having only a hoop, and basketball, and a deadline of 3 months to be good enough to make the highschool basketball team. Even if you were in good shape physically, there are skills that have to be practiced and learned from muscle memory - that just takes time. You can<sq>t google your way out of not being able to take free-throws. <br><br>The points you make are good and reasonable, but they aren<sq>t the end of the story. For example, choosing a language can resolve many problems. If you download VS2015 Community and choose C# as your language, you can hit the ground running without all the garbage config issues you deal with using Java or Python. <br><br>Many of the other problems are solved by not being over ambitious. Yeah, databases are hard. But no beginner in his or her right mind should even think about databases. <br><br>Programming is *daunting* because it seems alien, like a foreign language. But it<sq>s not really that bad. It<sq>s more like.. putting together IKEA furniture without instructions. At first, it<sq>s just a ton of trial and error. You aren<sq>t even sure you have all the tools you need. You stumble through the first dresser and it<sq>s wobbly and fragile, but the drawers open almost 75<percent> of the way at least half the time!<br><br>Then you try again, and you learn from the last time you tried. You have the allen key handy because you know you need it. You know to do the nails last because they<sq>re hard to remove if you make a mistake. And so on. </p>", 
                "question": "Why learning to program is tough"
            }, 
            "id": "d0jffwm"
        }, 
        {
            "body": {
                "answer": "<p>Enjoyment and genuine interest can make up for a lack of discipline.  I can attest to that.  If learning programming is such an excruciating crawl through the mud, maybe it<sq>s not really for you.</p>", 
                "question": "Why learning to program is tough"
            }, 
            "id": "d0jgg5q"
        }, 
        {
            "body": {
                "answer": "<p>Oh, great, another soapbox speech about how it<sq>s the learner<sq>s fault that programming is hard, not that the pedagogy sucks. I<sq>d really say that existent learning resources largely only teach programming at the most basic level, anything beyond that are learning materials that either deal with advanced topics, or read more like a great reference than a great learning tool (Dive into Python is terribly inadequate for learning to program, for example, but I see it recommended over and over again).<br><br>Experienced programmers always complain that learners expect handholding like its a bad thing. <dq>You just need motivation read the docs just write code.<dq> But that<sq>s exactly what a learner needs -- a hand holder. Someone to show them prerequisite knowledge and how to use the tools (when to use the docs, how to find what you need in the docs, just knowing that you<sq>re looking for a function that takes type a and returns type b, and even what types you<sq>re even dealing with).<br><br>When you teach a child to ride a bike, you don<sq>t just give a bike to them. You give them training wheels, you hold the seat and guide them, you keep them balanced when the training wheels come off. When you teach a college student calculus, you don<sq>t throw them Spivak or Apostol, you give them Thomas or Stewart and work through examples with them and a good deal of graduated exercises.<br><br>It<sq>s why most of us learn through tutorials or college -- it holds our hands. Problem with tutorials is it doesn<sq>t provide a coherent curriculum and tends to take on more basic topics, leaving gaps in understanding and limited expertise, and problem with college is lack of accessibility.<br><br>The only resource I<sq>ve seen that seems to do the right thing that wasn<sq>t written in the 80s or 90s (usually, for learning pgrwmming, I recommend older books) is Free Code Camp. It has appropriate hand holding and graduated exercises up through <dq>real<dq> programming.</p>", 
                "question": "Why learning to program is tough"
            }, 
            "id": "d0jjpkx"
        }, 
        {
            "body": {
                "answer": "<p>It clicked, then comes the next concept you totally didn<sq>t grasp already and wwwwwush... you<sq>re back at a steep learning curve again! ;)<br><br>Congratulations, however, keep up the spirit! <colon>)</p>", 
                "question": "When all this coding and programming stuff finally clicks...man does it feel good."
            }, 
            "id": "ctmkxja"
        }, 
        {
            "body": {
                "answer": "<p>> plus Googling for help...but that still counts in my mind! <colon>P<br><br>Yes it counts. We all google all the time.<br>Its not about having every piece of the puzzle beforehand, its about knowing where to look for the missing pieces.<br><br>Source<colon> Professional JavaEE developer.</p>", 
                "question": "When all this coding and programming stuff finally clicks...man does it feel good."
            }, 
            "id": "ctmnyic"
        }, 
        {
            "body": {
                "answer": "<p>When you do this professionally and you<sq>re working on debugging an issue and finally 2 weeks later you find the bug and fix it.. it<sq>s akin to climaxing sexually.</p>", 
                "question": "When all this coding and programming stuff finally clicks...man does it feel good."
            }, 
            "id": "ctmptnf"
        }, 
        {
            "body": {
                "answer": "<p>Enjoy the moment... a Tour de France rider once said <dq>it never gets easier, you just go faster<dq>. It<sq>s the same with programming, you just do more complex things.</p>", 
                "question": "When all this coding and programming stuff finally clicks...man does it feel good."
            }, 
            "id": "ctmns35"
        }, 
        {
            "body": {
                "answer": "<p>I would love another excuse to lord my programming knowledge over other people.<br><br>I mean, uh... help people learn by example, and, uh, stretch my mental muscles.<br><br>... yeah.</p>", 
                "question": "Would anyone be interested in a weekly <dq>How do you solve this problem<dq> thread?"
            }, 
            "id": "d99g90v"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know about others, but I hangout in /r/learnprogramming/new/ when looking for posts, so I would never see new posts made to a weekly thread.<br><br>Also, if people can<sq>t be bothered to read the FAQ before posting, I guarantee you they wont post in a weekly thread either.</p>", 
                "question": "Would anyone be interested in a weekly <dq>How do you solve this problem<dq> thread?"
            }, 
            "id": "d98pdae"
        }, 
        {
            "body": {
                "answer": "<p>I too would like to see this happen. It would be really useful to see step by step how to problem is solved at each stage in detail</p>", 
                "question": "Would anyone be interested in a weekly <dq>How do you solve this problem<dq> thread?"
            }, 
            "id": "d999a1i"
        }, 
        {
            "body": {
                "answer": "<p>I actually would like a <dq>solve this problem<dq> thread once a week, where a problem is asked and we all solve it, picking up strengths and weaknesses of each others code.</p>", 
                "question": "Would anyone be interested in a weekly <dq>How do you solve this problem<dq> thread?"
            }, 
            "id": "d99ikis"
        }, 
        {
            "body": {
                "answer": "<p>6 years of experience has taught me the following priorities <colon><br><br>1. Make it work<br>2. Make it fast<br>3. Make it pretty</p>", 
                "question": "[LPT] When you<sq>re starting out don<sq>t get too bogged down on <dq>doing it right<dq> just do it then learn how it could be better"
            }, 
            "id": "d27f3fv"
        }, 
        {
            "body": {
                "answer": "<p>I agree with this and would even go so far as to say 15 years later I still need to remind myself of this advice.<br><br>And although this definitely applies to me, I doubt it applies to everyone. I<sq>m sure some people do this automatically and probably find the advice totally useless.</p>", 
                "question": "[LPT] When you<sq>re starting out don<sq>t get too bogged down on <dq>doing it right<dq> just do it then learn how it could be better"
            }, 
            "id": "d27ek11"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m an intern, but I work with great developers with 10-15 years experience. They say no matter how experienced you are, you will think the code you wrote 3-6 months ago will look so ugly. <br><br>You are continuously learning how to do things better, so just do what you can now.</p>", 
                "question": "[LPT] When you<sq>re starting out don<sq>t get too bogged down on <dq>doing it right<dq> just do it then learn how it could be better"
            }, 
            "id": "d27n4ro"
        }, 
        {
            "body": {
                "answer": "<p>TL;DR<colon> Done is better than perfect.</p>", 
                "question": "[LPT] When you<sq>re starting out don<sq>t get too bogged down on <dq>doing it right<dq> just do it then learn how it could be better"
            }, 
            "id": "d27ttkh"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve tried it once, two years ago, but wasn<sq>t able to keep up with the tasks, so dropped. A great course though, good luck to OP. </p>", 
                "question": "FYI<colon> MIT<sq>s Introduction to Computer Science and Programming Using Python starts today on edX."
            }, 
            "id": "cyx14m3"
        }, 
        {
            "body": {
                "answer": "<p>Quite possibly the hardest online course I ever took. But very worth it - prob also the best one I<sq>ve taken in terms of advancing yourself. Goes deep/above and beyond your typical mooc. With a regular job, it definitely stretched my time - so don<sq>t expect a walk in the park.</p>", 
                "question": "FYI<colon> MIT<sq>s Introduction to Computer Science and Programming Using Python starts today on edX."
            }, 
            "id": "cyx9g9v"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, I<sq>ve been learning Python with Codeacademy. I signed up and chose to audit instead of pay for the certificate. I see that there is an upgrade button, do you know if that means at anytime during the course I could pay for the course college credit & certificate? Or am I limited to do that in the beginning.<br></p>", 
                "question": "FYI<colon> MIT<sq>s Introduction to Computer Science and Programming Using Python starts today on edX."
            }, 
            "id": "cyx7hap"
        }, 
        {
            "body": {
                "answer": "<p>Do you guys suggest getting the Edx.org certificate for this and the havard Cs50 course or just auditing them to gain the knowledge? </p>", 
                "question": "FYI<colon> MIT<sq>s Introduction to Computer Science and Programming Using Python starts today on edX."
            }, 
            "id": "cyx3b6t"
        }, 
        {
            "body": {
                "answer": "<p>[Project Euler](https<colon>//projecteuler.net/) has some good practice problems if you like math problems.<br><br>Suggestion if you want to post code on Reddit<colon> Indent every line of your code by 4 spaces, and it<sq>ll enclose it within a code block, as shown here<colon><br><br>    for(var numbers =1; numbers <= 100; numbers++){<br>        if(numbers <percent>3 ==0 && numbers <percent>5 ==0)<br>            console.log(<dq>FizzBuzz<dq>);<br>        else if(numbers <percent>3 ==0)<br>            console.log(<dq>Fizz<dq>);<br>        else if(numbers <percent>5 ==0)<br>            console.log(<dq>Buzz<dq>);<br>        else<br>            console.log(numbers);<br>    }<br><br>Note that Reddit hates tabs, so you<sq>ll have to use regular spaces.</p>", 
                "question": "I just solved fizzbuzz!"
            }, 
            "id": "dd1y2bz"
        }, 
        {
            "body": {
                "answer": "<p>You can also <percent> 15 instead of <percent>3 and <percent>5</p>", 
                "question": "I just solved fizzbuzz!"
            }, 
            "id": "dd1ywtc"
        }, 
        {
            "body": {
                "answer": "<p>This post warmed my heart. This is fantastic. Don<sq>t stop now. I love programming because of this thrill that you are feeling right now. Every time that you solve a problem you will get this feeling. Keep it up!</p>", 
                "question": "I just solved fizzbuzz!"
            }, 
            "id": "dd23eio"
        }, 
        {
            "body": {
                "answer": "<p>Feedback<colon> the variable called numbers should not be called numbers. <br><br>First, it<sq>s plural. That implies it is an array, collection, list, etc. So don<sq>t pluralize if it<sq>s a single value. <br><br>Second, number is too vague and sometimes a reserved word. It doesn<sq>t tell you what it means or what it holds. You can use the letter i as this is a standard for loop variable name for indicating an index position which would be acceptable here. Alternatively you could call it currentNumber or something. <br><br>Lastly, when you learn about recursion, repeat what you did here with recursion. It<sq>s a difficult subject for some people so modifying a known solution will be more educational. </p>", 
                "question": "I just solved fizzbuzz!"
            }, 
            "id": "dd24rby"
        }, 
        {
            "body": {
                "answer": "<p>There are so many because the web has existed for 26 years and in that time the technologies used on it, the things it<sq>s used for, the requirements users have, etc have changed massively, programming has changed massively, the devices used to access it have changed massively, and all that stuff results in new tools being made and used.<br><br>It<sq>s hard to summarise these things up so quickly but I<sq>ll give it a go.<br><br>- jQuery is a JavaScript library used on the client side. That is, it executes within a user<sq>s browser, after they download the page. jQuery is usually used to make grabbing and manipulating parts of the page easier, and animate them or communicate with the server. It was enormously popular in the 2000s and is still widely used, but building sites around it has been getting less and less common.<br>- React is a library for building *UI components*; individual parts of an application or page which can be displayed and interacted with. For example, on Facebook, there might be a comment box component that is part of a post component that is part of a wall component. This is considered a more performant and maintainable way of writing complex interface code. <br>- Angular is a front-end framework. A framework is like a library that enforces a pre-established structure for your application. It is used like a skeleton to build complex interactive websites around.<br>- Bootstrap is mainly a CSS framework. Bootstrap provides a nice way to organise the overall layout of your page in a way that will reflow properly on different screen sizes -- because nowadays you need to have an interface that looks one way on phones, one way on tablets, one way on laptops, one way on desktops, etc.<br>- Node is a JavaScript interpreter that runs on servers, packaged with standard libraries to let JavaScript do things it normally couldn<sq>t, like access files or databases, open network sockets, and so on. This lets you use JavaScript the way you used to use PHP and other back-end languages.<br>- Rails, Django, and Laravel are back-end frameworks. They are used to write applications that run on the server, as opposed to in the browser. As frameworks they provide a standard structure for your application.<br>- ECMAScript is the official name for the JavaScript standard. ECMAScript == JavaScript.</p>", 
                "question": "ELI5<colon> The popular JavaScript libraries (jQuery React.js AngularJS Bootstrap NodeJS Ember.js and any other notables) Ruby on Rails Django Lavarel ECMAScript etc."
            }, 
            "id": "d5okspm"
        }, 
        {
            "body": {
                "answer": "<p>**Adventures on the Client Side**<br><br>Javascript, as you might know, start out mainly as a *client-side* language, meaning it did things in the browser, without having to talk to the server again. And\u00a0that could be working with data or changing what was displayed to the user (via dynamic changes to HTML/CSS).<br><br>This is called Document Object Model (DOM) manipulation and was rather tedious to do, so some libraries were written to make that easier, like jQuery for example. This was not only to make the data displayed dynamic, but eventually could also do more fancy visual things (which often destroyed people<sq>s eyes, back in the 90s).<br><br>**Server Talk**<br><br>Now, at this time if we wanted to load up a new set of information, our browsers would still have to go to the server and ask it to send to us an entire web page again with all the data we wanted.<br><br>Because of this some folks decided it was a good idea to *NOT have to load up everything* but instead just request from the server only the data that was necessary, and then update the data that was displayed. This was all done in Javascript.<br><br>This eventually gave us AJAX (Asynchronous Javascript And XML). What the <dq>asynchronous<dq> meant was that the JS code would run in the background sending/receiving data from the server, and then display the data when it arrived. In the meantime the user could interact with the web page without worrying about break things. Great for user experience!<br><br>Now, this gave us things like Gmail and a whole range of wonderful web apps. But of course they also got more complex. So libraries like React (by FB), Angular (by Google) and Ember, were created to deal with these increasingly complex user interfaces.<br><br>Remember too that as these apps got more complex that not only do we have to be able to work with the data and display, but also do it as efficiently as possible, so that the users experience remains great.<br><br>**Server-side Love**<br><br>Node is pretty simple to understand<colon> It allows us to run Javascript from the command line, and hence allows us to run a server based on JS, rather than say Python or PHP. Potentially one less programming language to learn!<br><br>You mentioned a few other server side frameworks as well \u2014\u00a0Rails (for Ruby), Django (Python), Laravel (PHP). Now, if you wanted to write a server for managing your data, you could do it from scratch.<br><br>But after a while you<sq>d notice that some aspects of it repeat themselves. Managing users, authentication, storing data in a way that<sq>s easy to interact with.<br><br>So all these frameworks were created to make the job of doing that easier, so folks could just jump in and get to work on the unique bits, which is great when we want to prototype or test new things.<br><br>**Looking Pretty Everywhere**<br><br>Let<sq>s step back in the browser a moment and talk about Bootstrap (and Foundation).<br><br>A decade or two ago, screen sizes were limited to average-sized desktop screens. So if you wanted to make a webpage look good, it was still pretty easy. Now though, we<sq>ve got everything from tiny internet-enabled feature phones to gigantic 4K screens, and everything else in between.<br><br>Multiply that by the variety of browsers, all of which support HTML and CSS features to varying degrees, and each with their own quirk implementations of some features, and you get a web designer<sq>s nightmare.<br><br>So how do we make everything look usable (and hopefully good) on so many devices? There<sq>s where CSS frameworks like Bootstrap and Foundation come in. And as usual it also had the side effect of making it easier for us to prototype things.<br><br>Phew that was quite a ride eh? Well the last thing on your list is easy<colon> ECMAScript is the <dq>official<dq> name for Javascript when they wanted to standardize it.</p>", 
                "question": "ELI5<colon> The popular JavaScript libraries (jQuery React.js AngularJS Bootstrap NodeJS Ember.js and any other notables) Ruby on Rails Django Lavarel ECMAScript etc."
            }, 
            "id": "d5one3q"
        }, 
        {
            "body": {
                "answer": "<p>Take it with a grain of salt but if I were to give a one/two line description for each item you listed... <colon><br><br><br>jQuery - HTML is stored as a tree, as the document object model (DOM). Your browser moves around the DOM and does stuff with the nodes (adds an element, removes a child, modifies a style etc.) telling it how to traverse and interact with the DOM used to be a pain because all the functions were called different things (the DOM API basically sucked for a variety of reasons.) jQuery fixed this. By adding a small (like 40k) library you could interact with your HTML and CSS much easier regardless of your browser. Now the DOM API is much better and other technologies help with a lot of the things jQuery is good at but it still has its place sometimes. <br><br>Bootstrap - a bunch of pre-written styles and functions that you add to your HTML by adding classes that helps make a modern looking and responsive site incredibly fast. <br><br>NodeJS - JavaScript ported to run in a regular computer environment rather than being confined to a browser. NodeJS has core modules like file system that let you do things the browser version (for good reason lol) is not allowed to do. I love being able to write all front and back end code in just JavaScript (I think it<sq>s a wonderful language once you really dig into it).<br><br>ECMAScript - the <dq>official<dq> name for JavaScript even if no one calls it that outside of specification document type contexts. <br><br>ES6/ES2015 - the latest version of JavaScript  (ECMAScript 5/6) that came out recently. Has a lot of great features and new syntax for stuff. Check out es6-features.org for more details on ES5/ES6 differences. <br><br>React- a library/framework that people seem to often use just for the front-end. I haven<sq>t used it but I plan to use it in the near future because I t looks awesome. <br><br>Angular - also haven<sq>t used but if I had to pick one framework for everything it would be angular. Front end and back end and a lot of really cool features. Learn version 2 unless you need to manage some version 1 code is what I<sq>ve been hearing.<br><br>Ember, Rails, Django, Laravel - frameworks. No idea about their strong points. Most popular (I think) for Ruby are rails and Sinatra, for Python Django and Flask, for PHP Laravel, cake, symfony, spring for Java, express for nodeJS, and then there is ember and backbone in there somewhere but I haven<sq>t used most of these personally so I would recommend your own research for the particulars of each that you<sq>re interested in.<br><br>To add to this I highly recommend a video from LearnCode.Academy, on YouTube. Goes very in depth on all this and more <colon>)<br><br>https<colon>//youtu.be/pB0WvcxTbCA<br><br>Sorry if I spell things wrong or the formatting sucks. On mobile and sleepy <colon>P</p>", 
                "question": "ELI5<colon> The popular JavaScript libraries (jQuery React.js AngularJS Bootstrap NodeJS Ember.js and any other notables) Ruby on Rails Django Lavarel ECMAScript etc."
            }, 
            "id": "d5okwc3"
        }, 
        {
            "body": {
                "answer": "<p>These are in a few different groups, but many of them serve the same purpose.<br><br><br>Let<sq>s say you want to build a website. You<sq>ll always have HTML for your content, and probably CSS for your styling. After that, if you want the page to be interactive in anyway, you<sq>ll add JavaScript that runs in the browser for interaction. If you want the pages to be dynamic - you<sq>ll add some server side component. So, it ends up looking like this<colon><br><br>* **HTML** - Content<br>* **CSS** - Styling<br>* **JavaScript (Client side)** - Interactivity<br>* **Server Side Language** - Dynamic Content (database driven, anything that manages state)<br><br>**HTML**<br><br>HTML is HTML. Aside from ***HTML5***, which introduced some new elements, how you write HTML hasn<sq>t significantly changed in a while.<br><br>**CSS**<br><br>How you style pages has gotten sooo much better over the years. The tricky part is, we<sq>re also supporting many more browsers and devices than ever before. Writing your own styles in CSS that work in every browser has gotten more difficult. This is where CSS frameworks like ***Bootstrap*** and ***Foundation*** come in -- they give you a great starting point to be able to style your site with much of the common problems you<sq>d face already solved for you. I personally love Bootstrap (and even wrote a course on it at Code School). I<sq>ve tried using Foundation, but now that Bootstrap 4 has Sass support, that would be my recommendation.<br><br>Once your site has grown large, you<sq>ll probably start to get lost in a sea of CSS. At that time, it<sq>s nice to look into ***Sass***, which allows for breaking up your CSS into multiple files, setting variables (colors you use everywhere) and other things that make it easier to maintain a large codebase.<br><br>**JavaScript Utilities**<br><br>Once you have some HTML and CSS, you<sq>ll probably want to make it dynamic in some way. Like this cool preview thing Reddit does to show as you<sq>re typing -- that<sq>s in JavaScript. The problem with JavaScript is the same as with CSS - different browsers and devices do things differently. If you just want to write plain old JavaScript in the client but don<sq>t want to worry about these browser differences, the go-to libraries are ***jQuery***, which is the most popular JavaScript framework, and offers a way of manipulating HTML and CSS, making calls to a backend server, handling events (clicking, typing, etc) and even some animations. Of all the frameworks you listed, jQuery has been around the longest, and has the largest userbase. It<sq>s a great place to start learning about JavaScript.<br><br>Two other utilities not mentioned that are worth a callout are ***underscore*** and ***lodash***. These frameworks give methods for working with JavaScript on the client side that make everything easier. How do you check if something in undefined in JS across all browsers? Well, just use a lodash method for it. These two are similar, but just use lodash - it<sq>s faster, and more updated.<br><br>**JavaScript Client Side Frameworks**<br><br>Once you<sq>ve started making a complicated page using jQuery, your code is going to start getting ugly and painful to maintain. That<sq>s where client-side frameworks like ***Angular.js***, ***Ember.js*** and ***React*** come into play. They help organize code in very complicated JavaScript applications. This has been the area of the most change in the past 5 years or so, as front-end development has moved from jQuery over to these frameworks as more interactivity has been expected on the client side. <br><br>If you<sq>ve never done anything on the client side with JavaScript before, I<sq>d advise against jumping into these frameworks, and instead just using jQuery. Angular.js and Ember.js BOTH use  jQuery behind the scenes, so jQuery is where I recommend starting rather than jumping into Client Side frameworks. I<sq>m leaning towards React as what I<sq>d recommend from this list, but a number of my coworkers stand by Angular 2. <br><br>**Back-End Frameworks**<br><br>Eventually at some point you<sq>ll want to save a users state in a database, or show content that you can control from a database. To do this, you<sq>ll need a server-side framework. Since you know Java and Python, you understand these run on a server hosted somewhere in a datacenter. Many of the other ones you listed -- ***Ruby on Rails/Ruby***, ***Django/Python***, ***Laravel/PHP***, ***Express/Node.js***, ***.NET MVC/.NET Core*** are all on this server component. (These are listed as framework name/runtime)<br><br>The difference between just writing your Backend code on your own (in say PHP) and using something like Laravel is similar to the jump from CSS->Sass, or the jump from jQuery->(Ember, React, Angular). Laravel (or Ruby on Rails, Django, Express for Node) will help organize your code and protect you from many common issues that you would otherwise have to solve yourself. The biggest reasons for using these to me are around code organization (which helps when working on a team, or moving to a new job you<sq>ll know how things are organized), as well as productivity. <br><br>For a basic backend though, if you<sq>re writing PHP and not feeling like it<sq>s holding you back -- just stick with that. If your code has grown, or you<sq>re wanting to work on a team, these frameworks make that possible -- and enjoyable!<br><br>**A Note on JavaScript**<br><br>It may seem like JS/ECMAScript is taking over the world lately, with so much talk about NodeJS, client side frameworks, server side components, json, apis - etc. It<sq>s involved in all the discussions. While I love JS, I wouldn<sq>t use it for everything. For a database backed site, Ruby on Rails/Django might be more productive. My choice was Rails, which I<sq>ve continually gotten more productive with over the years. <br><br>**Learn More**<br><br>This got a bit long <colon>sweat_smile<colon> . I work at Code School and have created or worked on courses teaching a bunch of these topics -- some of them free. I love this stuff, so if you have questions on it, I<sq>m down for answering if I can!<br><br>* [Try jQuery](http<colon>//try.jquery.com/) (100<percent> free)<br>* [Shaping Up With AngularJS](https<colon>//www.codeschool.com/courses/shaping-up-with-angular-js) (100<percent> free)<br>* [Try Ruby](http<colon>//tryruby.org/) (100<percent> free)<br>* [Rails for Zombies](http<colon>//railsforzombies.org/) (100<percent> free)<br>* [JavaScript.com](http<colon>//javascript.com/) (100<percent> free)<br></p>", 
                "question": "ELI5<colon> The popular JavaScript libraries (jQuery React.js AngularJS Bootstrap NodeJS Ember.js and any other notables) Ruby on Rails Django Lavarel ECMAScript etc."
            }, 
            "id": "d5oxpgy"
        }, 
        {
            "body": {
                "answer": "<p>First off, congratulations. And thanks for posting this. <br><br>I think this answers a lot of questions that come up here all the time. Both about how you learned it, but also about the timeline that you learned it on.<br><br>The <sq>how long will it take me to learn x<sq> question comes up all the time, and while it<sq>s clearly dependent on the person and a lot of other parameters, it<sq>s good to have a solid data point with your experience.<br><br>Lastly, I totally agree with your realization how important it is to understand what you are doing, rather than just blindly copying from tutorials and then fixing things with shotgun debugging.<br><br><br>Again, congratulations on achieving this. </p>", 
                "question": "From zero experience to publishing my first game from scratch in <6 months; here<sq>s how I did it. Java / Android / LibGDX"
            }, 
            "id": "crhw6mk"
        }, 
        {
            "body": {
                "answer": "<p>As someone who has just started to take the tiniest first steps and hopes to one day be where you are now...a very sincere congratulations on your achievement.<br><br>Reading stories like this are incredibly inspirational. </p>", 
                "question": "From zero experience to publishing my first game from scratch in <6 months; here<sq>s how I did it. Java / Android / LibGDX"
            }, 
            "id": "cri0vzp"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.3462 <br> > [What is this?](https<colon>//pastebin.com/64GuVi2F/90976)</p>", 
                "question": "From zero experience to publishing my first game from scratch in <6 months; here<sq>s how I did it. Java / Android / LibGDX"
            }, 
            "id": "crhxtky"
        }, 
        {
            "body": {
                "answer": "<p>Just wanted to say congratulations. I<sq>m a professional software designer, and it is great to see someone creating for the passion of it. Not everyone in the industry has that.</p>", 
                "question": "From zero experience to publishing my first game from scratch in <6 months; here<sq>s how I did it. Java / Android / LibGDX"
            }, 
            "id": "cri0rbu"
        }, 
        {
            "body": {
                "answer": "<p>Congrats!</p>", 
                "question": "It took 10 months but I have accepted my first position as a Junior Developer!"
            }, 
            "id": "cwbi9f7"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m where you were 297 days ago. I finished a bachelor of business administration and realize that my passion is in coding. I have just begun doing code academy work and am finding it quite fun. Your post has definitely inspired me to keep going. </p>", 
                "question": "It took 10 months but I have accepted my first position as a Junior Developer!"
            }, 
            "id": "cwbkfxv"
        }, 
        {
            "body": {
                "answer": "<p>You mentioned working on Ruby in your post, but what else have you spent your time studying? I<sq>m at the 6 month point of my own goal to find a junior role (also self-taught, also no CS degree) within a year and am curious what you<sq>ve chosen to focus on and what<sq>s worked for you.</p>", 
                "question": "It took 10 months but I have accepted my first position as a Junior Developer!"
            }, 
            "id": "cwbj7mz"
        }, 
        {
            "body": {
                "answer": "<p>Can you explain how you got offered a job without any interviews?<br></p>", 
                "question": "It took 10 months but I have accepted my first position as a Junior Developer!"
            }, 
            "id": "cwbzed2"
        }, 
        {
            "body": {
                "answer": "<p>I think what happened to you is blessing in disguise, that FoxPro BS wasn<sq>t going anywhere. <br><br>I bet life have better opportunities for you.<br><br>Carry on my friend!</p>", 
                "question": "UPDATE<colon> Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmwzkfo"
        }, 
        {
            "body": {
                "answer": "<p>If you get fired, it<sq>s their failure - not yours.  Keep grinding.</p>", 
                "question": "UPDATE<colon> Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmx2gdn"
        }, 
        {
            "body": {
                "answer": "<p>Sorry to hear you lost your job, that<sq>s never fun.<br><br>Like the other person commented, perhaps look for a job that doesn<sq>t involve Foxpro, that involves something you<sq>re strong at, like web development using PHP for example. No one is good at everything. Find a job you enjoy and that fits your strengths.<br><br>Regarding studying during your off hours and not getting paid for it, this is just normal in the industry, many people don<sq>t get paid for some or all extra hours related to the job. If your yearly salary is decent, this shouldn<sq>t be a big problem, as long as it doesn<sq>t reach the point of effecting your health.<br><br>It<sq>s also why you should find a job you like, it makes doing extra hours easier. <br><br>Good luck on your next job.</p>", 
                "question": "UPDATE<colon> Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmwzp8m"
        }, 
        {
            "body": {
                "answer": "<p>For what it<sq>s worth, your eagerness to improve and your attitude are qualities that employers seek.   Keep your chin up.  </p>", 
                "question": "UPDATE<colon> Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmx42r8"
        }, 
        {
            "body": {
                "answer": "<p>At the first college I attended the computer science program was so math intensive that you graduated with a minor in math, as well as a bachelors in comp sci. Your parents are pretty ignorant of the modern world if they think programming is a distraction. It<sq>s a growing field showing no signs of slowing down. Great pay for forty hour work weeks too. </p>", 
                "question": "I<sq>m home schooled but my parents don<sq>t approve of <sq>technology<sq>. I still want to learn programming on my own. I need your help!"
            }, 
            "id": "cq3x8pf"
        }, 
        {
            "body": {
                "answer": "<p>Thats fucked up that your father trashed your textbooks. Heres a couple hundred free ones for you<colon><br>https<colon>//github.com/vhf/free-programming-books/blob/master/free-programming-books.md<br><br>Do you know specifically what your parents don<sq>t like about CS?</p>", 
                "question": "I<sq>m home schooled but my parents don<sq>t approve of <sq>technology<sq>. I still want to learn programming on my own. I need your help!"
            }, 
            "id": "cq3xhu4"
        }, 
        {
            "body": {
                "answer": "<p>If their financial support is your only chance of getting into a university, I<sq>d consider doing a maths major.  It will give you a very solid footing from which to work, and you<sq>ll probably be able to take some computer science classes as electives.  You<sq>ll have to learn most of programming in your own time, but that<sq>s entirely doable.  (To be frank -- looking at people on IRC, I get the feeling that those who learn from books are often better-off than those who go to a community college.)</p>", 
                "question": "I<sq>m home schooled but my parents don<sq>t approve of <sq>technology<sq>. I still want to learn programming on my own. I need your help!"
            }, 
            "id": "cq3xlqo"
        }, 
        {
            "body": {
                "answer": "<p>Did you ever stop and think that you are the future creator of the Robot Apocalypse???  That your parents were warned years ago by some time-travelling savior that, whatever they do, they should not let you learn programming?  Did you think of that???</p>", 
                "question": "I<sq>m home schooled but my parents don<sq>t approve of <sq>technology<sq>. I still want to learn programming on my own. I need your help!"
            }, 
            "id": "cq43u6d"
        }, 
        {
            "body": {
                "answer": "<p>\u201cMeasuring programming progress by lines of code is like measuring aircraft building progress by weight.\u201d<br><br><br>\u2015 Bill Gates</p>", 
                "question": "\u201cProgramming is like sex. One mistake and you have to support it for the rest of your life.\u201d by [Michael Sinz] . Any other interesting quote that you know ?"
            }, 
            "id": "cepgxon"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know who to attribute this to but,<br><br>> Weeks of programming can save you hours of planning.</p>", 
                "question": "\u201cProgramming is like sex. One mistake and you have to support it for the rest of your life.\u201d by [Michael Sinz] . Any other interesting quote that you know ?"
            }, 
            "id": "cepenu8"
        }, 
        {
            "body": {
                "answer": "<p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.</p>", 
                "question": "\u201cProgramming is like sex. One mistake and you have to support it for the rest of your life.\u201d by [Michael Sinz] . Any other interesting quote that you know ?"
            }, 
            "id": "cepelch"
        }, 
        {
            "body": {
                "answer": "<p><dq>The first 80<percent> of the project takes 80<percent> of the time, the last 20<percent> takes 80<percent> of the time.<dq></p>", 
                "question": "\u201cProgramming is like sex. One mistake and you have to support it for the rest of your life.\u201d by [Michael Sinz] . Any other interesting quote that you know ?"
            }, 
            "id": "cepd77c"
        }, 
        {
            "body": {
                "answer": "<p>Highly recommend the Derek Banas Eclipse based tutorials. The playlist here contains his App Inventor based tutorials which are mainly geared towards those without any programming knowledge at all. If you know a bit of Java, go to his channel and check out the Android Development Tutorials. He stopped making them to focus on App Inventor for a while, but he<sq>s supposed to return to the code-based tutorials some time in the future.</p>", 
                "question": "Interested in Learning Android Development? - Best Video Tutorials to Get You Started"
            }, 
            "id": "cgor5tx"
        }, 
        {
            "body": {
                "answer": "<p>Check out the wikis for [/r/LIY](http<colon>//reddit.com/r/liy/wiki) and [/r/StudentTechResources](http<colon>//reddit.com/r/StudentTechResources/wiki). Anyone can edit them to add stuff like this. I<sq>m on a phone right now otherwise I would.</p>", 
                "question": "Interested in Learning Android Development? - Best Video Tutorials to Get You Started"
            }, 
            "id": "cgovqtp"
        }, 
        {
            "body": {
                "answer": "<p>Perfect timing for me. Just got <sq>hello world<sq> poppin on my android last night!</p>", 
                "question": "Interested in Learning Android Development? - Best Video Tutorials to Get You Started"
            }, 
            "id": "cgozxjy"
        }, 
        {
            "body": {
                "answer": "<p>This is a long shot, but just in case \u2013 there is a good Russian course on Android development https<colon>//hexlet.org/course/android/</p>", 
                "question": "Interested in Learning Android Development? - Best Video Tutorials to Get You Started"
            }, 
            "id": "cgouigg"
        }, 
        {
            "body": {
                "answer": "<p>This is a nice idea. A lot of people self-leaning don<sq>t get a chance to collaborate or review code, which I found massively improved my confidence and coding when I started. <br><br>How are you generating bugs in these projects for people to fix?</p>", 
                "question": "Hey r/learnprogramming come get your first pull request on Github!"
            }, 
            "id": "db8lq4u"
        }, 
        {
            "body": {
                "answer": "<p>This is a very cool idea, thanks.</p>", 
                "question": "Hey r/learnprogramming come get your first pull request on Github!"
            }, 
            "id": "db8qntd"
        }, 
        {
            "body": {
                "answer": "<p>This is such a lovely ideia! <br><br>I still remember my first PR, and how I was afraid of being yelled at or something. <br><br>I<sq>d really love to help, maybe with some Rust or Go code (because that<sq>s what I<sq>m building useless toys with right now). I<sq>m no professional programmer, but I<sq>d really like to support this idea. Do you think I<sq>d be of any good use?</p>", 
                "question": "Hey r/learnprogramming come get your first pull request on Github!"
            }, 
            "id": "db8xg2x"
        }, 
        {
            "body": {
                "answer": "<p>This is cool, any time frame on other languages?</p>", 
                "question": "Hey r/learnprogramming come get your first pull request on Github!"
            }, 
            "id": "db8r0sj"
        }, 
        {
            "body": {
                "answer": "<p>Pretty cool.  Got to [Bandit 4](http<colon>//overthewire.org/wargames/bandit/bandit5.html) but can<sq>t seem to figure it out.<br><br>I found [this StackExchange answer](http<colon>//unix.stackexchange.com/questions/43148/unix-commands-help-find) that looks to solve it, but when I enter the top-voted answer, it just gives me the prompt again.<br><br>Any suggestions?</p>", 
                "question": "A friend introduced me to this site yesterday that lets you hack/practice security concepts in the context of a game."
            }, 
            "id": "cw3tgnk"
        }, 
        {
            "body": {
                "answer": "<p>wargames ? This makes me think about a movie..</p>", 
                "question": "A friend introduced me to this site yesterday that lets you hack/practice security concepts in the context of a game."
            }, 
            "id": "cw3wuq0"
        }, 
        {
            "body": {
                "answer": "<p>There are many like it, including http<colon>//smashthestack.org/wargames.html (I recommend doing IO).</p>", 
                "question": "A friend introduced me to this site yesterday that lets you hack/practice security concepts in the context of a game."
            }, 
            "id": "cw49k0s"
        }, 
        {
            "body": {
                "answer": "<p>Another is cryptopals.com</p>", 
                "question": "A friend introduced me to this site yesterday that lets you hack/practice security concepts in the context of a game."
            }, 
            "id": "cw4fkqy"
        }, 
        {
            "body": {
                "answer": "<p>coming from someone who has had to make a career change from the waste hauler industry, to the hardware side of IT, that is currently self teaching himself HTML and any other applicable coding; this comes as a great motivator.  Thank you for posting this and helping me stay motivated!</p>", 
                "question": "I got hired...again!"
            }, 
            "id": "d2jcbpp"
        }, 
        {
            "body": {
                "answer": "<p>Actually enjoyed reading about your interview process. Congrats! This post is much better than the typical random career -> software developer story posted around here.</p>", 
                "question": "I got hired...again!"
            }, 
            "id": "d2jg59v"
        }, 
        {
            "body": {
                "answer": "<p>This is great! Congratulations on your recent hire! <br><br>I<sq>d like to point out to anyone who gives this even a slight glance - get your resume(s) on as many recruiting platforms as possible! The last three jobs I<sq>ve held were all from being hired on through recruiters, including FTE and contractual positions. <br><br>Recruiters are a great asset and make applying for jobs less stressful (I know because I<sq>ve cold-emailed a ton myself)<br><br>*[Dice](http<colon>//www.dice.com/)<br><br>*[Kelly Services](http<colon>//www.kellyservices.com/Global/Home/)<br><br>*[AppleOne](https<colon>//www.appleone.com/)<br><br>*[CareerBuilder](http<colon>//m.careerbuilder.com/)<br><br>*[Manpower](http<colon>//www.manpower.com/)<br><br>*[US Tech Solutions](http<colon>//www.ustechsolutions.com/)<br><br>*[BCForward](http<colon>//bcforward.com/)<br><br>Plus more - just give Google a try for your local region</p>", 
                "question": "I got hired...again!"
            }, 
            "id": "d2jk5r0"
        }, 
        {
            "body": {
                "answer": "<p>Coming from someone trying to do the exact same thing except coming from being a kitchen slave, I am so happy for you!! Congrats!! And in what short time! <br>Did you have prior exp?</p>", 
                "question": "I got hired...again!"
            }, 
            "id": "d2jdxnt"
        }, 
        {
            "body": {
                "answer": "<p>Holy cow, this looks...amazing. I<sq>ve been beating my head against the wall trying to teach myself some machine learning techniques, and the hardest part has always been figuring out the implementation (most libraries have poor documentation and tutorials in my experience). I gave up on scikit a while back, but this might be exactly what I need to figure it out! Thanks!</p>", 
                "question": "Learning Python for Data Science<colon> Deep learning (TensorFlow Theano Caffe Keras) scikit-learn Kaggle big data (Spark Hadoop MapReduce HDFS) matplotlib pandas NumPy SciPy Python essentials AWS and various command lines."
            }, 
            "id": "deyucay"
        }, 
        {
            "body": {
                "answer": "<p>This course might be helpful if you<sq>re already familiar with Python basics as an intro to NumPy, Pandas, and scikit-learn<colon> https<colon>//courses.edx.org/courses/course-v1<colon>HarvardX+PH526x+3T2016/info</p>", 
                "question": "Learning Python for Data Science<colon> Deep learning (TensorFlow Theano Caffe Keras) scikit-learn Kaggle big data (Spark Hadoop MapReduce HDFS) matplotlib pandas NumPy SciPy Python essentials AWS and various command lines."
            }, 
            "id": "dez2kwk"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m at the front end of this learning process so I appreciate this example of where I should (generally) be heading.  Thanks!</p>", 
                "question": "Learning Python for Data Science<colon> Deep learning (TensorFlow Theano Caffe Keras) scikit-learn Kaggle big data (Spark Hadoop MapReduce HDFS) matplotlib pandas NumPy SciPy Python essentials AWS and various command lines."
            }, 
            "id": "deyoitr"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this.  I<sq>ve recently been monkeying around with using Yahoo<sq>s [open_nsfw](https<colon>//github.com/yahoo/open_nsfw) model in caffe to do image classification.  I<sq>ve managed to get it working; however, it<sq>s more like a monkey who figured out how to start and swing a chainsaw.  Sure, it works but I have zero understanding of why or how.</p>", 
                "question": "Learning Python for Data Science<colon> Deep learning (TensorFlow Theano Caffe Keras) scikit-learn Kaggle big data (Spark Hadoop MapReduce HDFS) matplotlib pandas NumPy SciPy Python essentials AWS and various command lines."
            }, 
            "id": "dez55mw"
        }, 
        {
            "body": {
                "answer": "<p>The taunt level bugged. Or I think your code-parser did. Reloading the page solved it. I copy-pasted the same <dq>this.say(<dq>Hey!<dq>);<dq> line just underneath it and it complained about missing parenthesis and saw ! but was expecting an operand and stuff..<br><br>Oh and http<colon>//codecombat.com/play/level/emphasis-on-aim doesn<sq>t work either. Page doesn<sq>t load.</p>", 
                "question": "Learn to code by playing a game<colon> CodeCombat"
            }, 
            "id": "ccugqfd"
        }, 
        {
            "body": {
                "answer": "<p>Wow, amazing idea. Makes learning to code a bit more intriguing! </p>", 
                "question": "Learn to code by playing a game<colon> CodeCombat"
            }, 
            "id": "ccuheib"
        }, 
        {
            "body": {
                "answer": "<p>This is an absolutely incredible idea with great execution. KUDOS!!!!<br>EDIT<colon> Just cracked up on the ogre and archer tower level. <br>this.say(<dq>Hey! fuck face<dq>);<br>this.say(<dq>Your mother is a hamster<dq>);<br>this.say(<dq>Your mother is a hamster<dq>);<br>this.say(<dq>Your mother is a hamster<dq>);</p>", 
                "question": "Learn to code by playing a game<colon> CodeCombat"
            }, 
            "id": "ccuhkvn"
        }, 
        {
            "body": {
                "answer": "<p>Is the page down or is it just me?<br><br>Edit<colon> it came back, dunno what happened there </p>", 
                "question": "Learn to code by playing a game<colon> CodeCombat"
            }, 
            "id": "ccui541"
        }, 
        {
            "body": {
                "answer": "<p>Great work, will happily be following along. You should x-post to /r/learnjava, we need all the help we can muster!</p>", 
                "question": "Hi I<sq>m the guy who made those Reddit Bot tutorials from a few days ago. I just started a new series on Introduction to Programming with Java."
            }, 
            "id": "cnxu9k7"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve tried to learn programming several times over the past few years, each time learning java and only getting to the point where I learn loops where at that point, I become completely lost as to what to do with all the parts. If you can break that wall that keeps preventing me from moving forward, I<sq>ll gold the hell out of you. Watched a bit of the first video, I think I<sq>ll give it one more shot.</p>", 
                "question": "Hi I<sq>m the guy who made those Reddit Bot tutorials from a few days ago. I just started a new series on Introduction to Programming with Java."
            }, 
            "id": "cny01f5"
        }, 
        {
            "body": {
                "answer": "<p>I got a vibe of <dq>Hi, I<sq>m Troy McLure. You may know me from videos like How to make a reddit bot, how to catch a bear with your bare hands, and how to get karma on reddit. In today<sq>s episode...<dq></p>", 
                "question": "Hi I<sq>m the guy who made those Reddit Bot tutorials from a few days ago. I just started a new series on Introduction to Programming with Java."
            }, 
            "id": "cny7uhi"
        }, 
        {
            "body": {
                "answer": "<p>nice videos!<br><br>I<sq>m a bit a head of these, but when you get into say Swing or javaFX I<sq>ll be back!</p>", 
                "question": "Hi I<sq>m the guy who made those Reddit Bot tutorials from a few days ago. I just started a new series on Introduction to Programming with Java."
            }, 
            "id": "cny2cju"
        }, 
        {
            "body": {
                "answer": "<p>Mmmm...it recommends learning via w3school.com and <dq>CodeAcademy.com<dq> (there<sq>s an extra A in there)...<br><br>This is a decent list...but these massive lists of links can be of limited assistance...it<sq>s never hard to find resources, but it<sq>s hard to find the best ones...this list would be a lot more helpful if it were trimmed down.</p>", 
                "question": "The Tech Skills and Courses Google Recommends for Software Engineers"
            }, 
            "id": "cm6rbgt"
        }, 
        {
            "body": {
                "answer": "<p>[Exercism.io](http<colon>//exercism.io)</p>", 
                "question": "The Tech Skills and Courses Google Recommends for Software Engineers"
            }, 
            "id": "cm6ti67"
        }, 
        {
            "body": {
                "answer": "<p>Second course listed on there<colon> [Coursera/Stanford - Computer Science 101](https<colon>//www.coursera.org/course/cs101). <br><br>Course at a Glance<br><br>* 1000 weeks of study<br>* 3-5 hours of work / week<br><br>So, I<sq>ll have a basic understanding of computer science in **only** 20 years? Sign me up!</p>", 
                "question": "The Tech Skills and Courses Google Recommends for Software Engineers"
            }, 
            "id": "cm75krd"
        }, 
        {
            "body": {
                "answer": "<p>Just started taking EdX CS50x and this link is a big help. Thank you for sharing! </p>", 
                "question": "The Tech Skills and Courses Google Recommends for Software Engineers"
            }, 
            "id": "cm6qmdr"
        }, 
        {
            "body": {
                "answer": "<p>MIT has a lot of free courses available.  <br>  <br>  http<colon>//ocw.mit.edu/courses/#electrical-engineering-and-computer-science</p>", 
                "question": "MIT<sq>s Intro to Algorithms course is on YouTube"
            }, 
            "id": "cm4n09z"
        }, 
        {
            "body": {
                "answer": "<p>Very interesting! By the way is it quite common in the US to use a chalkboard in college?<br><br> In my university I think we have switched to digital means in at least every bigger subject.</p>", 
                "question": "MIT<sq>s Intro to Algorithms course is on YouTube"
            }, 
            "id": "cm4w5fo"
        }, 
        {
            "body": {
                "answer": "<p>Has anyone taken this course? if you followed along with their schedule could anyone estimate the necessary hrs per week? </p>", 
                "question": "MIT<sq>s Intro to Algorithms course is on YouTube"
            }, 
            "id": "cm4uq2x"
        }, 
        {
            "body": {
                "answer": "<p>Fun fact<colon>  the lecturer with the ponytail, Erik Demaine, got his BS when he was 14, and his PhD when he was 20 years old.</p>", 
                "question": "MIT<sq>s Intro to Algorithms course is on YouTube"
            }, 
            "id": "cm5dbwz"
        }, 
        {
            "body": {
                "answer": "<p>1. **Focus on good code decomposition**<br><br>    Don<sq>t cram all your code into one function or class -- rather, have each function be in charge of one primary responsibility, and make sure each class makes sense as a singular <dq>thing<dq>. <br><br>    If your function is complicated, delegate<colon> move subproblems into helper functions and use them in the main one. If you do this correctly, your functions will be fairly short -- about 5-15 lines long (ignoring blank lines, comments, etc).<br><br>    Likewise, make your classes <dq>cohesive<dq><colon> they should contain data and functionality that make sense together (don<sq>t just toss things together).<br><br>    A good rule of thumb I use is to give functions verb clauses as names (functions _do_ things), and classes noun classes as names (objects _are_ things). If I can<sq>t come up with a good name, or if I need to resort to using compound statements, that<sq>s a hint that my code is poorly structured or is trying to do too much at once.<br><br>    Try and do this decompositional process _as_ you<sq>re writing code, instead of writing all your code at once and doing it after. (For example, if you<sq>re not sure how to solve a subproblem, it<sq>s fine to just write an empty method + pretend it can solve the subproblem so you can focus on getting the overall logic of your function correct, then return back to flesh out the empty helper function later).<br><br>2. **Learn how to rigorously and systematically debug code**<br><br>    Many beginners I see tend to code by <dq>trial and error<dq> -- they write code, don<sq>t understand why it<sq>s failing, try changing something, see it doesn<sq>t work, try again, and keep tweaking their code until it starts working.<br><br>    Never be aimless when debugging. Think like a scientist -- conduct experiments to either try fixing the bug or to narrow down where the bug might be, and record your results. If your hypothesis/attempted change turned out to be wrong, or if something worked when you didn<sq>t think it would, stop, pause, and figure out why. <br><br>    Bugs happen when your assumptions don<sq>t match up to reality. If something feels <dq>off<dq>, don<sq>t ignore it -- trace that down until you pin down what the issue is/what incorrect assumption you made.<br><br>    Don<sq>t just <dq>do<dq> random shit until you get lucky -- be systematic about it.<br><br>3. **Start writing tests**<br><br>    Get into the habit of writing tests for your code. Write code to test your various functions and classes so that if something goes wrong, you<sq>ll automatically have a sense of where the problem might be.<br><br>    This pairs well with my previous point about writing many smaller functions -- you can write tests for each small function to help you precisely pinpoint where an error is.<br><br>    The basic idea is that you want to avoid being merely reactive when it comes to bugs. Instead of waiting for your code to break, be proactive as well and actively _try_ and make it break. Try using your functions and classes in unusual ways, and see what happens. Do you get the expected results? Does the code handle unusual inputs correctly? Does the code break? Does the code _not_ break when you expected it to?<br><br>    (Then, when you make a change, re-run all of your old tests and see if they all pass. This will help give you confidence that your new change has not introduced any obvious bugs into your code, and will help make you more fearless when coding.)<br><br>4. **Have a good sense of craftsmenship**<br><br>    Comment your code (cleanly). Give your variables good names. Use consistent formatting. Try and do all of these things as you<sq>re writing your code, not after. (Try googling <dq>X style guide<dq> or <dq>X best practices<dq>, where <dq>X<dq> is the programming language you<sq>re using).<br><br>    Review and refactor your code after writing it. It<sq>s just like writing an essay -- you need a proofreading process. Don<sq>t expect your code to be perfect the first time around, especially if you weren<sq>t sure what you were doing in the first place. Everybody makes mistakes, whether it<sq>s small typos or bugs, or larger things like poor design decisions. </p>", 
                "question": "What good habits should a beginner programmer start to develop as early as possible?"
            }, 
            "id": "cybn7jc"
        }, 
        {
            "body": {
                "answer": "<p>Read the error messages. I<sq>ve met so many beginners who merely note that compilation failed, ignore the error messages, and then stare at the code to try to figure out what went wrong. Don<sq>t do this. At the very least, get the line number from the error message.</p>", 
                "question": "What good habits should a beginner programmer start to develop as early as possible?"
            }, 
            "id": "cybnoah"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll start<colon><br><br>- Comment your code. Seriously, do it.</p>", 
                "question": "What good habits should a beginner programmer start to develop as early as possible?"
            }, 
            "id": "cybmi6w"
        }, 
        {
            "body": {
                "answer": "<p>Use git.</p>", 
                "question": "What good habits should a beginner programmer start to develop as early as possible?"
            }, 
            "id": "cybnwlp"
        }, 
        {
            "body": {
                "answer": "<p>Warning<colon> extremely dry, somewhat awkward lectures ahead.<br><br>I learned more from [Kathy Sierra<sq>s brief talk](https<colon>//www.youtube.com/watch?v=FKTxC9pl-WM) as it was more interesting and more concise, even if incomplete (basically the <dq>chunking<dq> part of Learning How To Learn, which for me has been 90<percent> of what I<sq>ve needed to improve my ability to learn).<br><br>I literally was falling asleep during Learning How To Learn, which is ironic in some ways. At least it also came with a flood of 90s nostalgia.</p>", 
                "question": "What I learned from Coursera<sq>s <dq>Learning How to Learn<dq> and how I use it to be a better developer"
            }, 
            "id": "d74crbc"
        }, 
        {
            "body": {
                "answer": "<p>Never hurts to learn how to learn better. Thanks for sharing. </p>", 
                "question": "What I learned from Coursera<sq>s <dq>Learning How to Learn<dq> and how I use it to be a better developer"
            }, 
            "id": "d745gb4"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t feel as if I learned much from this course when I took it some time ago.  All I got from it is that you should use pomodoro and take frequent rests while studying - is that it?</p>", 
                "question": "What I learned from Coursera<sq>s <dq>Learning How to Learn<dq> and how I use it to be a better developer"
            }, 
            "id": "d746po0"
        }, 
        {
            "body": {
                "answer": "<p>Certainly one of the most overlooked courses out there. I<sq>d recommend it to anyone as a perfect supplementary course.</p>", 
                "question": "What I learned from Coursera<sq>s <dq>Learning How to Learn<dq> and how I use it to be a better developer"
            }, 
            "id": "d745nvl"
        }, 
        {
            "body": {
                "answer": "<p>Very cool, but this is far from every program ever written <colon>p</p>", 
                "question": "Just want to share this awesome website I found<colon> RosettaCode.org. It has every program in every language ever (almost)"
            }, 
            "id": "d1e8dnz"
        }, 
        {
            "body": {
                "answer": "<p>Sorry that self-entitled dicks are getting butthurt over you posting a neat-o website. That<sq>s pretty much the majority of programming communities. Thanks for sharing that link, it<sq>s definitely useful.</p>", 
                "question": "Just want to share this awesome website I found<colon> RosettaCode.org. It has every program in every language ever (almost)"
            }, 
            "id": "d1eheep"
        }, 
        {
            "body": {
                "answer": "<p><br><br>http<colon>//learnxinyminutes.com/<br><br>is another good site </p>", 
                "question": "Just want to share this awesome website I found<colon> RosettaCode.org. It has every program in every language ever (almost)"
            }, 
            "id": "d1ehsbi"
        }, 
        {
            "body": {
                "answer": "<p>Sometimes the code examples are really bad, I remember finding one recently. Still a cool site, I<sq>ve used it a lot. </p>", 
                "question": "Just want to share this awesome website I found<colon> RosettaCode.org. It has every program in every language ever (almost)"
            }, 
            "id": "d1eaql4"
        }, 
        {
            "body": {
                "answer": "<p>Click on something. Got [this shit](https<colon>//i.imgur.com/K0hJ0yh.png). Moved on.</p>", 
                "question": "Over 1k free programming learning resources classified by type/language/technology"
            }, 
            "id": "ci6sb03"
        }, 
        {
            "body": {
                "answer": "<p>Nice, but please reconsider the pale-blue-on-yellow. It hurts the eyes.</p>", 
                "question": "Over 1k free programming learning resources classified by type/language/technology"
            }, 
            "id": "ci6kgog"
        }, 
        {
            "body": {
                "answer": "<p>Thank you. </p>", 
                "question": "Over 1k free programming learning resources classified by type/language/technology"
            }, 
            "id": "ci6oh24"
        }, 
        {
            "body": {
                "answer": "<p>Quite a tidy job! Have an upvote <colon>) </p>", 
                "question": "Over 1k free programming learning resources classified by type/language/technology"
            }, 
            "id": "ci6lj7a"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to add Dwarf Fortress an <dq>engineering<dq> game</p>", 
                "question": "Games to help both young and old get into logic engineering and programming."
            }, 
            "id": "d07jojn"
        }, 
        {
            "body": {
                "answer": "<p>Hexcells (which I love) is basically a puzzle game, not a <dq>programming<dq> game like HRM or SpaceChem, to which class you should also add [Infinifactory](http<colon>//www.zachtronics.com/infinifactory/), from the makers of SpaceChem. <br><br>I<sq>d also observe that only the first group in your post really teach you anything useful about programming, and arguably time spent on them would be time better spent on using a real programming language.</p>", 
                "question": "Games to help both young and old get into logic engineering and programming."
            }, 
            "id": "d07byjr"
        }, 
        {
            "body": {
                "answer": "<p>On the topic of Minecraft<colon> there are plenty of mods that add capability to create industrial and engineering systems e.g. factories, generators etc. through power generation, application and storage. Immersive Engineering, Buildcraft and Thermal Expansion all come to mind. Not only this, but OpenComputers and ComputerCraft both feature Lua programming functionality if you like.</p>", 
                "question": "Games to help both young and old get into logic engineering and programming."
            }, 
            "id": "d07i62i"
        }, 
        {
            "body": {
                "answer": "<p>I feel like The Witness has its own sort of language that you have to learn in order to proceed through the game, but no instructions. </p>", 
                "question": "Games to help both young and old get into logic engineering and programming."
            }, 
            "id": "d07i8sg"
        }, 
        {
            "body": {
                "answer": "<p>Just so you know - with programming your salary is not exactly about language you chose (any capable programmer can pick up a new one in a manner of days) but your expertise in general. <br><br>Therefore aim towards a specific goal. There are multiple options - mobile development, websites (both part that end users see and its logic aka back-end), desktop, microcontrollers, AI, game dev... literally endless possibilities here. <br><br>If you are aiming for <dq>highest salary in shortest time<dq> then a relatively safe choice is web dev or mobile dev. First means at least HTML/CSS and some JS. You can also consider learning back-end instead (or on top of it) - then to that list above you add Python + Django, Ruby + Rails, Javascript + NodeJS + ExpressJS, PHP + Laravel etc (you only need one combo). <br><br>Good place to start would be [Odin project](http<colon>//www.theodinproject.com/). <br><br>In theory - reaching an okay understanding of back-end and front-end is a guaranteed supply of cash (albeit shitty one at the start because you have to compete vs Indian devs, it gets better once you make some kind of reputation to yourself) via freelancing. At least I have gone that way in the past and eventually made a decent salary (by a standard of my country though which is not USA), it also allows you to get a <dq>real<dq> job later without degree (because this is instantly irrelevant if you show that you<sq>ve already worked in that field professionally and have a legit portfolio).<br><br>It<sq>s hard to give you <dq>the best<dq> advice, go look at job offers in your area and see which languages dominate there. Because whatever I tell you about my location likely will not apply to yours. It<sq>s also not exactly a good idea to try and only go for financial gains - do remember that you will be going vs people who are enthusiastic about programming/have gone to university for 5 years to get their degrees etc, why would a potential employer choose a random person like you?<br><br>Also - do note that reaching a level of work ready differs a lot but might seriously mean 12+ months of very intense learning, depending on your aptitude. So it<sq>s not <dq>free<dq> money. Keep that in mind before you try going down this road - it<sq>s not nearly as easy as some tell you (although not impossible either), differences between <dq>hey i can code something<dq> and a real programmer who can solve actual problems are vast.</p>", 
                "question": "I<sq>m really poor. What is the best paying programming language to learn with the most demand?"
            }, 
            "id": "dfn4ib3"
        }, 
        {
            "body": {
                "answer": "<p>Go with front end web app. Learn HTML, CSS, JavaScript, Bootstrap in that order. Maybe React or Angular on top of that.<br><br>Learning Python would be a good step too.</p>", 
                "question": "I<sq>m really poor. What is the best paying programming language to learn with the most demand?"
            }, 
            "id": "dfmy7qb"
        }, 
        {
            "body": {
                "answer": "<p>HTML/CSS/JS<br><br>3 basic components to a website.<br><br>HTML and CSS aren<sq>t even languages. One is a markup language and the other is a style sheet.<br><br>This is the easiest stuff to learn to make money off of. Websites are always in demand from huge corporate companies to new businesses looking on craigslist.</p>", 
                "question": "I<sq>m really poor. What is the best paying programming language to learn with the most demand?"
            }, 
            "id": "dfmvsk3"
        }, 
        {
            "body": {
                "answer": "<p>I wrote this comment on another post a couple weeks ago. You could replace Google AdWords with any web-based service, like wordpress. Most important thing is you need to learn how to sell yourself!<br><br>--------<br><br>When I was at uni, I made a fair amount of money by managing Google AdWords campaigns for different business men around their 50s. Mostly real estate agents in my case.<br><br>And believe me<colon> they have money. Plenty of it. They take money baths and eat money sandwiches. What they don<sq>t have is time. They know they should be on this <dq>internet<dq> thingy but couldn<sq>t care less about how it works.<br><br>You call or visit them. <br><br>Offer to plublicize on Google for them, explaining that all the money goes in the advertising and you charge them a small fee for managing. You can even take the AdWords online cours and have a diploma to show off.<br><br>You get a couple of client like that.<br><br>You send them monthly reports, showing how many people are clicking on their ads and other stats like that.<br><br>When they see their SEO and stats augmenting, they will refer you to friends and Voila! You<sq>re making a legit living working from home!<br><br>Did this for 2 years. Hardest part is calling and proposing your services but afterward it<sq>s really easy to manage if you are good with computers and internet in general!</p>", 
                "question": "I<sq>m really poor. What is the best paying programming language to learn with the most demand?"
            }, 
            "id": "dfmwmzh"
        }, 
        {
            "body": {
                "answer": "<p>Think Python is the best Python book I<sq>ve ever read and it<sq>s provided for free by the author [here](http<colon>//greenteapress.com/thinkpython/thinkpython.pdf).</p>", 
                "question": "PSA<colon> there are currently a number of books on Python for sale on Humble Bundle."
            }, 
            "id": "dfzblle"
        }, 
        {
            "body": {
                "answer": "<p>Automate the boring stuff is fantastic.  And it is within the $1 tier of the humble bundle sale too!   I<sq>d highly recommend for all beginners.  </p>", 
                "question": "PSA<colon> there are currently a number of books on Python for sale on Humble Bundle."
            }, 
            "id": "dfzb4tw"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m also interested if anyone could recommend these.</p>", 
                "question": "PSA<colon> there are currently a number of books on Python for sale on Humble Bundle."
            }, 
            "id": "dfz2u1b"
        }, 
        {
            "body": {
                "answer": "<p>A lot of the <dq>stars<dq> from this bundle is free online via the author<sq>s website.</p>", 
                "question": "PSA<colon> there are currently a number of books on Python for sale on Humble Bundle."
            }, 
            "id": "dfzfbzo"
        }, 
        {
            "body": {
                "answer": "<p>I love this kind of stuff, thank you.</p>", 
                "question": "I Made an HTML5 Canvas Tutorial for Complete Beginners"
            }, 
            "id": "dg1fdlz"
        }, 
        {
            "body": {
                "answer": "<p>I think you would really enjoy /r/creativecoding and the library p5.js that also works with canvas</p>", 
                "question": "I Made an HTML5 Canvas Tutorial for Complete Beginners"
            }, 
            "id": "dg1pzs8"
        }, 
        {
            "body": {
                "answer": "<p>Never knew those cool effects on homepages were done with HTML5 canvas. That is pretty cool.<br><br>Whipped [this](http<colon>//codepen.io/Xeronate/pen/KWONEx) up after seeing your tutorial.</p>", 
                "question": "I Made an HTML5 Canvas Tutorial for Complete Beginners"
            }, 
            "id": "dg1ydh3"
        }, 
        {
            "body": {
                "answer": "<p>Thank you, more please <colon>) signed up to the newsletter!</p>", 
                "question": "I Made an HTML5 Canvas Tutorial for Complete Beginners"
            }, 
            "id": "dg1mmly"
        }, 
        {
            "body": {
                "answer": "<p>This is a great tip once you have some experience, because its a lot easier to plan things like this out, especially after 23 years. You should *try* to have a plan in mind, but if you<sq>re just starting out, diving in and coding is just as necessary. </p>", 
                "question": "Been coding since I was a youngin and have 23 years of large personal projects. Here<sq>s my biggest tip."
            }, 
            "id": "cr3dsvp"
        }, 
        {
            "body": {
                "answer": "<p>My biggest tip would be to do the opposite. Start with as little design as possible, then use test driven development to create a nice elegant design based on the short feedback loops and constant empirical evidence the technique provides to you.<br><br>Designing something upfront before you<sq>ve built up any evidence is a great way to produce a bad design that doesn<sq>t work well and is hard to change in the future.</p>", 
                "question": "Been coding since I was a youngin and have 23 years of large personal projects. Here<sq>s my biggest tip."
            }, 
            "id": "cr3ci2c"
        }, 
        {
            "body": {
                "answer": "<p>A pen and paper also goes a long way imo for visualising a problem.</p>", 
                "question": "Been coding since I was a youngin and have 23 years of large personal projects. Here<sq>s my biggest tip."
            }, 
            "id": "cr3eh98"
        }, 
        {
            "body": {
                "answer": "<p>This is all well and good... for C. Using a high level language obfuscates memory management and, except in niche scenarios, thinking in terms of <dq>how will I store this object in memory<dq> isn<sq>t useful. </p>", 
                "question": "Been coding since I was a youngin and have 23 years of large personal projects. Here<sq>s my biggest tip."
            }, 
            "id": "cr3jxez"
        }, 
        {
            "body": {
                "answer": "<p>Ironically, the best way to improve is to step away from the computer. <br><br>Take a problem, and a pencil and paper, and find a comfy chair away from the computer. Then, just think about the problem. Start with something simple. Decide what the <dq>inputs<dq> are (what do you start with?) and what the <dq>outputs<dq> are (what do you need to produce or do?). Then try to write down a set of logical steps that *you* can follow that would produce the results you need from the data you have.<br><br>That<sq>s programming. Once you<sq>ve worked that out, transcribing it to code will get easier - you need to know the syntax and techniques. But a programming language won<sq>t help you if you can<sq>t actually write down the steps you need.<br><br>Don<sq>t stare at the screen. Stare at the paper instead. then you<sq>ll hopefully be able to think of it as steps to solve a problem, rather than a *programming* problem.</p>", 
                "question": "I don<sq>t know how to think like a programmer and it<sq>s upsetting"
            }, 
            "id": "d7q91gv"
        }, 
        {
            "body": {
                "answer": "<p>What you need to do is play around with it.<br><br>Suppose you were learning to drive a semi truck. You spend four hours watching training videos on safety, clutching, shifting, it makes sense, but you<sq>ve never actually driven anywhere.<br><br>Then your homework for the first day is to figure out how to turn the semi around when there<sq>s not enough room to make a full circle.<br><br>Imagine if you just sat there in the cab of the truck, with no clue how you<sq>re going to turn it around, so you just stare at the steering wheel, not knowing what to do. Well of course you have no idea, you haven<sq>t even tried *driving* it yet!<br><br>The first thing you should do is put the key in the ignition and take it for a spin - somewhere flat and safe where you have plenty of room to experiment without worrying about getting hurt. Once you<sq>re comfortable working the clutch and you have a sense of the turn radius, you can start to plan out how to turn it around in a smaller space.<br><br>So now let<sq>s go back to Python. You<sq>ve watched the videos and copied the professor but you haven<sq>t actually tried taking Python for a spin.<br><br>Start writing some really, really simple programs. Write something that prints <dq>Hello world<dq>. Then write something that counts from 1 to 10.<br><br>Then think of something that sounds really easy but the professor didn<sq>t teach. I don<sq>t know, maybe something that prints the letters from A to Z. You don<sq>t know how, so Google it. Find the command to get the nth letter of the alphabet, then take your last program, make it print from 0 to 25 and then modify it to print A to Z instead.<br><br>Spend hours doing this. If you can<sq>t figure out how to do one thing, figure out something else you can do.<br><br>Once you<sq>ve done all of that, you<sq>ll feel a lot more comfortable trying to solve an exercise. You won<sq>t be afraid to *start*. Start small. Start writing anything that might be useful that might get you closer to the solution. Run it and see what it does. Then keep working on it from there.<br><br>You want to know what a professional programmer pretty much never does? Get a problem, think of a solution, program it, and then be done. That pretty much never happens. It<sq>s always more like writing one little piece, then debugging it, then testing it, then adding a bit more functionality, then debugging that, and finally hours or days later it<sq>s complete.<br><br>So you<sq>re doing fine! Relax, slow down, do a LOT more playing with it, then take a deep breath and take a crack at the exercises.<br></p>", 
                "question": "I don<sq>t know how to think like a programmer and it<sq>s upsetting"
            }, 
            "id": "d7q9dcv"
        }, 
        {
            "body": {
                "answer": "<p>There is a really good comment you should read<colon> [link](https<colon>//www.reddit.com/r/learnprogramming/comments/2qznse/i_need_serious_help_learn_to_program_was_my_new/cnb1luk)<br><br>Long and short, as many have said, don<sq>t try to think of a solution to a problem in a programming sense, but rather how the task could be accomplished by hand. Break these steps up into the smallest possible pieces, and then look at trying to write code that can accomplish each of those steps.</p>", 
                "question": "I don<sq>t know how to think like a programmer and it<sq>s upsetting"
            }, 
            "id": "d7qbdc0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I don<sq>t know how to think like a programmer and it<sq>s upsetting"
            }, 
            "id": "d7qbutf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m sure people won<sq>t mind you making grammar mistakes, if they are learning something! I don<sq>t have time personally to tune in, but I expect you will get some interest. +1<br><br>You might want to start weekly, so as not to burn out too early. If you can then do twice a week, you could consider varying the time zone for one, to make it easier for people who would otherwise have to tune in during their night.<br></p>", 
                "question": "Do you want to watch me live-coding a (small) search engine from scratch?"
            }, 
            "id": "cmdtlpw"
        }, 
        {
            "body": {
                "answer": "<p>As a college kid majoring in computer science, I<sq>d absolutely love to see this and hear about when this kind of thing starts. <br><br>As far as my personal opinion, videos separated into around 20 minutes are great for fitting into other time obligations, and live streams would be awesome to see a few times a week. Everyday might be too much, depending on your schedule and the commitments of your viewers, I<sq>d also like to see how you read documentation on the fly, would definitely help someone like me who really needs to improve coding under a time limit.<br><br></p>", 
                "question": "Do you want to watch me live-coding a (small) search engine from scratch?"
            }, 
            "id": "cmdy8sg"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m really looking forward to both gamedev videos and yours. I should probably answer those questions to help you out.<br><br>**1) How long should the videos be?**<br><br>- How many time do you need to solve <dq>today goals<dq>. If you<sq>re gonna stream hopefully you will stream for couple of hours, and if you<sq>re gonna do chunks of videos, hopefully you<sq>ll title them properly and playlist them.<br><br><br>**2) What platform should I use? Twitch.tv doesn<sq>t allow non-gaming streams, so I can<sq>t use it. I want a platform with a live chat, so I can answer questions from chat instantly. I want explain stuff to you, interact with you, and answer your questions. Simple broadcasting doesn<sq>t sound like much fun to me.**<br><br>- Can<sq>t really help you there, since I don<sq>t stream or record, I guess YouTube will do just fine.<br><br>**3) How often should I stream? Daily, on weekends, 3-4 times per week?**<br><br>- Since I<sq>m in a college and don<sq>t have a lot of time, once a week is probably enough.<br><br>**4) How should I prepare for streaming? Would you prefer me to read documentation in advance(so no stackoverflow in the videos) or would you like to see how I read documentation?**<br><br>- I would love you to explain what you are going to do that day, explaining every single problem. It would be great if you could post links to certain libraries you<sq>re using to github, fb, or something.<br><br>**5) What <dq>styles<dq> should I use. Besides obvious <dq>watch-me-code<dq> style, I could also pair program with some of you(and live stream it!)**<br><br>- Explain **everything** you do, don<sq>t just type!<br><br>**6) I am from Russia, so I have strong accent and probably make grammar mistakes. Would that annoy you?**<br><br>- Definitely no, we<sq>re all here to learn.</p>", 
                "question": "Do you want to watch me live-coding a (small) search engine from scratch?"
            }, 
            "id": "cmdx19j"
        }, 
        {
            "body": {
                "answer": "<p>2. YouTube, so those who can<sq>t attend a certain stream don<sq>t totally miss out.,</p>", 
                "question": "Do you want to watch me live-coding a (small) search engine from scratch?"
            }, 
            "id": "cme0gqr"
        }, 
        {
            "body": {
                "answer": "<p>Are any of them any good?</p>", 
                "question": "List of hundreds of free programming books"
            }, 
            "id": "clfq494"
        }, 
        {
            "body": {
                "answer": "<p>Yeah I love [Free](http<colon>//it-ebooks.info/) programming books.</p>", 
                "question": "List of hundreds of free programming books"
            }, 
            "id": "clfsibt"
        }, 
        {
            "body": {
                "answer": "<p>^ bookmarked. Thank you for the resources.</p>", 
                "question": "List of hundreds of free programming books"
            }, 
            "id": "clfnbqq"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this. I started reading [Apprenticeship Patterns<colon> Guidance for the Aspiring Software Craftsman](http<colon>//chimera.labs.oreilly.com/books/1234000001813/index.html). I<sq>ve really enjoyed the first two chapters and see it being very beneficial as a Junior Dev who aspires to improve.</p>", 
                "question": "List of hundreds of free programming books"
            }, 
            "id": "clfzdkw"
        }, 
        {
            "body": {
                "answer": "<p>I use Google and SO very often. But then, I<sq>ve only been programming for thirty-five years...</p>", 
                "question": "Is it normal as a programmer to never know how to fully solve a problem without looking things up?"
            }, 
            "id": "d3uwq44"
        }, 
        {
            "body": {
                "answer": "<p>You will likely know one small domain very well with experience, to the point of aid-less recall. Everything else will always be looked up. The best programmers in the world look things up and Google. It<sq>s stupid / inefficient / impossible not to. The real skill is in knowing what look up / how to implement it and create appropriate, reasoned solutions once you have gathered all the required information.</p>", 
                "question": "Is it normal as a programmer to never know how to fully solve a problem without looking things up?"
            }, 
            "id": "d3uv1sk"
        }, 
        {
            "body": {
                "answer": "<p>Experienced programmers use google, stackoverflow, etc. dozens of times per day. It<sq>s silly (and kinda impossible) to remember everything if you can just look it up.</p>", 
                "question": "Is it normal as a programmer to never know how to fully solve a problem without looking things up?"
            }, 
            "id": "d3uuk65"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been programming for 15 years and every time I switch between JavaScript / Python / Clojure / C# I<sq>m back to beginner tutorials trying to recall how to interpolate strings, write a switch statement, use a dictionary, etc etc etc. I can never keep them all straight.</p>", 
                "question": "Is it normal as a programmer to never know how to fully solve a problem without looking things up?"
            }, 
            "id": "d3ux6xm"
        }, 
        {
            "body": {
                "answer": "<p>I would recommend Head First Java</p>", 
                "question": "Codecademy just released a preview for learning Java."
            }, 
            "id": "cvp8oms"
        }, 
        {
            "body": {
                "answer": "<p>6 years late lol</p>", 
                "question": "Codecademy just released a preview for learning Java."
            }, 
            "id": "cvph9sb"
        }, 
        {
            "body": {
                "answer": "<p>Is it any good?</p>", 
                "question": "Codecademy just released a preview for learning Java."
            }, 
            "id": "cvp6wes"
        }, 
        {
            "body": {
                "answer": "<p>I have been wanting this for a long time, this is great! Hopefully they continue to expand this and perhaps add more languages in the future.</p>", 
                "question": "Codecademy just released a preview for learning Java."
            }, 
            "id": "cvpcr9l"
        }, 
        {
            "body": {
                "answer": "<p>Former game developer here.   This is an enormously complex question.  <br><br>I think what you<sq>re referring to would most likely be accomplished by a concept of trigger volumes.   (Think of the bloomy glow rings in GTA that just beg to be walked in to).  The idea is that if you<sq>re at a certain point in the game, specific volumes will load that cause other events to happen.   <br><br>At the core, yes it<sq>s a bunch of if else statements.   But generally the <sq>logic<sq> of gameplay events are coded such that it gives the level designers tools to create events without having to write code.   <br><br>To elaborate, you can have a base trigger volumes and several (possibly hundreds of extensions of that).   You can have volumes that play sounds.   Volumes that trigger a cutscene.   Volumes that cause damage to the player.   Even volumes that cause other volumes to be loaded.   <br></p>", 
                "question": "How are video games such as GTA or Skyrim coded?"
            }, 
            "id": "cf7m539"
        }, 
        {
            "body": {
                "answer": "<p>Lots for great answers already, but I want to show you how you can implement different behaviors in a program without cluttering it with if/else statements.<br><br>Have you ever implemented, or thought about how to implement a command line / a unix shell ?<br><br>the user enters a line of text of the form<colon> <dq>[command] [argument1] [argument2] [etc...]<dq><br><br>Now you have to identify the command entered by the user, find if there is a function matching this command, and if there is, call it with the given arguments.<br><br>Let<sq>s imagine you have this list of commands<colon> <dq>copy<dq>, <dq>view<dq>, <dq>delete<dq>.<br><br>You can match the function names with a succession of if/else (or switch/case statements), like this<colon><br><br>    if (userCommand === <dq>copy<dq>) {<br>        func_copy(userArgs);<br>    } else if (userCommand === <dq>view<dq>) {<br>        func_view(userArgs);<br>    } else if (userCommand === <dq>delete<dq>) {<br>        func_delete(userArgs);<br>    } else {<br>        console.log(<dq>unknown function<colon> <dq>+userCommand);<br>    }<br><br>Or, you can define a data structure to link the name of the command with its function, with an associative array ( also called hash-table, or map depending of the language), like this<colon><br><br>    var cmdsTable = {<br>        <dq>copy<dq> <colon> func_copy,<br>        <dq>view<dq> <colon> func_view,<br>       <dq>delete<dq><colon> func_delete<br>    };<br><br>Now the code to match the user input with your commands is a lot more generic and simpler<colon><br><br>    if (cmdsTable.hasOwnProperty(userCommand) === true) { // checks if the command exists in the table<br>        var func = cmdsTable[userCommand]; // func is now the function we want to call<br>        func(userArgs); // we<sq>re calling the function<br>    } else {<br>         console.log(<dq>unknown function<colon> <dq>+userCommand);<br>    }<br><br>Do you see how this way of doing things is more flexible? Now if I have to add 20 new commands, I<sq>m only adding more data in my table, I don<sq>t have to change the <dq>core<dq> of my program. Here my table is hardcoded, but it could be stored in a data file or in a database and be associated with a module I would dynamically load when needed. So this approach is more flexible than if if/else one. Lot<sq>s of games rely on tricks like this one to manage complexity (with more or less success ;) ), but other large pieces of software too.<br><br>Hope this helps.</p>", 
                "question": "How are video games such as GTA or Skyrim coded?"
            }, 
            "id": "cf7n6ds"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How are video games such as GTA or Skyrim coded?"
            }, 
            "id": "cf7m8ro"
        }, 
        {
            "body": {
                "answer": "<p>Rather than if-else statements, they will do [Event-driven programming](https<colon>//en.wikipedia.org/wiki/Event-driven_programming). If you want to learn how to do this yourself, learn about GUI programming, like in GTK+ or Qt. GUIs use event-driven programming to handle user interaction. Games do this as well, they just render 3D graphics instead of widgets.</p>", 
                "question": "How are video games such as GTA or Skyrim coded?"
            }, 
            "id": "cf7n7tt"
        }, 
        {
            "body": {
                "answer": "<p>This is pretty cool. I have limted knowledge of logic gates, so it<sq>s  interesting to see them implemented with graphics (red for off & green for on). Embarrassingly enough, it took me a moment to recognize the interactivity of the gates.<br><br>Also, why is it necessary to use only Nand gates. I think at their introduction, you said <dq>this is all you need to worry about for now.<dq> I<sq>m guessing there is a physical explanation for why Nand is the foundation for And and Or?</p>", 
                "question": "I made a website to explain how computers actually work."
            }, 
            "id": "clduq57"
        }, 
        {
            "body": {
                "answer": "<p>I read the whole thing, some feedback<colon><br><br>If the goal is to teach people who have already been introduced to these concepts (e.g. CS students) - and kind of understand it - then job well done!<br><br>If the goal is to take these foundational concepts and teach people who have an interest in computers but no preexisting schooling, then I<sq>m afraid it falls flat.<br><br><br>The reason I think the goal is to teach non-familiar people is because of how it<sq>s written.  It introduces base-2 by talking base-10, so this to me screams to be a primer that wants to teach people who don<sq>t already know that type of stuff.  I don<sq>t think the base-10 to base-2 examples really hit the mark, it makes some leaps, assuming people really already understand how number systems work.  Then it goes off the rails and starts to skip past all kinds of information when it introduces the NAND gates, probably losing readers at that point.<br><br>I have a pretty good working knowledge of the concepts you<sq>ve described, and so much foundational material is skipped that it will likely only resonate with people who already kind of know this stuff.<br><br>Cool widgets though, the visualizations really did help!  I<sq>d say they helped too much though, because they cover up how much work the text needs to actually become an educational resource.<br><br>My advice is to rewrite while making fewer assumptions on what your reader knows, *or* set the expectation up front of what the reader should already be familiar with.</p>", 
                "question": "I made a website to explain how computers actually work."
            }, 
            "id": "cle11oj"
        }, 
        {
            "body": {
                "answer": "<p>As a CS student I<sq>ve taken all the core CS classes<colon> from Automata Theory to Computer Architecture. I have to say I really think there is a strong need among students for interactive tools like this that clearly demonstrates these critical components, such as the NAND gate. Great job on the interface! It<sq>s a great start and I think you should continue to develop this.<br>It definitely lacks structure though. You should think about the order in which you teach your audience these things. For instance starting with teaching binary seems correct, but you jump into NAND gates too quickly. Instead, I would start with the basics (seems logical?)<colon> AND and OR gates and continue from there to NAND, NOR, XOR, etc. </p>", 
                "question": "I made a website to explain how computers actually work."
            }, 
            "id": "cle2yho"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I made a website to explain how computers actually work."
            }, 
            "id": "cldzibb"
        }, 
        {
            "body": {
                "answer": "<p>Former Tier 3 lead for Time Warner Cable, first your post confuses me as Comcast and Time Warner Cable are 2 different companies. <br><br>I just want to correct some minor signal discrepancies and provide a little insight.<br><br>First some explanation of terms. <br>Downstream = signal to the home. TV, modem, cable box. <br>Upstream = signal back to the Hub building<br>Signal to noise ratio (SNR) = Comparable ratio of signal compared to the amount of noise (interference). Higher is always better. <br><br>Ideal downstream = 0dBmv<br>Acceptable range = - 10dBmv to +10dBmv<br><br>Acceptable SNR = OVER 32 dB<br><br>Ideal upstream = 40dBmv<br>Acceptable range = 32dBmv to 52dBmv but more on this below. <br><br>Maintaining the downstream signal and controlling it is much easier than the upstream. They both suffer from impedance from the downstream signal. Both signals are <dq>pushed<dq> towards their destinations using line extenders (LE). These devices use voltage to amplify the decibel levels (dB). Since more signal is loss through impedance the higher the frequency, I won<sq>t go into why here, the LE<sq>s have interchangeable resistors to help control the signal strength. <br><br>The thing to keep in mind with cable is its a balancing act that is carefully mapped and planned for every location. You can<sq>t just send the signal as strong as possible. A too strong of a signal causes as many issues as too weak. Not to mention the impact it has if there<sq>s a leak in the plant. And there<sq>s always leaks. <br><br>To visualize the downstream signal once it reaches you home I like to use a water hose for reference. Coming out the tap at the house it<sq>s strong. Add a garden hose and the longer the hose the weaker the water gets by the time it comes out the other end. I know it<sq>s not a perfect reference but bare with me. <br><br>Now imagine splitting that stream up. Put a Y adapter on the tap and connect 2 hoses. That<sq>s the same as adding a cable splitter. Then imagine adding a Y adapter to those hoses. And so on. <br><br>The upstream signal is a completely different monster. That measurement used for its strength is actually a measurement of the amount of resistance it<sq>s encountering. <br><br>Think of the upstream like a conversation. If you talk to quietly people can<sq>t hear you. If you<sq>re screaming at the top of your lungs you will become more difficult to understand. <br><br>Every inch of coax cable, every splitter, every tap (the device used to literally tap into the distribution so a feed can be ran to your house) effects this signal. Because of this it takes significantly more planning when distributing through a neighborhood and installing in a home. <br><br>What makes this even more difficult is the fact that the signal directly off an LE is higher on the downstream and the resistance is higher on the upstream. This seems like it would be opposite but it<sq>s not due to how the taps work and their impedance ratings. Remember cable is a balancing act so the taps directly off the LE have a higher impedance than those at the end of the line. <br><br>This all leads to my point. The majority of Internet issues can be attributed to a number of factors. <br><br>1.  Too weak downstream signal. Typical causes are a bad fitting at the tap, a bad drop (the cable from the tap to the house), a bad ground block (used to ground voltage to prevent backfeed of voltage into the plant, a bad splitter at the house, bad splitter planning in the house, a bad coax cable at the house, or a bad barrel (that thing you see sticking out of the wall plate). Rarely it<sq>s the equipment itself or the feed originating from the tap but it does happen. <br><br>2.  Upstream too high. This is the number 1 cause of bad Internet. Typical causes are a bad fitting at the tap, a loose connection somewhere between the modem and tap, or bad planning of splitter configuration. I<sq>m not kidding when I say the majority of causes is because the fitting at the tap is corroded or someone moved the modem to a different room. However all possible causes listed for downstream signal do apply. <br><br>3.  Bad SNR. It could literally be any possible degradation of the cable system in the home or the plant.<br><br>4.  I haven<sq>t touched on this part yet and if you want to learn more on DOCSIS and CMTS<sq>s I recommend Wikipedia but it could be due to high utilization on the CMTS. A brief explanation, CMTS<sq>s are devices that numerous modems connect to, if there<sq>s too many modems or those modems use too much traffic it slows down for everyone. <br><br>5.  SNR issues in the plant, what we referred to as noise floor issues. This is a measurement of the noise on the upstream. Too much noise and it will cause an outage for an entire neighborhood. I once had an RF adapter for a N64 backfeed noise into the system that caused an Internet outage for 200+ homes. Not my adapter BTW, an issue I fixed. <br><br>This part is for the OP. If you<sq>re having Internet issues first identify the signal levels. If you want to pm me I can give you some advice on what too look for. <br><br>At this point I don<sq>t know why I<sq>ve typed of this novel, I guess I was bored. Carry on. <br><br></p>", 
                "question": "Comcast(TimeWarner) was pissing me off so I wrote a Python script to log my modem<sq>s signal levels."
            }, 
            "id": "db1jwv9"
        }, 
        {
            "body": {
                "answer": "<p>So what are the results?</p>", 
                "question": "Comcast(TimeWarner) was pissing me off so I wrote a Python script to log my modem<sq>s signal levels."
            }, 
            "id": "db181nu"
        }, 
        {
            "body": {
                "answer": "<p>Comcast and Time Warner are 2 different companies. In fact, Time Warner doesn<sq>t exist anymore they<sq>re Spectrum now. <br><br>I would recommend you set this thing up so it tweets your poor levels to your ISP every time they fall out of range.</p>", 
                "question": "Comcast(TimeWarner) was pissing me off so I wrote a Python script to log my modem<sq>s signal levels."
            }, 
            "id": "db1ezp8"
        }, 
        {
            "body": {
                "answer": "<p>What happened with your ISP?</p>", 
                "question": "Comcast(TimeWarner) was pissing me off so I wrote a Python script to log my modem<sq>s signal levels."
            }, 
            "id": "db14mby"
        }, 
        {
            "body": {
                "answer": "<p>To me these moments of being stuck are nice to come by sometimes. Maybe not while you<sq>re under sores sure and the deadline is looming. But once you<sq>re through you<sq>ve generally learned something which isn<sq>t possible in the tool chain or in the constraints of the system. You<sq>ve also learned the knowledge you<sq>ve picked up while researching about coding/approaches in general.<br><br>Congrats!</p>", 
                "question": "Don<sq>t feel bad about getting stuck"
            }, 
            "id": "ddt0532"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//rubberduckdebugging.com/ to the rescue!<br><br></p>", 
                "question": "Don<sq>t feel bad about getting stuck"
            }, 
            "id": "ddt5mtc"
        }, 
        {
            "body": {
                "answer": "<p>A lot of times I figured out how to solve a problem, I was showering, taking a walk or doing something that did not even have to do with coding.<br><br>Getting stuck can be frustrating, especially when deadlines are involved but a fresh perspective or just taking a step back to refresh your mind can do you a lot of good.<br><br>I should conclude by saying that I learned more from the times I failed than the times I got things working right off the bat. Sometimes, your intuitive logic is coming from a good place, trust it and try out what you are thinking. Even if it fails, you now know one more way how not to do something.</p>", 
                "question": "Don<sq>t feel bad about getting stuck"
            }, 
            "id": "ddtaa0b"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//i.imgur.com/dzbQCj4.png</p>", 
                "question": "Don<sq>t feel bad about getting stuck"
            }, 
            "id": "ddth5zx"
        }, 
        {
            "body": {
                "answer": "<p>For programming specifically<colon><br><br>* [MIT OCW 6.00 - Introduction to Computer Science and Programming (python)](http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/)<br>* [MIT OCW 6.001 - Structure and Interpretation of Computer Programs](http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/)<br>* [Coursera<colon> Functional Programming Principles in Scala](https<colon>//www.coursera.org/course/progfun)<br><br>Data Science classes<colon><br><br>*(These are all coursera)*<br><br><br>* [Machine Learning](https<colon>//www.coursera.org/course/ml) - **Stanford** - Andrew Ng<br>* [Natural Language Processing](https<colon>//www.coursera.org/course/nlp) - **Stanford** - Dan Jurafsky, Christopher Manning<br>* [Probabilistic Graphical Models](https<colon>//www.coursera.org/course/pgm) - **Stanford** - Daphne Koller<br>* [Social Network Analysis](https<colon>//www.coursera.org/course/sna) - **University of Michigan** - Lada Adamic<br>* [Neural Networks for Machine Learning](https<colon>//www.coursera.org/course/neuralnets) - **University of Toronto** - Geoffrey Hinton<br>* [Startup Engineering](https<colon>//www.coursera.org/course/startup) - **Stanford** - Balaji S. Srinivasan, Vijay S. Pande<br>* [Discrete Optimization](https<colon>//www.coursera.org/course/optimization) - **University of Melbourne** - Pascal Van Hentenryck<br>* [Linear and Integer Programming](https<colon>//www.coursera.org/course/linearprogramming) - **University of Colorado, Boulder** - Sriram Sankaranarayanan, Shalom D. Ruben<br>* [Introduction to Recommender Systems](https<colon>//www.coursera.org/course/recsys) - **University of Minnesota** - Joseph A Konstan, Michael D Ekstrand<br>* [Artificial Intelligence Planning](https<colon>//www.coursera.org/course/aiplan) - **University of Edinburgh** - Gerhard Wickler, Austin Tate<br>* [Scientific Computing](https<colon>//www.coursera.org/course/scientificcomp) - **University of Washington** - Nathan Kutz<br><br>I haven<sq>t taken this one, but I<sq>m familiar with the teachers and it should be really, really good. Very well reviewed course<colon><br><br>* [Statistical Learning](https<colon>//lagunita.stanford.edu/courses/HumanitiesSciences/StatLearning/Winter2016/about) - **Stanford** - Hastie and Tibshirani<br>* Collected [course materials](http<colon>//www.r-bloggers.com/in-depth-introduction-to-machine-learning-in-15-hours-of-expert-videos/) for the above MOOC.<br></p>", 
                "question": "Best Online Courses You Took"
            }, 
            "id": "czhkto0"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve taken a large number of MOOCs in the last couple of years. Some of my favorites were<colon><br><br>- [Intro to Computer Science \\(CS101\\) by Udacity](https<colon>//www.udacity.com/course/intro-to-computer-science--cs101)<br><br>While I wasn<sq>t new to programming, this was still an extremely well made course that was very engaging and got me into Python (haven<sq>t looked back since). Udacity get<sq>s overlooked a lot these days since they are trying a lot more to get people to enroll for nanodegrees and many folks don<sq>t realize that there is still all this free course material available. Peter Norvig<sq>s Design of Computer Programs at Udacity is also pretty awesome though quite challenging, especially for people with no previous exposure to functional programming<br><br>- [Analytics Edge by MIT on edX](https<colon>//www.edx.org/course/analytics-edge-mitx-15-071x-0)<br><br>This is an exceptionally well run course and should be everyone<sq>s first introduction to data science/machine learning. Lectures are succinct and polished and the private Kaggle competition for the course is a ton of fun and will reinforce learning like no other way. If you<sq>re motivated, you<sq>ll also end up teaching yourself a ton of advanced stuff while trying to do better on the Kaggle competition. Only slight negative is that it is based in R, which I<sq>m not a big fan of, but it works well for the course and if you<sq>re going to be getting into the field of Data Science, it helps to be familiar with both R and Python.<br><br>- [Algorithms I and II by Robert Sedgewick and Kevin Wayne \\(Princeton-Coursera\\)](https<colon>//www.coursera.org/course/algs4partI)<br><br>These are exceptional courses and anyone interested in programming/computer science should take these at some point. The lecture videos are very well made with excellent explanations and animations that help understand various data structures and algorithms. The crown jewels however, are the extremely engaging and challenging HW problems coupled with the excellent grading/feedback system for your program submissions that even help you understand how efficient your solutions are. To get the most out of the courses, be sure to interact on the forums and compare your solution efficiency v/s others and try to keep improving the efficiency of your solutions. It<sq>s amazing to see some of the elegant solutions people can come up with for some of the problems. The instructors also provide excellent support material including libraries of data structures implemented in JAVA that you use in the course which are very well designed and abstract away some of the inner workings to allow you to focus solely on algorithmic thinking (you do learn to implement data structures in the course, so it<sq>s not that you don<sq>t learn how to create your own libraries of datastructures if needed). I<sq>ll never forget the joy of implementing my own version of content-aware image resizing (like in photoshop) via seam-carving as one of the HW problems in the course.<br><br>These are some of the most memorable for me, although there have been plenty of other great courses along the way.</p>", 
                "question": "Best Online Courses You Took"
            }, 
            "id": "czhkvbq"
        }, 
        {
            "body": {
                "answer": "<p>CS50. It<sq>s amazing and I enjoyed it sooo much, never for a moment did I ever become even slightly bored. It<sq>s the only course I<sq>ve ever finished.<br><br>They teach everything properly and it<sq>s a lot of fun too.The psets, though they may seem a bit challenging, are great and fun.<br><br>If you<sq>re still not sure whether to take it, just try watching the first lecture.</p>", 
                "question": "Best Online Courses You Took"
            }, 
            "id": "czhlmxo"
        }, 
        {
            "body": {
                "answer": "<p>My favorite has to be Free Code Camp. I like the way that it<sq>s structured and the fact that you can chart your progress and create a portfolio on Github. It may be pretty basic at first, but you can blow through those lessons.</p>", 
                "question": "Best Online Courses You Took"
            }, 
            "id": "czhihru"
        }, 
        {
            "body": {
                "answer": "<p>I just started the Udacity CS101 course, and just want to recommend to other beginners. I<sq>ve made a few runs at learning before and it<sq>s always been tricky due to time constraints, but also due to what I think is a learn by doing approach most books seem to take. That<sq>s great in and of itself, but I<sq>ve always had the stumbling block of wanting to know WHY computer language works the way it does. For whatever reason it<sq>s always been a mental block for me - as if I really didn<sq>t feel as if I had learned and couldn<sq>t proceed without getting past that. But they do a nice job of giving you a brief explanation of how computer language is structured by comparing it to regular language, and explaining how it<sq>s different. (Specifically the part on Backus Naur form). Suddenly it all makes sense in a way it didn<sq>t before. I<sq>m sure not everyone has this problem but for me it was immensely helpful. <br><br>As far as time, the lessons for CS101 are a 4-8 minutes apiece, but very clear and concise. </p>", 
                "question": "Here<sq>s a list of 158 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2015)"
            }, 
            "id": "cupgf1i"
        }, 
        {
            "body": {
                "answer": "<p>I think it would be more appropriate to list university under <dq>provider<dq> and <dq>Coursera/Udacity/edX/etc<dq> under <dq>platform<dq>.</p>", 
                "question": "Here<sq>s a list of 158 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2015)"
            }, 
            "id": "cupv5p8"
        }, 
        {
            "body": {
                "answer": "<p>Uh... I kinda want to sign up for all of them.</p>", 
                "question": "Here<sq>s a list of 158 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2015)"
            }, 
            "id": "cupxnfd"
        }, 
        {
            "body": {
                "answer": "<p>This list is great! thanks!<br></p>", 
                "question": "Here<sq>s a list of 158 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (September 2015)"
            }, 
            "id": "cupehag"
        }, 
        {
            "body": {
                "answer": "<p>Here are some of the useful links<colon><br><br>| Links<br>|----------<br>| [Big-O Cheat Sheet](http<colon>//bigocheatsheet.com/)<br>| [Tech Interview Cheat Sheet](https<colon>//gist.github.com/TSiege/cbb0507082bb18ff7e4b)<br>| [Data Structures Cheat Sheet](https<colon>//www.clear.rice.edu/comp160/data_cheat.html)<br>| [Data Structures Cheat Sheet](http<colon>//www.scribd.com/doc/39557873/Data-Structures-Cheat-Sheet#scribd)<br>| [Algorithmic Cheat Sheet](https<colon>//sinon.org/algo/#data-structures)<br>| [Guide to selecting appropriate Map/Collection in Java ](http<colon>//www.sergiy.ca/guide-to-selecting-appropriate-map-collection-in-java/)<br>| [Data Structures](http<colon>//www.cs.jhu.edu/~joanne/cs226/schedule.shtml) *Checkout notes*<br>| [Data Structures and Algorithms with Object-Oriented Design Patterns in Java ](http<colon>//www.brpreiss.com/books/opus5/)<br>| [Data Structures Tutorial Notes](https<colon>//www.reddit.com/r/BukkitCoding/comments/1rrl2e/info_data_structures_tutorial/)<br>| [Algorithms & Data Structures - Notes](http<colon>//cooervo.github.io/Algorithms-DataStructures-BigONotation/index.html) by [cooervo](https<colon>//github.com/cooervo)<br>| [Algorithm Wiki](http<colon>//will.thimbleby.net/algorithms/doku.php)<br>| [Visual Algo](http<colon>//visualgo.net/)<br>| [UB Data Structures in C++ Lecture Slides & Notes](http<colon>//www.cse.buffalo.edu/~hungngo/classes/2014/Fall/250/notes.html)<br>| [Skiena<sq>s DS & Algo Audio/Video/Slides](http<colon>//www3.cs.stonybrook.edu/~algorith/video-lectures/)<br>| [Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne](http<colon>//algs4.cs.princeton.edu/home/)<br><br>| Advanced Topics<br>| --------------------<br>| [Nick Johnsonz<sq>s Blog <colon> Damn Cool Algorithms](http<colon>//blog.notdot.net/tag/damn-cool-algorithms)<br><br>| Code Repositories<br>| ---------------------<br>| [Algorist](https<colon>//code.google.com/p/algorist/)<br>| [Justin Wetherell<colon> Data Structures & Algorithms implementation in Java](https<colon>//github.com/phishman3579/java-algorithms-implementation)<br>| [Ashish Chopra<colon> Data Structures implementation in Java](https<colon>//github.com/ashish-chopra/Structures)<br>| [Prakhar Srivastav<colon> Data Structures implementation in Python](https<colon>//github.com/prakhar1989/Algorithms)<br>| [Battistella Stefano <colon> Data Structures implementation in Javascript](https<colon>//github.com/Bishop92/JavaScript-Data-Structures)<br>| [Daniel Fu <colon> Data Structures implementation in C++](https<colon>//github.com/xtaci/algorithms)</p>", 
                "question": "Algorithms and Data Structures cheat sheets?"
            }, 
            "id": "cu0byvt"
        }, 
        {
            "body": {
                "answer": "<p>Try the [Big O Cheat Sheet](http<colon>//bigocheatsheet.com/).<br><br>No pseudo code, unfortunately, but it _is_ a pretty thorough list, and does link you to the Wikipedia articles for each data structure or algorithms it lists.<br></p>", 
                "question": "Algorithms and Data Structures cheat sheets?"
            }, 
            "id": "cu0bunj"
        }, 
        {
            "body": {
                "answer": "<p>I made this one<colon> <br>http<colon>//cooervo.github.io/Algorithms-DataStructures-BigONotation/<br><br>also lots of implementation in java</p>", 
                "question": "Algorithms and Data Structures cheat sheets?"
            }, 
            "id": "cu0i2qm"
        }, 
        {
            "body": {
                "answer": "<p>There were posted about a week ago and are pretty helpful<colon> [Algorithm Wiki](http<colon>//will.thimbleby.net/algorithms/doku.php) and [VisuAlgo](http<colon>//visualgo.net/)</p>", 
                "question": "Algorithms and Data Structures cheat sheets?"
            }, 
            "id": "cu0w09d"
        }, 
        {
            "body": {
                "answer": "<p>I took a look at your site and I have questions that might be of interest to those considering your offer<colon><br><br>1. What sort of projects do you intend to use to motivate your students? <br><br>2. What are your qualifications? You say you<sq>re a front end developer, but what languages do you use? What languages are you intending to teach?<br><br>3. You say you<sq>ll make it up as you go... that<sq>s not how successful teaching ever works. You need to at least have some goals in mind else you<sq>re going to have misaligned expectations between yourself and your students. What skills do you specifically hope to teach your students? </p>", 
                "question": "I Will Teach You To Code"
            }, 
            "id": "cwu9mtz"
        }, 
        {
            "body": {
                "answer": "<p>E-mailed you about this.<br><br>I think this is a great idea. Thanks for offering. </p>", 
                "question": "I Will Teach You To Code"
            }, 
            "id": "cwu8y6f"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I Will Teach You To Code"
            }, 
            "id": "cwufi0q"
        }, 
        {
            "body": {
                "answer": "<p>This is great. I have wanted to do something similar, but geared toward mid-level students or junior developers. This has motivated me to give it a try as well - I<sq>m going to post something soon hopefully.</p>", 
                "question": "I Will Teach You To Code"
            }, 
            "id": "cwudyol"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m Geoff Greer, author of ag (the silver searcher), and the third person interviewed in this video.<br><br>I didn<sq>t think of it at the time, but I would add one bit of advice<colon> Your goal should be more than just, <dq>I want learn to program.<dq><br><br>Typically, learning to program is a means to an end, not an end in itself. Without a concrete reason for learning to code, the likelihood of accomplishing your goal is lower. A concrete goal is something like, <dq>I want to create and host my own website.<dq> or, <dq>I want to make a game.<dq><br><br>Also, don<sq>t feel bad if you decide programming isn<sq>t for you. I mostly agree with [Douglas Crockford](https<colon>//en.wikipedia.org/wiki/Douglas_Crockford). As he says in [Programming Style & Your Brain](https<colon>//www.youtube.com/watch?v=taaEzHI9xyY#t=26m50s)<colon><br><br>> I think there has to be something seriously wrong with you in order to do this work. A normal person, once they\u2019ve looked into the abyss, will say, \u201cI\u2019m done. This is stupid. I\u2019m going to do something else.\u201d But not us, \u2018cause there\u2019s something really wrong with us.<br><br>So if you decide to do something else, don<sq>t consider it a personal failure. You<sq>d be just as faultless if you got bored with filling out tax forms using latin palindromes.<br></p>", 
                "question": "I asked 4 people working on famous opensource projects<colon> <dq>How to learn programming?<dq> and combined their responses into a video"
            }, 
            "id": "cs3pgbt"
        }, 
        {
            "body": {
                "answer": "<p>Half expected another remix of Shia<sq>s motivation rant. This works too though</p>", 
                "question": "I asked 4 people working on famous opensource projects<colon> <dq>How to learn programming?<dq> and combined their responses into a video"
            }, 
            "id": "cs3k2nm"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I asked 4 people working on famous opensource projects<colon> <dq>How to learn programming?<dq> and combined their responses into a video"
            }, 
            "id": "cs3s07q"
        }, 
        {
            "body": {
                "answer": "<p>That was cool, thanks. <br><br>I love the first guy<sq>s enthusiasm =D</p>", 
                "question": "I asked 4 people working on famous opensource projects<colon> <dq>How to learn programming?<dq> and combined their responses into a video"
            }, 
            "id": "cs3jhoh"
        }, 
        {
            "body": {
                "answer": "<p>Tip<colon> if you don<sq>t want to enter your email just add ?download=true to the url for example www.oreilly.com/iot/free/pitching-your-iot-project.csp?download=true</p>", 
                "question": "Free O<sq>Reilly Ebooks"
            }, 
            "id": "dc61ck1"
        }, 
        {
            "body": {
                "answer": "<p>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.epub<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.epub<br>    <br>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.mobi<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.mobi<br>    <br>    wget http<colon>//www.oreilly.com/programming/free/files/modern-java-ee-design-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/object-oriented-vs-functional-programming.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/java-the-legend.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/introducing-java-8.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/20-python-libraries-you-arent-using-but-should.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/hadoop-with-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/how-to-make-mistakes-in-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/functional-programming-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/python-in-education.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/from-future-import-python.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/trends-shaping-the-london-tech-scene.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/2016-software-development-salary-survey-report.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/why-rust.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/c++-today.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/analyzing-visualizing-data-f-sharp.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/rxjava-for-android-app-development.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/swift-pocket-reference.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/ten-steps-to-linux-survival.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/open-by-design.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/getting-started-with-innersource.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-antipatterns-and-pitfalls.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/microservices-vs-service-oriented-architecture.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/software-architecture-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/migrating-cloud-native-application-architectures.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/reactive-microservices-architecture-orm.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/engineering-managers-guide-design-patterns.pdf<br>    wget http<colon>//www.oreilly.com/programming/free/files/azure-for-developers.pdf<br><br>    wget http<colon>//www.oreilly.com/iot/free/files/ambient-computing.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/governing-the-iot.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/iot-opportunities-challenges.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/creating-functional-teams-for-iot.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/building-a-hardware-business.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/when-hardware-meets-software.pdf\t<br>    wget http<colon>//www.oreilly.com/iot/free/files/what-is-the-internet-of-things.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/software-above-device.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/software-hardware-collide.pdf<br>    wget http<colon>//www.oreilly.com/iot/free/files/hardware-by-the-numbers.pdf<br><br>    wget http<colon>//www.oreilly.com/iot/free/files/ambient-computing.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/governing-the-iot.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/iot-opportunities-challenges.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/creating-functional-teams-for-iot.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/building-a-hardware-business.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/when-hardware-meets-software.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/what-is-the-internet-of-things.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/software-above-device.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/hardware-by-the-numbers.epub<br>    wget http<colon>//www.oreilly.com/iot/free/files/ambient-computing.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/governing-the-iot.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/iot-opportunities-challenges.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/creating-functional-teams-for-iot.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/when-hardware-meets-software.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/what-is-the-internet-of-things.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/software-above-device.mobi<br>    wget http<colon>//www.oreilly.com/iot/free/files/hardware-by-the-numbers.mobi</p>", 
                "question": "Free O<sq>Reilly Ebooks"
            }, 
            "id": "dc6b7uu"
        }, 
        {
            "body": {
                "answer": "<p>[Complete list of free PDFs](http<colon>//pastebin.com/nyFtp2EG) in case you wanna save them all. Just throw the list into your favorite download manager. 165 documents, 1.42GB total size.</p>", 
                "question": "Free O<sq>Reilly Ebooks"
            }, 
            "id": "dc6fpbo"
        }, 
        {
            "body": {
                "answer": "<p>While I can not complain about free books; I am disappointed that most of these titles are non-technical and not even worth the time it takes to download. How do writers even get this fluff published?</p>", 
                "question": "Free O<sq>Reilly Ebooks"
            }, 
            "id": "dc6a6k8"
        }, 
        {
            "body": {
                "answer": "<p>[Karan](https<colon>//github.com/karan/Projects/blob/master/README.md)<br><br>    <br>[OSS](https<colon>//github.com/open-source-society/computer-science-and-engineering)</p>", 
                "question": "GitHub repo that had a list of projects to master a language."
            }, 
            "id": "d1s6xwr"
        }, 
        {
            "body": {
                "answer": "<p>Is this the guy you where thinking of? <br><br>https<colon>//www.reddit.com/r/learnprogramming/comments/1huwia/want_to_learn_a_new_language_solve_these_100/<br><br></p>", 
                "question": "GitHub repo that had a list of projects to master a language."
            }, 
            "id": "d1s97n8"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "GitHub repo that had a list of projects to master a language."
            }, 
            "id": "d1sfdfx"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for asking for this! That is awesome. I had no idea where to begin.</p>", 
                "question": "GitHub repo that had a list of projects to master a language."
            }, 
            "id": "d1spgc6"
        }, 
        {
            "body": {
                "answer": "<p>Good job. This seems to be focused more on websites. Any plans to branch out to secure coding for applications, and possibly secure configuration?</p>", 
                "question": "An interactive website which helps you understand various vulnerabilities. It has exercises information and quizzes to help you understand these vulnerabilities."
            }, 
            "id": "d1y06hc"
        }, 
        {
            "body": {
                "answer": "<p>You got some hacksplaining to do Lucy!</p>", 
                "question": "An interactive website which helps you understand various vulnerabilities. It has exercises information and quizzes to help you understand these vulnerabilities."
            }, 
            "id": "d1xyl98"
        }, 
        {
            "body": {
                "answer": "<p>This is great, thanks!</p>", 
                "question": "An interactive website which helps you understand various vulnerabilities. It has exercises information and quizzes to help you understand these vulnerabilities."
            }, 
            "id": "d1xltpw"
        }, 
        {
            "body": {
                "answer": "<p>Thanks dude</p>", 
                "question": "An interactive website which helps you understand various vulnerabilities. It has exercises information and quizzes to help you understand these vulnerabilities."
            }, 
            "id": "d1xmtyp"
        }, 
        {
            "body": {
                "answer": "<p>> Git - Seriously, if you don<sq>t use it then don<sq>t bother being a programmer.<br><br>I *think* this is a little exaggerated. There are other distributed version control systems than Git, such as Mercurial and Bazaar.<br><br>Personally I find that many suggestions here have just equally good alternatives and what works best for someone might be a far cry from what works best for someone else, but seeing other people<sq>s environments is always interesting and can be learned from. No doubt a fledgling web dev may find this useful, if at least for checking the tools out.</p>", 
                "question": "My list of technologies I use to create static websites in the most organized and efficient way + how to host 100<percent> for free"
            }, 
            "id": "d32h2ju"
        }, 
        {
            "body": {
                "answer": "<p>How I build a static website<colon><br><br>Pull a free bootstrap template down from the interwebs. Download a bunch of public domain stock images on wikimedia (or the like).  Swap the stock images for images that are preloaded on the template.  Throw the clients content up there.  Collect $1000.00 and walk away from the project.<br><br><br>Honestly, <dq>custom<dq> websites (I<sq>m speaking specifically about static websites, not web application) are not desirable or more beneficial in any way.  The only time a custom website should be built is to license as a template.  We tried the entire <dq>custom<dq> thing in the 2000<sq>s and ended up with terrible flash websites and worse.  Businesses want to simply display their pertinent information (sometimes gather information such as email, comments, etc) in the simplest, cheapest way possible.  Consumers want to retrieve and enter this information in a simple, familiar, cross browser and mobile friendly environment.  No one cares if your site layout looks very similar to xxxx.com.  They don<sq>t care, they are on their for functional reasons not to gawk at your marvelous CSS job.  <br><br>Additionally, we have reverted back to simplicity.  A bare layout, when done right, is much more preferable than something way too compact.  </p>", 
                "question": "My list of technologies I use to create static websites in the most organized and efficient way + how to host 100<percent> for free"
            }, 
            "id": "d32lu3x"
        }, 
        {
            "body": {
                "answer": "<p>This is also worth playing with https<colon>//getgrav.org</p>", 
                "question": "My list of technologies I use to create static websites in the most organized and efficient way + how to host 100<percent> for free"
            }, 
            "id": "d32kld6"
        }, 
        {
            "body": {
                "answer": "<p>I would drop bower from that list and stick with npm for your dependency management. For most projects you<sq>re going to be using npm anyway, no need to throw in a second dependency manager and complicate things. </p>", 
                "question": "My list of technologies I use to create static websites in the most organized and efficient way + how to host 100<percent> for free"
            }, 
            "id": "d32lp7d"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s a good resource but it<sq>s dated. You are better off going to official docs. </p>", 
                "question": "In need for a cheat sheet? Fear not!"
            }, 
            "id": "cq2isn1"
        }, 
        {
            "body": {
                "answer": "<p>every C link is dead...  <br><br>Thanks though.</p>", 
                "question": "In need for a cheat sheet? Fear not!"
            }, 
            "id": "cq2gcs8"
        }, 
        {
            "body": {
                "answer": "<p>Awesome, thanks!</p>", 
                "question": "In need for a cheat sheet? Fear not!"
            }, 
            "id": "cq2a882"
        }, 
        {
            "body": {
                "answer": "<p>Damn, this is awesome! The one for actionscript wil definately come in handy for my next exam!</p>", 
                "question": "In need for a cheat sheet? Fear not!"
            }, 
            "id": "cq2gcsb"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s June already? goddammit!</p>", 
                "question": "Here<sq>s a list of 73 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2014)"
            }, 
            "id": "chziflt"
        }, 
        {
            "body": {
                "answer": "<p>If I could up vote harder, I totally would!</p>", 
                "question": "Here<sq>s a list of 73 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2014)"
            }, 
            "id": "chza8il"
        }, 
        {
            "body": {
                "answer": "<p>Super stoked for Algorithms!</p>", 
                "question": "Here<sq>s a list of 73 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2014)"
            }, 
            "id": "chz8fl4"
        }, 
        {
            "body": {
                "answer": "<p>May the machine-gods favor your future for this blessing you have bestowed upon us, the unlearned masses.<br><br>Be joyous, for I will sing of you deeds and praise your name until I lay below earth.</p>", 
                "question": "Here<sq>s a list of 73 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (June 2014)"
            }, 
            "id": "chzhetp"
        }, 
        {
            "body": {
                "answer": "<p>why the fuck is it always me in these hypothetical situations?</p>", 
                "question": "I wish I knew this when I started programming..."
            }, 
            "id": "cqzg8dy"
        }, 
        {
            "body": {
                "answer": "<p>Ideally, you go back a step until the program works. Then you know that it<sq>s something you recently added that is stopping it from working. I don<sq>t see what Fred did wrong.</p>", 
                "question": "I wish I knew this when I started programming..."
            }, 
            "id": "cqzbmcg"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not sure what the message is supposed to be.  That you need unit tests on everything?  That you need version control on everything?  That you need to be less ignorant about your code and how it works?<br><br>This makes for a fine passage in a book, but I can<sq>t think of a single instance where someone can be working on a program, and then it stop working *all of a sudden* and they have no idea why.  If someone is that dense I don<sq>t think unit tests or version control will help them.<br><br>This is just propaganda for test driven development, which is not suitable in all instances.</p>", 
                "question": "I wish I knew this when I started programming..."
            }, 
            "id": "cqzdn56"
        }, 
        {
            "body": {
                "answer": "<p>Of course we don<sq>t rely on coincidences. But that<sq>s because when *MY* code works, its not a coincidence /s</p>", 
                "question": "I wish I knew this when I started programming..."
            }, 
            "id": "cqzexpc"
        }, 
        {
            "body": {
                "answer": "<p>A joke about all the <dq>I<sq>m a teenager looking to learn programming to blah, am I on the right track?<dq> threads?<br><br>there have been a lot of people failing to read the FAQ lately.<br><br>I kind of wish this was a serious post as this sounds like a cool idea. But I guess it<sq>s probably a joke..</p>", 
                "question": "I am 84 years old trying to learn FORTRAN so I can reprogram my wheelchair. How do I get on the right track?"
            }, 
            "id": "c7eoza8"
        }, 
        {
            "body": {
                "answer": "<p>My pa emailed me the other day asking if I could find a free Fortran compiler that would compile his code written back in the <sq>50<sq>s. So I guess it happens...</p>", 
                "question": "I am 84 years old trying to learn FORTRAN so I can reprogram my wheelchair. How do I get on the right track?"
            }, 
            "id": "c7eq7wd"
        }, 
        {
            "body": {
                "answer": "<p>Not sure if OP is trolling or coolest grandpa ever.</p>", 
                "question": "I am 84 years old trying to learn FORTRAN so I can reprogram my wheelchair. How do I get on the right track?"
            }, 
            "id": "c7epzl5"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve read all comments as of the time of this posting and I<sq>ve got to say I<sq>m on both sides of this fence.<br><br>I<sq>m averse to yet more white noise but at the same time somebody calling out all the irritating, <dq>I<sq>m pretty good with Excel, how do I optimize a search engine<dq> threads is a good thing.<br><br>That said I honestly clicked thinking, <dq>Fuck it, I<sq>ll learn Fortran. Let<sq>s hook this guy up.<dq></p>", 
                "question": "I am 84 years old trying to learn FORTRAN so I can reprogram my wheelchair. How do I get on the right track?"
            }, 
            "id": "c7eqnj5"
        }, 
        {
            "body": {
                "answer": "<p>[Bisqwit](https<colon>//www.youtube.com/user/Bisqwit). He makes short(ish) videos about a broad range of topics. I suggest watching all of these as they are all great https<colon>//www.youtube.com/playlist?list=PL41889A5E9CBD68CF. Imo his doom engine is a fantastic watch.<br><br>For some lighter content, you can watching [Coding rainbow](https<colon>//www.youtube.com/user/shiffman) take on short challenges, or explain cool topics in 15-30 minute live videos. [Heres a great video](https<colon>//www.youtube.com/watch?v=IKB1hWWedMk&index=14&t=48s&list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH)</p>", 
                "question": "What are some neat programming related YouTube channels?"
            }, 
            "id": "dbpitzv"
        }, 
        {
            "body": {
                "answer": "<p>I recently stumbled on [Daniel Shiffman](https<colon>//www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw). He has lots of lecture videos on subjects as well as coding challenges where he<sq>ll try and make different things (usually animation based) and explain how he<sq>s doing it. While I can<sq>t follow along with the language/syntax super closely it helps seeing how someone else goes about programming a wide variety of subjects. </p>", 
                "question": "What are some neat programming related YouTube channels?"
            }, 
            "id": "dbpoywt"
        }, 
        {
            "body": {
                "answer": "<p>Youtube channel funfunfunctions - a JavaScript developer explains how the heck JavaScript works in fun short videos with code examples</p>", 
                "question": "What are some neat programming related YouTube channels?"
            }, 
            "id": "dbpl081"
        }, 
        {
            "body": {
                "answer": "<p>Computerphile gives a broader perspective of what programming can do although they don<sq>t really teach programming.</p>", 
                "question": "What are some neat programming related YouTube channels?"
            }, 
            "id": "dbpp7ee"
        }, 
        {
            "body": {
                "answer": "<p>So much<colon><br><br>* Dreamspark<br>* Most of AutoDesk<sq>s products for free<br>* GitHub Education Pack (includes unlimited private repo<sq>s, free domain for a year and access to many other platforms)<br>* Unlimited BitBucket<br>* 15<percent> off at Apple, 10<percent> off at Dell<br>* $50 free hosting at Digital Ocean<br>* $50 free credit at Amazon Web Services, on top of Free Tier<br>* Private builds on Travis CI<br>* Business plan on Bitnami<br>* $25 credit for HackHands (should last for one occasion)<br><br>Loads more see [here](https<colon>//github.com/AchoArnold/discount-for-student-dev#source-code-repos)</p>", 
                "question": "Student email about to expire - what free stuff can I get?"
            }, 
            "id": "d3wxv20"
        }, 
        {
            "body": {
                "answer": "<p>[Jetbrains IDE<sq>s!!](https<colon>//www.jetbrains.com/student/)<br><br>Edit<colon> Just read the actual post content.... Still for anyone else as non observant as me ^^^^</p>", 
                "question": "Student email about to expire - what free stuff can I get?"
            }, 
            "id": "d3x1a7b"
        }, 
        {
            "body": {
                "answer": "<p>Github Student Pack. </p>", 
                "question": "Student email about to expire - what free stuff can I get?"
            }, 
            "id": "d3wujba"
        }, 
        {
            "body": {
                "answer": "<p>Amazon prime student. Not free but half price.</p>", 
                "question": "Student email about to expire - what free stuff can I get?"
            }, 
            "id": "d3x2nlu"
        }, 
        {
            "body": {
                "answer": "<p>First off, I apologize for being an ass in responding to this, but I simply can<sq>t let it fly, as if it was incredibly valuable advice that is actually helpful. So, I apologize in advance for sounding like an angry ass.<br><br>This isn<sq>t enough. It<sq>s not much more than teaching people how to bowl by telling them, *<dq>throw the ball down the aisle as hard as you can, right down the middle and hit all 10 pins.<dq>* <br><br>Simply saying, <dq>**Write little text-based programs to learn all the features of your chosen programming language, before moving on to bigger, complicated projects,**<dq> is not enough and is not guidance. It really angers me when I hear developers say this, where the dev thinks he or she is distributing gold when really it<sq>s not helpful at all. And me saying such really is just met with anger and hostility because professional developers simply can<sq>t wrap their minds around what is going on through a beginner<sq>s brain when the beginner is struggling. And no, having been there once 10 years ago isn<sq>t enough for a developer to <dq>understand<dq>. Times have changed. The environment and table dressing have changed, programs have changed. <br><br>> When you get stuck, try to fix the problem yourself, but don<sq>t be afraid to ask for help. You will learn faster if you ask questions.<br><br>Oh really? Why didn<sq>t I think of that? Maybe I<sq>ll go to Stackoverflow and ask a question. Oh, looks like they really don<sq>t care for the way I asked the question. Guess I need to wrap it up in a perfect, hermetically sealed magic spell that<sq>s not asking an opinion in order for them to even take a look at my question. Or maybe I should try MDN, which really isn<sq>t easy to interpret as a beginner either. <br><br>> For a more pleasant experience, Learn how to ask questions the right way, because the programming community has a few grumpy bums in it.<br><br>Oh, I see you already understand the <sq>grumpiness<sq> of professional, elitist coders who are offended, as if someone took a shit in their Lucky Charms, when a noob asks an ignorant question. No, it<sq>s not ok to be ignorant around those sites, and you just validated my point. <br><br>How about this...for a more pleasant experience, how about devs learn to intuit what the beginner is attempting to say and not ostracize him or her like he was a piece of shit. <br><br>No. No, what is needed are more exercises. A shit load of them. Treehouse doesn<sq>t have them, CodeAcademy doesn<sq>t, Code School doesn<sq>t, Thinkful doesn<sq>t, Lynda doesn<sq>t. The resources online pretty much suck, and you stated so at the beginning of your post. They suck because the tutorial creators forgot what it was like to be a beginner. They forgot the number one rule, which is, **<dq>one learns to code by coding more and one codes more by working through examples.** A noob SHOULD NOT be expected to shit out their own examples and problems while they<sq>re trying to fight syntax errors and learn new methods.<br><br>Simply put, the industry is inferior when it comes to creating a substitutive learning environment with a quality pedagogy. It sucks and devs simply refuse to acknowledge this. Why should they when they can simply thrust all responsibility back on the hapless noob.<br><br></rant><br><br>Let the flames begin.</p>", 
                "question": "When You Know the Basics but You Still Can<sq>t Code"
            }, 
            "id": "czdi3qi"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.projecteuler.net/problems<br><br>I<sq>m still a student but if I was a professor with students I would highly recommend they go here and start with the most basic of problems. It<sq>s multilingual and ranges from 1 step above <dq>hello world<dq> to about <dq>Super Nerd<dq>. These questions will force the student to put themselves out there to find answers. There is also a forum where people can submit their codes and you can skim through that for variations of code that solve the same problem. From there you can ask yourself <dq>why did they do it <dq>way x<dq> over <dq>way z<dq> and over time you are leading yourself to answers. Which as we know seeking answers is a big part of the job. Unless you wrote the language, you won<sq>t know every little thing. <br><br>I haven<sq>t had a chance to read the article yet but once I<sq>m off I will. </p>", 
                "question": "When You Know the Basics but You Still Can<sq>t Code"
            }, 
            "id": "czdfopu"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d argue that the best way to learn coding is to be curious and challenge seeking. Find a project or an idea and implement it. You<sq>ll get lost, frustrated and flustered but when you come out from underneath it you will see that you<sq>re stronger and wiser for it. </p>", 
                "question": "When You Know the Basics but You Still Can<sq>t Code"
            }, 
            "id": "czdawrn"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t forget about [Programming by Doing](http<colon>//programmingbydoing.com/), my site designed for *exactly* this sort of learning.<br><br>Source<colon> I<sq>ve been teaching beginners to code for the better part of two decades.</p>", 
                "question": "When You Know the Basics but You Still Can<sq>t Code"
            }, 
            "id": "czdh9td"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll tell my boss I<sq>m doing research</p>", 
                "question": "Must see documentary on the origins of the modern computer. Five part series. All beginning programmers should watch this!"
            }, 
            "id": "catxgb0"
        }, 
        {
            "body": {
                "answer": "<p>well, there goes my afternoon. i had such great hopes of getting work done...</p>", 
                "question": "Must see documentary on the origins of the modern computer. Five part series. All beginning programmers should watch this!"
            }, 
            "id": "catwop6"
        }, 
        {
            "body": {
                "answer": "<p>Found this writeup on it for all five parts<colon> http<colon>//waxy.org/2008/06/the_machine_that_changed_the_world/</p>", 
                "question": "Must see documentary on the origins of the modern computer. Five part series. All beginning programmers should watch this!"
            }, 
            "id": "catznrh"
        }, 
        {
            "body": {
                "answer": "<p>Does anyone have another link to this video? It seems to have been taken off of YouTube... <colon>/</p>", 
                "question": "Must see documentary on the origins of the modern computer. Five part series. All beginning programmers should watch this!"
            }, 
            "id": "cbskaoq"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I<sq>ve been learning how to build web apps in the last few months. Here<sq>s a summary of my experiences and the site I built to help other learners find useful online courses!"
            }, 
            "id": "dbj8i7d"
        }, 
        {
            "body": {
                "answer": "<p>Everything looks great for a learning project. My main suggestion is to integrate some kind of advanced level searching. Not only will it improve the searching experience to let people further filter their results (no one likes scrolling through hundreds of results), but it<sq>ll also help you learn the mechanics of building one. <br><br>You could also make a drop down to increase the pager length from 10, people tend to like to scroll instead of click. Maybe consider using waypoints or a similar module to implement infinite scroll.</p>", 
                "question": "I<sq>ve been learning how to build web apps in the last few months. Here<sq>s a summary of my experiences and the site I built to help other learners find useful online courses!"
            }, 
            "id": "dbjg2tl"
        }, 
        {
            "body": {
                "answer": "<p>Cheers for this! I took the MIT 6.00.1x course a couple of months ago, and I<sq>d also recommend it to anyone looking to learn Python.<br><br>I<sq>m interested in Flask as well, so I<sq>ll definitely take a look at the Treehouse courses.</p>", 
                "question": "I<sq>ve been learning how to build web apps in the last few months. Here<sq>s a summary of my experiences and the site I built to help other learners find useful online courses!"
            }, 
            "id": "dbjdza0"
        }, 
        {
            "body": {
                "answer": "<p>Glad you found a good way to get into backend, it<sq>s my favourite too!<br><br>To entertain your aside; Django is a bit of an <sq>all in the box<sq> solution, compared to Flask<sq>s include it as you go, but if you end up doing a lot of backend you might prefer flipping through the well supported box to building the stuff yourself. For your use case though flask makes perfect sense.<br><br>If you<sq>re not already using a debugger I<sq>ve found it makes a huge difference in my speed and ability to quickly cut to the problem and engineer rather then test and rewrite. I use the one in pycharm and being able to drop a breakpoint and interact with my code until it does what I need is super helpful, and you can follow around what<sq>s happening in your code/framework/Python libraries</p>", 
                "question": "I<sq>ve been learning how to build web apps in the last few months. Here<sq>s a summary of my experiences and the site I built to help other learners find useful online courses!"
            }, 
            "id": "dbjcrfq"
        }, 
        {
            "body": {
                "answer": "<p>Did you borrow this from Simon Allardice on Lynda?</p>", 
                "question": "For the folks who still have a confusion in concepts like abstraction polymorphism etc etc here is an easy read. Please check it out. You<sq>ll surely like it."
            }, 
            "id": "cvvvk8s"
        }, 
        {
            "body": {
                "answer": "<p>Well written and easy to understand +1</p>", 
                "question": "For the folks who still have a confusion in concepts like abstraction polymorphism etc etc here is an easy read. Please check it out. You<sq>ll surely like it."
            }, 
            "id": "cvvvtu5"
        }, 
        {
            "body": {
                "answer": "<p>The `+` operator having the functionality to add two integers as well as concatenate two strings is overloading. I was always under the impression that overloading and polymorphism were different concepts. Is overloading considered a type of polymorphism?</p>", 
                "question": "For the folks who still have a confusion in concepts like abstraction polymorphism etc etc here is an easy read. Please check it out. You<sq>ll surely like it."
            }, 
            "id": "cvvyf6c"
        }, 
        {
            "body": {
                "answer": "<p>Good explaination shall always be combined with code.  <colon>)<br><br>Actually I haven<sq>t seen a book or write up explaining four pillars of OOP with a side by side examples. </p>", 
                "question": "For the folks who still have a confusion in concepts like abstraction polymorphism etc etc here is an easy read. Please check it out. You<sq>ll surely like it."
            }, 
            "id": "cvwg60x"
        }, 
        {
            "body": {
                "answer": "<p>I feel like I need to pour one out for you.</p>", 
                "question": "This is what the real world<sq>s like..."
            }, 
            "id": "cpjsslu"
        }, 
        {
            "body": {
                "answer": "<p>I briefly worked with a guy who used lolcats in his log statement so turning on debugging would result in<colon><br><br>    OH HAI! x=2<br>    OH HAI! x=4<br>    OH HAI! x=8<br>    OH HAI! x=16<br><br>I wanted to smack him.<br></p>", 
                "question": "This is what the real world<sq>s like..."
            }, 
            "id": "cpjw6fe"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "This is what the real world<sq>s like..."
            }, 
            "id": "cpjt8e4"
        }, 
        {
            "body": {
                "answer": "<p>This sounds like my first job out of school. I even brought up the fact that they were sending unencrypted user password and credit card numbers (stored in plain text as well) as URL params, and I was told to <sq>not worry about that kind of thing<sq>. I got out as soon as I could.</p>", 
                "question": "This is what the real world<sq>s like..."
            }, 
            "id": "cpjvdon"
        }, 
        {
            "body": {
                "answer": "<p>Well so is The Elder Scrolls Online so too bad Code Academy!</p>", 
                "question": "CodeSchool is 100<percent> free this weekend."
            }, 
            "id": "da3t7ed"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s unique about this site over the many others?</p>", 
                "question": "CodeSchool is 100<percent> free this weekend."
            }, 
            "id": "da3lkck"
        }, 
        {
            "body": {
                "answer": "<p>is there anything you could realistically learn in a single weekend? </p>", 
                "question": "CodeSchool is 100<percent> free this weekend."
            }, 
            "id": "da3mzpc"
        }, 
        {
            "body": {
                "answer": "<p>Have a question here.<br>If I enroll in a course during Free Weekend ,would I be able to access and study from it after the FREE weekend ends?</p>", 
                "question": "CodeSchool is 100<percent> free this weekend."
            }, 
            "id": "da47oge"
        }, 
        {
            "body": {
                "answer": "<p>I love figuring things out. Nothing more satisfying finding and fixing a bug after a long search.<br><br>Problems. Depression has killed my motivation for the past couple years. CS was the only module I did well in last year (first year uni) since I had taught myself the basics beforehand but I haven<sq>t really progressed past that point. <br><br>Now that I am feeling slightly better I<sq>m getting back into things and I<sq>m getting drowned in options. I know algorithms and data structures is probably the core intermediate cs curriculum. But considering I<sq>ll do that next year in class; I<sq>m not sure if I should focus on something else. databases, markup languages, competency on the linux terminal. I know that I should work on stuff outside the cs curriculum to keep myself current on various frameworks and whatever but I don<sq>t know where to start. I<sq>d rather get myself up to speed now so when I need to find a job I<sq>ve get the basics down. </p>", 
                "question": "I<sq>m a software engineer and want to help others learn to code and overcome any mental barriers they have along the way"
            }, 
            "id": "d986ali"
        }, 
        {
            "body": {
                "answer": "<p>1) I personally enjoy the challenge of coding, when I debug I feel it to more like my own personal mental puzzle to solve instead of a nuisance. I also love the idea and feeling of creating something and to have the satisfaction of <dq>I made that!<dq><br><br>2) Most difficult has to be that college (I have an Associates but still) did not truly prepare me for this type of career which I still have yet to find a job in and the difficulties of not being around like minded people to help motivate each other. When you are trying to learn or make something with no one to share with it is easy to forget things because you have no support and motivation drops dramatically for the same reason.<br><br>I am currently in the process of relocating in hopes of finding work and possibly attending Nashville Software School if current job opportunity does not pan out.</p>", 
                "question": "I<sq>m a software engineer and want to help others learn to code and overcome any mental barriers they have along the way"
            }, 
            "id": "d984w0v"
        }, 
        {
            "body": {
                "answer": "<p>The problem that I have is that I know the basics through university, but since we have a very theoretical focus I have to practice programming on my own. <br><br>The issue for me is that I don<sq>t know any reasonable project progressions, like for example <br><br>Calculator - >pong - > x<br><br>Do you have a nice list of suggestions for progressingly more difficult projects starting out with something easy? </p>", 
                "question": "I<sq>m a software engineer and want to help others learn to code and overcome any mental barriers they have along the way"
            }, 
            "id": "d985bii"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m actually a bit of programmer myself. I was taught C\\C++ in uni and worked on some pretty interesting computational problems there. But C and C++ killed a lot of fun for me and I went into other field. Well, it wasn<sq>t the right decision, as I understand now.<br><br>Right now I<sq>m teaching myself Python(and having fun, if only it was the first language I was taught) and scientific stack, because I love investigating stuff, I love making things work, I love being able to solve problems and be creative.<br><br>The main problem for me right now is that I have hard time getting into some sort of intermediate programming using more advanced packages, APIs, etc. What<sq>s best? What projects to do? Am I good enough to make it work? Plus I<sq>m a bit shy and my self esteem tanked a bit, because my general programming skills were rusting away for couple of years. The fact that I<sq>m a perfectionist does not help either. For some reason It<sq>s very hard for me to dive in.<br><br>So, what would you suggest in this situation? I actually want it to be my job and aiming more into scientific\\machine learning field because it correlates with my other interests. How to break through it and start making practical, useful stuff?</p>", 
                "question": "I<sq>m a software engineer and want to help others learn to code and overcome any mental barriers they have along the way"
            }, 
            "id": "d988fe2"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s exactly what we tell every beginner. Don<sq>t start hacking straight away.<br><br>Plan, sketch, draw, use whatever works for you - **on non digital media** (paper, whiteboard, whatever).<br><br>It doesn<sq>t matter how you write it down, or if you draw. What matters is that you spend time away from the computer and ponder about the problem.<br><br>Our brains need time to process information. By going away from the computer we give our brains this time.<br><br>My main emphasis here lies on not using digital media. Any digital medium is a distraction because we have to think on using the medium (even on a subconscious level) whilst we are very familiar with conventional tools like pen(cil) & paper; with them we don<sq>t need to think anymore.<br><br>That<sq>s also why [Rubber Duck Debugging](https<colon>//en.wikipedia.org/wiki/Rubber_duck_debugging) is so efficient. By explaining your problem to the proverbial rubber duck you have to think about the problem in a different way which quite often leads to the solution.</p>", 
                "question": "Your most valuable piece of equipment is not a computer but something to write on!"
            }, 
            "id": "dalxi5y"
        }, 
        {
            "body": {
                "answer": "<p><dq>The sooner you start to code, the longer it takes<dq>. <br><br>That can be taken to extremes, though. At some point, once you have it sketched out, it becomes quicker to sit down and hammer it out, and iterate that way. But absolutely - don<sq>t start coding until you have a fair idea of what you need to code.</p>", 
                "question": "Your most valuable piece of equipment is not a computer but something to write on!"
            }, 
            "id": "dalwxqf"
        }, 
        {
            "body": {
                "answer": "<p>Counterpoint, I tried this again and again when I first started working because everyone told me how useful it was. I never found it useful. <br><br><br>I<sq>m much more comfortable outlining things in a text editor or drawing digital diagrams where, in both cases, I can easily add and remove things as my thoughts evolve. With pen and paper the adds and deletes quickly make a jumbled mess of things that becomes increasingly difficult to understand. I also like being able to grep for keywords across documents, or ctrl+f within one. I<sq>m so much more productive this way.<br><br><br>The important thing is to explore many ways of working to find what works for you rather than subscribing yourself blindly to whatever one-weird-trick is in vogue today.</p>", 
                "question": "Your most valuable piece of equipment is not a computer but something to write on!"
            }, 
            "id": "dam7v9c"
        }, 
        {
            "body": {
                "answer": "<p>> You don<sq>t need a whiteboard, just a pencil and scrap paper will do.<br><br>First thing I did when I read this was buying a whiteboard. </p>", 
                "question": "Your most valuable piece of equipment is not a computer but something to write on!"
            }, 
            "id": "dalxtow"
        }, 
        {
            "body": {
                "answer": "<p>I did the JavaScript, Python and CSS course. They are all pretty helpful, but the JavaScript course is very good!</p>", 
                "question": "Codecademy<sq>s Hidden Courses"
            }, 
            "id": "cssndfj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve done 30<percent> of the angular one. It<sq>s really buggy</p>", 
                "question": "Codecademy<sq>s Hidden Courses"
            }, 
            "id": "csspj5k"
        }, 
        {
            "body": {
                "answer": "<p>Many thanks</p>", 
                "question": "Codecademy<sq>s Hidden Courses"
            }, 
            "id": "cssmeib"
        }, 
        {
            "body": {
                "answer": "<p>Codeacademy gives me a headache. But then thinking hurt head. So i suppose it is awesome for everyone else but i still think it is buggy.</p>", 
                "question": "Codecademy<sq>s Hidden Courses"
            }, 
            "id": "csssvie"
        }, 
        {
            "body": {
                "answer": "<p>Programming is as much about memorizing code as writing is about memorising quotes. But it doesn<sq>t hurt to have a few standard algorithms and basic structures in the back of your head ready to adjust slightly for your current problem. The best students tend to both memorize code and understand why they work.</p>", 
                "question": "I finally realized you can<sq>t memorize code. You just have to think it out"
            }, 
            "id": "dbex2np"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I finally realized you can<sq>t memorize code. You just have to think it out"
            }, 
            "id": "dbewhax"
        }, 
        {
            "body": {
                "answer": "<p>I believe this is a way of thinking that is not shared among all individuals. After a lot of practice, you will gain the confidence that you can find a path to a solution.  You can memorize a path through the forest, but that will only work if your starting point and destination are always the same.  It is better to practice navigating the forests so you have the confidence to find a path no matter where you start, or where you are going.</p>", 
                "question": "I finally realized you can<sq>t memorize code. You just have to think it out"
            }, 
            "id": "dbfbdlq"
        }, 
        {
            "body": {
                "answer": "<p>When I learned, there was no internet or at-your-fingertips electronic reference.  So I memorized a great many commands.  This gave me a kind of fluency that would allow me to implement ideas very rapidly.  I was not discriminating and attempted to essentially know everything about the machine in order to achieve total dominance of it.  I<sq>m not sure why this ambition consumed me, but I certainly wouldn<sq>t trade it for the good-student philosophy that prevails nowadays.  Screw your tests, man.  Computing represents the future of the world.  It represents power and technology and transcendent potential.  Fail your silly tests.  The prize is elsewhere.</p>", 
                "question": "I finally realized you can<sq>t memorize code. You just have to think it out"
            }, 
            "id": "dbetmps"
        }, 
        {
            "body": {
                "answer": "<p>You might want to fork the [free programming book collection](https<colon>//github.com/vhf/free-programming-books), add the book and submit a pull request.</p>", 
                "question": "C/C++ Program Memory - Easily the most helpful book I<sq>ve ever read."
            }, 
            "id": "d1n28bx"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, this seems like it<sq>ll be pretty helpful. How much programming/C++ experience did you have when you started reading it?</p>", 
                "question": "C/C++ Program Memory - Easily the most helpful book I<sq>ve ever read."
            }, 
            "id": "d1n0q5z"
        }, 
        {
            "body": {
                "answer": "<p>Anyone come a across a decent, lighter version of this material? I<sq>ll be moving from C++ to python in the near future and dont want to go through the 350 pages linked (though I will give it a go). A summary of the topics he goes through would be great if something like that exists</p>", 
                "question": "C/C++ Program Memory - Easily the most helpful book I<sq>ve ever read."
            }, 
            "id": "d1nnvb9"
        }, 
        {
            "body": {
                "answer": "<p>Gauchos represent</p>", 
                "question": "C/C++ Program Memory - Easily the most helpful book I<sq>ve ever read."
            }, 
            "id": "d1n8pst"
        }, 
        {
            "body": {
                "answer": "<p>Happy to answer questions etc here.</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> An Intro to Binary Search"
            }, 
            "id": "da1vgq0"
        }, 
        {
            "body": {
                "answer": "<p>I really liked your bubble sort tutorial it was the best thing I could find and I really feel that I could implement it into something I was working with if I needed to use one. However there is an algorithm structure which is one I have been trying to implement in one of my programs but I just can<sq>t seem to do it right. I am trying to make a recursive breadth first search algorithm. Which once has reached all the possible positions in its current level of depth it calls itself and goes to the next level of depth. I would really appreciate if you could help me with this. I know it<sq>s a lot to ask but was curious.</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> An Intro to Binary Search"
            }, 
            "id": "da201j9"
        }, 
        {
            "body": {
                "answer": "<p>> but that isn<sq>t a requirement of bubble sort<br><br>I think you meant <dq>binary search<dq>. ;)</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> An Intro to Binary Search"
            }, 
            "id": "da2b7kn"
        }, 
        {
            "body": {
                "answer": "<p>Hey dude. Thanks so much for putting your time and effort into this. <br><br>I struggle with Big O notation, and how to prove the complexity of an algorithm. <br><br>I<sq>d really appreciate you doing something in that if you have the time and enough people want it. Cheers! </p>", 
                "question": "Let<sq>s Learn Algorithms<colon> An Intro to Binary Search"
            }, 
            "id": "da2p4u9"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve chatted with Kalid, the guy who runs this website, and he<sq>s a genuinely nice person who wants to help others learn. I can<sq>t recommend this site enough <colon>)</p>", 
                "question": "BetterExplained - A fun website that explains programming concepts and tools in a very easy and intuitive way"
            }, 
            "id": "csi3ui6"
        }, 
        {
            "body": {
                "answer": "<p>I will eat your mistakes to hide them</p>", 
                "question": "BetterExplained - A fun website that explains programming concepts and tools in a very easy and intuitive way"
            }, 
            "id": "csidic3"
        }, 
        {
            "body": {
                "answer": "<p>Wow, that<sq>s a pretty cool site.  Thanks for sharing <colon>-)</p>", 
                "question": "BetterExplained - A fun website that explains programming concepts and tools in a very easy and intuitive way"
            }, 
            "id": "cshwl1j"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, thank you for sharing that!</p>", 
                "question": "BetterExplained - A fun website that explains programming concepts and tools in a very easy and intuitive way"
            }, 
            "id": "cshzqk0"
        }, 
        {
            "body": {
                "answer": "<p>Just a quick question, why do so many people (Khanacademy, Codeacademy, you, multiple posts as of late) recommend Python to starters? Is is just a simpler language, or are there alternative reasons like potential?</p>", 
                "question": "I Want to Teach You How to Program"
            }, 
            "id": "chcfso9"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I Want to Teach You How to Program"
            }, 
            "id": "chcj5xs"
        }, 
        {
            "body": {
                "answer": "<p>Thanks very much for doing this, looking forward to your lessons. Will you mainly be using v2.7 or can we follow along with v3.4?</p>", 
                "question": "I Want to Teach You How to Program"
            }, 
            "id": "chchs2g"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been putting off learning programming for 15 years. Will you be the one to break the spell?! I hope so - I<sq>ll give it a go. Thanks for doing this <colon>-)<br><br>Edit<colon> Completed that. Signed up for email updates. Awaiting next lesson!</p>", 
                "question": "I Want to Teach You How to Program"
            }, 
            "id": "chcgr8t"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I couldn<sq>t sleep so I cloned your Flappy Bird Clone in under 20 lines<colon> CrappierBird"
            }, 
            "id": "cfbsga1"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been one-upped! Seriously though, this is really cool. I<sq>m super excited that someone took my little project and made it into something really cool! I got a high score of 31 by the way (I got some skills from bug testing).</p>", 
                "question": "I couldn<sq>t sleep so I cloned your Flappy Bird Clone in under 20 lines<colon> CrappierBird"
            }, 
            "id": "cfbpihv"
        }, 
        {
            "body": {
                "answer": "<p>/r/tinycode would like this!</p>", 
                "question": "I couldn<sq>t sleep so I cloned your Flappy Bird Clone in under 20 lines<colon> CrappierBird"
            }, 
            "id": "cfbo1tt"
        }, 
        {
            "body": {
                "answer": "<p>This game is the spawn of satan!</p>", 
                "question": "I couldn<sq>t sleep so I cloned your Flappy Bird Clone in under 20 lines<colon> CrappierBird"
            }, 
            "id": "cfbq3ie"
        }, 
        {
            "body": {
                "answer": "<p>I know that was a high-level overview, but it might help to actually connect the dots a little more strongly. I recently had to teach myself basically all of this, except I was aimed a little more at a python-friendly stack.<br><br>For example, a complete beginner is already lost once you start mentioning there are different tools in different languages. Why?<br><br>Well, HTML is sort of the <dq>scaffold<dq> of the website. CSS allows you to make style sheets that make the HTML scaffold pretty. JS allows you to write scrips that help make the scaffold dynamic -- animations, sortable tables, etc. <br><br>The web framework allows you to host a website and show users different HTML scaffolds based on the requests sent to the framework via the HTTP protocol -- which in simple cases ends up looking like the URL that their browser asks your server to show them. In Flask, this is done via app.route(<sq>URL<sq>), which encloses a function that ultimately leads to a return statement with the HTML information (what their browser turns into the website).<br><br>Web frameworks are also often integrated with templating languages that help you pass dynamic content to your HTML scaffolds.<br><br>Libraries like jQuery and HTML/CSS/JS frameworks like Bootstrap essentially allow you to plug and play existing components, instead of having to program every common web element (as you mentioned, nav bars etc.) by hand.<br><br>(A lot of what I wrote is oversimplified and some may not be *strictly* true but I believe this to be generally accurate.)<br><br>For anyone who is a little more Python oriented, might I recommend<colon><br><br>* Flask for your web framework.<br>* http<colon>//startbootstrap.com/ for your HTML/CSS/JS boilerplate. You<sq>ll need to do a little work migrating things to flask<sq>s /static and /templates filestructure.<br>* jinja2 HTML scripting language (what Flask uses)<br>* Choose a database and learn it. I chose postgre but there are probably easier alternatives. In many cases, you<sq>ll need to install a database driver and a package for interacting with that database via python.</p>", 
                "question": "An ELI5 3-part series on frameworks libraries pre-processors CLIs and Build Tools"
            }, 
            "id": "d0wq06n"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "An ELI5 3-part series on frameworks libraries pre-processors CLIs and Build Tools"
            }, 
            "id": "d0wap7i"
        }, 
        {
            "body": {
                "answer": "<p>Great read even for some experienced developers without a lot of exposure to new technologies. I will research more about those tools/franeworks and figure out what side project I can work in to play with them. Thanks a lot for putting aside time to work on this. </p>", 
                "question": "An ELI5 3-part series on frameworks libraries pre-processors CLIs and Build Tools"
            }, 
            "id": "d0wnfng"
        }, 
        {
            "body": {
                "answer": "<p>Sounds awesome I will definitely check this out. Thanks for taking the time to write it</p>", 
                "question": "An ELI5 3-part series on frameworks libraries pre-processors CLIs and Build Tools"
            }, 
            "id": "d0w9mm1"
        }, 
        {
            "body": {
                "answer": "<p>What book do you recommend for learning basic computer science in #1?</p>", 
                "question": "I taught myself how to program from scratch. Here are my recommendations for newbies starting out."
            }, 
            "id": "cnr1l3k"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this... I studied computer science in high school so I<sq>ve a very basic understanding of the first point. Lately, I<sq>ve been playing around in Codeacademy (I know it has its faults) and have been really enjoying PHP. I couldn<sq>t get Javascript at all.<br><br>But I really like what you<sq>re saying. Thanks.</p>", 
                "question": "I taught myself how to program from scratch. Here are my recommendations for newbies starting out."
            }, 
            "id": "cnr3hxk"
        }, 
        {
            "body": {
                "answer": "<p>> 7) Learn to use Github. It<sq>s a bit daunting for newcomers, as the user interface for pushing/pulling/forking/etc feels like something out of the age of MS-DOS, but version control is absolutely invaluable for organizations, and it looks really good to have lots of contributions as well as your own open-source projects on there when it comes to job-time.<br><br>There is a rift between those who prefer Git Bash and those who prefer TortoiseGit.<br><br>If you find Bash a bit too much, just use TortoiseGit. Sometimes it<sq>s tough to find out how to do a few weird quirks that you can easily do with Bash - but it has a typical Windows GUI that is integrated easily with the explorer.</p>", 
                "question": "I taught myself how to program from scratch. Here are my recommendations for newbies starting out."
            }, 
            "id": "cnr5yr8"
        }, 
        {
            "body": {
                "answer": "<p>Be careful with #8 though. Do all the research you can before you ask a question. The people on Stack Overflow can be brutal.</p>", 
                "question": "I taught myself how to program from scratch. Here are my recommendations for newbies starting out."
            }, 
            "id": "cnrejxc"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome thank you. I wish they had more like php, c# and c++</p>", 
                "question": "Got 15 minutes at lunch and want to learn a new programming language? Interactive websites"
            }, 
            "id": "c9mnjbc"
        }, 
        {
            "body": {
                "answer": "<p>Nobody reads the wiki.<br><br>http<colon>//www.reddit.com/r/learnprogramming/wiki/online</p>", 
                "question": "Got 15 minutes at lunch and want to learn a new programming language? Interactive websites"
            }, 
            "id": "c9myc8u"
        }, 
        {
            "body": {
                "answer": "<p>Is there one for C++<br></p>", 
                "question": "Got 15 minutes at lunch and want to learn a new programming language? Interactive websites"
            }, 
            "id": "c9mpooe"
        }, 
        {
            "body": {
                "answer": "<p>[Go](http<colon>//tour.golang.org)</p>", 
                "question": "Got 15 minutes at lunch and want to learn a new programming language? Interactive websites"
            }, 
            "id": "c9mugd4"
        }, 
        {
            "body": {
                "answer": "<p>Just commenting that this will probably help others so thanks for the write up.  The first one, in particular, seems to be a common problem.  A lot of people have a hard time making the jump from basic syntax to actual program.  Good to hear you<sq>re making progress!</p>", 
                "question": "A few things I wish I knew when I started learning programming."
            }, 
            "id": "d3c0ccz"
        }, 
        {
            "body": {
                "answer": "<p>If you don<sq>t mind me asking, what is the curriculum he set out for you?</p>", 
                "question": "A few things I wish I knew when I started learning programming."
            }, 
            "id": "d3c5ajc"
        }, 
        {
            "body": {
                "answer": "<p>I needed to read this post exactly right now. I<sq>m currently a few months into learning JavaScript, and have just recently decided to maybe look at Ruby instead. Maybe my focus is wrong! Thank you for sharing. I<sq>ll be checking out all those books!</p>", 
                "question": "A few things I wish I knew when I started learning programming."
            }, 
            "id": "d3ccjsq"
        }, 
        {
            "body": {
                "answer": "<p>I often describe learning to program like learning to be an author.  Knowing English doesn<sq>t mean you know how to write a comedy or a mystery story. But it is a tool needed to do either. After you<sq>ve learned your tools you need to learn your trade. <br><br>Similarly,  knowing a language is just the first step towards delving into architecture and problem solving.  There is still much to be learned in terms of frameworks and libraries and architectural,  whether your novel is Web based,  system software,  server or whatever. </p>", 
                "question": "A few things I wish I knew when I started learning programming."
            }, 
            "id": "d3cky35"
        }, 
        {
            "body": {
                "answer": "<p>Part of learning is knowing what questions to ask. Professional programmers rely on Google too. I think a good approach is to first get something to work (even if that means using Google) and then ask why does it work that way.</p>", 
                "question": "Am I learning to Code? Or learning to Google?"
            }, 
            "id": "cxut8u5"
        }, 
        {
            "body": {
                "answer": "<p>Speaking from someone in the exact same boat as you, I feel like my Google searches have become more detailed. Slowly, but surely, I<sq>m taking baby steps to learning the basics. For example, instead of searching how to do a for loop in python, I<sq>m searching for documentation on a specific module. I hope that makes sense, the point is my Google searches have not remained static. </p>", 
                "question": "Am I learning to Code? Or learning to Google?"
            }, 
            "id": "cxusd8g"
        }, 
        {
            "body": {
                "answer": "<p>You will never be done googling. I have a masters degree in computer science and run a .NET development team and I Google stuff all day long. The only thing that changes is what you google.  It becomes more about high level concepts and not so much syntax,  but you will never know the entire library of the programming languages you use.<br><br>Programming is not an easything to pick up.  The more exposure you have to different explanations, the better. Do try to be sure you truly understand before moving on though. If you find yourself googling the same thing over and over, chances are that<sq>s something worth learning more in depth. </p>", 
                "question": "Am I learning to Code? Or learning to Google?"
            }, 
            "id": "cxuxjg3"
        }, 
        {
            "body": {
                "answer": "<p>Google wont tell you how to design a solution to your specific problem, it tells how to solve x thats part of your entire design.</p>", 
                "question": "Am I learning to Code? Or learning to Google?"
            }, 
            "id": "cxv1qrz"
        }, 
        {
            "body": {
                "answer": "<p>I would definitely be interested.</p>", 
                "question": "Anyone interested in learning how to use the command line?"
            }, 
            "id": "dbeahmc"
        }, 
        {
            "body": {
                "answer": "<p>* https<colon>//learnxinyminutes.com/docs/bash/<br>* https<colon>//learnxinyminutes.com/docs/powershell/</p>", 
                "question": "Anyone interested in learning how to use the command line?"
            }, 
            "id": "dbeurkn"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know your qualifications but, what would you do different than  all the other people who have put out literally hours of tutorials and videos on this subject already? Why would your content be worth watching over others? What<sq>s the hook?<br><br>Not trying to be a downer, but there are so many tutorials written by folks with a few months to a year of development experience, and they all basically cover the same few basic topics.</p>", 
                "question": "Anyone interested in learning how to use the command line?"
            }, 
            "id": "dbdz2m4"
        }, 
        {
            "body": {
                "answer": "<p>command line of what?, sorry the ignorance... if it<sq>s from linux (i use linux mint) i really would aprecciate it!</p>", 
                "question": "Anyone interested in learning how to use the command line?"
            }, 
            "id": "dbecz1b"
        }, 
        {
            "body": {
                "answer": "<p>As a non-beginner (Several programming classes in university, tutoring students, and several job interviews)<colon> Knowing how to write code is important, so you don<sq>t rely on an IDE and can answer questions in interviews. Drawing, writing, typing, reading, searching, and understanding are all important when learning how to program.</p>", 
                "question": "My biggest lesson as a beginner<colon> no amount of writing notes helps only writing code helps"
            }, 
            "id": "czayxpd"
        }, 
        {
            "body": {
                "answer": "<p>The only time I use pen and paper is to prepare for programming. I sketch the connections between objects that need to be created, draw an abstract version of the logic I have to implement...<br><br>Sometimes the preparation before coding makes the coding go much faster then just coding and hoping it will work and most of all, understand it.<br><br>Anyway<colon> good luck in the world of coding - Have fun! </p>", 
                "question": "My biggest lesson as a beginner<colon> no amount of writing notes helps only writing code helps"
            }, 
            "id": "czb293w"
        }, 
        {
            "body": {
                "answer": "<p>You might find writing notes more helpful when you come to some more abstract computer science theory. Like the principals of object oriented programming, classical inheritance, composition, MVC and other software architecture patterns, etc.<br><br>Not everything you learn will be code.</p>", 
                "question": "My biggest lesson as a beginner<colon> no amount of writing notes helps only writing code helps"
            }, 
            "id": "czb2pkc"
        }, 
        {
            "body": {
                "answer": "<p>>  I take notes through class, annotate notes, use different color pens, use sticky tags, flashcards, colored flashcards and pretty much rewrite the text book as I take notes through exercises. <br><br>My belief is that what blows all of that away is *self-testing*. I<sq>m trying to find a Nature article that showed it is far superior to other methods.<br><br>What you<sq>re doing by retyping a program from scratch is a form of self-testing, right in the environment where it matters. (I do agree with u/firecopy, though, that being able to write it out on a white board shows it is generalized knowledge even beyond that context, and has some value.)</p>", 
                "question": "My biggest lesson as a beginner<colon> no amount of writing notes helps only writing code helps"
            }, 
            "id": "czb12gf"
        }, 
        {
            "body": {
                "answer": "<p>I really appreciate the teacher here and what he is doing. <br><br>I do want to highlight that there was one person who named a course computer science for everyone. https<colon>//www.youtube.com/watch?v=Jlbs8ly6OKA<br><br>I want to help the instructor here. You may want to change the name of your course because [this person](http<colon>//blog.al.com/breaking/2014/05/carl_herold_facing_child_porno.html) may persuade people to stay away from you and your course.</p>", 
                "question": "School of Code<colon> start learning Computer Science from scratch"
            }, 
            "id": "cjt5g6f"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for doing this!</p>", 
                "question": "School of Code<colon> start learning Computer Science from scratch"
            }, 
            "id": "cjt8920"
        }, 
        {
            "body": {
                "answer": "<p>Is the class entirely free or do I have to pay? Just slightly confused with the whole <dq>money back guarantee<dq> and <dq>enroll free<dq> thing on the website and nothing was entirely specified in that regard. Would love to join the course, but kinda out in the budget department <colon>/</p>", 
                "question": "School of Code<colon> start learning Computer Science from scratch"
            }, 
            "id": "cjtemv0"
        }, 
        {
            "body": {
                "answer": "<p>I feel like <br>> everything that is covered in the first and second year of University courses<br><br>is a bit of an overstatement. I don<sq>t know what your reference university courses are but everything on that list except for parts of section two and 10 was covered in my first semester of Informatics in Erlangen, Germany. Seeing how you mention it covering one year in this post, I guess you either meant to write <dq>two semesters<dq> or forgot to change the number when you reduced the course<sq>s scope.<br><br>That aside, I<sq>m willing to give this a try simply to refresh some of it. It looks like you intend to create more courses like this one. I<sq>m looking forward to eventually trying them out, especially if they cover some more advanced material.</p>", 
                "question": "School of Code<colon> start learning Computer Science from scratch"
            }, 
            "id": "cjtaaef"
        }, 
        {
            "body": {
                "answer": "<p>Amen. A bit of a lost cause here though. Even the sidebar gives the impression that language knowledge == programming.</p>", 
                "question": "Learn concepts not languages."
            }, 
            "id": "conetmw"
        }, 
        {
            "body": {
                "answer": "<p>This is true, but knowing more languages allows you to more effectively and efficiently implement those concepts. I think both are important.</p>", 
                "question": "Learn concepts not languages."
            }, 
            "id": "confh63"
        }, 
        {
            "body": {
                "answer": "<p>You point out a problem concerning *focus* in this subreddit of which there is a lack of.  The entire subreddit is just a hodgepodge of questions from <dq>Am I doing this right?<dq> to <dq>How do I build an OS in *insert programming language here*?<dq>  <br><br>- Is /r/learnprogramming for the beginner, the intermediate, or the professional?  <br>- Should the subreddit be focusing on one programming language, any programming language, or no programming language(pseudocode)?  <br><br>.  <br>Subreddits already exist for specific programming languages.  In my opinion, a question on how to do a Merge Sort in C++ should be asked in /r/cpp or /r/cpp_questions.  A question about how to implement anything in a specific language should be asked in the subreddits that were created specifically for those programming languages.  Questions in /r/learnprogramming should be answered in pseudocode.  If a question cannot be asked in pseudocode and answered in pseudocode it probably belongs in another subreddit.  I think it would cut down on the SNR in this group.<br>.  <br>Of course, the *Posting Guidelines* suggests this subreddit is more about <dq>Where<sq>s the bug in my code?<dq> which has nothing to do with learning how to program. <colon>P</p>", 
                "question": "Learn concepts not languages."
            }, 
            "id": "conlykh"
        }, 
        {
            "body": {
                "answer": "<p>I feel like everyone who says this also knows a ton of languages.</p>", 
                "question": "Learn concepts not languages."
            }, 
            "id": "conoh2k"
        }, 
        {
            "body": {
                "answer": "<p>In theory, with out looking at the game, this sounds amazing. For me, learning while doing something with a goal, such as winning a game, is the way I learn the best. I<sq>ll definitely be trying your game out.<br><br>One thing I will say is I only know basic Javascript code and I would really appreciate a game that took you from extremely basic code, such as just moving one ship, but then ramped it up gradually until you were controlling a huge fleet of assorted units that could execute a bunch of different actions. </p>", 
                "question": "[Javascript] Learn by playing -- RTS game where you write AI code to control units"
            }, 
            "id": "c8yht2j"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome! Also, [Robocode](http<colon>//robocode.sourceforge.net/) is a similar project in Java for the ones who (like me) do not know any JavaScript.</p>", 
                "question": "[Javascript] Learn by playing -- RTS game where you write AI code to control units"
            }, 
            "id": "c8yhvhd"
        }, 
        {
            "body": {
                "answer": "<p>Would be awesome if you could ad a beginners stage where the goal is to simply get your ship to attack another and build up from there.</p>", 
                "question": "[Javascript] Learn by playing -- RTS game where you write AI code to control units"
            }, 
            "id": "c8yi021"
        }, 
        {
            "body": {
                "answer": "<p>Also if anyone is stuck when writing their AI (or having other problems), if you click the <dq>Save My Mod<dq> button at the top right it will make a copy of the game with your code and take you to that url.  If you post the link to that copy I<sq>d be happy to help debug and it would definitely be helpful to give me a feel for what is confusing / difficult.<br><br>Alternatively, if you have an AI you want to show off you can do the same and then when people go to your link they will see your AI in action.</p>", 
                "question": "[Javascript] Learn by playing -- RTS game where you write AI code to control units"
            }, 
            "id": "c8yhgig"
        }, 
        {
            "body": {
                "answer": "<p>Programming is kind of like casting a spell... You say the right words in the right way and BAM something happens.</p>", 
                "question": "A Fantasy Game Where Magic is Programming"
            }, 
            "id": "ch477u9"
        }, 
        {
            "body": {
                "answer": "<p>This reminds me of https<colon>//codecombat.com/</p>", 
                "question": "A Fantasy Game Where Magic is Programming"
            }, 
            "id": "ch490b5"
        }, 
        {
            "body": {
                "answer": "<p>I know this isn<sq>t /r/worldbuilding or anything, but I view my magic systems like programming. It<sq>s nice to know that someone else does too!</p>", 
                "question": "A Fantasy Game Where Magic is Programming"
            }, 
            "id": "ch475ek"
        }, 
        {
            "body": {
                "answer": "<p>This is really cool. I<sq>m 28 and I want to play this, so I hope you add some difficult puzzles to solve. </p>", 
                "question": "A Fantasy Game Where Magic is Programming"
            }, 
            "id": "ch47a1b"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s a name for this and I can<sq>t quite remember it. I had something similar for C#, but couldn<sq>t find it for C++. <colon>(<br><br>Edit<colon> thanks for the insight. I know Visual Studio has this and so do others, but I recall seeing something specifically like *this* but for C#. </p>", 
                "question": "Awesome tool for seeing how code runs!"
            }, 
            "id": "dcd7txx"
        }, 
        {
            "body": {
                "answer": "<p>Everyone here is recommending using debugger. I have used many debuggers before, and none showed pointers/references like this thing does.<br><br>I tried JavaScript version with following code<colon><br><br>    var obj = {name<colon> <sq>John<sq>};<br>    var obj_lst = [obj, obj, Object.assign({}, obj)];<br><br>    obj.name = <sq>Jane<sq>;<br>    obj_lst[0].name = <sq>Name1<sq>;<br>    obj_lst[1].name = <sq>Name2<sq>;<br>    obj_lst[2].name = <sq>Name3<sq>;<br><br>and it shows beautifully something that is very hard to grasp for people new to programming and usually hard to show in debuggers.</p>", 
                "question": "Awesome tool for seeing how code runs!"
            }, 
            "id": "dcdoguy"
        }, 
        {
            "body": {
                "answer": "<p>You can literally do this right inside of Visual Studio using step-over and step-into along with the debug feed. </p>", 
                "question": "Awesome tool for seeing how code runs!"
            }, 
            "id": "dcdj4h1"
        }, 
        {
            "body": {
                "answer": "<p>If you really want the story on how code runs, learn any compiled language and learn GDB or LLDB, or even better, there<sq>s a thing called a [Nios II Simulator](http<colon>//nios.stuffedcow.net/), which uses Altera<sq>s roll of the MIPS instruction set which lets you manipulate pretty much anything in a microprocessor with peripherals.   </p>", 
                "question": "Awesome tool for seeing how code runs!"
            }, 
            "id": "dcdem2u"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s actually pretty simple.<br><br>Reddit has an API. In fact, while you<sq>re in this thread, go to your URL and add `.json` at the end of it<colon> http<colon>//www.reddit.com/r/learnprogramming/comments/362ark/how_are_reddit_bots_created.json<br><br>Take this text and put it in some JSON visualizer<colon> http<colon>//jsonviewer.stack.hu/<br><br>You can navigate through the data to see everything about this thread and the comments in it, including mine! Bots will go through posts like this, find things they want to do, and take action with them. Then, those programs are ran infinitely on a server somewhere.<br><br>http<colon>//www.reddit.com/dev/api for more information.</p>", 
                "question": "How are reddit bots created?"
            }, 
            "id": "cra0uas"
        }, 
        {
            "body": {
                "answer": "<p>Another redditor did a great tutorial on this before - /u/Scotty_The_Hamster.<br><br>The video playlist is here<colon> https<colon>//www.youtube.com/watch?v=P4j6ViauHJ8&list=PLxi0CwktpgxYBPxVkr2mr5mYP4U2NRUI6</p>", 
                "question": "How are reddit bots created?"
            }, 
            "id": "cra416q"
        }, 
        {
            "body": {
                "answer": "<p>Lots of good answers.  A lot of people are saying <dq>it uses the reddit API<dq>, but I remember not really knowing what that meant when I first started out, so I<sq>ll explain.<br><br>When people say a website <dq>has an API<dq>, they *generally* are talking about an **HTTP JSON** API.  I<sq>ll very briefly explain what this means.  HTTP is the protocol of the web.  It<sq>s just a simple set of rules for how clients (like your browser, or your reddit bot) communicate with servers (like reddit.com or the reddit API).  <br><br>When you type `reddit.com` in your browser and hit enter, your browser actually makes an *HTTP request* to reddit.com, basically saying, <dq>hey, can I get the front page?<dq>.  And reddit responds with the page, including all of the styling, links, structure, etc.  <br><br>But if a website has an HTTP API, they let you do *way more* than just get the pages of the site.  Basically, they allow you to make requests to do just about anything!  [Here<sq>s an endpoint you can make an HTTP request to that will vote on a comment or post!](http<colon>//www.reddit.com/dev/api#POST_api_vote).  There<sq>s also ones that list comments, list users, submit posts.  And it<sq>s all pretty easy to do.<br><br>So, people use programming languages to make these requests and reddit replies back with the raw data (or if the request was meant to *do* something and not get data, reddit will just reply saying <dq>OK! I did that thing you asked for<dq>), which is all easy for the program to understand.  You can then add some pretty complicated logic into these bots to make them do just about anything you could do with a browser, and more.<br><br>Conveniently, there are libraries that <dq>wrap up<dq> the reddit API so you don<sq>t have to deal with the specifics of HTTP.  The most popular one for reddit is [PRAW](https<colon>//github.com/praw-dev/praw) which stands for <dq>python reddit API wrapper<dq> (fitting, right?).<br><br>Hopefully that clears up what people are talking about when they say <dq>just use the API!<dq>.  It<sq>s just another way of asking a website for some data.</p>", 
                "question": "How are reddit bots created?"
            }, 
            "id": "craohf5"
        }, 
        {
            "body": {
                "answer": "<p>They use the reddit API, which is pretty well documented. Python is one of the more common languages, though you can get it done with nearly any language of your choice.<br><br>It simply checked new posts, then responds to the ones that meet its criteria. So when the wikibot sees that a post contains a Wikipedia link, it fetches the article summary and responds.</p>", 
                "question": "How are reddit bots created?"
            }, 
            "id": "cra0rsy"
        }, 
        {
            "body": {
                "answer": "<p>I am a novice programmer and I imagine this site will be very useful, so thank you. <br><br>After a few minutes of browsing, I can tell you as a broke college student that I highly value free resources. Perhaps have <dq>free<dq> as a tag? Also, perhaps have an option to click on a certain framework or language<sq>s tags to view everything in that category? <br><br>Just an example, I searched Ruby on Rails and was taken [here](http<colon>//techether.com/subjects/1-ruby-on-rails). If I clicked the <dq>Web Applications<dq> tag then maybe I would be taken to all web applications that have content on the site.<br><br>I also think a <dq>sort by<dq> feature within each framework/language would be useful, perhaps to organize resources by add date, rating, free/price, etc.<br><br>Maybe some plugs to social media, as well? I<sq>m not into that stuff but you see it alot <colon>p<br><br>I don<sq>t have experience with this sort of thing but that<sq>s what I recommend! It looks absolutely gorgeous, by the way. Congrats!<br></p>", 
                "question": "Here<sq>s a website I made to keep track of learning material for programming languages and frameworks."
            }, 
            "id": "cpfv7sg"
        }, 
        {
            "body": {
                "answer": "<p>Is there any chance of letting users add multiple courses to their page? </p>", 
                "question": "Here<sq>s a website I made to keep track of learning material for programming languages and frameworks."
            }, 
            "id": "cpfyqta"
        }, 
        {
            "body": {
                "answer": "<p>Very cool! Thank you for this. Curious, what language did you write this in?</p>", 
                "question": "Here<sq>s a website I made to keep track of learning material for programming languages and frameworks."
            }, 
            "id": "cpg0hj2"
        }, 
        {
            "body": {
                "answer": "<p>Site is great, but on small desktop screen it doesn<sq>t look very nice.<br>http<colon>//i.imgur.com/z6UMn9D.png<br>Firefox 36, Win 7, 1024*600.</p>", 
                "question": "Here<sq>s a website I made to keep track of learning material for programming languages and frameworks."
            }, 
            "id": "cpgeqh5"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//git-scm.com/  <br>http<colon>//www.vogella.com/tutorials/Git/article.html  <br>http<colon>//rogerdudler.github.io/git-guide/  <br>feel free to add more in the comments and I<sq>ll update this one<br><br></p>", 
                "question": "C / C++ / Java / Python / PHP / Ruby / Haskell / Node.js ??? No matter the language start learning version control!"
            }, 
            "id": "cpx22mz"
        }, 
        {
            "body": {
                "answer": "<p>I really love this git tutorial<colon><br><br>https<colon>//www.atlassian.com/git/tutorials/</p>", 
                "question": "C / C++ / Java / Python / PHP / Ruby / Haskell / Node.js ??? No matter the language start learning version control!"
            }, 
            "id": "cpx67lm"
        }, 
        {
            "body": {
                "answer": "<p>why</p>", 
                "question": "C / C++ / Java / Python / PHP / Ruby / Haskell / Node.js ??? No matter the language start learning version control!"
            }, 
            "id": "cpx73z7"
        }, 
        {
            "body": {
                "answer": "<p>Also, leave descriptive notes with what changed in each version. When working with others, it blows my mind how many times I<sq>ve come across a version with little to no version history notes and I have to do multiple compares to find out what<sq>s different. Not everyone likes to put comments in their code, so at least put it in each version history.</p>", 
                "question": "C / C++ / Java / Python / PHP / Ruby / Haskell / Node.js ??? No matter the language start learning version control!"
            }, 
            "id": "cpxa1zg"
        }, 
        {
            "body": {
                "answer": "<p>Reality check<colon> of the top ten million websites by traffic, [only 0.4<percent> are using Angular and 0.2<percent> are using Backbone](https<colon>//w3techs.com/technologies/history_overview/javascript_library/all).<br><br>JS has a real hype problem.  If you read blogs or twitter or news articles or whatever, you might be mistaken for getting the impression that you have to learn React or Vue.js or Angular 2 or Polymer or whatever the latest hype is about.  In actuality, you almost certainly don<sq>t need any frameworks at all for writing most simple to moderate-complexity web sites.  Sure, jQuery might help by making it easier to do common tasks, but jQuery isn<sq>t a framework, it<sq>s just a helper library, and these days you can do a lot of the things that jQuery used to be used for in more straightforward ways (e.g. using CSS transitions instead of animating with JavaScript.)<br><br>All of these frameworks are really designed for complex sites that have a lot of functionality (think gmail.)  You are almost certainly not doing anything nearly that complicated.</p>", 
                "question": "The insane amount of frameworks and packages in web development is freaking me out with deciding to jump in or not."
            }, 
            "id": "dfwu1nk"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re talking about a known issue<colon> JavaScript fatigue.<br><br>If you want to be a good web developer, get really good at **plain, vanilla** JavaScript. And I mean ***really fucking good***. Learn eloquent JS. <br><br>You don<sq>t need jQuery, everything you do in jQuery you can do in vanilla JS.<br><br>If you learn to do everything in JS that you can do in jQuery, you can easily pick up whatever library or framework your employer will be using.<br><br>If you<sq>re just learning web development, don<sq>t worry so much about server side technology. You can learn Ruby on Rails in less than a day and have all you need for a great, portfolio worthy Single Page App quickly (you don<sq>t hear about Rails that much anymore because people aren<sq>t building a shit ton of new stuff for because it<sq>s already a solid language). Angular and React are far from perfect. They<sq>re just unique tools in the ever expanding toolbox for web developers, but you definitely don<sq>t *need* these assets to create great web apps. <br><br>All you need is HTML5, JavaScript, CSS, and a server-side stack (PHP & MySQL or Node & MongoDB for example).<br><br>All that other stuff is just extra bullshit. None of them are a silver bullet to being a good programmer or developer. But oh boy, will the bloggers and guppies from San Fran proclaim each iteration of Vue or React as the second coming of Christ for Web Development.</p>", 
                "question": "The insane amount of frameworks and packages in web development is freaking me out with deciding to jump in or not."
            }, 
            "id": "dfx35p8"
        }, 
        {
            "body": {
                "answer": "<p>[Happiness is a boring stack](http<colon>//www.expatsoftware.com/Articles/happiness-is-a-boring-stack.html), chasing the new hotness of web development is an endless cycle since the trendy frameworks change every 1-2 years.  <br><br>You<sq>re unlikely to run into any of the problems front end frameworks are built to solve when you<sq>re just starting out.  <br><br>My advice is to pick a backend, and one (and only one) frontend framework if you know you will *need* it in the future. Otherwise a library like jquery will fit your needs until you know enough to know you need more. Stick with these choices and build something using the time you saved that would have otherwise been wasted reading up on some new javascript trend.</p>", 
                "question": "The insane amount of frameworks and packages in web development is freaking me out with deciding to jump in or not."
            }, 
            "id": "dfwu5ys"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t panic. You don<sq>t have to learn all of those, but you might want to learn some of them. It<sq>s no different on the desktop, where there are competing *operating systems*, with different APIs, hundreds of competing languages and frameworks. On the web at least you have some high level primitives that are guaranteed to be there (even if they kinda suck). On the desktop, the bedrock is machine language.<br><br>Definitely learn HTML and CSS. Then learn LESS or SASS, which are similar languages that compile to CSS but allow for programmer-friendly composition (I<sq>ll go ahead and recommend SASS).  You want a deep dive on CSS, and can do a shallow dive on LESS/SASS.<br><br>Definitely learn Javascript well. Deep dive. The [Law of Leaky Abstractions](https<colon>//en.wikipedia.org/wiki/Leaky_abstraction) means no matter what you use on top of this, you<sq>ll want to understanding what lies beneath well.<br><br>This involves learning a bit about the browser DOM and how it works. This is the intersection between HTML (describes a page structure) and Javascript (can manipulate that structure once it<sq>s instantiated).<br><br>Learn jQuery. It<sq>s basically a library for querying and manipulating the DOM, and it<sq>s often built-in or assumed-to-be-present in some of the higher level frameworks.<br><br>That<sq>ll keep you busy for a while.<br><br>If you then want to build really dynamic websites, especially ones that behave more like desktop apps (aka single-page applications, like gmail), then I<sq>d look at React or Angular 2 (aka Angular 4, which is really just angular 2.4, but they have a retarded versioning scheme).  You should try doing it via Javascript (with jQuery) first (google <dq>ajax<dq>) to see what a pain in the butt it is, so you understand the problem these frameworks exist to solve.<br><br>I<sq>d also recommend looking at higher level languages for the web. We use Typescript here, which is a superset of Javascript that adds type annotation. If you haven<sq>t used a strongly typed language, that<sq>ll be a wierd learning curve probably (and you might be wondering <dq>Why?<dq>), but typed languages are the standard on the desktop and most industrial strength code. It lets you describe to the computer what kinds of operations should be allowed on your objects and functions so it can catch errors for you.<br><br>Basically, you want to start at the bottom. Don<sq>t focus on the big frameworks. They<sq>re there to solve problems you don<sq>t even know about yet. You want to understand those problems first, so you get the rationale for the libraries, which makes it easier to understand them and gives you proper motivation for learning them.<br><br><br><br></p>", 
                "question": "The insane amount of frameworks and packages in web development is freaking me out with deciding to jump in or not."
            }, 
            "id": "dfwz0ul"
        }, 
        {
            "body": {
                "answer": "<p>People look at me like I<sq>m taking crazy pills (I am) when I say this. Its really hard to find other like minded friends, I haven<sq>t found a single one. No one wants to go to hackathons or just grab a six pack and build something together. IDK thats probably lame shit but this is what I do for fun.<br><br>Also, kind of related, its fucking useful. Literarily today it saved my ass, my group member said he knew how to make graphs in excel and we waited until until that last day to make them. Turns out he didn<sq>t know a single thing about it, saying he had a different version. I didn<sq>t know excel either so I wrote 6 python scripts and made all the graphs. <br></p>", 
                "question": "Programming is fun."
            }, 
            "id": "d7ot04h"
        }, 
        {
            "body": {
                "answer": "<p>A lot of people don<sq>t understand how programming can be creative. You have clear vs unreadable code, terse vs verbose code, resilient vs fragile code, wasteful vs efficient code... to me it<sq>s like watching a painter or sculptor at work, starting with a blank foundation and gradually shaping it into something awesome. I feel that same sense of satisfaction, as a creative outlet. </p>", 
                "question": "Programming is fun."
            }, 
            "id": "d7otlyw"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s like working on a puzzle. It can be frustrating when things to work and exhilarating when things do.<br><br>As for programming as a job, that depends on where you work.</p>", 
                "question": "Programming is fun."
            }, 
            "id": "d7our16"
        }, 
        {
            "body": {
                "answer": "<p>Solving problems is fun.<br><br>Trying to work with huge undocumented APIs, processes that fail often, etc. is not.</p>", 
                "question": "Programming is fun."
            }, 
            "id": "d7oz03o"
        }, 
        {
            "body": {
                "answer": "<p>I strongly disagree. Jumping head first in to technical depths of a foreign language you have no understanding of is the best way for you to give up. Follow the tutorials and when you<sq>re done with them then you can start experimenting and creating, but you need to do those tutorials in order to learn the basic syntax of the language as well as understand the concept of programming.</p>", 
                "question": "my serious answer to <sq>How to learn programming<sq>"
            }, 
            "id": "cst8hba"
        }, 
        {
            "body": {
                "answer": "<p>Why JavaScript?<br><br>I<sq>m someone who has studied cs and have always wondered how a front end language for web development represents cs.<br><br>Isn<sq>t computer science based on structure, organization and understanding of software and computers in terms of binary etc?</p>", 
                "question": "my serious answer to <sq>How to learn programming<sq>"
            }, 
            "id": "cst909v"
        }, 
        {
            "body": {
                "answer": "<p>This is just wrong. This is how you learn a new language/lib/api/etc when you already KNOW how to code.<br><br>Now, since maybe you are not really answering <dq>how to learn to code<dq> you are actually answering <dq>what is the best way to find out what CS is like?<dq> So I would modify what you said in this way<colon><br><br>CS IS exactly like what you describe, once you are a seasoned professional.  But learning to be a professional is NOT like that.  NOt at all.  Being a professional in SE is like being a carpenter, you have your tool bag full of tools, and you know how to use those tools to solve build things.  You have a wide enough array of tools that you can build anything.  Once you reach that point, then when you get a new tool, the best way to learn how to use that tool IS to do what you describe.  But it is not the best way to learn how to use all the tools in your toolbag.  <br><br>In general this is a problem with self taught coders vs a CS degree. Yes a self taught coder can be a good programmer as long as you stay in his domain.  (s)He can even be an expert in that domain, but there are a lot of things that (s)he<sq>ll not be competent at, because they never had to be, unlike someone with a degree.  Self taught goes depth first (which is what you are describing) but a degree based program is a breadth first approach, and is far far better in my opinion. (and I<sq>ve got more than 30 years in this game and have seen it all)</p>", 
                "question": "my serious answer to <sq>How to learn programming<sq>"
            }, 
            "id": "cstaouh"
        }, 
        {
            "body": {
                "answer": "<p>What if you don<sq>t know what questions to ask?<br><br>For example<colon> I have a problem and I thought of a solution, I guarantee this solution already exists but I don<sq>t care as I want to do it for myself. <br><br>I want to make an app that lets me keep a record of numbers everyday and also allows the possibility of making a note for that day. <br><br>I<sq>ve watched some tutorials and I bought the book Head First into Java. I<sq>ve spent some time reading it but I can<sq>t help psyching myself out. <br><br>I have the idea, I just have no idea the first step to take or the <dq>right<dq> questions to ask?</p>", 
                "question": "my serious answer to <sq>How to learn programming<sq>"
            }, 
            "id": "cst8roc"
        }, 
        {
            "body": {
                "answer": "<p>Lead Developer here, completely self taught. No degree, no formal education in CS. In my opinion..  <br><br>* It<sq>s more about thinking than it is about slinging code.  <br>* It<sq>s 10 x more about learning and research than it is about syntax/frameworks. - if you do Coursera<sq>s Learning How To Learn you<sq>ll save yourself years.<br>* Little and often is more effective than single big sessions. <br>* Persistence > Knowledge.<br>* Understand how your subconscious mind works and how you can lean on it to solve problems.<br>* Get plenty of sleep. </p>", 
                "question": "What are some goals a beginning Self-Taught Developer should have?"
            }, 
            "id": "d60qhv5"
        }, 
        {
            "body": {
                "answer": "<p>Think of  a piece of software you could use and then build it. Seriously. However dumb it is. I<sq>ve created stupid shit that would rename files, tag mp3s,  I<sq>ve even created a program that did nothing more than look for a Windows handle give it focus and press enter. <br><br>Anything you make that has value to you gives you good real life experience. <br><br>And then look back at the code every 6 months to see if you can spot the bad code! </p>", 
                "question": "What are some goals a beginning Self-Taught Developer should have?"
            }, 
            "id": "d60tyrp"
        }, 
        {
            "body": {
                "answer": "<p>if you want to work in this field<colon><br><br>* understand the business value<br><br>you cant always write the fanciest code just because you want to. Often it has to be practical<colon> cheap, short timeframe and maintainable for many years to come by someone other than you</p>", 
                "question": "What are some goals a beginning Self-Taught Developer should have?"
            }, 
            "id": "d60q5jq"
        }, 
        {
            "body": {
                "answer": "<p>Being able to make <sq>things<sq>. It doesn<sq>t matter if they are super technical or anything just being able to apply the theory or stuff you<sq>ve read will cement it in your head and you will find that your problems are no longer in writing the actual code but to visualise the systems you create and bringing them into being. As a CS uni student the thing I see most often are students who study programming theory a lot but can<sq>t contribute much in actual projects or what not. Also its nice to look back on the projects that boggled your mind a year ago and to have a nice laugh at your former self</p>", 
                "question": "What are some goals a beginning Self-Taught Developer should have?"
            }, 
            "id": "d60ui98"
        }, 
        {
            "body": {
                "answer": "<p>You can overcome this by building challenging projects. Reading about languages, APIs, etc. is not enough to learn programming<colon> you have to write programs. Don<sq>t worry about the project not being innovative or unique, that<sq>s not the goal. If you<sq>re looking for ideas there are tons in the FAQ.<br><br>If, despite that, you<sq>re still not interested in writing programs take a step back and ask yourself why you<sq>re interested in learning how to program. That may direct you to a project you are interested in.</p>", 
                "question": "Does anyone else really like learning new programming languages or concepts but when it comes to actually buildimg a project either don<sq>t know where to start or just don<sq>t have clear enough of an idea for the project?"
            }, 
            "id": "dg60951"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say you should probably find a project that you can do in any language (though it may not always be appropriate for the language you<sq>re looking at).  For example, how might you build a battleship game (Battleship consists of a board with ships of varying lengths, placed in hidden locations.  You call out coordinates, and your opponent tells you if you hit one of the battleships.  Each battleship has some number of pegs, say, 3, 4, or 5.  When all 3 pegs have been hit, the battleship is sunk).<br><br>I think it<sq>s useful to keep the project fairly simple so you have motivation to complete it, and then by using the same project, you can see how the language differs in solution.<br><br>I think most people feel they have to have the perfect project that is really interesting, but then they never find anything that they like.  And it<sq>s also possible that the roadblocks you encounter when trying to solve the problem makes it seem <dq>boring<dq> and thus you lose interest (because you<sq>re not making enough progress).</p>", 
                "question": "Does anyone else really like learning new programming languages or concepts but when it comes to actually buildimg a project either don<sq>t know where to start or just don<sq>t have clear enough of an idea for the project?"
            }, 
            "id": "dg6boi8"
        }, 
        {
            "body": {
                "answer": "<p>I have experienced that at first hand while I was learning how to program. You<sq>re sort of in a middle ground<colon> already know the syntax and libraries, but when it comes to building something from scratch you<sq>re kinda lost. I am currently working on this problem by trying to create programming projects and step-by-step explanations to them. Check out [this Reddit thread](https<colon>//www.reddit.com/r/learnprogramming/comments/62r1wr/i_would_like_to_create_programming_projects_and/)  where I delineated idea behind my project. </p>", 
                "question": "Does anyone else really like learning new programming languages or concepts but when it comes to actually buildimg a project either don<sq>t know where to start or just don<sq>t have clear enough of an idea for the project?"
            }, 
            "id": "dg6eukg"
        }, 
        {
            "body": {
                "answer": "<p>I think this is the difference between learning a language/learning how to code, and learning software programming/design/engineering. You know what the tools at your disposal do, but there are still two things you need to learn<colon> <br><br>One, learn how to use your tools to solve real world problems; learn how to combine them, and how use them in more complex ways to achieve things you can<sq>t achieve with just one tool. I am being vague on purpose here as a <dq>tool<dq> might be anything in a language, from a keyword to an API.<br><br>The other thing, which I think is the most critical for any learner (me, for example) to progress, is to actually design a piece of software. This is the essential part - sit down and think about what you need to do, then break down each part you need to do to achieve it. I guess the ideal logical conclusion of this would be to end up with the description of individual functions, but that probably doesn<sq>t happen a lot in the real world. But what matters is to take a step back, design the actual logic of your program and everything it needs to do, then translate that into code (this is where knowing your tools helps).<br><br>A lot of people here are self-learners, and I think that even people with a degree vary greatly on what they have learned about software design. If you are learning from a MOOC, a book, a youtube channel, try and actively pursue learning about design and creating a project on your own, from scratch. Every tiny project you complete is a stepping stone to a bigger one.<br><br>Don<sq>t forget the most important thing<colon> actually do it. Accept that it won<sq>t be perfect and do it. Ever used software that could use improvements or had bugs? Yeah, if multi-billion dollar companies are doing it, you are allowed to do it too - it probably turns out that way for real reasons. Make compromises to your initial idea if you need to, but not just because you are feeling lazy. Finish something, then move to the next thing.<br><br></p>", 
                "question": "Does anyone else really like learning new programming languages or concepts but when it comes to actually buildimg a project either don<sq>t know where to start or just don<sq>t have clear enough of an idea for the project?"
            }, 
            "id": "dg6kixv"
        }, 
        {
            "body": {
                "answer": "<p>This is an amazing thing you<sq>re doing. I personally really appreciate it</p>", 
                "question": "Learn to code by being coached by an experienced developer for free"
            }, 
            "id": "citn7qa"
        }, 
        {
            "body": {
                "answer": "<p>I am a bit hesitant to sign up ^^ I am kind afraid of looking stupid to the coach/mentor since I don<sq>t have the math background that most schooled programmers do.</p>", 
                "question": "Learn to code by being coached by an experienced developer for free"
            }, 
            "id": "ciu0a8p"
        }, 
        {
            "body": {
                "answer": "<p>So how many experienced developers do you have now? I checked your site and frankly, as an experienced developer, I can<sq>t understand how you<sq>d manage to get people to <sq>coach<sq> a single person for 30 minutes. I<sq>d be surpised if demand would not be much higher than supply.</p>", 
                "question": "Learn to code by being coached by an experienced developer for free"
            }, 
            "id": "citplhu"
        }, 
        {
            "body": {
                "answer": "<p>How do you make money?</p>", 
                "question": "Learn to code by being coached by an experienced developer for free"
            }, 
            "id": "citu222"
        }, 
        {
            "body": {
                "answer": "<p>Anyone want to form a study group sort of situation for CS291?<br><br><br>**EDIT<colon>** Whoa, that escalated quickly. I<sq>ve PM<sq>d everyone that is interested with information about how to get involved so we can get the ball rolling!</p>", 
                "question": "Here<sq>s a list of 24 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2013)"
            }, 
            "id": "c9vlcwl"
        }, 
        {
            "body": {
                "answer": "<p>Beginner - Building a Basic Website course is full and not accepting new registrations.<br><br>fyi</p>", 
                "question": "Here<sq>s a list of 24 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2013)"
            }, 
            "id": "c9vo7m8"
        }, 
        {
            "body": {
                "answer": "<p>Signed up for CS 101 and Introduction to Data Science last week. Started CS 101<colon> Building a Search Engine this morning because it focuses on Python and it will be my first language that I am learning. </p>", 
                "question": "Here<sq>s a list of 24 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2013)"
            }, 
            "id": "c9vm4zi"
        }, 
        {
            "body": {
                "answer": "<p>posting so i can find this thread again<br></p>", 
                "question": "Here<sq>s a list of 24 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (May 2013)"
            }, 
            "id": "c9vo75e"
        }, 
        {
            "body": {
                "answer": "<p>**I Want to learn about<colon>** Google Maps API and intermediate JavaScript<br><br>**So I should look at<colon>** [A 4 part video tutorial](https<colon>//www.youtube.com/watch?v=lVhDux1vmIU) and [all the code](https<colon>//github.com/pauldessert/SeedTip)<br><br>**Short Description<colon>** The Google Maps API is an overwhelming beast. In this four part tutorial you<sq>ll learn the basics by coding a sample project. You<sq>ll learn how to pull data from an external source (USDA API) and plot the locations on a map. A sample of the project we<sq>ll build it located at www.seedtip.com</p>", 
                "question": "<dq>If you want to learn about X you should look at Y on github<dq>"
            }, 
            "id": "cy0q41r"
        }, 
        {
            "body": {
                "answer": "<p>**I Want to learn about**<colon> Go and/or Distributed Systems  (Mostly Distributed Systems)  <br>**So I should look at**<colon> [IPFS](https<colon>//github.com/ipfs/go-ipfs)  <br>**Short Description**<colon> IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high throughput content-addressed block storage model, with content-addressed hyperlinks. This forms a generalized Merkle DAG, a data structure upon which one can build versioned file systems, blockchains, and even a Permanent Web. IPFS combines a distributed hashtable, an incentivized block exchange, and a self-certifying namespace. IPFS has no single point of failure, and nodes do not need to trust each other.<br><br>What is IPFS? https<colon>//www.youtube.com/watch?v=skMTdSEaCtA<br><br>Original Paper<colon> https<colon>//github.com/ipfs/ipfs/blob/master/papers/ipfs-cap2pfs/ipfs-p2p-file-system.pdf<br><br>There are also lots of other languages and repos<colon> https<colon>//github.com/ipfs</p>", 
                "question": "<dq>If you want to learn about X you should look at Y on github<dq>"
            }, 
            "id": "cy0nbxq"
        }, 
        {
            "body": {
                "answer": "<p>**I want to learn about<colon>** <dq>Artificial Life<dq> and organic simulations<br><br>**So I should look at<colon>** [The Nature of Code](https<colon>//github.com/shiffman/The-Nature-of-Code)<br><br>**Short description<colon>** The Nature of Code is a book *and* video series by Daniel Shiffman, where he demonstrates at a fairly beginner level how organic and natural processes can be modeled with programming. Things like Fractals, oscillation, indeterminacy, chaos, cellular automata (such as the famous Game of Life) etc. He is using Processing, but the ideas are universal and Processing itself is very readable, especially if you know Java or anything C-based. Also some interesting ideas for generating random numbers in there.<br><br>I emphasize <dq>Artificial Life<dq> because it<sq>s a specific term that<sq>s distinct from Artificial Intelligence; it<sq>s not about cognition so much as a bottom-up method of creating and connecting systems that might imitate life.<br><br><br>Cellular Automata playlist from the video series (my favourite)<colon> https<colon>//www.youtube.com/watch?v=DKGodqDs9sA&list=PLRqwX-V7Uu6YrWXvEQFOGbCt6cX83Xunm</p>", 
                "question": "<dq>If you want to learn about X you should look at Y on github<dq>"
            }, 
            "id": "cy0skno"
        }, 
        {
            "body": {
                "answer": "<p>All the comments are about Sublime vs atom, nobody has posted following OP<sq>s format.</p>", 
                "question": "<dq>If you want to learn about X you should look at Y on github<dq>"
            }, 
            "id": "cy0l0pv"
        }, 
        {
            "body": {
                "answer": "<p>Hey I just got it... The high numbers rise, like bubbles, to the top.<br><br>Hence, Bubble sort! Nice. Good blog man, Bookmarking that.</p>", 
                "question": "Let<sq>s Learn Algorithms - Bubble Sort"
            }, 
            "id": "d8zd21s"
        }, 
        {
            "body": {
                "answer": "<p>[A helpful visualization](https<colon>//www.youtube.com/watch?v=lyZQPjUT5B4)</p>", 
                "question": "Let<sq>s Learn Algorithms - Bubble Sort"
            }, 
            "id": "d8zeih4"
        }, 
        {
            "body": {
                "answer": "<p>The actual implementation article is taking longer than expected, but I promise it is in the works and will be published tomorrow at the latest. Sorry about the delay!</p>", 
                "question": "Let<sq>s Learn Algorithms - Bubble Sort"
            }, 
            "id": "d8zd40x"
        }, 
        {
            "body": {
                "answer": "<p>Another visualization in a lecture series about Discrete Math<colon><br><br>https<colon>//www.youtube.com/watch?v=J_vXRNMu1yQ&list=PL3o9D4Dl2FJ9q0_gtFXPh_H4POI5dK0yG&index=4#t=12m27s<br><br>~14 min starts the bubble sort.  The time before is interesting also so I included it.</p>", 
                "question": "Let<sq>s Learn Algorithms - Bubble Sort"
            }, 
            "id": "d8zol2x"
        }, 
        {
            "body": {
                "answer": "<p>Just yesterday I bookmarked [HackerEarth](https<colon>//www.hackerearth.com/), [HackerRank](https<colon>//www.hackerrank.com/) and [SPOJ](http<colon>//www.spoj.com/).</p>", 
                "question": "For those that are looking for programming challenges to train"
            }, 
            "id": "d7m1tfd"
        }, 
        {
            "body": {
                "answer": "<p>I am listing the bookmarks I have for this category<colon>  <br><br>[1.Coding Game](https<colon>//www.codingame.com/start)  <br>[2,Hacker Earth](https<colon>//www.hackerearth.com/challenges/)  <br>[3.Hackerrank](https<colon>//www.hackerrank.com/)  <br>[4.Techgig](http<colon>//www.techgig.com/login.php)  <br>[5.Topcoder](https<colon>//www.topcoder.com/my-dashboard)  <br>[6.SPOJ](http<colon>//www.spoj.com/)  <br>[7.CodeVal](https<colon>//www.codeeval.com/)  <br>[8.Codeforces](http<colon>//codeforces.com/)  <br>[9.Codechef](https<colon>//www.codechef.com/)  <br>[10.ACM ICIC](https<colon>//icpc.baylor.edu/)  <br>[11.URI online judge](https<colon>//www.urionlinejudge.com.br/judge/en/login)</p>", 
                "question": "For those that are looking for programming challenges to train"
            }, 
            "id": "d7m5z5k"
        }, 
        {
            "body": {
                "answer": "<p>also http<colon>//reddit.com/r/dailyprogrammer</p>", 
                "question": "For those that are looking for programming challenges to train"
            }, 
            "id": "d7m3xkt"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.codewars.com and https<colon>//checkio.org (for Python and JavaScript) are also really good.</p>", 
                "question": "For those that are looking for programming challenges to train"
            }, 
            "id": "d7mantq"
        }, 
        {
            "body": {
                "answer": "<p>I left this community because of toxicity from a few bad apples that really got out of hand.  <br><br>TO ANYONE LEARNING TO PROGRAM, <br>Please do your own reading, every language has documentation and there are vast amounts of information out there.  This community is a social club where the members who talk the loudest and the most are hailed as the best, regardless of the information they provide to new programmers<br></p>", 
                "question": "We are +630 friendly learner students and pro developers who are ready to help you when you get stuck. Come join our chat!"
            }, 
            "id": "d183ae9"
        }, 
        {
            "body": {
                "answer": "<p>Hey, I<sq>ll be sure to keep in touch. Need the help. Thanks for doing this!</p>", 
                "question": "We are +630 friendly learner students and pro developers who are ready to help you when you get stuck. Come join our chat!"
            }, 
            "id": "d180e21"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "We are +630 friendly learner students and pro developers who are ready to help you when you get stuck. Come join our chat!"
            }, 
            "id": "d180ysx"
        }, 
        {
            "body": {
                "answer": "<p>Related annoyance<colon> I don<sq>t like the incompatibility of slackchat, gitter and whatever else, I liked it better when we only had IRC. If I don<sq>t want to have 3 chrome-tabs and a chatclient open, I have to chose which to use. For example, freecodecamp uses gitter, you slack.<br><br>Is there any way to combine those, maybe with a cross-platform client? Really would like having all rooms in one place.</p>", 
                "question": "We are +630 friendly learner students and pro developers who are ready to help you when you get stuck. Come join our chat!"
            }, 
            "id": "d1842ph"
        }, 
        {
            "body": {
                "answer": "<p>There should be only 3 types of people on this subreddit IMO. 1) people who need help or direction. 2) People wanting to help others and grow a better community 3) The curious. I<sq>ll admit there are some things posted that are ridiculous but I am pretty sure we have a back button for a reason. Elitists do not belong in a learning environment. This is not stack overflow....</p>", 
                "question": "[Response] You may have forgotten what it was like not to know."
            }, 
            "id": "cnkmh48"
        }, 
        {
            "body": {
                "answer": "<p>Hmm. I<sq>m honestly torn here, because I can definitely see both sides of the argument.<br><br>From one perspective, I can understand why the other poster is getting so frustrated by people asking for basic help. I<sq>m self-taught and began learning to code about 5-6 years ago, and you know what? I figured it out. <br><br>I figured out which language to start with, worked through tons of tutorials, did a lot of googling and researching, made projects, made mistakes, tried again... I didn<sq>t need tons of hand-holding or help finding resources -- I managed, and made it through just fine.<br><br>There might be an overabundance of potentially conflicting resources and information out there, true, but the same can be said of pretty much anything on the internet. <br><br>In fact, I<sq>d argue that <dq>having to deal with too much information<dq> is basically the hallmark of the modern age! It<sq>s one of the defining characteristics of this generation, and I would hope that people have grown at least somewhat accustomed to dealing with it.<br><br>The ability to Google is also something most schools will indirectly end up teaching. For example, My teachers made sure to teach us how to find good sources for the essays we needed to write (which included learning how to use Google), and how to assess the credibility of a resource. <br><br>Learning to code requires pretty much the same skills -- research, figure out what opinions and websites look good and which to ignore, Google to resolve any contradictions, repeat until satisfied.<br><br>From this perspective, getting started shouldn<sq>t be difficult at all. I can understand people needing to ask for help if they don<sq>t understand something in a tutorial, need help figuring out what to Google, or need help picking between two resources, but people asking a simple <dq>how do I get started<dq> question seem to be almost disrespectful in a certain sense -- they appear to have not taken what is, to me, the single most trivial and basic step you can take towards answering your own question. <br><br>And _that_ is what I think the other poster has an issue with -- the lack of respect and the implicit demand that some posters make asking us to do all the work of getting started for them without ever lifting a finger for themselves.<br><br>I<sq>ve also seen some people describing this attitude as elitist or disgruntled -- it<sq>s not. It<sq>s a reaction against this fundamental lack of respect and demand for our time, a reaction against people constantly asking the same question<colon> <dq>How do I get started? EOM<dq> without ever doing, or at least acknowledging that they<sq>ve tried, the most fundamental and basic first step you can take towards finding an answer. <br><br>It<sq>s exasperating, to be honest. If the asker refuses to respect our time, do we have any obligation to put in any effort in exchange? The relationship runs both ways. You show me that you<sq>ve put in at least some effort and time, and I<sq>ll reciprocate by spending my own time doing my best to help.<br><br>---<br><br>However, I can also see the other perspective. <br><br>There are tons of things in my life that I<sq>ve taken for granted and have an advantage with. To name just a few<colon><br><br>- I went to decent school with high standards of academic rigor -- my school might have taught us how to Google, but I<sq>m willing to bet many other schools don<sq>t.<br>- My school had clubs and opportunities for me to practice coding (robotics and such). Granted, there were precious few, if any, mentor who could actually teach me how to program, but opportunities like these are still uncommon.<br>- My family was relatively technologically savvy, and supported me playing with my computer, even if they didn<sq>t fully understand what I was up to.<br>- I can type rapidly. Maybe the reason why Googling seems so natural to me is because I can easily type and search for an answer in the same time it takes me to formulate that question in my mind.<br>- I can read very rapidly, and have no problem sitting for hours on end without getting distracted and bored, which makes me able to effectively handle the large amounts of information available on the internet<br>    - And even this is something that was gifted to me -- my family was very supportive of reading and literacy, and would take me to libraries once a week, etc.<br>- I found a friendly online community to ask questions. It was very small and niche -- there were maybe 30 active members at any given time, we all knew each other by name, were mostly in high school or college, and were learning and growing together.<br><br>And you know, my first instinct might be to Google, but other people<sq>s first instinct might be to ask for help from an actual person, on a discussion board or otherwise. Is that necessarily bad?<br><br>I mean, sure, it might be bad from the answerer<sq>s and the community<sq>s perspective, due to the [help vampire](http<colon>//slash7.com/2006/12/22/vampires/) problem, but asking a real-life person for help is a completely natural first step to take for pretty much anything else in life.<br><br>Googling is arguably the more unnatural action here.<br><br>It<sq>s actually pretty interesting if you look at it from both perspectives. From the answerer<sq>s perspective, they<sq>re _inundated_ with low-effort questions, many of which are identical to each other. From the asker<sq>s perspective, they<sq>re doing what they<sq>ve always done (asking questions), and are surprised and upset when they accidentally push somebody over the edge and get attacked instead of receiving an answer. <br><br>And as OP has pointed out, the number of resources and things to flip through has grown ridiculously large, even in the span of the past 5-6 years since I<sq>ve started learning to code. <br><br>Setting aside all of the text-based tutorials, and looking at just the online courses websites that have sprung up lately like mushrooms, you have CodeCademy, Udacity, Coursera, MIT, edX, OpenCulture, Udemy, Khan Academy, and more and more and more websites springing up every day, every hour, all trying to jump on the learn-to-code bandwagon.<br><br>It<sq>s also just as frustrating to see people giving condescending or unhelpful answers -- honestly, it takes like 2 seconds to link to the FAQ. If you see a poor question, either just leave it along for somebody else to tackle, or just link to the FAQ. There<sq>s absolutely no call for incivility and no reason to be rude.<br><br>I<sq>ve also relatively recently started teaching programming, and after a couple of quarters, I have much, much more sympathy for people who want to learn to code.<br><br>Programming is frankly _absurd_ -- despite the fact that we pretend to ourselves that programming is highly logical, there<sq>s just way too many weird quirks. For example, take this very simple line of code<colon><br><br>    a = a + 1<br><br>It<sq>s very easy to lose sight of just how _baffling_ something like this is. For people who have had any exposure to math, this line makes no sense. <dq>a is equal to a plus one<dq>? wtf? How does that even make sense, unless a is infinity, which it clearly isn<sq>t? <br><br>And now, people have to work against instincts ingrained in them after how many years of math classes and learn that <dq>=<dq> now means <dq>assignment<dq> and that <dq>==<dq> now means equality.<br><br>Fine, you can memorize this, but there are hundreds of thousands of road-bumps and obstacles just like these scattered all over the place. Those of us who had a natural inclination for coding from the start, or have a strong background in learning in general, will bulldoze and never notice these issues, but that doesn<sq>t mean everybody can, or that it<sq>s natural to do so. <br><br>And you know what? I think OP is right -- I think people, no matter what they<sq>re claiming, have forgotten what it<sq>s like to be a beginner. The problem with `a = a + 1` is an example of a fundamentally basic problem that I would have never considered, explicitly mentioned, or taught until a student asked me about it, and I<sq>m willing to bet that almost everybody reading this post can claim the same.<br><br>---<br><br>So in conclusion, I don<sq>t really know why I wrote this post, but this is a complicated issue. I agree with both posters, which puts me in a weird headspace.<br></p>", 
                "question": "[Response] You may have forgotten what it was like not to know."
            }, 
            "id": "cnkolyi"
        }, 
        {
            "body": {
                "answer": "<p>I think one of the challenges of a subreddit like this is not realizing how hard it is to learn programming.  I<sq>ve also taught programming, and I would say that a great many people that sign up to learn programming won<sq>t ever learn how to program.<br><br>At the time, I lacked the kind of time to spend one-on-one helping someone learn.  To me, that would be the ideal way to do it, but even that has its problems.  I used to manage teaching assistants who were helping students for the first time, and they ended up over-explaining things to students.<br><br>That is, they would spend 10 minutes or more trying to cover a concept, but they might not, for example, realize what terminology they are using, and use stuff they think the students already understand <dq>type, instance, inheritance, pointers, variables, arrays, etc<dq>.  Programming has so much terminology that we often use it without determining whether a person knows what we<sq>re talking about.<br><br>And, we tend to explain too much rather than let the student try to articulate what they understand or don<sq>t understand.  Indeed, I used to spend my time trying to understand how the understood programming.<br><br>Ultimately, you need students to do small tasks (declare a variable and initialize it, for example).  You demonstrate something simple, then have them do it, then do a small variant of that.<br><br>Here are the problems that seem rather common<colon><br><br>* which language should I learn?<br>* how do I pick a project to work on?<br>* how do I stay motivated?<br>* how do I get past the feeling that I don<sq>t know what I<sq>m doing?<br>* what do I need to know?<br><br>The problem is there are many answers to this question, and we can<sq>t even offer consistent advice.  A person may come in saying <dq>I want to learn C.<dq> or <dq>I want to learn PHP<dq>.  Will they be dissuaded from learning those languages?  Should they be?<br><br>Worse still are people who are trying to pretend.  I need to learn C# in 2 weeks (answer<colon> not going to happen).<br><br>I think, as programmers, we think our stuff is easier than, say, composing music, or designing a circuit board.  There are elements that appear to be easy, but it<sq>s actually tough.<br><br>The things that are really tough to teach are problem solving skills, and I don<sq>t just mean algorithms which, at the very least, is confined to a language (like C or Java) but things like <dq>I want to learn a NoSql database to solve problem X--which should I pick<dq>.  Those are essentially technological assessments that few of us are really capable of, and few people have made comparisons that make sense to someone with no experience.<br><br>Thus, you can find tradeoffs to Angular vs. Knockout vs. Ember, but they<sq>re pretty hard to understand if you don<sq>t know any front-end web framework.<br><br>Ah, that<sq>s another problem.  In order to explain well, you kinda need to know where someone is coming from, and writing isn<sq>t always that efficient.  Ideally, you<sq>d have some conversation to get a sense of what<sq>s going on.<br><br>Suffice it to say, it<sq>s incredibly difficult to teach well and also difficult to learn, especially given everything is a moving target.</p>", 
                "question": "[Response] You may have forgotten what it was like not to know."
            }, 
            "id": "cnkrknd"
        }, 
        {
            "body": {
                "answer": "<p>What bugs me is when you write a really good question, with explanations and/or example code to show you<sq>ve actually tried to attempt the problem your looking for, and then you get a short and borderline sarcastic reply from a <dq>computer science<dq> type who will try to be as awkward and abrasive as possible. Like when I posted a question on here a few weeks ago about looking for string occurrences using multiple threads. Someone posted a reply and when I asked for clarification of one of their points some dick just replied with <dq>well you should know the answer is no<dq> with no further help at all. What<sq>s the point of contributing to this sub if your going to be like that when someone asks for help?<br><br>Edit<colon> See here for the post I made http<colon>//www.reddit.com/r/learnprogramming/comments/2mhctu/searching_for_stringscharacters_using_more_than/</p>", 
                "question": "[Response] You may have forgotten what it was like not to know."
            }, 
            "id": "cnkogyq"
        }, 
        {
            "body": {
                "answer": "<p>Some douche gave it 2.5 stars even though it hasn<sq>t started yet</p>", 
                "question": "MIT launching their outstanding <dq>Software construction in Java<dq> course on edX as a 2-part course starting Sept 26. Highly recommended!"
            }, 
            "id": "d62b70n"
        }, 
        {
            "body": {
                "answer": "<p>I just joined the course and paid the $49 for the verified track. I did the same like a year ago with the intro to CS with python course and paying for it was the only way to think that <dq>I must finish<dq>, and I<sq>m really glad that I did, for those who visit this sub-reddit regularly, I don<sq>t have any CS background, few years ago I didn<sq>t even knew what HTML was, and now I<sq>m earning a living with development, the EDx course certainly helped to step forward.<br><br>If anybody wanna join me to go through the course and help each other and finish write me a PM and we can set something up, doing this kind of stuff in a group is always more rewarding and is a way to not drop it.<br><br>**EDIT<colon>** I received a dozen of PM<sq>s already so I<sq>ve moved forward and ~~built a free blog [here](https<colon>//edxcourse.wordpress.com/)~~ and **created a Slack channel (mp your email for invites)** so we have everything set up for when it starts. If I<sq>m not answering in a day or two try again <colon>)<br><br>**EDIT2<colon>** Better than a blog, you can join [/r/javaedxcourse/](https<colon>//www.reddit.com/r/javaedxcourse/)</p>", 
                "question": "MIT launching their outstanding <dq>Software construction in Java<dq> course on edX as a 2-part course starting Sept 26. Highly recommended!"
            }, 
            "id": "d62c2h3"
        }, 
        {
            "body": {
                "answer": "<p>Can a software illiterate, average user person benefit from the course?</p>", 
                "question": "MIT launching their outstanding <dq>Software construction in Java<dq> course on edX as a 2-part course starting Sept 26. Highly recommended!"
            }, 
            "id": "d62adjo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d recommend something like Harvard<sq>s CS50 to get ready for job fairs in September.</p>", 
                "question": "MIT launching their outstanding <dq>Software construction in Java<dq> course on edX as a 2-part course starting Sept 26. Highly recommended!"
            }, 
            "id": "d62g1xk"
        }, 
        {
            "body": {
                "answer": "<p>* [Clean Code](https<colon>//www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) is a really good programming book. It<sq>s technical in that it gives you best practice, but you don<sq>t need a laptop or to code to follow along, you can just absorb the information and follow along with the simple samples (even if it<sq>s not your primary coding language).<br><br>* [The Clean Coder](https<colon>//www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073) is a great book about how to build software professionally. It focuses on a lot of the softer skills a programmer needs.<br><br>* [Scrum<colon> The Art of doing twice the work in half the time](https<colon>//www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X) is a great introduction to scrum and why you want to use it. Agile (and scrum in particular) can have a major improvement on the productivity of development teams. I work for a large technology company and we<sq>ve seen improvements in the range of 300<percent> for some teams after adopting scrum. Now our entire company is scrumming.<br><br>* [Getting Things Done](https<colon>//www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280) has personally helped me work more efficiently by sorting work efficiently. Having a system is key.<br><br>* [How to Win Friends and Influence People](https<colon>//www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034/ref=sr_1_1?s=books&ie=UTF8&qid=1473462031&sr=1-1&keywords=how+to+make+friends+and+influence+people) I often recommend devs on our team read this because it helps with interpersonal communication in the office.<br><br>* [Notes to a Software Tech Lead](https<colon>//www.amazon.com/Notes-Software-Team-Leader-Organizing-ebook/dp/B00EP03O5Y) is a great book so you can understand what a good lead is like and hopefully one day move up in your career and become one.<br><br></p>", 
                "question": "What non technical books can I bring with me while I travel that will also help me be a better programmer?"
            }, 
            "id": "d7gaujs"
        }, 
        {
            "body": {
                "answer": "<p>[Code<colon> The Hidden Language of Computer Hardware and Software](https<colon>//www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319)<br><br>[The Mythical Man-Month](https<colon>//www.amazon.com/gp/aw/d/0201835959/ref=mp_s_a_1_1?ie=UTF8&qid=1473470438&sr=8-1&pi=SY200_QL40&keywords=mythical+man+month&dpPl=1&dpID=51XnDL5KC<percent>2BL&ref=plSrch)<br><br>[Peopleware<colon> Productive Projects and Teams](https<colon>//www.amazon.com/gp/aw/d/0321934113/ref=?ie=UTF8&qid=1473470625&sr=8-1&pi=SY200_QL40&keywords=peopleware&dpPl=1&dpID=61lAwzXfQiL&ref=plSrch)<br><br>[G\u00f6del, Escher, Bach<colon> An Eternal Golden Braid](https<colon>//www.amazon.com/gp/aw/d/0465026567/ref=mp_s_a_1_1?ie=UTF8&qid=1473470746&sr=8-1&pi=SY200_QL40&keywords=godel+escher+bach&dpPl=1&dpID=4193iI6WHqL&ref=plSrch)<br><br>[The Pragmatic Programmer<colon> From Journeyman to Master](https<colon>//www.amazon.com/gp/aw/d/020161622X/ref=mp_s_a_1_1?ie=UTF8&qid=1473470982&sr=8-1&pi=SY200_QL40&keywords=pragmatic+programmer&dpPl=1&dpID=41BKx1AxQWL&ref=plSrch)<br><br>[Coders at Work<colon> Reflections on the Craft of Programming](https<colon>//www.amazon.com/gp/aw/d/1430219483/ref=mp_s_a_1_1?ie=UTF8&qid=1473471034&sr=8-1&pi=SY200_QL40&keywords=coders+at+work&dpPl=1&dpID=51vhCIBHwuL&ref=plSrch)</p>", 
                "question": "What non technical books can I bring with me while I travel that will also help me be a better programmer?"
            }, 
            "id": "d7gg6np"
        }, 
        {
            "body": {
                "answer": "<p>If you want to pick up some Cryptography, [The Code Book](https<colon>//www.amazon.com/Code-Book-Science-Secrecy-Cryptography/dp/0385495323) is a great intro.<br><br>[Pragmatic Thinking and Learning](https<colon>//www.amazon.com/Pragmatic-Thinking-Learning-Refactor-Programmers/dp/1934356050/) is good for learning to learn.<br><br>[The Pragmatic Programmer](https<colon>//www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/) is good for project code planning and learning how to write code in a well thought out way.<br><br>[Ethernet<colon> The Definitive Guide](https<colon>//www.amazon.com/Ethernet-Definitive-Charles-E-Spurgeon/dp/1449361846/) is a good read if you want to get up to snuff on your networking, though it can be a bit dry at times.</p>", 
                "question": "What non technical books can I bring with me while I travel that will also help me be a better programmer?"
            }, 
            "id": "d7ggny4"
        }, 
        {
            "body": {
                "answer": "<p>The Art of UNIX Programming is pretty good, and available online for free<colon> http<colon>//www.catb.org/esr/writings/taoup/html/. For non-programming books, but which I think programmers can benefit from reading,<br><br>- The Design of Everyday Things, by Donald Norman<br>- Peopleware<colon> Productive Projects and Teams, by Tom DeMarco and Timothy Lister<br>- The Visual Display of Quantitative Information, by Edward Tufte</p>", 
                "question": "What non technical books can I bring with me while I travel that will also help me be a better programmer?"
            }, 
            "id": "d7gaufw"
        }, 
        {
            "body": {
                "answer": "<p>EVERYONE thinks everyone else<sq>s code is crap.  Just because someone knows a subjectively better way to do one minor thing doesn<sq>t make your code terrible.  Even if they openly mock you and are highly aggressive, it doesn<sq>t make them programming gods and you the unwashed peon.  <br><br>It may mean that there<sq>s a better, objective, way to do it.  That<sq>s cool.  Learn how to do that from them, if you can, but don<sq>t let yourself be turned off just because the culture can be a bet parasitic and canabalistic. </p>", 
                "question": "Stuff you wished you knew before learning to program"
            }, 
            "id": "dfppjv4"
        }, 
        {
            "body": {
                "answer": "<p>Stuff that would have saved me a bunch of headache had I learned it much sooner than I did<colon><br><br>- How to really use a debugger (gdb).<br>- How to properly test code.</p>", 
                "question": "Stuff you wished you knew before learning to program"
            }, 
            "id": "dfpiwvv"
        }, 
        {
            "body": {
                "answer": "<p>*Just build something.*<br><br></p>", 
                "question": "Stuff you wished you knew before learning to program"
            }, 
            "id": "dfpowwk"
        }, 
        {
            "body": {
                "answer": "<p>Man I thought for sure this would have many more comments. Anyway, here<sq>s my points<colon><br><br>* Don<sq>t be shy or feel dumb about asking what may seem like really simple or stupid questions. More often than not, if you don<sq>t understand those simple things, then you<sq>re gonna have a much harder time understanding the rest of the information after that.<br><br>* You WILL not be able to remember everything and that is ALRIGHT! Make it a point to clearly understand the concepts of the programming language or technology because the concepts are what<sq>s important, not the specific syntax. You can always look up syntax in reference manuals or online. You will not always be able to understand the problem you have to solve if you don<sq>t know how to use the proper concept to solve it.<br>* Doing a project and learning at the same time helps you more, much more. You will have something to show, and others can even help you expand on your knowledge by offering advice on how to go about programming for your project more efficiently/effectively.<br><br>* It<sq>s alright to be stuck on a topic. You may not understand everything right away so make sure to take a break, refer other sources on said topic or ask others for help. It<sq>s okay to have some weak points in your coding skill. You will overcome your weak points over time with experience. </p>", 
                "question": "Stuff you wished you knew before learning to program"
            }, 
            "id": "dfplfer"
        }, 
        {
            "body": {
                "answer": "<p>Yea... That page sure [inspires confidence](http<colon>//i.imgur.com/cDf7kYO.jpg)</p>", 
                "question": "<sq>Gold mine<sq> of websites to teach yourself how to code on various areas/platforms"
            }, 
            "id": "cnm0dab"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve only barely started, but I<sq>ve been liking [the Odin Project.](http<colon>//www.theodinproject.com/) It uses a lot of other sites<sq> resources and guides you through which ones to read/watch/do.</p>", 
                "question": "<sq>Gold mine<sq> of websites to teach yourself how to code on various areas/platforms"
            }, 
            "id": "cnm1nzf"
        }, 
        {
            "body": {
                "answer": "<p>>The Learn to Code movement( a movement which went viral among teens)<br><br>According to...?</p>", 
                "question": "<sq>Gold mine<sq> of websites to teach yourself how to code on various areas/platforms"
            }, 
            "id": "cnm3h2y"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll plug [The Odin Project](http<colon>//www.theodinproject.com/home) for full stack web development with Rails as the back-end.<br>I<sq>m going through it currently and it<sq>s pretty solid, especially the [Ruby on Rails](http<colon>//www.theodinproject.com/ruby-on-rails) course. <br><br></p>", 
                "question": "<sq>Gold mine<sq> of websites to teach yourself how to code on various areas/platforms"
            }, 
            "id": "cnm5uf5"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d agree with you. As a full time developer for three years now and seeing other candidates in interviews, I can guarantee you they don<sq>t care at all about those things. They might care if you have a physical degree in say Computer Science (from an actual full time uni/college), as they know you are tech inclined.<br><br>The single most important thing with landing a job is simply showing that you can program. They often don<sq>t care how you learned, just that you have arrived. So this means a programming portfolio and example code to show them, as well as walking through and discussing programming problems during phone/face to face interviews.<br><br>They don<sq>t always look for skill either. They look for a mind set. They really like it for example if you program as a hobby outside of work. Shows you are interested, continuously improving and have a strong commitment to the subject matter.</p>", 
                "question": "The dark side of coding bootcamps"
            }, 
            "id": "cuuhs6r"
        }, 
        {
            "body": {
                "answer": "<p>I respect the OP<sq>s opinion, and I can<sq>t say I disagree entirely. I can<sq>t speak for all schools because I attended DBC a while ago and got a great job after in a position that used none of the languages I learned there. However, I will say I think the fault falls more on the students than the school. I don<sq>t think the school is scamming people, I think that a lot of the people that are attending these schools aren<sq>t in it because they love it. They see the starting salary, and just think it<sq>s a quick way to make tons of money. I remember many classes where some students were on their phones or generally not paying attention. Often, we<sq>d have a discussion on a topic and a student would ask a question that was just answered 5 min ago. That to me makes me think they were bored. I also know we got way more work than could be physically completed in a day. That was on purpose. Some of us tried to finish those challenges on the weekends and late on week nights, and those that did learned a lot in the process. Some just did what they were supposed to do, and left right at 5 every day. The ones I know that were serious and had seemed like they actually enjoyed coding (which was a small section of my class) did very well after graduating. I<sq>m inclined to say these schools should maybe stop advertising the salary or something to stop attracting the wrong kinds of people, and make it more about what you will learn there, because I know that the things I<sq>m doing at my job now, which involves setting up servers and security and php; I would have never been able to confidently learn quickly without the great experience I got in the coding bootcamp. I<sq>ll honestly say they aren<sq>t for everyone, and more than half of the people I see leaving the one I went to I would never want to work with again. As with most things in life, it<sq>s what you do with it. Many people expect these schools to be a quick fix. It<sq>s not. It<sq>s not even close. The hardest part is the second you graduate because you have to prepare for interviews and work against the fact that you feel most people don<sq>t respect you because you graduated from a bootcamp. The day after I graduated I interviewed with a great company and I got the job. But, I definitely had anxiety about the whole <sq>bootcamp<sq> thing, due to reading posts like these many times.<br><br>TLDR<colon> Each person is an individual that comes out of these camps. A lot of the students have no passion for computers / coding, and are only daydreaming of what they<sq>ll do with their junior developer salary (They hurt the reputation of these schools, and the prospects for the rest of the students). There are some people that leave these camps and do well because they actually like to code.</p>", 
                "question": "The dark side of coding bootcamps"
            }, 
            "id": "cuunpti"
        }, 
        {
            "body": {
                "answer": "<p>> ...my goal with the story is to give them an actual good alternative to becoming a successful programmer if that<sq>s what they<sq>re passionate about...<br><br><br>Wait... so what<sq>s the advice? I thought about going to one of these bootcamps since I have a bachelor<sq>s and master<sq>s in electrical engineering but want to switch to software development, and the idea of going back to college (at least right now) is horrifying (financially and time-wise) since I just went through a lot. But I decided not to go to a bootcamp since many people share your opinion. So I would like to hear your story/advice.</p>", 
                "question": "The dark side of coding bootcamps"
            }, 
            "id": "cuuknkr"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s pathetic that recruiters think they<sq>re a joke and will not even consider people who have been to them. It<sq>s okay to think they<sq>re a waste of time, but you shouldn<sq>t completely disregard someone<sq>s skills just because they<sq>ve attended one.</p>", 
                "question": "The dark side of coding bootcamps"
            }, 
            "id": "cuuvs6u"
        }, 
        {
            "body": {
                "answer": "<p>Hi /u/Limeoats I<sq>m about halfway through myself, my only issue is that I don<sq>t feel I<sq>m using my brain. Rather just copying what you type without rhyme or reason. <br><br>How did you personally learn all of this? By following the SDL2 documentation or was there some book you drew it from or just years of experience? <br><br>Thank you for your time and for making the videos <colon>)</p>", 
                "question": "(Update) Learn to make a game in C++!"
            }, 
            "id": "cvufi56"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m liking this series, but I don<sq>t feel like I understand what the SDL methods do. Maybe some links to the docs, and an episode dedicated to understanding the core ideas of SDL would be nice.<br><br>Other than that, keep doing what you<sq>re doing.</p>", 
                "question": "(Update) Learn to make a game in C++!"
            }, 
            "id": "cvuaw5x"
        }, 
        {
            "body": {
                "answer": "<p>IANAL ... I noticed there was no License for the game engine. From [GitHub](https<colon>//help.github.com/articles/open-source-licensing/#what-happens-if-i-dont-choose-a-license)<br><br>> Generally speaking, the absence of a license means that the default copyright laws apply. This means that you retain all rights to your source code and that **nobody else may reproduce, distribute, or create derivative works** from your work. <br><br>Since you are given the link to the art assets, that part should be good.. Same method has been used several times in the past for doom, half-life, etc. engines.<br><br></p>", 
                "question": "(Update) Learn to make a game in C++!"
            }, 
            "id": "cvug8n7"
        }, 
        {
            "body": {
                "answer": "<p>This is amazing</p>", 
                "question": "(Update) Learn to make a game in C++!"
            }, 
            "id": "cvukfh1"
        }, 
        {
            "body": {
                "answer": "<p>Care to elaborate on what you did in those 18 months to get hired?</p>", 
                "question": "18 months ago I didn<sq>t know there was something called programming language. Last month got an internship offer and recently got hired as junior developer. Thank you guys - you made it possible for me ! "
            }, 
            "id": "c8zddi0"
        }, 
        {
            "body": {
                "answer": "<p>Which programming language?</p>", 
                "question": "18 months ago I didn<sq>t know there was something called programming language. Last month got an internship offer and recently got hired as junior developer. Thank you guys - you made it possible for me ! "
            }, 
            "id": "c8zdc0k"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m currently in EMS and in school for programming. This reddit is awesome.</p>", 
                "question": "18 months ago I didn<sq>t know there was something called programming language. Last month got an internship offer and recently got hired as junior developer. Thank you guys - you made it possible for me ! "
            }, 
            "id": "c8zehd1"
        }, 
        {
            "body": {
                "answer": "<p>I would also like some details.</p>", 
                "question": "18 months ago I didn<sq>t know there was something called programming language. Last month got an internship offer and recently got hired as junior developer. Thank you guys - you made it possible for me ! "
            }, 
            "id": "c8ze87l"
        }, 
        {
            "body": {
                "answer": "<p>Couldn<sq>t recommend this enough. Whenever I<sq>ve asked questions there I<sq>ve got nothing but nice responses. Last problem I had someone there spent ~30 minutes walking me through it.</p>", 
                "question": "#learnprogramming <colon> an IRC channel that wants to help you!"
            }, 
            "id": "cxpnhyi"
        }, 
        {
            "body": {
                "answer": "<p>Started learning Python this week so I won\u00b4t be completely lost when my Computing Science course starts next year, so this will be really handy.<br>Will definitely stop by soon.</p>", 
                "question": "#learnprogramming <colon> an IRC channel that wants to help you!"
            }, 
            "id": "cxpnl1j"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been hanging around there, seems like a good bunch of people. I haven<sq>t had the need to say hello yet, low on time for learning. </p>", 
                "question": "#learnprogramming <colon> an IRC channel that wants to help you!"
            }, 
            "id": "cxpms6b"
        }, 
        {
            "body": {
                "answer": "<p>Why is it on freenode and not snoonet? [Snoonet](/r/snoonet) is made for Reddit and a lot of subreddits, including the programming ones, already have presence on Snoonet...</p>", 
                "question": "#learnprogramming <colon> an IRC channel that wants to help you!"
            }, 
            "id": "cxq70wz"
        }, 
        {
            "body": {
                "answer": "<p>Dope. Redeemed this about a year and a half ago for the free micro account, just got $100 to Digital Ocean, and some free stuff from NameCheap... the websites I use to host! Thanks!</p>", 
                "question": "Github Student Developer Pack"
            }, 
            "id": "cl30etb"
        }, 
        {
            "body": {
                "answer": "<p>Is this only for University students? What about someone who is enrolled in a programming class in High School?</p>", 
                "question": "Github Student Developer Pack"
            }, 
            "id": "cl35pri"
        }, 
        {
            "body": {
                "answer": "<p>i am confused as to what all this stuff does. anyone mind explaining like i am 5?</p>", 
                "question": "Github Student Developer Pack"
            }, 
            "id": "cl3gook"
        }, 
        {
            "body": {
                "answer": "<p>Signed up a while back for Github education and had that. Just got an email stating I<sq>ve been given the pack for free since I<sq>m already a part of their earlier education program.<br><br>Neat.</p>", 
                "question": "Github Student Developer Pack"
            }, 
            "id": "cl33oh1"
        }, 
        {
            "body": {
                "answer": "<p>Hey! I<sq>ve been subscribed for several months now. I really appreciated how one of your videos shows you having a bug and then solving it while talking through it. A lot of other videos have perfect workflow which is entirely unrealistic (and demotivating)</p>", 
                "question": "Interested in android or Java programming? - Easy to follow video tutorials"
            }, 
            "id": "cfmvdbk"
        }, 
        {
            "body": {
                "answer": "<p>Just subbed! Primarily interested in Java but would love get a basics on Android.</p>", 
                "question": "Interested in android or Java programming? - Easy to follow video tutorials"
            }, 
            "id": "cfmrxcx"
        }, 
        {
            "body": {
                "answer": "<p>Which playlist should an absolute beginner start at? I am trying to find a video series to supplement my readings from various sources. I already have eclipse set up, but after that I can only barely do helloworld stuff.</p>", 
                "question": "Interested in android or Java programming? - Easy to follow video tutorials"
            }, 
            "id": "cfmt2ck"
        }, 
        {
            "body": {
                "answer": "<p>I would<sq>ve subbed if I wasn<sq>t subbed already. You have a great channel, keep up the great work, it has helped me a lot!</p>", 
                "question": "Interested in android or Java programming? - Easy to follow video tutorials"
            }, 
            "id": "cfnpbuq"
        }, 
        {
            "body": {
                "answer": "<p>Please see [this post](http<colon>//www.reddit.com/r/programming/comments/223bws/75_essential_cheat_sheets_for_designers_and/) for discussion on why these aren<sq>t the best cheat sheets and what better alternatives are.</p>", 
                "question": "75 Essential Cheat Sheets for Designers and Programmers"
            }, 
            "id": "cgl1vkt"
        }, 
        {
            "body": {
                "answer": "<p>Python 2.4!</p>", 
                "question": "75 Essential Cheat Sheets for Designers and Programmers"
            }, 
            "id": "cgl2wbz"
        }, 
        {
            "body": {
                "answer": "<p>The C++ cheat-sheet is horrid, as with a lot of them probably (I can<sq>t be bothered going through all of them and looking through the flaws).<br><br>Look at the EBNF of the language if you really want to learn it<sq>s syntax, and just look at the standard documentation if you want to learn it<sq>s standard library.</p>", 
                "question": "75 Essential Cheat Sheets for Designers and Programmers"
            }, 
            "id": "cgldsgp"
        }, 
        {
            "body": {
                "answer": "<p>Handy to have.. Thanks</p>", 
                "question": "75 Essential Cheat Sheets for Designers and Programmers"
            }, 
            "id": "cgl0iyk"
        }, 
        {
            "body": {
                "answer": "<p>Clicking enroll reloads the page.</p>", 
                "question": "Hey! I updated my HTML5 and CSS3 course and giving it away free on Reddit this week"
            }, 
            "id": "cm0k2cm"
        }, 
        {
            "body": {
                "answer": "<p>Just want to say how much i appreciate this. As someone who is just starting to get into web development, this is exactly the kinda thing i<sq>ve been looking for. So THANKS!</p>", 
                "question": "Hey! I updated my HTML5 and CSS3 course and giving it away free on Reddit this week"
            }, 
            "id": "cm0hf7m"
        }, 
        {
            "body": {
                "answer": "<p>All I can say is that I love you ( guy here, so dont get too excited -_- )</p>", 
                "question": "Hey! I updated my HTML5 and CSS3 course and giving it away free on Reddit this week"
            }, 
            "id": "cm0imiw"
        }, 
        {
            "body": {
                "answer": "<p>I signed up for the site and when I click the enroll button for the class, it just reloads the page and doesn<sq>t enroll.  Tried it in Firefox and Chrome.  Is anyone else able to actually to enroll in the class with the link in OP<sq>s post?</p>", 
                "question": "Hey! I updated my HTML5 and CSS3 course and giving it away free on Reddit this week"
            }, 
            "id": "cm0k676"
        }, 
        {
            "body": {
                "answer": "<p>If you want to be notified about future videos via PM please click [this link](https<colon>//www.reddit.com/message/compose?to=busterroni&subject=!Notify&message=Notify<percent>20me<percent>20about<percent>20future<percent>20tutorial<percent>20videos.) and send the message.</p>", 
                "question": "Here<sq>s part three of my tutorial series on creating a reddit bot using Python. This tutorial introduces the use of APIs."
            }, 
            "id": "de2cqit"
        }, 
        {
            "body": {
                "answer": "<p>I know you get told this enough, but please continue this series, I look forward to it so much!<br><br>Also, how did you set up that link that notifies us of a new video? Do you currently have a set up that would let us <dq>unsubscribe<dq> from the notification if need be?</p>", 
                "question": "Here<sq>s part three of my tutorial series on creating a reddit bot using Python. This tutorial introduces the use of APIs."
            }, 
            "id": "de2euux"
        }, 
        {
            "body": {
                "answer": "<p>I have a decent understand of loops and functions/methods in c++ and Java, would this tutorial be understandable for me or should I learn a bit about python first?</p>", 
                "question": "Here<sq>s part three of my tutorial series on creating a reddit bot using Python. This tutorial introduces the use of APIs."
            }, 
            "id": "de2mtx3"
        }, 
        {
            "body": {
                "answer": "<p>Is there a tutorial on how to do this without using an external library (praw)?</p>", 
                "question": "Here<sq>s part three of my tutorial series on creating a reddit bot using Python. This tutorial introduces the use of APIs."
            }, 
            "id": "de2ej2v"
        }, 
        {
            "body": {
                "answer": "<p>>Computer Science is as much about computers as astronomy is about telescopes.<br><br>(possibly mis-)attributed to Dijkstra. I really like that sentence, it summarizes much of your post. Excellent work, by the way.</p>", 
                "question": "For those who might be confused about what Computer Science is..."
            }, 
            "id": "cdflq11"
        }, 
        {
            "body": {
                "answer": "<p>I get what you are trying to say here, but I worry you might be giving people the wrong idea about their responsibilities as a computer scientist.<br><br>NO computer scientist is allowed to be an amateur in the <dq>art<dq> of programming.<br><br>Computer science is an engineering effort to engineer *knowledge* about computation. This is rooted in the context of programming. Whether using raw mathematics or any other formal language (read - programming language), computer scientists need to be fluent in these languages.<br><br>When you say things like<colon><br>> CS is about problem solving.<br><br>That makes it seem so shallow. <dq>Problem solving<dq> is what ALL the flavors of CS / SE / CE / MA / etc. are doing. The following is a true statement, and I wish it were not<colon><br><br><dq>All software engineers are computer scientists, but not all computer scientists are software engineers.<dq><br><br>The biggest thing to recognize is that there is no such thing as <dq>only a computer scientist.<dq> That is not an actual career path. CS is a subset of knowledge, a classification for *some* of the information and activities that are a part of engineering and computation. Take a typical software developer. He will use the tools you mentioned above to study and find the solution to a problem, and then actually solve the problem afterward. Some of this process involves a set of skills we allocate to the category of CS, some of the skills are allocated to MA, and some are allocated to SE or <dq>programming.<dq> Some situations or career paths (such as a researcher or what we<sq>ve taken to calling a <dq>computer scientist<dq>) will have you follow problems and research that are more <dq>theoretical<dq> in nature, where you may not actually end-up <dq>using<dq> the knowledge after you <dq>discover<dq> it. *This is okay*, but if you never extend your capabilities beyond that you will only ever be a shadow of the professional you could become.<br><br>I recognize that you are only trying to specify a boundary on what we call CS compared to the other domains, but I don<sq>t want to let the students reading this (like so many students from my university) think that they don<sq>t need to learn programming well; that they can sit around <dq>solving<dq> and talking about traveling salesman all day, and still somehow find a good-enough job when they graduate to pay-off their 6-figure student loan debt. Not only that, but it<sq>s hard to engineer knowledge about something when you don<sq>t speak the language. It<sq>s so disheartening to see some of them who know all the theory in the world and can<sq>t write a multi-threaded application to save their life.<br><br>Successful people in this industry don<sq>t <dq>pick<dq> a side, they learn them all and use them all.</p>", 
                "question": "For those who might be confused about what Computer Science is..."
            }, 
            "id": "cdfpbod"
        }, 
        {
            "body": {
                "answer": "<p>while we<sq>re getting all theoretical, we might as well add Theory of Computation - The mathematical definition of a turning machine, formal languages, finite-state-automata, whether or not a turning machine will ever stop (will a given program finish, for certain), and how that is all relative to us now that we<sq>re on the dawn of quantum computing. very exciting stuff. </p>", 
                "question": "For those who might be confused about what Computer Science is..."
            }, 
            "id": "cdflz39"
        }, 
        {
            "body": {
                "answer": "<p>Great post, I appreciate the in depth analysis. Don<sq>t you think you<sq>re being a little dramatic in the first sentence? <dq>Could not be farther from the truth, computer science is about problem solving<dq>. Programming is also about problem solving! It<sq>s very important to make the differences clear but I don<sq>t want people who like programming to be scared off from computer science!</p>", 
                "question": "For those who might be confused about what Computer Science is..."
            }, 
            "id": "cdfns6g"
        }, 
        {
            "body": {
                "answer": "<p>Really enjoyed your input. <br><br>According to your advice, I only have 19 year, 11 months, and 12 days to go before it gets easy!<br><br>Thanks!! <colon>-)</p>", 
                "question": "Lessons from someone coding for over 30 years."
            }, 
            "id": "czklrx1"
        }, 
        {
            "body": {
                "answer": "<p>> 2 - 4 hours a day  <br>What?</p>", 
                "question": "Lessons from someone coding for over 30 years."
            }, 
            "id": "czknaai"
        }, 
        {
            "body": {
                "answer": "<p>> If developing even large systems seems like a challenge after you<sq>ve been at it for so long, you<sq>re probably doing something wrong.<br><br>I completely disagree with this and would venture to say that you<sq>re in the wrong field if you<sq>re not being challenged.  I don<sq>t like the way that you<sq>ve worded this because I feel like you<sq>re making people think that it gets boring after a while.<br><br>I<sq>ve only been professionally coding for 10 years, but I<sq>ve been at it as a hobby for over 20.  Whenever I<sq>ve gotten bored (or not challenged), I<sq>ve moved onto another position.  I<sq>ve had the opportunity to work on radar systems, training simulations, work at the Kennedy Space Center, had code fly on U-2<sq>s and a ton of other awesome coding adventures.  The system I work on now is a collection of SOA services and while the tiny little pieces might be easy, coordinating the messages and sequences between all the services is a challenge.  There are coding standards and performance requirements that push me to make my code more efficient and streamlined.<br><br>All this is to say that if you<sq>re not challenged even after 30 years, you<sq>ve probably just settled for a boring gig.</p>", 
                "question": "Lessons from someone coding for over 30 years."
            }, 
            "id": "czkrcp6"
        }, 
        {
            "body": {
                "answer": "<p>It took me about ten years to figure this out....<br><br>Maintenance is ALWAYS 99<percent> of the cost of each line of code. If you don<sq>t plan to continue to support to a piece of your service/application, then don<sq>t write it in the first place. Having nothing if much better than having something 1/2 way working.</p>", 
                "question": "Lessons from someone coding for over 30 years."
            }, 
            "id": "czkszbq"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "CGI and Computer Graphics - Just asking a few questions; please don<sq>t upvote"
            }, 
            "id": "ca6mxgi"
        }, 
        {
            "body": {
                "answer": "<p>When you<sq>re talking about cinematic trailers, pre-rendered cutscenes in games, and 3d rendered computer graphic clips varying in length from something like [Kiwi!](http<colon>//www.youtube.com/watch?v=sdUUx5FdySs) all the way to a full-length CG movie like Toy Story, you<sq>re looking at what generally falls under Computer Animation. There<sq>s a whole host of subreddits dealing with more specific aspects of animation, but you<sq>re probably looking for http<colon>//www.reddit.com/r/3DMA or http<colon>//www.reddit.com/r/computergraphics/ .<br><br>Getting started is probably one of the most confusing things about 3D animation these days because there<sq>s a ton of ways to do it. You can go the traditional approach and take college courses which will likely introduce you to Maya or 3ds Max, you can attend a shorter length animation camp, or you can dive in head first and start with open source/freeware applications such as Blender and train yourself with the millions of relevant tutorial videos on the internet.<br><br>If you<sq>re still in highschool and have the summer to spend on it, you<sq>ll probably want to start with something like [Blender](http<colon>//www.blender.org/), which is free and extremely powerful. There<sq>s a [blender subreddit](http<colon>//www.reddit.com/r/blender) that<sq>ll give you an idea of what sort of things people do with Blender, and the sidebar there lists a lot of related subreddits and resources to get you started.<br><br>Best of luck, it<sq>s a pretty cool field of study!</p>", 
                "question": "CGI and Computer Graphics - Just asking a few questions; please don<sq>t upvote"
            }, 
            "id": "ca6ls2c"
        }, 
        {
            "body": {
                "answer": "<p>Yeah as has been posted elsewhere, this is 3D animation (No one calls it CGI).<br><br>This is the path you need to take. <br>As someone who has studied this himself<colon><br><br>First you pick your program, there are 3.<br><br>* 3Ds Max (the Biggest one)<br><br>* Maya (The Competitor)<br><br>* Blender (The Free one)<br><br>3Ds MAX and Maya USED to be competitors, but Autodesk, the company that made 3Ds max bought Maya and now gives them both out. (yeey Capitalism).<br><br>Generally speaking, at least in my day, the consensus is that 3Ds Max is better for modeling, and Maya is better for Animation, but both suites allow you to do both, and you will rarely work with both of them, you<sq>ll pretty much need to pick one.<br><br>So why not learn them all? Well, you can, learning a program is NOT the hardest thing in the world, it might seem daunting at first, but one week with some youtube tutorials will give you a comfortable head start into both modeling and animation.<br><br>The hard part is making something good, they are all designed to be easy to work with of course.<br><br>BUT, they all have different ways of doing stuff, and most importantly they have DIFFERENT Shortcuts.  As a guy who went from 3Ds Max to Blender I STILL can<sq>t stop myself from using the W E R keys to switch my tools around. This is why you generally want to specialize in just one of these programs, when working professionally it<sq>s a lot about being able to work fast, and have efficient workflow. <br><br>So why Blender?<br><br>Well, it<sq>s free, and that is something. You can<sq>t actually buy the other ones, just buy a license which costs nearly 6 thousand dollars, then it<sq>ll cost you around 5 thousand dollars a year to upgrade. There are student prices, and of course certain sites in the nether regions of the internet where you might get it for free.<br><br>But an important consideration, at least for me, is that Blender is free and so incurs no cost on my potential employer, which would have to pay for the expensive license. Blender is getting better and better with each iteration and the Blender community is large and constantly growing, definitely my recommendation.<br><br>You also ask about programming, actually not a bad idea.<br><br>If you want to get really good at a 3D program, you<sq>ll need to make your OWN tools for it. That is where programming comes in, scripting to be precise, and this is all supported o course. Can<sq>t remember what Maya uses, but 3Ds Max uses its own Maxscript, while Blender uses Python, a very popular, common and pretty easy programming language. I might not go so far as to take a Computer programming class, you can learn this on your own, but learning 3D design is something that many schools will teach you.<br><br>Feel free to ask anything.   </p>", 
                "question": "CGI and Computer Graphics - Just asking a few questions; please don<sq>t upvote"
            }, 
            "id": "ca6nh6b"
        }, 
        {
            "body": {
                "answer": "<p>Please don<sq>t upvote this comment guys</p>", 
                "question": "CGI and Computer Graphics - Just asking a few questions; please don<sq>t upvote"
            }, 
            "id": "ca6x7hx"
        }, 
        {
            "body": {
                "answer": "<p>I found that I learned and internalized sql about 100x faster on the job with so much data. </p>", 
                "question": "What<sq>s the current best way to self-teach SQL?"
            }, 
            "id": "dc15qa5"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//lagunita.stanford.edu/courses/DB/2014/SelfPaced/about</p>", 
                "question": "What<sq>s the current best way to self-teach SQL?"
            }, 
            "id": "dc15ibm"
        }, 
        {
            "body": {
                "answer": "<p>Have you tried this one? https<colon>//www.khanacademy.org/computing/computer-programming/sql</p>", 
                "question": "What<sq>s the current best way to self-teach SQL?"
            }, 
            "id": "dc15eua"
        }, 
        {
            "body": {
                "answer": "<p>Try [SQLBolt](https<colon>//sqlbolt.com/) to start.</p>", 
                "question": "What<sq>s the current best way to self-teach SQL?"
            }, 
            "id": "dc14jhc"
        }, 
        {
            "body": {
                "answer": "<p>Simple java application that scans a drive and removes duplicate files based on some custom parameters.<br><br>Made it to keep my mp3-player clean of duplicates.<br><br>Fun fact<colon> first time I tried writing it, it wiped my whole mp3-player full of songs I hadn<sq>t backed up because I didn<sq>t bother with tests and made a stupid mistake in a for-loop (don<sq>t test in production, kids!)</p>", 
                "question": "What are some simple programs you wrote for yourself and now cant<sq>t live without?"
            }, 
            "id": "d6y9wfp"
        }, 
        {
            "body": {
                "answer": "<p>About 10 years ago I wrote a little web-based program to organize a weekly lunch & dinner menu and generate from it a shopping list.  I<sq>ve rewritten it once since then, but we still use it every week.  I don<sq>t know how we<sq>d make a shopping list without it.</p>", 
                "question": "What are some simple programs you wrote for yourself and now cant<sq>t live without?"
            }, 
            "id": "d6y1c25"
        }, 
        {
            "body": {
                "answer": "<p>A few years back I wrote a webapp to keep track of all my books. Since then it<sq>s grown, and now gives me simple statistics on my reading habits, and keeps track of where every book is.</p>", 
                "question": "What are some simple programs you wrote for yourself and now cant<sq>t live without?"
            }, 
            "id": "d6y1npf"
        }, 
        {
            "body": {
                "answer": "<p>I haven<sq>t done this, but I know other people have. You can write your own home page to visit on startup of your browser. </p>", 
                "question": "What are some simple programs you wrote for yourself and now cant<sq>t live without?"
            }, 
            "id": "d6y952b"
        }, 
        {
            "body": {
                "answer": "<p>Hey I<sq>d love to watch, would you be able to post a recorded version for those of us over in GMT?</p>", 
                "question": "Would you guys be interested in learning how to make a Chrome Extension with me?"
            }, 
            "id": "cz2efg2"
        }, 
        {
            "body": {
                "answer": "<p>Will you release the video for downloading after the streaming?</p>", 
                "question": "Would you guys be interested in learning how to make a Chrome Extension with me?"
            }, 
            "id": "cz2f90k"
        }, 
        {
            "body": {
                "answer": "<p>I would like to watch if it isnt too late <colon>)</p>", 
                "question": "Would you guys be interested in learning how to make a Chrome Extension with me?"
            }, 
            "id": "cz20td2"
        }, 
        {
            "body": {
                "answer": "<p>I wrote this 5 minute chrome extension helper guide.  You might enjoy it.<br><br>http<colon>//kelukelu.me/writing/wordreplace.html</p>", 
                "question": "Would you guys be interested in learning how to make a Chrome Extension with me?"
            }, 
            "id": "cz2qisb"
        }, 
        {
            "body": {
                "answer": "<p>I liked Clean Code (Java based but meant to be general), and Pragmatic Programmer. </p>", 
                "question": "What are some of the best programming and computer science books in the last couple of years?"
            }, 
            "id": "dbayv9q"
        }, 
        {
            "body": {
                "answer": "<p>Three entry-level (YMMV) great books that are available online<colon><br><br>* [Automate the Boring Stuff with Python](https<colon>//automatetheboringstuff.com/)<br>* [Learn You a Haskell for Great Good!](http<colon>//learnyouahaskell.com/chapters)<br>* [Eloquent JavaScript](http<colon>//eloquentjavascript.net/)</p>", 
                "question": "What are some of the best programming and computer science books in the last couple of years?"
            }, 
            "id": "dbb5mr1"
        }, 
        {
            "body": {
                "answer": "<p>The Mythical Man-Month, Design Patterns, Refactoring. </p>", 
                "question": "What are some of the best programming and computer science books in the last couple of years?"
            }, 
            "id": "dbb2965"
        }, 
        {
            "body": {
                "answer": "<p>I recommend the head first series. They gave book on every major language, all very readable and funny.</p>", 
                "question": "What are some of the best programming and computer science books in the last couple of years?"
            }, 
            "id": "dbb36rz"
        }, 
        {
            "body": {
                "answer": "<p>all i can say is WOW.</p>", 
                "question": "CloudFlare Data Leak! 7.3MILLION+ Potential Affected Websites Leaking API Keys Passwords and More"
            }, 
            "id": "de5g0hs"
        }, 
        {
            "body": {
                "answer": "<p>One of the reddit admins said on a thread over in /r/programming that reddit wasn<sq>t affected. <br><br><br>Link to comment<colon> https<colon>//www.reddit.com/r/programming/comments/5vtv16/cloudflare_have_been_leaking_customer_https/de5fqcr (sorry on mobile)</p>", 
                "question": "CloudFlare Data Leak! 7.3MILLION+ Potential Affected Websites Leaking API Keys Passwords and More"
            }, 
            "id": "de5kacf"
        }, 
        {
            "body": {
                "answer": "<p>1password said no data leaked<colon> https<colon>//blog.agilebits.com/2017/02/23/three-layers-of-encryption-keeps-you-safe-when-ssltls-fails/ what a relief</p>", 
                "question": "CloudFlare Data Leak! 7.3MILLION+ Potential Affected Websites Leaking API Keys Passwords and More"
            }, 
            "id": "de5ishu"
        }, 
        {
            "body": {
                "answer": "<p>OP, please update your list. The full list of affected websites can be found [here](https<colon>//github.com/pirate/sites-using-cloudflare/blob/master/README.md).</p>", 
                "question": "CloudFlare Data Leak! 7.3MILLION+ Potential Affected Websites Leaking API Keys Passwords and More"
            }, 
            "id": "de5llco"
        }, 
        {
            "body": {
                "answer": "<p>Yes, yes, OP. I totally get how you feel. That<sq>s what got me started as well. Those little, Eureka moments -- the ones that make your day, lighten up your mood, make you feel better and confident. Great going, there. <br><br>Start creating your personal projects, automate trivial things via scripts you<sq>d love to write, problems you would love to solve, know more about data structures, algorithms, software engineering principles, read more, code more than that, and read even more code than that.<br><br>But here<sq>s the catch, OP, and please do **not** take this in the wrong way possible -- after building the foundation on these Eureka moments, the moments which would follow might be disappointing, might not be as exciting as they used to be -- the Eureka might just turn into a relief reaction on getting something to work, or on fixing a bug which took days to figure out. But do you know what the trick is? To let these frustrating, disappointing moments remind you of the original moments which made you fall in love with programming, let these disappointing moments be your strength -- code, and fall in love with it... solve problems of all kinds; whatever kind you love, slowly, steadily.  <br><br>Good luck with your programming journey!</p>", 
                "question": "You had me at <sq>Hello world!<sq>"
            }, 
            "id": "dda3hzl"
        }, 
        {
            "body": {
                "answer": "<p>Everyone wishes they<sq>d started 5 years sooner, even the people who started learning as a hobby at 12 years old. It<sq>s the universal truth. <colon>P<br><br>I think that feeling is a big driving force behind why I love to code, and why I<sq>ve pursued it for a career. There are dark, sometimes long stretches of time where you<sq>re stuck on a problem. It can be disheartening, and frustrating, and you<sq>ll have bad days... but that feeling when you finally solve it is *amazing*. It<sq>s like you described, a lightning bolt and rising frisson as all the pieces fit together in your head, and you start hammering away at the code.<br><br>There<sq>s also the satisfaction of spending all day, or weeks, on a project and then seeing it successfully run afterward. All of those tiny systems you built and wove together, working in beautiful harmony to do something *useful*. That<sq>s such an awesome thing to see.<br><br>I like what you said about <sq>seeing past the veil<sq>. It often boggles my mind just how much programming I use every day. I can<sq>t even begin to fathom the number of programmers and hours that have gone into all the basic crap I do. From my Operating System, to my car, music player, internet browsing, ordering food at the fast food store, buying groceries at self checkout... everything is programmed. Being able to comprehend that and appreciate it, well that<sq>s a wonderful experience.<br><br>Even our modern languages are unfathomable. Somebody had to build machine code, and somebody invented assembler, and somebody invented C, and others invented intermediate translation languages, and then eventually the modern language you use now (C#, Java, JS, etc...) is translated all the way back down into machine code by a compiler that was worked on tirelessly by big teams of senior engineers.<br><br>It<sq>s fun, isn<sq>t it? <colon>)</p>", 
                "question": "You had me at <sq>Hello world!<sq>"
            }, 
            "id": "dda3a70"
        }, 
        {
            "body": {
                "answer": "<p>I got that feeling less and less the more I discovered and the more experienced I became. I guess when you start there are big, sweeping, improvements to discover and learn about. As I improved there were less and less of those and the things you do learn are smaller and smaller. The feeling never goes completely though, learning something new and then changing a bit of old code to work better always gives me a mini version of that feeling. <br><br>I do still get a similar feeling where typing a thing (or a series of things) and then watching the code execute gives me a sense of satisfaction which has never really diminished.<br><br>also, squashing a bug that you<sq>ve been looking at for a few hours never gets old <dq>got you, you little bugger<dq>.</p>", 
                "question": "You had me at <sq>Hello world!<sq>"
            }, 
            "id": "dda9s3k"
        }, 
        {
            "body": {
                "answer": "<p>I had these moments doing my coursework at uni, but now I kinda feel stuck without the discipline of the coursework. <br><br>I skim over tutorials, taking little in, with no real projects I want to pursue. I guess that<sq>s the main thing, having something you WANT to build?</p>", 
                "question": "You had me at <sq>Hello world!<sq>"
            }, 
            "id": "ddab4f4"
        }, 
        {
            "body": {
                "answer": "<p>Well, if the easy problems are too hard for you, you<sq>ve got two options<colon> learn more before starting to work on problem solving, or find solutions to those easy problems which walk you through step by step so you can get a feel for how problem solving works in computer science and work through them that way. Sounds like the former might be the better option right now, because, well, you<sq>re *beginning* to learn. You may just not have enough tools in your proverbial toolkit to know how to begin with actual problems yet. </p>", 
                "question": "I am looking for real <dq>beginner<dq> challenges. The <dq>easy<dq> things around the web are too hard for me."
            }, 
            "id": "dahqqv5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I am looking for real <dq>beginner<dq> challenges. The <dq>easy<dq> things around the web are too hard for me."
            }, 
            "id": "dahqyvz"
        }, 
        {
            "body": {
                "answer": "<p>Also not sure if you are aware but the challenges on /r/DailyProgrammer get harder the higher up they go. So for example <dq>Challenge #293 Easy<dq> is way harder than <dq>Challenge #1 Easy<dq>.</p>", 
                "question": "I am looking for real <dq>beginner<dq> challenges. The <dq>easy<dq> things around the web are too hard for me."
            }, 
            "id": "dahse7b"
        }, 
        {
            "body": {
                "answer": "<p>[Project Euler](https<colon>//projecteuler.net/archives) starts out at a beginner level. Give it your best shot even if they don<sq>t seem doable to you at first, but if you are struggling to complete any of the first few problems from Project Euler, that<sq>s a good indication that you need to hit the books again. For almost all programming problems you need a good understanding of<colon><br><br>* Loops (for, while, etc)<br><br>* Branching logic (if/else, for example)<br><br>* Variables (getting and setting values, operations (like +, *, etc), and when and how to use which variable types)<br><br>* Strings (and at the very least string concatenation and substring methods)<br><br>EDIT<colon> Project Euler, like most programming challenges, is very math-based. Not all programming problems are as math-based, however, and I understand that math-based problems like these can add to the existing learning curve of programming if you are not comfortable with math problems. However, math-based problems are the most popular because it<sq>s easy to measure whether or not you<sq>ve truly succeeded at the problem and because you<sq>re capable of writing a solution to a math-based programming problem in any language.</p>", 
                "question": "I am looking for real <dq>beginner<dq> challenges. The <dq>easy<dq> things around the web are too hard for me."
            }, 
            "id": "dai0802"
        }, 
        {
            "body": {
                "answer": "<p>Computerphile<br>(Sorry on mobile so no link <colon>\\)</p>", 
                "question": "Which YouTube channel as programmer you like the most?"
            }, 
            "id": "ck2qw8s"
        }, 
        {
            "body": {
                "answer": "<p>For Android, Java, Javascript, and Python Programming, [Slidenerd](https<colon>//www.youtube.com/user/slidenerd) deserves a lot of recognition for his effort in creating tutorial vids for beginners.<br><br>Also discovered [Dereck Banas](https<colon>//www.youtube.com/user/derekbanas) one for his [Java in 30 minutes tutorial] (https<colon>//www.youtube.com/watch?v=WPvGqX-TXP0). The same respect for him too</p>", 
                "question": "Which YouTube channel as programmer you like the most?"
            }, 
            "id": "ck2rdgc"
        }, 
        {
            "body": {
                "answer": "<p>My bring back<br><br>Derek Banas </p>", 
                "question": "Which YouTube channel as programmer you like the most?"
            }, 
            "id": "ck2r5uz"
        }, 
        {
            "body": {
                "answer": "<p>^^^^^^^^^^^^^^^^.  <br>Here<sq>s the media found in this post.  Autoplaylist<colon> **[web](//radd.it/comments/2etd4x/_/ck31oae)/ <br>  [mobile](//m.radd.it/comments/2etd4x/_/ck31oae)**<br><br>^^^^^^^^^^^^^^^^.  <br>^^^^^^^^^^^^^^^^.  <br><br><br>|Link|User|<br>|<colon>-|<colon>-|<br>|**[LearnCode.academy](https<colon>//www.youtube.com/channel/UCVTlvUkGslCV_h-nSAId8Sw)**|*[artur1997](/r/learnprogramming/comments/2etd4x/_/ck34uwf)*|<br>|**[recursion](https<colon>//www.youtube.com/watch?v=Mv9NEXX1VHc)**|*[Boxcow45](/r/learnprogramming/comments/2etd4x/_/ck2svr4)*|<br>|**[Floating-Point Numbers](https<colon>//www.youtube.com/watch?v=PZRI1IfStY0)**|*Boxcow45*|<br>|**[Link](https<colon>//www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA)**|*[CaptainApple](/r/learnprogramming/comments/2etd4x/_/ck2s051)*|<br>|**[iTzAdam5X](https<colon>//www.youtube.com/channel/UC9pq4hre8qZI132O4cok5vA)**|*[done8989](/r/learnprogramming/comments/2etd4x/_/ck31hqb)*|<br>|**[BurgZerg Arcade](https<colon>//www.youtube.com/channel/UCOIcO8Lsk1MERedhOnew73A)**|*[kabbotta](/r/learnprogramming/comments/2etd4x/_/ck3bp3j)*|<br>|**[Chong Kim!](https<colon>//www.youtube.com/channel/UCS2Y1t8DRUnXiI067QsXgUA)**|*[onemug](/r/learnprogramming/comments/2etd4x/_/ck2qqol)*|<br>|**[Java link](https<colon>//www.youtube.com/watch?v=WPvGqX-TXP0)**|*[Pashtacular](/r/learnprogramming/comments/2etd4x/_/ck2xna0)*|<br>|**[Chili](https<colon>//www.youtube.com/channel/UCsyHonfwHi4fLb2lkq0DEAA)**|*[x22ninex](/r/learnprogramming/comments/2etd4x/_/ck3254o)*|<br>|^^_______________________________________________________________________________________________|^^______________________________|<br>*^Downvote ^if ^unwanted, ^self-deletes ^if ^score ^is ^0.  ^Comment ^will ^update ^if ^new ^media ^is ^found.*  <br>[^about ^this ^bot](/1vjdw9) ^| [^recent ^playlists](/r/radditplaylists) ^| [^plugins ^that ^interfere](/1m21ku) ^| ^R.I.P. ^/u/VideoLinkBot</p>", 
                "question": "Which YouTube channel as programmer you like the most?"
            }, 
            "id": "ck31oae"
        }, 
        {
            "body": {
                "answer": "<p>A classic one is the katamari Js script imo http<colon>//kathack.com<br><br>Edit<colon> Here<sq>s a bunch of cool js stuff as well, http<colon>//aem1k.com. The globe one is probably my favorite http<colon>//aem1k.com/world.</p>", 
                "question": "What is a cool thing in Javascript to show someone what it can do?"
            }, 
            "id": "d70v6ar"
        }, 
        {
            "body": {
                "answer": "<p>Check out this talk about Javascript by Scott Hanselman. I was blown away when I saw it. https<colon>//youtu.be/eJV-hqQGZXU</p>", 
                "question": "What is a cool thing in Javascript to show someone what it can do?"
            }, 
            "id": "d70oym1"
        }, 
        {
            "body": {
                "answer": "<p>    `${Array(16).join(<sq>wat<sq>-1)}a Batman !`</p>", 
                "question": "What is a cool thing in Javascript to show someone what it can do?"
            }, 
            "id": "d710nl1"
        }, 
        {
            "body": {
                "answer": "<p>You can edit the text and format of any web page if you type <br><br>javascript<colon>document.body.contentEditable=<sq>true<sq>; document.designMode=<sq>on<sq>; void 0<br><br>into the browser. <br><br></p>", 
                "question": "What is a cool thing in Javascript to show someone what it can do?"
            }, 
            "id": "d70zyju"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been self teaching for about 4 years and this is my first week at a company. We made it bro</p>", 
                "question": "Just been offered my first Developer job (9 months in the making)"
            }, 
            "id": "d1v0qk7"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s your role in the company? And what technologies are you using? Also, if you don<sq>t mind then please share how much is the salary.</p>", 
                "question": "Just been offered my first Developer job (9 months in the making)"
            }, 
            "id": "d1uwtnm"
        }, 
        {
            "body": {
                "answer": "<p>VBA is the gateway drug </p>", 
                "question": "Just been offered my first Developer job (9 months in the making)"
            }, 
            "id": "d1v1dsc"
        }, 
        {
            "body": {
                "answer": "<p>As a first year university student (only 18) this sub is so great for motivation. Many of the lectures are so boring and some profs are so bad. But I can<sq>t wait for summer in a few weeks to get to learning on my own without the stress of tests and due dates.  <br><br>Love hearing about people making it and a big congratulations on your new job!</p>", 
                "question": "Just been offered my first Developer job (9 months in the making)"
            }, 
            "id": "d1uz0g5"
        }, 
        {
            "body": {
                "answer": "<p>The links are nice.<br><br>Most of the time I just search for what I want to do, when I have to write in a language I don<sq>t know much about<br><br>For example I<sq>ve written a lot in C and never google that, except if I<sq>m looking for some specific library.<br><br>But let<sq>s say I<sq>m writing a bash script, and I don<sq>t know the correct syntax, then I<sq>ll search stuff like <dq>bash compare strings<dq> or whatever<br><br>My searches actually look like that almost all the time, whenever I<sq>m dealing with a new language<br><br><dq>Python declare class<dq><br><br><dq>Prolog append element to list<dq><br><br><dq>VBS initialize object<dq><br><br><dq>Perl regex<dq><br><br>etc.<br><br>Sometimes those searches just redirect you to documentation, which is good too, I mean RTFM.<br><br>In the end programming is always the same when you kind of grasp the basics, but the syntax differs and that<sq>s what can fuck you up</p>", 
                "question": "List of mostly free learning resources for Linux Vim Python and Perl"
            }, 
            "id": "d1lpph9"
        }, 
        {
            "body": {
                "answer": "<p>I manage them with a mix between storing the information in my brain and Google.</p>", 
                "question": "List of mostly free learning resources for Linux Vim Python and Perl"
            }, 
            "id": "d1ltljy"
        }, 
        {
            "body": {
                "answer": "<p>I created one to, But only for one<sq>s I refer to often https<colon>//github.com/Leo-G/DevopsWiki</p>", 
                "question": "List of mostly free learning resources for Linux Vim Python and Perl"
            }, 
            "id": "d1lqmn3"
        }, 
        {
            "body": {
                "answer": "<p><br>I have a few folders, followed by  sub-folders for different topics.. For example, all my learning resources are in the main <dq>Learning Resources<dq> folder. Then they are separated into their own folders depending on what its for (python, metasploit,etc etc)<br><br></p>", 
                "question": "List of mostly free learning resources for Linux Vim Python and Perl"
            }, 
            "id": "d1ltcis"
        }, 
        {
            "body": {
                "answer": "<p>I asked this question a while back when I was still in school. I graduated in May and have been on the job developing for 3 months now, and this is a really good question to ask! There were so many things that I just brushed off that came back to haunt me later. Here are the ones that come to mind<colon><br><br>Version control<colon> It<sq>s a big part of working on a team. It<sq>s pretty easy to learn if you just spend a little time with it, but if you<sq>re like me... You might just go through the motions with it and not really know what you<sq>re doing. This can be a pain in the ass for other people on your team (learned that the hard way.)<br><br>Big applications<colon> all the stuff I did in school was only a couple dozen classes at most, whereas the app I work on here consists of hundreds! While it doesn<sq>t change much conceptually... It is a big difference in how hard it is to sift through another persons code. <br><br>Libraries<colon> whatever language you work with most, you should research some of the more popular libraries and develop a good understanding of them at least<colon> I<sq>m a Java guy and I had no experience with hibernate, which is a huge part of what we do... Made for a steep learning curve.<br><br><br><br>If you<sq>re like me, and you aren<sq>t some sort of whiz kid programmer... Look for a job that provides TRAINING. Often times I am at a loss for what to do, and don<sq>t want to bother my superiors which gets pretty frustrating. A training program would have been far more helpful than getting stuck and asking for help all the time.<br><br>Hope this helps, and good luck.</p>", 
                "question": "What Do I Need To Know That School Isn<sq>t Teaching Me?"
            }, 
            "id": "d8lvunf"
        }, 
        {
            "body": {
                "answer": "<p>soft skills, like dealing with teams, managers, and non-programmers. <br><br>how to realize that there are non-technical reasons for something to be the way it is. legacy systems exist, and your .5years of experience aren<sq>t going to make a business tear down a multimillion dollar app because it<sq>s not using <buzzword>.<br><br>dealing with HR, and getting a job. i<sq>ll hire a junior who is the second best programmer if they are someone i<sq>d be ok working with. some people can get away with an amount of jerkness because they are that awesome. you are *probably* not that.<br><br>dealing with burnout. how to push through a project that sucks, and has sucked for the past 200hrs. its going to still suck in the morning, but it still has to be done.<br><br>edit, more<colon><br><br>being able to implement the right solution, and not just the technically correct one. we<sq>ve heard about reinventing the wheel, but at a certain point not every thing needs monster truck tires. ternary functions are cool and quick, but readable code is usually better in the long term. that new library is neat, but it means 2 days of implementing instead of an hour.<br><br>own up to your fuck ups. pushed a bad update to production instead of stage? sure it should never happen, but it did. tell someone and get it fixed. figure out how to prevent it from happening again later, when it<sq>s done.</p>", 
                "question": "What Do I Need To Know That School Isn<sq>t Teaching Me?"
            }, 
            "id": "d8lywrj"
        }, 
        {
            "body": {
                "answer": "<p>This is going to sound really boring, but project management is a good skill to develop. If you can successfully guide several programmers, some of whom may not even be on the same continent, and combine their output into a finished product then you<sq>ll never have to worry about finding a job. In fact, if you<sq>re good at it, you<sq>ll probably be turning down several job offers a year. Oh, and it<sq>s nowhere near as boring as it sounds.</p>", 
                "question": "What Do I Need To Know That School Isn<sq>t Teaching Me?"
            }, 
            "id": "d8lwksq"
        }, 
        {
            "body": {
                "answer": "<p>- debugging <br><br>No one taught me how to place breakpoints/add watches/some other stuff. It<sq>s like you wandering in the darkness, printing different variables, trying to figure out why doesn<sq>t your code work as intended until some day you learn about breakpoints and how to run your program step by step. That shit saves you hours if not days of work and boosts your knowledge about what happens under the hood.<br><br>- also try to write tests, at least for the key parts of your code.</p>", 
                "question": "What Do I Need To Know That School Isn<sq>t Teaching Me?"
            }, 
            "id": "d8m3wai"
        }, 
        {
            "body": {
                "answer": "<p>>  If you do decide to post a precompiled binary<br><br>There is no reason to post a binary to this subreddit at all. To be safe, I<sq>d recommend mods remove such posts and request the submitter simply post a link to their source. Why even take the chance?</p>", 
                "question": "Warning<colon> Do not download or run any binaries!"
            }, 
            "id": "c80w4bi"
        }, 
        {
            "body": {
                "answer": "<p>A great idea is to run it in a VM, rather than on your main OS.</p>", 
                "question": "Warning<colon> Do not download or run any binaries!"
            }, 
            "id": "c80wp3n"
        }, 
        {
            "body": {
                "answer": "<p>Sorry, but what is a binary file exactly?</p>", 
                "question": "Warning<colon> Do not download or run any binaries!"
            }, 
            "id": "c80xp2k"
        }, 
        {
            "body": {
                "answer": "<p>Source isn<sq>t especially safer. Really, the principle is the same<colon> Don<sq>t download random, untrusted code from the Internet and run it, without at least making *some* effort to verify it.<br><br>So, yes, source is better than a binary, but I<sq>m still going to try to *read* that source before I execute it. And you<sq>ll forgive me if I execute it in a sandbox.</p>", 
                "question": "Warning<colon> Do not download or run any binaries!"
            }, 
            "id": "c815sce"
        }, 
        {
            "body": {
                "answer": "<p>Wow this is really good. I<sq>m honestly very impressed! Good shit.  <br>The functionality is there. I would probably make the UI/UX is more <dq>dumb user friendly<dq>. </p>", 
                "question": "All my friends and family think I just built a website but no one appreciates the work I did to scrape and host my little webapp. Maybe you guys will enjoy what I built after ~4 months of learning R MySQL and some server admin."
            }, 
            "id": "d19puf0"
        }, 
        {
            "body": {
                "answer": "<p>Looks good, I would now work on the UI/UX. Really get it polished. The basic functionality is there.</p>", 
                "question": "All my friends and family think I just built a website but no one appreciates the work I did to scrape and host my little webapp. Maybe you guys will enjoy what I built after ~4 months of learning R MySQL and some server admin."
            }, 
            "id": "d19oem4"
        }, 
        {
            "body": {
                "answer": "<p>+ ***Dude<colon> correlate Wikipedia data with stock market VOLUME***<br><br></p>", 
                "question": "All my friends and family think I just built a website but no one appreciates the work I did to scrape and host my little webapp. Maybe you guys will enjoy what I built after ~4 months of learning R MySQL and some server admin."
            }, 
            "id": "d1a6n6f"
        }, 
        {
            "body": {
                "answer": "<p>Damn, have you only been programming for ~4 months?? This looks  great and works really well.</p>", 
                "question": "All my friends and family think I just built a website but no one appreciates the work I did to scrape and host my little webapp. Maybe you guys will enjoy what I built after ~4 months of learning R MySQL and some server admin."
            }, 
            "id": "d19xqsl"
        }, 
        {
            "body": {
                "answer": "<p>You should ask your friend to submit it to the curated list on Github - they will review it and potentially add it to the list.<br><br>[Link](https<colon>//github.com/Michael0x2a/curated-programming-resources).</p>", 
                "question": "Free e-book<colon> How to Code in HTML5 and CSS3"
            }, 
            "id": "cqceh04"
        }, 
        {
            "body": {
                "answer": "<p>Definitely going to look this over, most of the people here are being dbags lol. The site is good, so I figure he can at least teach to make similar things. Besides learn ruby the hard way and python are saidbto be awesome and they<sq>re free! Michael Hartl<sq>s rails book is considered awesome and is also free, free doesn<sq>t mean lame.</p>", 
                "question": "Free e-book<colon> How to Code in HTML5 and CSS3"
            }, 
            "id": "cqbye6d"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this! I shared it with some friends as well. </p>", 
                "question": "Free e-book<colon> How to Code in HTML5 and CSS3"
            }, 
            "id": "cqc7ff2"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve already learnt HTML4/CSS2, and the book seems to teach a lot of the same (understandably, since it<sq>s aimed at those with no experience).  <br>  <br>Are there any chapters that highlight the new features or certain chapters that I must read through?</p>", 
                "question": "Free e-book<colon> How to Code in HTML5 and CSS3"
            }, 
            "id": "cqcmf5o"
        }, 
        {
            "body": {
                "answer": "<p>Part 1<colon> Using Git from Home<br>=================<br><br>Git is a program. It<sq>s normally used through the command line, but there are plenty of GUI programs that can tell it to do something on your behalf.<br><br>Let<sq>s imagine a project you<sq>re working on. It doesn<sq>t have to be code. Let<sq>s write a movie script.<br><br>    crow@PBrosnan<colon>~/myAwesomeMovie$ ls<br>    script.txt<br>    crow@PBrosnan<colon>~$ vim script.txt<br>    MyAwesomeMovie<br>    ===========<br>    ext. Library<br>    Hero<colon> Let<sq>s go inside! Books are fun!<br><br>Great, we<sq>re well on our way to making a great movie. But now I want to work on this from the desktop in another office. Let me upload it to a git host somewhere, like GitHub or BitBucket.<br><br>    crow@PBrosnan<colon>~/myAwesomeMovie$ git init<br><br>This will start a <sq>git repo<sq>. It<sq>s the actual thing that will go back and forth.<br><br>    crow@PBrosnan<colon>~/myAwesomeMovie$ git add .<br><br>This will add everything in <sq>.<sq> (the current folder) to the repo. <br><br>To make things easier, I make an account in BitBucket, start a new project there, and use the magic line of code they give me<colon><br><br>    crow@PBrosnan<colon>~/myAwesomeMovie$ git remote add origin git@bitbucket.org<colon>crow1170/myAwesomeMovie.git<br>    crow@PBrosnan<colon>~/myAwesomeMovie$ git commit -m <sq>Initial commit<sq><br>    crow@PBrosnan<colon>~/myAwesomeMovie$ git push -u origin master<br><br>Using <sq>git remote add<sq> I added a connection to the git repo. The connection<sq>s name is <sq>origin<sq> and it<sq>s URL is <sq>git@bitbucket.org<colon>crow1170/myAwesomeMovie.git<sq>.<br>Using <sq>git commit<sq> I took a snapshot of how the project looks. I used the -m option to leave a message about what has changed in this snapshot. Since it<sq>s the first, nothing has changed, and I just say that it;s the initial one.<br>Using <sq>git push<sq> I send the current project, specifically the master branch, across the specified connection, origin. We<sq>ll talk about branches later. Once I hit enter, I<sq>ll be asked for my BitBucket credentials.<br><br>Part 2<colon> Using Git from the Office<br>====================<br><br>Now I<sq>m on a new computer. I don<sq>t have the myAwesomeMovie folder or any of its contents, but I do have git installed. I<sq>ll use it to download the project.<br><br>    crow@DCraig<colon>~$ git clone bitbucket.org<colon>crow1170/myAwesomeMovie.git<br><br>That will make the folder and fill it with the right files. Time to add things!<br><br>    crow@DCraig<colon>~myAwesomeMovie$ vim script.txt<br>    ...<br>    Supporting Character<colon> Yeah! I agree!<br><br>That seems like an appropriate stopping place. I<sq>ll add this file and commit it.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git add ./script.txt<br>    crow@DCraig<colon>~/myAwesomeMovie$ git commit - m <sq>Added a line for the supporting character<sq><br><br>    I<sq>ve saved my changes, but they<sq>re local for now. I<sq>ll have to push if I want them on BitBucket as well.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git push<br><br>To be clear, push doesn<sq>t send everything- It only sends your commits (snapshots). And commits don<sq>t include everything- They only include what you<sq>ve added.<br><br>Part 3<colon> Collaboration<br>=============<br><br>Now you want other people<sq>s input. Use the bug tracker in BitBucket to get feedback from people without editing privileges, like your cousin or friend. That<sq>s all GUI, so it should be easy enough to learn on your own.<br><br>To let your editor... well, edit, use the GUI controls to add their account to approved project members. Now they can clone, add, commit, and push just like you did.<br><br>Once they have, you<sq>ll want to see their changes. Do that with <sq>git pull<sq>.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git pull origin<br>    crow@DCraig<colon>~/myAwesomeMovie$ ls<br>    script.txt<br>    Hero.txt<br><br>Oh! It looks like our editor added some notes on the hero, cool! Well, better get back to work. We<sq>ll make a few dozen changes to script, commit, and push. This time, though, git will throw an error. Apparently, our commit changes some files that were also changed by our editor. This isn<sq>t usually a problem, but each repo has a <sq>commit history<sq>. When we push, we try to add our commits to BitBucket<sq>s history. Our history says we had commit #3 (our editor adding Hero.txt) and changed the script.txt file to make commit #4. BitBucket<sq>s says commit #4 was one from the editor making changes from the script. We<sq>ll have to get these changes and add them to our history before we can add our history to BitBucket<sq>s.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git pull<br>    crow@DCraig<colon>~/myAwesomeMovie$ git push<br><br>Super cool. Now the history is right and the script file has both our changes and theirs. They added their name to the heading, we added some lines toward the end, and there was no conflict, so the newest script has both sets of changes.<br><br>Without git, this would have looked like two different txt<sq>s (or doc<sq>s, or .js<sq>s), one made by us and one made by them. We<sq>d have to choose which changes were most important to us.<br><br>That still happens, sometimes. For example, the editor has changed the setting from <sq>library<sq> to <sq>book store<sq> to try getting some product placement. We had a similar thought, so we changed <sq>library<sq> to <sq>B&N<sq>. We<sq>re both editing the same line of the same file, so we<sq>ll have to pick whose changes we want to keep using the merge conflict tool, automatically started when git pull detects a conflict.<br><br>An easy way to avoid conflicts is to pull before editing and push immediately after. <br><br>In addition to our editor, our brother has some thoughts for the script. He<sq>s been adding too.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git pull<br>    crow@DCraig<colon>~/myAwesomeMovie$ vim script.txt<br>    crow sucks butts! Haha, your script is gone.<br><br>This won<sq>t do at all. First, let<sq>s confirm our suspicions. The BitBucket website shows the commit history and changes made. Sure enough, Brad made a commit the deleted 500 lines and added one. He<sq>s such a jerk. We<sq>ll copy the 7 character commit id of the commit just before his, abc123e.<br><br>    crow@DCraig<colon>~/myAwesomeMovie$ git reset abc123e<br>    crow@DCraig<colon>~/myAwesomeMovie$ git commit -m <sq>Reverted b/c Brad is a jerk<sq><br>    crow@DCraig<colon>~/myAwesomeMovie$ git reset --hard</p>", 
                "question": "ELI5<colon> github"
            }, 
            "id": "cppg0yj"
        }, 
        {
            "body": {
                "answer": "<p>> Is it used for backup?<br><br>Yes!<br><br>> To get others to collaborate? <br><br>Yes!<br><br>> For people to report errors? <br><br>Yes!<br><br>> General use aside, actually opening github is so daunting and I have no clue where to start. <br><br>Github is merely storage space, you need to look up what git is. It<sq>s a revision control system that backsup files as you mentioned but it has a lot more to it. Basically you can create a git repository for free on github, and use git to essentially upload files to their repository for the world to see or not. <br><br>I personally use it as a backup ALSO I use it as a way to send files from one system to another. I ssh into a server frequently, so instead of slowly using X11 to open a browser and taking years to transfer files over, I can merely type <dq>git pull<dq> and get files from my main computer in a matter of seconds. It<sq>s super useful. Also as an anecdote, I<sq>ve personally lost files in the past from not using some sort of backup, so never again will I not use git or svn with a project.</p>", 
                "question": "ELI5<colon> github"
            }, 
            "id": "cpp4l1d"
        }, 
        {
            "body": {
                "answer": "<p>Someone please explain forks, branches, clones.<br><br></p>", 
                "question": "ELI5<colon> github"
            }, 
            "id": "cpp9205"
        }, 
        {
            "body": {
                "answer": "<p>I would go through this page on [The Odin Project](http<colon>//www.theodinproject.com/web-development-101/git-basics), it will give you a nice run down. <br></p>", 
                "question": "ELI5<colon> github"
            }, 
            "id": "cpp7yny"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I am interested in cybersecurity/hacking where should I start?"
            }, 
            "id": "cxml40u"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//overthewire.org/wargames/<br><br>Try some of these! If you can do all of these, you have a good handle on basic (and not so basic) hacking techniques <br><br>Be warned<colon> This has everything from basic bash knowledge into reading assembly code. It is not for the faint of heart. </p>", 
                "question": "I am interested in cybersecurity/hacking where should I start?"
            }, 
            "id": "cxmo9x7"
        }, 
        {
            "body": {
                "answer": "<p>Security is all about practice. The basics to get into low level stuff would be some knowledge of C, assembly, and how OSes and networks work in general. Here are some useful and extremely high quality games/challenges to whet your appetite.<br><br>https<colon>//challenge.synacor.com/ -- In the Synacor challenge, your first task is to implement a custom Virtual Machine. After that, you get to a text Adventure game, with various programming related challenges to solve. This teaches you a *lot* about assembly, and you might even have to implement your own primitive debugger.<br><br>https<colon>//microcorruption.com/login -- Microcorruption is an Embedded Security CTF by Matasano. This teaches you a *lot* about low level exploitation - buffer overflows, format string attacks, using debuggers and writing shellcode. You can do almost all the challenges in your browser, no tools required (except maybe for the last level). The debugger they have is pretty much identical to gdb, which is a very useful tool to learn.<br><br>http<colon>//cryptopals.com/ -- These are the Matasano Crypto challenges. In my opinion they *the* best way to get into applied crypto as a total beginner.<br><br>I don<sq>t know about any web security challenge that is as addictive as these three are.  Wargames have been mentioned, but you should also play CTFs. Check out https<colon>//ctftime.org/, they have information on upcoming events. When you think you know the basics, feel free to register a one-man team and try to capture some flags. Warning<colon> this is highly addictive.</p>", 
                "question": "I am interested in cybersecurity/hacking where should I start?"
            }, 
            "id": "cxmopzw"
        }, 
        {
            "body": {
                "answer": "<p>Hacker here. I mostly got started by just finding security topics I was interested in and diving into them. One easy place to start<colon> there<sq>s a ton of free online <dq>CTF-style<dq> courses online.<br><br>[HackThisSite](https<colon>//www.hackthissite.org/) is a good one to start with, since it covers a variety of topics and starts mostly from first principles.<br><br>/u/balidani mentioned MicroCorruption, which I<sq>ll second.<br><br>I also strongly recommend that you set up a virtual machine and load up Kali Linux.  It comes chock full of a TON of tools and learning about / playing with those tools can help you start to get a good understanding of some of the concepts of the red team side of things.<br><br>Ultimately, you should set up a spare machine, install an OS and a few apps, and then try to hack into it and break it.  Start by replicating hacks you<sq>ve seen elsewhere.  Install a known-vulnerable version of Apache and hit it with a shellshock payload.  See what happens.  Pop a shell on the box a few different ways.  When you brick the box (which you will, if you<sq>re doing it right), reinstall or install something else and keep going.<br><br>The set up and reproduction of existing hacks will help you understand why they work, and in so doing help you understand more about how computers work.  Also, all the setup is very useful in building your general knowledge of operation systems, networks, etc.  And if you can<sq>t afford a spare computer?  BeagleBones or Raspberry Pis can run linux.  It<sq>s a great time to be alive!<br><br>Finally, participate in the community.  Check out old issues of Phrack.  Read current and back issues of 2600.  Check out the Def Con forums.  If there<sq>s a Con in your area, consider going.<br><br>There<sq>s also a TON of old talks on Youtube.  Just search <dq>Def Con talks<dq> or <dq>Shmoo Con talks<dq> or etc. and start clicking through ones that look interesting.<br><br>One note<colon> HACK RESPONSIBLY.  Ethics aside, gone are the days when a little harmless poking around was permitted or tolerate by the authorities.  Now minor hacks are getting good people thrown in jail.  So only hack systems you own or that you have explicit permission to hack on.  If you ever stray from this rule (and I leave that to your conscience), do yourself a favor and learn some OpSec first.  There are a ton of good resources for that as well.  Find them BEFORE you need them.  They do you no good afterwards.<br><br>Best of luck, and happy hacking!</p>", 
                "question": "I am interested in cybersecurity/hacking where should I start?"
            }, 
            "id": "cxmqsqr"
        }, 
        {
            "body": {
                "answer": "<p>When ever I see to many positive comments on a r/learnprogramming post, I start to wonder if everyone is being sarcastic... I know so little about webdev but want to get into it. This looks like the video form of an infograph someone posted a while back. When I finally get home for the day I<sq>m definitely going to sit down and watch this.</p>", 
                "question": "Watch this if you want to become a Web Developer!"
            }, 
            "id": "ct95zo5"
        }, 
        {
            "body": {
                "answer": "<p>We are all these comments so... general?</p>", 
                "question": "Watch this if you want to become a Web Developer!"
            }, 
            "id": "ct989my"
        }, 
        {
            "body": {
                "answer": "<p>Why do these comments sound so sarcastic?</p>", 
                "question": "Watch this if you want to become a Web Developer!"
            }, 
            "id": "ct98acw"
        }, 
        {
            "body": {
                "answer": "<p>A great tutorial on how to build a simple web application that requires 15 separate project directories as well as expertise in 27 different skills to work on.<br><br>I think it<sq>s partly that graph layout.<br><br>It would probably be more helpful to noobs if it was broken out into solution stacks rather than lines and lists, as many technologies work best with one another rather than across the board.<br><br>Source<colon> I<sq>ve been doing contract work for corporations and individuals for 15 years, including building several very large and successful projects.  But wtf do I know, I<sq>m a .NET dev, and that<sq>s the one thing on that entire chart that the author dismissed out of hand.</p>", 
                "question": "Watch this if you want to become a Web Developer!"
            }, 
            "id": "ct9fbpy"
        }, 
        {
            "body": {
                "answer": "<p>I need more of these!</p>", 
                "question": "Cartoon guide as intro to Linux concepts"
            }, 
            "id": "d9x3n22"
        }, 
        {
            "body": {
                "answer": "<p>Aw man, I love these! Keep them going!  You have a twitter, right?</p>", 
                "question": "Cartoon guide as intro to Linux concepts"
            }, 
            "id": "d9xg399"
        }, 
        {
            "body": {
                "answer": "<p>Please don<sq>t ever stop writing, they are fun to read</p>", 
                "question": "Cartoon guide as intro to Linux concepts"
            }, 
            "id": "d9xd00d"
        }, 
        {
            "body": {
                "answer": "<p>A lot of Julie<sq>s articles are A++. They are fun to read and expose someone learning new things and how they work. Definitely don<sq>t just stop with this one.</p>", 
                "question": "Cartoon guide as intro to Linux concepts"
            }, 
            "id": "d9xnrhg"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t take breaks and give up when needed.</p>", 
                "question": "Coders<colon> What would you tell your younger self?"
            }, 
            "id": "d7amqxf"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Coders<colon> What would you tell your younger self?"
            }, 
            "id": "d7amkec"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Coders<colon> What would you tell your younger self?"
            }, 
            "id": "d7aq6al"
        }, 
        {
            "body": {
                "answer": "<p>Computer science is such a big category that it can feel overwhelming and like you have to know it all.  You don<sq>t.  Web Development is different from games engine programming is different from robotics is different from etc.  It<sq>s okay and often necessary to pick what you love and focus on that.<br><br>Also<colon> Ask questions!  Programming has a lot of fiddly rules and languages and frameworks.  Don<sq>t spin your wheels too long on something before asking someone.</p>", 
                "question": "Coders<colon> What would you tell your younger self?"
            }, 
            "id": "d7aqx0x"
        }, 
        {
            "body": {
                "answer": "<p>Programming 101<colon> Links<br><br>1. [Codecademy](http<colon>//www.codecademy.com/) \u2013 One of the best free website to learn web programming. Personally I hate Codecacademy as I feel you only get introduced to a language. But You know whatever your into<br>1. [Coursera](https<colon>//www.coursera.org/) \u2013 Take free courses from professors all over the world. Courses are mostly about technology and programming.<br>1. [Scratch](http<colon>//scratch.mit.edu/) \u2013 A very fun project from MIT. The target audience is children, but for beginner programmers it is perfect to learn the logic of programming.<br>1. [SQL Zoo](http<colon>//sqlzoo.net/wiki/Main_Page) \u2013 Perfect site to learn the basics of the SQL (Structured Query Language). Most of the databases uses this language or very similar to it. Also the site offers an interactive surface to try out what you learnt.<br>1. [Udacity](https<colon>//www.udacity.com/) \u2013 Offers courses mostly about computer science. The most populars are about web programming, but you can find courses about artificial intelligence too.</p>", 
                "question": "5 best websites to start learning programming"
            }, 
            "id": "clob9yc"
        }, 
        {
            "body": {
                "answer": "<p>> Personally I hate Codecacademy<br><br>So that<sq>s why it<sq>s number one on your list? <colon>D</p>", 
                "question": "5 best websites to start learning programming"
            }, 
            "id": "clo74z1"
        }, 
        {
            "body": {
                "answer": "<p>[Here<sq>s a table](http<colon>//www.learneroo.com/modules/12/nodes/96) I made with some more helpful resources.<br><br></p>", 
                "question": "5 best websites to start learning programming"
            }, 
            "id": "clocxta"
        }, 
        {
            "body": {
                "answer": "<p>Any opinions on team treehouse?</p>", 
                "question": "5 best websites to start learning programming"
            }, 
            "id": "clo9z0p"
        }, 
        {
            "body": {
                "answer": "<p>You have to find a goal. <br><br>Is there something in your life that would be easier if it was just right in front of you? Do you have a app in mind you would like to create? Do you see your family/friends with a common problem? Any hobbies outside of programming you can supplement? <br><br>I<sq>m sure there is something that you want to do but it is so far beyond your skills that you cant fathom attempting right now. Do it anyway, break out down into smaller problems. <br><br>What information do I need to input to get started and what is the output of the program? These are the two most simple concepts. Everything in between breaks down to functions within the program. Design and display are frosting on the cake. <br><br>Everything else you can learn along the way. Like, using external resources that have already been built to manage certain tasks such as APIs from sites like Twitter or Google and using databases to store data and how to deliver a program through a Web server. <br><br>For almost every task there is an easy way. Do it the hard way. <br><br>**Edit<colon>** Just wanted to say, if you hit any walls, need resources, or just want a second set of eyes on your code you can PM  me and I<sq>m more than willing to help. Self-learning is a tough process and even today I wish I had a little mentorship sometimes. </p>", 
                "question": "I want to code but it<sq>s hard to just sit down and learn it without having something specific I<sq>m motivated to create(also hard to find) how are you guys dealing with that? I want to be engaged."
            }, 
            "id": "cl8sp2q"
        }, 
        {
            "body": {
                "answer": "<p>I accidentally told my boss that something was possible to program and he said, <dq>okay, do it<dq>. I was not skilled enough to program it, I was only speaking to its feasibility.<br><br>2/10, I do not recommend this method.</p>", 
                "question": "I want to code but it<sq>s hard to just sit down and learn it without having something specific I<sq>m motivated to create(also hard to find) how are you guys dealing with that? I want to be engaged."
            }, 
            "id": "cl8vm3f"
        }, 
        {
            "body": {
                "answer": "<p>/r/dailyprogrammer/</p>", 
                "question": "I want to code but it<sq>s hard to just sit down and learn it without having something specific I<sq>m motivated to create(also hard to find) how are you guys dealing with that? I want to be engaged."
            }, 
            "id": "cl8vzva"
        }, 
        {
            "body": {
                "answer": "<p>There are plenty of websites with code puzzles to work on. Try codeeval.com </p>", 
                "question": "I want to code but it<sq>s hard to just sit down and learn it without having something specific I<sq>m motivated to create(also hard to find) how are you guys dealing with that? I want to be engaged."
            }, 
            "id": "cl8sdo8"
        }, 
        {
            "body": {
                "answer": "<p>I would<sq>ve been interested, I just realllyy don<sq>t like collaborative work.</p>", 
                "question": "I<sq>m going to teach a FREE remote class of <dq>Introduction to programming with Python<dq>. Anyone interested?"
            }, 
            "id": "ckpd70b"
        }, 
        {
            "body": {
                "answer": "<p>Interested </p>", 
                "question": "I<sq>m going to teach a FREE remote class of <dq>Introduction to programming with Python<dq>. Anyone interested?"
            }, 
            "id": "ckpd07v"
        }, 
        {
            "body": {
                "answer": "<p>is someone with almost no programming background eligible?</p>", 
                "question": "I<sq>m going to teach a FREE remote class of <dq>Introduction to programming with Python<dq>. Anyone interested?"
            }, 
            "id": "ckpd9g3"
        }, 
        {
            "body": {
                "answer": "<p>What do you consider to be prerequisite knowledge? </p>", 
                "question": "I<sq>m going to teach a FREE remote class of <dq>Introduction to programming with Python<dq>. Anyone interested?"
            }, 
            "id": "ckpc57r"
        }, 
        {
            "body": {
                "answer": "<p>A lot of questions, I will try to answer SOME of them. <br><br>> How do licensing really works? Is there a list of licenses you can use? Do you have to read through the whole license agreement yourself? <br><br>There<sq>s a lot of licenses you can use actually already written by skilled lawyers and tested in courts. [Here are some examples](https<colon>//en.wikipedia.org/wiki/Software_license). For your own personal projects that you are fine with sharing with the world I would look at [MIT](https<colon>//en.wikipedia.org/wiki/MIT_License) and [LGPL](https<colon>//en.wikipedia.org/wiki/GNU_Lesser_General_Public_License). <br><br>In general - by default your code is only yours, no one else can use it legally. You use licenses to mitigate that - some allow others to modify your code without giving a damn, some are <dq>if you modify then you need to make these changes public<dq>, some are <dq>you can use without modifying<dq> etc. It<sq>s not a bad idea to consult a lawyer if you are planning to sell an application. <br><br>> Do I need to learn basic law stuff?<br><br>Uh, depends. Rule #1 if you ever decide to start a company or get more professionally into freelancing is to have a lawyer. Not just learn <dq>basics<dq>. You want written contracts and you don<sq>t ever want to sign up a contract without letting your lawyer see it. Because a default contract is basically a wishlist that should be changed by the other side or you will unknowingly agree to <dq>100<percent> uptime of your program and free updates for 10 years, employer can fire you at any moment, any changes to the project while it<sq>s on going are not paid extra<dq>. [There<sq>s a REALLY good video on that](https<colon>//www.youtube.com/watch?v=jVkLVRt6c1U).<br><br>> How are different languages, tools and etc managed together? I have no clue how a multi-language project is supposed to work, but it seems to be the common standard.<br><br>Language is just a tool. In reality you see anything ranging from C# to LabView. Programming a microcontroller like Arduino? C/C++. Simply because you are looking at something with 48 KB of memory. Typical GUI application? C#. FPGA? C or LabView.<br><br>What you only need to understand is that programs and even pieces of hardware just need ways of communicating with each other. You can make a whole website in Python but a specific part of it might be very power hungry. So you make that one part in C++. Then it<sq>s only a matter of communication - C++ application might as well just give an output to a text file that you then read via Python. Or it can be something more advanced - after all Python **itself** was written in C. Meaning it<sq>s possible to make a library in C that<sq>s visible to Python directly. <br><br>Microcontrollers might send series of bits directly to ports inside your computer. Which you then read as 0s and 1s and construct data out of that. For example it could be a temperature sensor that sends 32 bits of data. Do you CARE what was used to make that microcontroller and what<sq>s used to make it work? Not really. You only need a documentation on what these bits are (eg. it can be a single float number like 15.42 degrees C). Afterwards you might as well use [LOLCODE](https<colon>//en.wikipedia.org/wiki/LOLCODE) to read that data. <br><br>It<sq>s basically a question on choosing a right tool for a job. Sometimes it<sq>s better to write a whole thing in one language, sometimes this idea will be terrible. For instance if you are writing a code for a nuclear reactor then it better NOT try to clean up memory while you are trying to do an emergency shutdown of a reactor which automatically means that every single language using automatic garbage collection is useless in such context. There<sq>s also a question of portability - if you make a program in C# then you can expect it to work, more or less, with any Windows system (and if it doesn<sq>t then you just want users to install MSVC directly from Microsoft site, not a biggie). Now if you wanted to do the same with Python - tough luck, they need to install it on their computer. <br><br>> Do everyone use git? How do people manage projects besides git? And what other tools should I know how to use to work in the industry? <br><br>Git is popular enough to be seen almost everywhere. There<sq>s also Mercurial and SVN that fill mostly the same niche, you might see them from time to time. As for other tools - depends on a company. There are [bug trackers](https<colon>//en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems), internal wiki/documentation systems, chat applications etc. <br><br>> How are tasks shared among professional programmers? How do you link everything up? How is the daily routine like? What are the most common challenges you have to face?<br><br>Firstly there<sq>s a problem. Let<sq>s say - <dq>I wanna have an optical system of weighing potatoes<dq> (this will be simplified obviously). That is we will have a conveyor belt at which there will be hundreds of potatoes going through every minute. And no scales, just a laser beam or something similar. <br><br>So such a project will be split into two layers<colon><br><br>* laser and it<sq>s microcontroller<br>* typical computer system that lets a human operator see what<sq>s going on<br><br>First thing to understand is how to measure weight of a potato. So you put a single one on the scale, see it weighs 200g. So you take a tube of water with a scale and shove your potato into it. Now you also know it<sq>s volume. Then you take 10 more potatoes and repeat the experiment so you know how off this is going to be. Now we apply a simple equation density = mass/volume. Now you know the density of a potato. <br><br>Now, can you measure up how a laser reflects off a potato? [So imagine something like this](https<colon>//puu.sh/tWOsZ/0f56253ff2.png) becoming [this](https<colon>//puu.sh/tWOve/75a12000c1.png). You know how low laser beam goes before it reflects. Repeat this process 5 times and you end up with [something like this](https<colon>//puu.sh/tWOCh/076987e2ea.png). Now let<sq>s connect the dots and remember that there are also parts of the potato underneath the laser beam, [giving us this](https<colon>//puu.sh/tWOIX/4a80944fbe.png). Now just use this shape you got to calculate volume and from then weight. <br><br>This is a theoretical solution. <br><br>Now programming this is where fun begins. You will need someone who actually knows physics at a good level because measuring light reflections at a high speed is a task that<sq>s rather tough. You need someone with experience working on real-time system (you want your microcontroller to give you, let<sq>s say, 20 measurements per second and it never going slower/faster). Then you will need someone to connect that to a computer (possibly via C/C++ library to read this output) and then someone to make this into a GUI (C#). This task is split into multiple microtasks. For example<colon><br><br>* looking for an optimal power for a laser.<br>* actually implementing a way to shoot a laser beam when microcontroller receives a specific input. <br>* making a typical user interface showing kilograms per second (with you already being given this data)<br>* writing a C++ library that reads data about light reflections from microcontrollers<br>* then this light reflection has to be transformed into partial fields/volumes and eventually into a full measurement of a potato. <br><br>Eventually even a fairly complex application gets split into dozens of simple subroutines. Someone working on GUI really won<sq>t need to know how laser is programmed or how is this data calculated, he cares about his part - so numbers are nicely rounded, that there<sq>s a nice 2D chart showing weight over time etc. Someone working on a microcontroller has to ensure that outputs are at given at a proper pace and in a specific format that programmers agreed upon beforehand. Even someone fresh out of college will find stuff to do - someone has to weigh those potatoes at the start ;) (although seriously, helping in a lab is actually more interesting than many think), writing a GUI isn<sq>t that hard either. You might be asked to make a prototype of a function calculating said weight (once you are given a map of points making up a potato) etc. </p>", 
                "question": "What is it like to work on a professional enviroment?"
            }, 
            "id": "ddklhm3"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve worked as a software engineer in the telecom industry for about 10 years now. I<sq>ll try and give you brief answers to your questions.<br> <br>> What is it like to be a professional programmer? How is the daily routine like? What are the most common challenges you have to face? What is your responsability and what isn<sq>t?<br><br>My daily routine is relatively relaxed. I come in, eat breakfast and have coffee while reading news or answering questions via email. After that, I have my morning meeting with my team, during which we discuss what we worked on the previous day, what we<sq>re going to be doing today, as well as any hangups/issues we may have run into. These are brief <15 minute meetings, called <dq>standups<dq> (since we stand during it). After that, I<sq>ll usually alternate between working on my task, helping other developers with their tasks, answering questions from QA or other departments, taking breaks to browse the web and chat with coworkers, or playing games in the communal area. Once every other week we have a <sq>retro<sq> meeting, during which our team lead looks at our metrics to see if we are doing ok at breaking down and estimating larger tasks, as well as discuss what is and isn<sq>t working for the team. Once a week we have a planning meeting to decide what we<sq>ll be working on, and assign time estimates to each task.<br> <br>> What you do when you<sq>re not performing well? What do you do when you get <dq>creative blocked<dq>, can<sq>t solve a problem or even just get <dq>full of it<dq>? I often have moments like those and I<sq>m working on small projects. I imagine it would probably be bad for my performance ratings if I went a week without writing a single line of code, right?<br><br>If you don<sq>t know how to start something that is new to you, you can either ask for guidance from someone senior to you, or read about programming techniques (e.g. Design Patterns) on your own. If you get stuck while working on an existing product, you can either research your problem on the web if it<sq>s something specific and technical (or talk to your team/company<sq>s subject-matter-expert on it), or talk to the person who created the project. E.g., <dq>Hi Bob. I<sq>ve been asked to extend your project by adding feature_x. Do you have any suggestions on a solution that fits with your overall project design?<dq><br> <br>I have had many periods of time when I<sq>ve been in a rut for a week. Because in our environment you are forced to talk about it every day, your teammates/team lead very quickly become aware of your issue. It also makes you accountable, so you actually want to do something about it, since your entire team is on the line. After a day or two of banging your head against a problem, you should ask for help. My biggest personal growth problem during my career has been that I don<sq>t recognize when I should ask for help. I wish I learned that lesson years ago. If you don<sq>t ask for help for some reason, your team lead will probably tell you to go ask so-and-so for help. At first this may seem like you were finally excused for not knowing something, but that<sq>s the wrong way to look at it. It means that you aren<sq>t capable of fending for yourself, so don<sq>t make a habit of waiting until someone else tells you to go get help. Learn to get help yourself.<br> <br>As for performance reviews<colon> if you have a boss who is good at their job, they won<sq>t ding you on an annual review for that one week when you were depressed and in a coding rut. Instead, they will keep notes during the year, or get feedback from the people you work with in order to get a complete picture of how you are viewed by the team. Of course, not everyone is perfect, so you may find that your reviews tend to be heavily colored by your performance during the few months right before it. In cases like these, it<sq>s helpful to keep your own notes. Pull stats on how many bug tickets you fixed, how many features you added, your defect rate, how many questions you answered, how many compliments you received from other departments, etc. If you feel that your boss has been too busy to notice you, schedule one-on-one meetings with them every month to discuss your performance. That way, your annual review won<sq>t be a surprise to you.<br><br>> Do everyone use git? How do people manage projects besides git? And what other tools should I know how to use to work in the industry?<br><br>We use Subversion (svn) for managing code. For tracking issues/features/bugs/tickets, we used to use Gemini, but now use Jira and Confluence.<br><br>> How are tasks shared among professional programmers? How do you link everything up?<br><br>During our planning meetings, we break down larger items into smaller ones. For example, <dq>Component_x needs to be able to write database entries, upload files, receive HTTP message.<dq> We might break this down into three items, one for each of the different features. Depending on the specific project and existing infrastructure, some of these may be broken down further. For example, if the program didn<sq>t already have any kind of database connection, then maybe we<sq>d make a ticket like, <dq>Add a database connection manager class to Component_x.<dq> Then we<sq>d follow that with, <dq>Add the ability to automatically reconnect to the database if the connection goes down to Component_x<dq>, or <dq>Add the ability to query for XYZ to Component_x<dq>.<br> <br>Once we have the bigger items broken down into as small pieces as we can, then we can start estimating how long it might take to do the work. If a team has two developers and one QA person, then we already have an idea of how much work we can get done during a 1 or 2 week period (known as a <sq>sprint<sq>). We<sq>ll assign estimates to each of the tickets (we used to use <sq>days<sq>, but now we just use sizes (small, medium, large). The QA person then will give their own estimate, knowing what changes they will need to make to the testing framework in order to be able to test these features. Example, <dq>The Test Framework currently doesn<sq>t do any database connections, so I<sq>ll have to create that first.<dq> and so on.<br><br>When we start work on something new, we<sq>ll create a <dq>branch<dq> off of a product<sq>s source code repository. Example, <dq>microsoft_office-1.2.3-database_support<dq>. If you have multiple developers working in the same code base, your source code management software (git, svn, etc.) should do a pretty good job of preventing you from stepping on each others<sq> toes. It<sq>s not perfect, so some times conflicts can occur. This can be resolved via good communication with your teammates, as well as being dilligent when merging code.<br><br>> How are different languages, tools and etc managed together? I have no clue how a multi-language project is supposed to work, but it seems to be the common standard.<br><br>In my case, most of our products are written in C++. The projects contain C++ source and header files, along with unit tests. However, developers like to create their own test tools for smoke testing, so these will often be checked in along with the source code. Usually these are found in a <dq>test_scripts<dq> directory or something similar. In our case (Linux environment), these are almost always written in Perl. Since they<sq>re not compiled together into the same binary, they don<sq>t depend on each other directly. The Makefile for the C++ code only looks for and cares about the C++ files, so any other files (scripts, documentation, text files, etc.) are ignored.<br><br>> How do licensing really works? Is it managed by someone? Is there a list of licenses you can use? Do you have to read through the whole license agreement yourself? Do I need to learn basic law stuff?<br><br>Your company will have vetted this stuff out via their legal team. It<sq>s typically not your responsibility as a developer. However, let<sq>s say that you have been tasked with making something complex, and find that someone else already made a library to do it effortlessly. In this scenario you would show this to your boss, who would then find the accompanying license agreement and hand it off to your company<sq>s legal counsel. They will then let you know whether it<sq>s safe for you to use, or if you have to come up with another way.<br> <br> <br>That ended up being a huge wall of text. Sorry about that. Anyway, don<sq>t hesitate to ask further questions. There are lots of things that I wish I had learned before I started working, as college really didn<sq>t prepare me at all for this lol.<br> <br>Best of luck.</p>", 
                "question": "What is it like to work on a professional enviroment?"
            }, 
            "id": "ddkonx3"
        }, 
        {
            "body": {
                "answer": "<p>I will try to give you an answer from the perspective of someone who<sq>s been a professional dev for over 20 years. This is my personal opinion so don<sq>t take it as a universal truth. I<sq>ve seen a lot of tech stacks and used a great many of them. I<sq>ve done web, Windows, games, mobile and server applications. Had an experience in management too but as they say, <dq>Hell was full so I came back<dq>. Today, I work for a medium-large software company employing about 1000 technical people. It<sq>s not the startup environments you can read about on Medium articles nor the Google-y experience where you have personal sushi chefs and bean bag chairs. Traditional, kinda boring company with open spaces packing 50-100 devs per floor.<br><br>> What is it like to be a professional programmer?<br><br>You come in to work, you spend your day doing tasks that are more or less described by the contract you signed with the company. Not much different than say, an accountant.<br><br>> How is the daily routine like?<br><br>Most days start with the <dq>daily standup<dq> team meeting. It<sq>s got nothing to do with standup comedy but sometimes, it feels like it. You say what you are going to work on today, what you achieved yesterday and what current impediments prevent you from completing your tasks. Usually, those who do the least talk the longest. Probably because the Universe likes balance. People in the know call this <dq>being agile<dq>. <br><br>Then, you work on your tasks. It can be anything from implementing a new feature to an existing program to trying to resolve a bug an end user found but it<sq>s mostly writing long and complicated tests around a few trivial lines of code that insert some kind of data in a database. Enterprise software coding is built on complexity. This way, external consultants can have a slice of the cake and library vendors have a chance to place their products as well. It is not uncommon to have names like `FooBarItemEntityFactoryWrapperViewModelMockMockerWrappingWrapperModel` in your codebase. Being a developer also means that you read a **lot** more code than you write code.<br><br>There are meetings, too. Mostly because higher management needs metrics to be able to... manage, whatever that means. In these meetings, you talk about anything. From the size of a message box to the infrastructure that will host the app. Sometimes, decisions are made but most times, everybody agrees to meet once again.<br><br>Finally, the day ends and you go home. That<sq>s usually when the real coding starts.<br><br>> What are the most common challenges you have to face?<br><br>In my current position, the challenges come from younger developers. They read a thread on Hacker News about a new way of doing something, usually written by an inexperienced dev unaware that this problem was solved ten years ago and they deem it *The One True Way* before trying to apply it to absolutely everything. Managing the younglings is tiring yes but it<sq>s awesome at the same time because they are full of energy and ready to change the world/make it a better place/[insert some hype quote here].<br><br>Note that this line of work is not really suited for people with ADD. A project at my company is measured in years so it is likely that one will work for many months on one set of features only. It also brings a bazilion and a half in revenues because we supposedly solve hard problems but that is not the point.<br><br>> What is your responsability and what isn<sq>t?<br><br>Defining what the product should do is not my responsability. Everything else pretty much is. From the initial design of the architecture to providing documentation for the support teams that will handle the app once it shipped. Of course, coding is a large part of that.<br><br>> I imagine it would probably be bad for my performance ratings if I went a week without writing a single line of code, right?<br><br>If your manager is a bean counter, it would lead you to be fired. But usually, you are not alone and you have other devs around you that can help you solve nearly anything even if that involves selling wind to the project stakeholders.<br><br>> Do everyone use git?<br><br>Maybe not everyone use Git but everyone use some kind of source control. Those who don<sq>t, well, you don<sq>t want to work for them anyway.<br><br>> How are tasks shared among professional programmers?<br><br>Where I work, we share tasks by affinities with the stack, domain knowledge and seniority. Every company I worked for approached this differently, though.<br><br>> How do licensing really works? Is it managed by someone?<br><br>My current employer is big enough to have full time bean counters (financial+legal) managing this.<br><br>> Why do it? It sounds rather crappy<br><br>Mainly because of two things<colon> <br><br>a) It pays well and doesn<sq>t make me tired. At the end of the day, I can go home and still have enough energy to work on really, really interesting stuff like Rails apps, iOS apps, contributing to open source projects and experimenting with the things the younglings find <dq>cool<dq>. Hopefully, one day, a personal project will take me out of the corporate hell. <br><br>b) Working with like minded people with whom you can exchange great ideas and share the same passion for code as you do.<br></p>", 
                "question": "What is it like to work on a professional enviroment?"
            }, 
            "id": "ddkrf9l"
        }, 
        {
            "body": {
                "answer": "<p>I have worked professionally as a developer for 2.5 years for a couple different companies so keep in mind this is something that can differ greatly between who you work for.<br><br>* My daily routine is I first check my email in the morning to see if there is anything important I need to take care of first. Then I typically continue whatever task I am currently assigned on. Right now for example I actually haven<sq>t been doing much coding but been migrating data from an old database to a new one that is laid out completely different so basically a lot of SQL. My current job has me do a lot more stuff then just code because of the type of business we are. I enjoy it but it is not a pure software dev job like my previous ones despite that being my title.  <br><br>    I consider anything me or my team is working on my responsibility. Things directly assigned to me are my top priority but I do not put a wall up saying something isn<sq>t mine to deal with. If someone on your team needs help and you have the knowledge IT IS YOUR RESPONSIBILITY or at least that is my opinion on it.  <br><br>    My biggest challenges is the constant learning. Always keep improving youe self. Make your self an asset and you will do well. If you are working for someone they want to see that you can grow with the needs of the company. That you don<sq>t shy away from something even if you never touched it before.  An example for me would be that I had ZERO experience using or setting up single sign on.. now I am one of the go to people in the company for getting help with setting it up because I built that reputation.<br><br><br>* I have used git at previous companies. This one uses a repository for storing files. Netsuite and Test Tracker for managing cases. Learn how to use git fully. Also learn how to properly document stuff. I have to write release notes for packages I create and I sucked at writing them in the start.<br><br><br>* In my experience typically tasks are posted typically in git or netsuite and you just grab one to do. They is usually quite a few to choose from and some people are better at certain things.. It is kind of self serve at least at any job I have done. There are times where specific assignments are given to me but usually I am just on my own for choosing what I work on.<br><br>* We use Java and I haven<sq>t been in a situation where programmers use different languages.. typically whatever you are working on is going to be built in a language everyone is following.<br><br>* licenses are handeled by someone else, usually some kind of IT department.  Don<sq>t need to really do anything. The laptops are given to us with all the software already set up.<br><br><br></p>", 
                "question": "What is it like to work on a professional enviroment?"
            }, 
            "id": "ddkllbh"
        }, 
        {
            "body": {
                "answer": "<p>You can also [Try Git](https<colon>//try.github.io/levels/1/challenges/1).</p>", 
                "question": "Learn Git Interactively"
            }, 
            "id": "cozsu2f"
        }, 
        {
            "body": {
                "answer": "<p>Thanks it seems really helpful </p>", 
                "question": "Learn Git Interactively"
            }, 
            "id": "cozpwaq"
        }, 
        {
            "body": {
                "answer": "<p>I had loads of problems getting started with git, and everything seemed to be telling me slightly different things. The guide that I eventually settled on was [this](http<colon>//rogerdudler.github.io/git-guide/). Keeps things very simple.</p>", 
                "question": "Learn Git Interactively"
            }, 
            "id": "coztsjh"
        }, 
        {
            "body": {
                "answer": "<p>I think this tutorial is better than Try Git. It<sq>s more extensive, and also does a better effort in visualizing what goes on when you do the different things in Git.</p>", 
                "question": "Learn Git Interactively"
            }, 
            "id": "cozw0k2"
        }, 
        {
            "body": {
                "answer": "<p>Is it required? No. Is it a good path to becoming a good programmer? Yes.  <br><br>Following this route will give you a **very** strong foundation in the fundamentals, but it<sq>s not the only way to do this. Is it the best way? That<sq>s debatable, and there may not be a clear answer as to what is <dq>best<dq> in any given case. Is it a good way? I think so, yeah, it<sq>s pretty solid advice. But, different people learn different ways, and this might not be suitable for everyone. It<sq>s a rather <dq>old school<dq> approach.  <br><br>Nothing in there is particularly bad advice, that is for sure.</p>", 
                "question": "Is this post from the 4chan technology board the bitter truth?"
            }, 
            "id": "clxoy8b"
        }, 
        {
            "body": {
                "answer": "<p>The internet has no shortage of opinionated jackasses that know the <dq>One True Way<dq> and aren<sq>t afraid to tell you how big of an idiot you are for wasting your time doing anything else. <br><br>Wouldn<sq>t pay too much attention to them. </p>", 
                "question": "Is this post from the 4chan technology board the bitter truth?"
            }, 
            "id": "clxojf2"
        }, 
        {
            "body": {
                "answer": "<p>You want a car to commute to work or school?<br><br>My advice to you<colon> Get out of your bullshit toyota and get a real car, built it from a kitset or scrap metal.<br><br>Forge the frame over a hot fire and hammer out the panels with a mallet. <br><br>Grow your own rubber trees and tap them to build your own tyres and dig for your own oil to refine to make petrol. <br><br>Now you are ready to start to drive a car. <br><br>There is always some obsessed, skill trapped programmer who learned his skills back in the 80<sq>s and think the world stopped moving on since then. <br><br>However for the rest of us new programming languages are there for a purpose, they are created to meet the needs of todays programmers. </p>", 
                "question": "Is this post from the 4chan technology board the bitter truth?"
            }, 
            "id": "clxxbk0"
        }, 
        {
            "body": {
                "answer": "<p>Some of it will forever be true, like learning about algorithms. Some of it is outdated. And some sounds like it was just written by an elite snob.<br><br>I have been programming since I got my first computer, a Commodore 64, at the age of 8. I have degrees in Computer Science, and am still programming at 40 (ugh).<br><br>For a beginner, the world of programming is so vast that it can be very daunting when you start. If you are trying to learn something like C# and the Visual Studio IDE, I think it<sq>s a worthwhile way to invest your time. You can switch to Eclipse and Java, or pick up something else entirely. The point is that you are learning SOMETHING.<br><br>If you are following a path to computer science, an important thing to keep in mind is that you are training to be a problem solver. You are not just learning language X. I have seen many fall into that trap, and the moment their language of choice falls out of favor, they need to either return to square one or find another career.<br><br>Know what you know. Know what you don<sq>t know. Don<sq>t be afraid to ask. Keep an open mind. In my 32 years of programming I have been through the gamut of programming platforms, tools, and languages. I have my favorites of course, but flexibility is the name of the game on this industry. <br><br>P.S.<colon> the ugh was for my age, not for programming. I have always found programming to be an exciting and creative outlet. <colon>)</p>", 
                "question": "Is this post from the 4chan technology board the bitter truth?"
            }, 
            "id": "clxtql5"
        }, 
        {
            "body": {
                "answer": "<p>Good work!  And thank you for sharing your experience.</p>", 
                "question": "Learn JavaScript and Google Maps API v3 with a 4 part video tutorial and full sample project"
            }, 
            "id": "cufoead"
        }, 
        {
            "body": {
                "answer": "<p>Just went to the site, looks nice! Email kind of buggy (At least on Firefox ver32 not 32bit) but this definitely looks extremely helpful in getting started creating real world applications. Thank you sir!</p>", 
                "question": "Learn JavaScript and Google Maps API v3 with a 4 part video tutorial and full sample project"
            }, 
            "id": "cufn7ox"
        }, 
        {
            "body": {
                "answer": "<p>Great project. I<sq>m trying to create an interactive map that shades in parts show areas with the highest average income. This will come in handy, Thanks!</p>", 
                "question": "Learn JavaScript and Google Maps API v3 with a 4 part video tutorial and full sample project"
            }, 
            "id": "cufzf02"
        }, 
        {
            "body": {
                "answer": "<p>Yay!</p>", 
                "question": "Learn JavaScript and Google Maps API v3 with a 4 part video tutorial and full sample project"
            }, 
            "id": "cufik38"
        }, 
        {
            "body": {
                "answer": "<p>This was critical for me when I did Linear Algebra last semester.</p>", 
                "question": "Awesome YouTube series that teaches Linear Algebra intuition"
            }, 
            "id": "dc0bjsk"
        }, 
        {
            "body": {
                "answer": "<p>I recommend MITs opencourseware for linear algebra. <br><br>I didn<sq>t attend a single damn lecture for my class and I got a 4.0 in the class. <br><br>Went to a Canadian school so idk what that<sq>s translating to for American schools</p>", 
                "question": "Awesome YouTube series that teaches Linear Algebra intuition"
            }, 
            "id": "dc0p2yg"
        }, 
        {
            "body": {
                "answer": "<p>Read the title.<br><br>It has to be 3blue1Brown.<br><br>Click to confirm.<br><br>Yes it was.</p>", 
                "question": "Awesome YouTube series that teaches Linear Algebra intuition"
            }, 
            "id": "dc12m4m"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for the resource!<br><br>*omnidirectional reverberation of man saying you are now algebraic!, plays*</p>", 
                "question": "Awesome YouTube series that teaches Linear Algebra intuition"
            }, 
            "id": "dc0bnpu"
        }, 
        {
            "body": {
                "answer": "<p>Oh how I wish more tutorials (and maybe documentation) are as straight-forward as these. <dq>I already know what a loop is, I just want to know how you<sq>re supposed to write it on Ruby.<dq></p>", 
                "question": "Want a quick overview of many programming languages? Check out learnxinyminutes.com"
            }, 
            "id": "d6rvpt6"
        }, 
        {
            "body": {
                "answer": "<p>No Fortran.  Total frauds. <colon>)<br><br>Edit<colon>  I might actually write a sample fortran file to add when I get a chance.  It<sq>s still a common enough language in scientific and high performance fields that some people will probably be trying to learn it. </p>", 
                "question": "Want a quick overview of many programming languages? Check out learnxinyminutes.com"
            }, 
            "id": "d6rvsk0"
        }, 
        {
            "body": {
                "answer": "<p>I really like your site - I am finding it very useful <colon>)<br><br>It reminds me of [this similar website](http<colon>//ricostacruz.com/cheatsheets/)</p>", 
                "question": "Want a quick overview of many programming languages? Check out learnxinyminutes.com"
            }, 
            "id": "d6rq5mr"
        }, 
        {
            "body": {
                "answer": "<p>If only my lover was as generous as you are.</p>", 
                "question": "Want a quick overview of many programming languages? Check out learnxinyminutes.com"
            }, 
            "id": "d6sec9f"
        }, 
        {
            "body": {
                "answer": "<p>From what I read of this article, its great, but I feel like you<sq>re downplaying that you were <dq>instructor and Director of Product at App Academy<dq>. You make it sound like you went from being a poker player to an engineer at Airbnb, which gives people false hope.</p>", 
                "question": "I wrote a guide on job hunting and interviews for people breaking into tech"
            }, 
            "id": "d38q7yc"
        }, 
        {
            "body": {
                "answer": "<p>How can I favourite/save this</p>", 
                "question": "I wrote a guide on job hunting and interviews for people breaking into tech"
            }, 
            "id": "d38jp93"
        }, 
        {
            "body": {
                "answer": "<p>Kinda jarring seeing the word tech used so much, but written with a programmer/developer mindset. I couldn<sq>t relate to this advice, though that could also be due to what side of technology I<sq>m in and what I do.<br><br>Since I<sq>m on a phone, I<sq>d suggest this for the non programmer....or the programmer whose not coffee date compatible....VOLUNTEER <br>. <br><br>It<sq>s the easiest way to connect with many people outside of your field. Why is this important? It can lead to wider windows opened. The guy whose an accountant may not have any system analyst jobs, but he may know someone who does something up your road of work. <br><br>I<sq>ve had positions created just for me. Think about that. Someone hears of what I can bring to their small business and gets excited. Plus, I<sq>m helping the community, which is a strong characteristic that we should all have. And more importantly, my name isn<sq>t in just tech circles.<br><br>The coffee shop approach seems as it can be effective, and probably is a great way to hone in on a job....but volunteering could be better in the long run just due to who you get to meet and who remembers you </p>", 
                "question": "I wrote a guide on job hunting and interviews for people breaking into tech"
            }, 
            "id": "d38qmrw"
        }, 
        {
            "body": {
                "answer": "<p>Say hello to Jack N. for me. He<sq>s a security engineer there at Airbnb. I<sq>m getting annoyed of all the damn snapchats of him riding your damn elevator up and down. But your HQ looks amazing and I<sq>m pretty jealous. <br><br>In terms of your blog and write-up, its great. I just got into the tech industry myself and it took me quite a while to do so. I<sq>m not a programmer but I am looking more into Info Sec than anything but I<sq>ve always been interested in programming but its always seemed very daunting because I<sq>ve always been terrible at Math lol. </p>", 
                "question": "I wrote a guide on job hunting and interviews for people breaking into tech"
            }, 
            "id": "d38rfat"
        }, 
        {
            "body": {
                "answer": "<p>now i can apply for google</p>", 
                "question": "A good video on applying to jobs that you don<sq>t qualify for"
            }, 
            "id": "cxadwsv"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s funny and reassuring. I<sq>m worried that it<sq>s not accurate because most of the job ads I see don<sq>t appear to have been produced by people who don<sq>t take time to do a good job listing. I see ads broken down into <dq>Required Experience<dq> and <dq>Ideal Candidates Have<dq>, I see ads written by people who do appear to understand the technology stack and may not be in HR at all. <br><br>I think the explanation that they look for uncommon skills to put in the ad just to keep from getting too many applicants provides more of an economic incentive for this behavior to continue. That<sq>s why they also keep listing stuff like <dq>fast working, agile, exceptional full-stack creativity<dq> that is just as deterring as the <dq>10 yrs experience with ReactJS<dq> stuff.</p>", 
                "question": "A good video on applying to jobs that you don<sq>t qualify for"
            }, 
            "id": "cxaaroo"
        }, 
        {
            "body": {
                "answer": "<p>This was a great video. One of my mentors let me in on this secret years ago<colon> the job description is typically written by someone who doesn<sq>t know anything and they just want to scare away unconfident candidates.<br><br>edit<colon> away</p>", 
                "question": "A good video on applying to jobs that you don<sq>t qualify for"
            }, 
            "id": "cxabo3y"
        }, 
        {
            "body": {
                "answer": "<p>HR person<colon> <dq>Tell me about your experience with [insert advanced technology].<dq><br><br>You<colon> <dq>Oh, I just decided to ignore that part of your description because a youtube video told me so.<dq></p>", 
                "question": "A good video on applying to jobs that you don<sq>t qualify for"
            }, 
            "id": "cxapsp4"
        }, 
        {
            "body": {
                "answer": "<p>I was 34 when decided to switch to programming. It was 1,5 years ago and I am full time Software Engineer now.<br><br>Its not too late. Go for it.</p>", 
                "question": "I<sq>m 27 years old. Is it too late for me to have a successful career in programming?"
            }, 
            "id": "cjb77xb"
        }, 
        {
            "body": {
                "answer": "<p>Have you ever heard of bioinformatics? You might be able to get away with just getting a programming certificate and then getting a job in a lab where you help the scientists by making databases/simple programs to help them with their job.<br></p>", 
                "question": "I<sq>m 27 years old. Is it too late for me to have a successful career in programming?"
            }, 
            "id": "cjbao8s"
        }, 
        {
            "body": {
                "answer": "<p>it<sq>s never too late to do anything in life, most of the time the thing holding you back from success is yourself </p>", 
                "question": "I<sq>m 27 years old. Is it too late for me to have a successful career in programming?"
            }, 
            "id": "cjb6t94"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s never too late. One of my best friends in college was a 35 year old father of two who worked construction while studying full time for a CS degree. He knew what he wanted, and didn<sq>t let age or anything stop him.</p>", 
                "question": "I<sq>m 27 years old. Is it too late for me to have a successful career in programming?"
            }, 
            "id": "cjb912o"
        }, 
        {
            "body": {
                "answer": "<p>Find local businesses in your area with shitty websites and offer to work on theirs for $20 an hour plus free shit from their stores. Even if they offer you free shit, don<sq>t do the work JUST for free shit. The last thing you want is shit you don<sq>t need and having to sell it to get what they could<sq>ve just paid you in the first place.  <br>This will especially be a good idea for like, cell phone repair shops, laptop repair shops (you can get decent hourly plus free electronics you<sq>d actually use), your favorite restaurants, favorite breweries, maybe a road bike store or used camera store. Things like that.  <br>Also hit up non-profits that have income rotation like no-kill but popular animal shelters.  <br>Places like that have a need for a decent website with JavaScript, a dynamic web portal for them to update content and a standardized article page that they can use for showing details to users like new dog arrivals, new product releases, that their staff can easily push info in and have show up on the site. Offer to do things like Google analytics dashboard so they can see what gives them more or less traffic.  </p>", 
                "question": "Whats a good way to make money on the side with programming?"
            }, 
            "id": "dg3zfbg"
        }, 
        {
            "body": {
                "answer": "<p>stripper</p>", 
                "question": "Whats a good way to make money on the side with programming?"
            }, 
            "id": "dg3vmii"
        }, 
        {
            "body": {
                "answer": "<p>Get a job with a small web dev shop that lets you do odd jobs.</p>", 
                "question": "Whats a good way to make money on the side with programming?"
            }, 
            "id": "dg3sble"
        }, 
        {
            "body": {
                "answer": "<p>[This guy makes web games](https<colon>//www.reddit.com/r/gamedev/comments/64ierc/making_multiplayer_html5_games_for_a_living_is/)</p>", 
                "question": "Whats a good way to make money on the side with programming?"
            }, 
            "id": "dg3vxsm"
        }, 
        {
            "body": {
                "answer": "<p>Thank you! Been meaning to look for tutorials on some minor side projects for Node.js. This helped immensely</p>", 
                "question": "Video tutorial on how to build a chat app using JavaScript."
            }, 
            "id": "dfxw84q"
        }, 
        {
            "body": {
                "answer": "<p>How do I get to the actual tutorial? The leafie.io/javascript link just redirects to http<colon>//www.leafie.io/board for me.</p>", 
                "question": "Video tutorial on how to build a chat app using JavaScript."
            }, 
            "id": "dfyousa"
        }, 
        {
            "body": {
                "answer": "<p>For someone who doesn<sq>t have much knowledge about nojeJS and sockets, but is familiar with JavaScript(intermediate level), will he able to understand whats happening in this tutorial? </p>", 
                "question": "Video tutorial on how to build a chat app using JavaScript."
            }, 
            "id": "dfycl1w"
        }, 
        {
            "body": {
                "answer": "<p>Thanks Sam! This tutorial was very fun to work through <colon>)</p>", 
                "question": "Video tutorial on how to build a chat app using JavaScript."
            }, 
            "id": "dfyhmvl"
        }, 
        {
            "body": {
                "answer": "<p>Hi, my name is Harrison. I teach programming on youtube (http<colon>//youtube.com/sentdex) as well as http<colon>//pythonprogramming.net. I also run a few python-based businesses on my own (sentiment analysis @ http<colon>//sentdex.com and algo trading for bitcoin @ http<colon>//seaofbtc.com)<br><br>My degree is a double major in Philsophy and Criminal Justice.<br><br>I have received over a hundred career offers in the last ~2 years, about a third of which coming from very well established companies, most had 6 figure salaries. Another third from fledgling startups, another third were total wastes of time, mostly people wanting me to work for equity or something silly. While I have declined them all, and continue to work for myself, I think the amount of job offers that I have received while not even seeking them says a lot.<br><br>I have accepted a lot of very lucrative short-term freelance gigs ($100-$500+ an hour), but I assume you<sq>re mainly interested in careers.<br><br>People find me through my website or my youtube channel. The website used to be more of a blog of tutorials, but now it<sq>s a bit more of a tutorials website. The YouTube channel remains unchanged. <br><br>I think your true curiosity is better aimed at employers. <br><br>It just so happens I am one of those too!<br><br>A CS degree carries absolutely no weight in my judgement for a candidate. I<sq>ve quickly learned that a CS degree != programming degree. Some degrees are different than others, but I have seen zero correlation, seriously zero, in the weight a CS degree carries. I am extremely anecdotal evidence, but you should really question more employers.<br><br>As an employer, I have found the most success by looking for people who can show either exactly, or relatively well (usually a project that is somewhat related, or similar complexity), via a portfolio of actual work done by them...what they can do. <br><br>People don<sq>t want to see some words on paper of what you can do. A lot of employees do not know what MySQL is, or at least the difference between MySQL and SQLite, or Postgres... or what data analyst really even means (nor do many candidates, it<sq>s a catch all nowadays).<br><br>People want to see what you can do, what you have done, and then extrapolate from there whether or not what you<sq>ve shown is something that can translate to their needs. <br><br>My best suggestion to you is to start a blog. <br><br>I have a very <dq>successful<dq> linkedin too. What a worthless place. No one cares about my CV / resume. No one cares about linkedin. No one cares about my degrees. They all care about what I<sq>ve shown I can do via written or video tutorials. You don<sq>t need to do tutorials, but you should have github with lots of examples for the CTO to oogle at, you should have a blog with maybe even as few as monthly entries. <br><br>Employers also want to see that you<sq>re current, and you<sq>re learning. Having consistently updating content shows employers that you<sq>re continuously learning more. If you<sq>re a learner, then they can have you do anything, whether or not you<sq>re qualified just yet. <br><br>Best wishes in your hunt!</p>", 
                "question": "Self-taught programmers... how did you get a job?"
            }, 
            "id": "cs04xlm"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m unemployed.</p>", 
                "question": "Self-taught programmers... how did you get a job?"
            }, 
            "id": "cs06tog"
        }, 
        {
            "body": {
                "answer": "<p>tbh I lied a lot</p>", 
                "question": "Self-taught programmers... how did you get a job?"
            }, 
            "id": "cs0diye"
        }, 
        {
            "body": {
                "answer": "<p>As a Front End Web Developer (fulfilling full stack)<colon><br><br>* I studied for a couple of months, self taught at my house alone. Of course, I<sq>m always learning whenever I try something new or when I hit a roadblock. It really depends on your learning pace, and how fast you can learn and take information in. Although, I don<sq>t recommend rushing through a program<sq>s syntax, etc. Take your time.<br>* I first learned Basic HTML/CSS. After making some test websites and replicating websites that are known already, I then explored the  stressful, yet wonderful world of Javascript. I learned Javascript and jQuery and I<sq>m still learning. Currently, I<sq>m learning other Javascript libraries such as Node.JS and Angular.JS, but also expanding into other backend languages like Python.<br>* I learned the syntax of each language, and then tried out what I learned and expanded on my knowledge. You should basically have a full understanding of a language before you start to apply for a job (in my opinion), but you can always learn.<br>* In my portfolio, I had my own personal website, with other projects I made for non-profit companies, as well as beginner websites I had replicated early in my career. <br>* I currently reside in New York<br><br>Programming is definitely a wonderful thing, even though it can be stressful or  tedious, it<sq>s amazing. Making your first website, or programming a new application is like a <sq>high<sq>. It<sq>s such an amazing feeling to get something to work, that you want to keep on it. We live in the 21st century, where technology is being made every single day. It<sq>d be nice if everyone knew how to program, just a  tad bit. Unfortunately, the choice for you putting your own energy into programming is up to you, but I recommend it. Hope this helped!</p>", 
                "question": "Self-taught programmers... how did you get a job?"
            }, 
            "id": "cs03u3n"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been forced to use Wordpress for our website so maybe I<sq>ll look into using some of this stuff since the theme we have is garbage </p>", 
                "question": "Huge list of CSS3 ResourcesTutorials and Libraries to Help You Become a Novice to Expert ..."
            }, 
            "id": "cphxqxe"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for all your encouraging words, I will come up with more resources like this other programming languages too (That I use)</p>", 
                "question": "Huge list of CSS3 ResourcesTutorials and Libraries to Help You Become a Novice to Expert ..."
            }, 
            "id": "cpia5bd"
        }, 
        {
            "body": {
                "answer": "<p>Nice, thanks. Saved this and will take a look in more depth when I get the chance. Seems like some really neat stuff in the links from what I have peaked at already.</p>", 
                "question": "Huge list of CSS3 ResourcesTutorials and Libraries to Help You Become a Novice to Expert ..."
            }, 
            "id": "cpi4q4h"
        }, 
        {
            "body": {
                "answer": "<p>This is a goldmine.</p>", 
                "question": "Huge list of CSS3 ResourcesTutorials and Libraries to Help You Become a Novice to Expert ..."
            }, 
            "id": "cphxp50"
        }, 
        {
            "body": {
                "answer": "<p>I told my wife that if she spent as much time exercising as she does coming up with plans to lose weight, she would be at her goal weight right now. Surprisingly, she didn<sq>t kill me.</p>", 
                "question": "I<sq>ve noticed a distinct similarity with people who want to become programmers and people who want to lose weight and be fit."
            }, 
            "id": "co1ebyx"
        }, 
        {
            "body": {
                "answer": "<p>> The very same applies to ~~programming~~ most things in life.<br><br>FTFY.</p>", 
                "question": "I<sq>ve noticed a distinct similarity with people who want to become programmers and people who want to lose weight and be fit."
            }, 
            "id": "co1dbv7"
        }, 
        {
            "body": {
                "answer": "<p>*I* noticed that a lot of people want **be** programmers, like they want to **be** fit, but they don<sq>t want to do the work to get there.</p>", 
                "question": "I<sq>ve noticed a distinct similarity with people who want to become programmers and people who want to lose weight and be fit."
            }, 
            "id": "co1euo4"
        }, 
        {
            "body": {
                "answer": "<p>This fills me with joy because I<sq>ve gotten to the point where I<sq>m 100<percent> happy with my health and fitness. Let<sq>s hope I can feel the same way about my coding ability which is currently 100<percent> terrible.</p>", 
                "question": "I<sq>ve noticed a distinct similarity with people who want to become programmers and people who want to lose weight and be fit."
            }, 
            "id": "co1heuo"
        }, 
        {
            "body": {
                "answer": "<p>Awesome, I<sq>m definitely going to use this <colon>) Thank you for your effort in making it! </p>", 
                "question": "Fun GitHub Repo containing common interview questions finished in JS!"
            }, 
            "id": "dddlt5k"
        }, 
        {
            "body": {
                "answer": "<p>How does the interview process work? Do employers sit you down in a locked room, give you a laptop, while sitting behind you to see you solve the problems? Are you given a certain amount of time to finish, if not you<sq>re SOL? Are you allowed to use google, to search for methods and functions, or simple things you need to recall? <br><br>Or are these take home exercises? <br><br>EDIT<colon> just realized I asked about 3000 questions in on paragraph. That<sq>s gotta be a record. </p>", 
                "question": "Fun GitHub Repo containing common interview questions finished in JS!"
            }, 
            "id": "dddvuqj"
        }, 
        {
            "body": {
                "answer": "<p>Ya thanks!  Can you tell a little about your process for making this? </p>", 
                "question": "Fun GitHub Repo containing common interview questions finished in JS!"
            }, 
            "id": "dddrwbq"
        }, 
        {
            "body": {
                "answer": "<p>Super useful resource. Can I ask why you use underscores instead of camel-case for your variable names? I<sq>ve never seen underscores used in the wild and all style guides I<sq>ve seen promote camel-case.</p>", 
                "question": "Fun GitHub Repo containing common interview questions finished in JS!"
            }, 
            "id": "dde557y"
        }, 
        {
            "body": {
                "answer": "<p>You missed the opportunity to call it <dq>Monthly Python<dq>. Shame.</p>", 
                "question": "12 Months of Python<colon> 12 Lessons (Thank you Reddit.)"
            }, 
            "id": "dbkc9xl"
        }, 
        {
            "body": {
                "answer": "<p>#9)<br><br>Well. Kind of. New developers tend to explain what code does. This is not good. Your code should be somewhat self explanatory and readable (especially in Python). If your comments explain what code does, they can send someone on a wild goose chase if what the code does is changed. <br><br>Good comments explain *why* you made that code, or perhaps have a link to some documentation if it is copy pasted. <dq># I had to call this because of some weird thing Django expects. See documentation on _____.<dq> Is a good comment. <dq># This is where I create the object<dq> is not a good comment.</p>", 
                "question": "12 Months of Python<colon> 12 Lessons (Thank you Reddit.)"
            }, 
            "id": "dbkf63j"
        }, 
        {
            "body": {
                "answer": "<p>Number 4 hit me so hard the other day. I never really understood how to leverage my coding skills, I<sq>m no mean an expert, I just took a bunch of courses over the years and took long breaks but I some how would always comeback. It wasn<sq>t until I was working on a photoshop file with many repetitive tasks that I thought to my self hey I should automate this! I googled scripting and found their doc and I was reading it and understanding it. I never thought in a million years I could do this and yet there was me translating what seemed like gibberish 2, 3 years ago. What was more awesome is that it was in JavaScript which is not something I<sq>m familiar with at all. I just used the same concept I learned from Python and it freaking worked. I made a script that would efficiently, quickly to do what I want to do, most importantly it<sq>s reusable. It<sq>s an exciting feeling when you see others do great things with coding but is an even more amazing feeling when you are the one doing it.</p>", 
                "question": "12 Months of Python<colon> 12 Lessons (Thank you Reddit.)"
            }, 
            "id": "dbkgitz"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m confused with number 3. Did you meant to say <dq>Don<sq>t worry about crossing bridges until you reach them?<dq></p>", 
                "question": "12 Months of Python<colon> 12 Lessons (Thank you Reddit.)"
            }, 
            "id": "dbkcunh"
        }, 
        {
            "body": {
                "answer": "<p> I<sq>d be interested! Even though I don<sq>t understand 90<percent> of things in this subreddit, I<sq>d still be excited to watch!</p>", 
                "question": "Would People Be Interested in a Game Programming From Scratch Twitch Stream?"
            }, 
            "id": "cmb93m7"
        }, 
        {
            "body": {
                "answer": "<p>Check out [handmadehero.org](http<colon>//handmadehero.org), Casey Muratori just started a project like this about two weeks ago.</p>", 
                "question": "Would People Be Interested in a Game Programming From Scratch Twitch Stream?"
            }, 
            "id": "cmbbpt6"
        }, 
        {
            "body": {
                "answer": "<p>RemindMe! 5 days <dq>Get off your ass and go watch this dude<dq></p>", 
                "question": "Would People Be Interested in a Game Programming From Scratch Twitch Stream?"
            }, 
            "id": "cmb5bv1"
        }, 
        {
            "body": {
                "answer": "<p>Looking forward to this mostly because I just like watching peoples styles of work. Will you be saving the video<sq>s for people who can<sq>t watch live? </p>", 
                "question": "Would People Be Interested in a Game Programming From Scratch Twitch Stream?"
            }, 
            "id": "cmbddf1"
        }, 
        {
            "body": {
                "answer": "<p>I just finished a course that comprehensively covered that textbook.<br><br>Here<sq>s an awesome YouTube playlist by a professor at the university of Portland in Oregon that walks you through nearly the entire textbook. This man really helped do well in this class, and he offers a very thorough and patient walkthrough of nearly every critical section.<br><br>http<colon>//www.youtube.com/watch?v=TOsMcgIK95k&list=PLbtzT1TYeoMjNOGEiaRmm_vMIwUAidnQz</p>", 
                "question": "Are there any YouTube channels or podcasts that talk about theoretical computer science at a high level?"
            }, 
            "id": "dbmj7px"
        }, 
        {
            "body": {
                "answer": "<p>Computerphile is fun to watch, covers some theoretical concepts</p>", 
                "question": "Are there any YouTube channels or podcasts that talk about theoretical computer science at a high level?"
            }, 
            "id": "dbmkdv0"
        }, 
        {
            "body": {
                "answer": "<p>I enjoy listening to Talking Machines.  It focuses on machine learning, but it talks about theory and applied mathematics.  It also has a lot of interesting interviews with people in the field</p>", 
                "question": "Are there any YouTube channels or podcasts that talk about theoretical computer science at a high level?"
            }, 
            "id": "dbms106"
        }, 
        {
            "body": {
                "answer": "<p>Hearing Richard Feynman explain how they work too is also amusing if you want a scientist/physicist<sq>s view of it - https<colon>//youtu.be/EKWGGDXe5MA</p>", 
                "question": "Are there any YouTube channels or podcasts that talk about theoretical computer science at a high level?"
            }, 
            "id": "dbmvaan"
        }, 
        {
            "body": {
                "answer": "<p>Since we are in /r/learnprogramming, tell us a little about the site. What technologies did you use (languagues, tools, ect..)? What does the architecture look like?</p>", 
                "question": "I built a tool that helps you format code blocks before you submit them to reddit. Now you have no excuses!"
            }, 
            "id": "da48w9u"
        }, 
        {
            "body": {
                "answer": "<p>Nice utility.<br><br>A useful feature would be a <dq>format and copy to clipboard<dq> button, it would make the service very streamlined and quick to use.<br><br>Edit<colon> Made a pull request!<br><br>---<br><br>On another note...<br><br>Do none of you use the Reddit Enhancement Suite browser extension? The Reddit experience IMO sucks without it. <br><br>One of the many things it does is add a rich text editor style toolbar to comment boxes, and one of its tools is a code formatter. It also adds a realtime render of your mardown so that you can make sure everything looks correct before you submit.<br><br>Here<sq>s an image of it in action<colon> http<colon>//i.imgur.com/QJvNkh2.png<br><br>You highlight a portion of text and press the button, just like a word processer, right in the comment box. Nothing could be easier.</p>", 
                "question": "I built a tool that helps you format code blocks before you submit them to reddit. Now you have no excuses!"
            }, 
            "id": "da4dslz"
        }, 
        {
            "body": {
                "answer": "<p>    function test() {<br>        console.log(<sq>Testing this shit out<sq>);<br>    }<br>    <br>    test()</p>", 
                "question": "I built a tool that helps you format code blocks before you submit them to reddit. Now you have no excuses!"
            }, 
            "id": "da4bi0o"
        }, 
        {
            "body": {
                "answer": "<p>Giving this one a save!</p>", 
                "question": "I built a tool that helps you format code blocks before you submit them to reddit. Now you have no excuses!"
            }, 
            "id": "da48lon"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "One year reddit programmer challenge"
            }, 
            "id": "dc2rx97"
        }, 
        {
            "body": {
                "answer": "<p>Are we supposed to give you challenges to do? I don<sq>t really understand what you<sq>re after.</p>", 
                "question": "One year reddit programmer challenge"
            }, 
            "id": "dc2q630"
        }, 
        {
            "body": {
                "answer": "<p>You can follow /r/dailyprogrammer , there are additional problem sets and challenges in the faq (Project euler , Code forces ...)</p>", 
                "question": "One year reddit programmer challenge"
            }, 
            "id": "dc2qzfr"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "One year reddit programmer challenge"
            }, 
            "id": "dc2qhwu"
        }, 
        {
            "body": {
                "answer": "<p>Coursera is losing their vision and turning into a simple business. <br><br></p>", 
                "question": "PSA<colon> Coursera no longer allows you to take exams or hand in assignments if you<sq>re not paying"
            }, 
            "id": "czvx024"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m currently <sq>auditing<sq> about 10 different courses on there for free. I don<sq>t think it<sq>s fair to complain about this given the quality and depth of the site.</p>", 
                "question": "PSA<colon> Coursera no longer allows you to take exams or hand in assignments if you<sq>re not paying"
            }, 
            "id": "czw04x6"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s the blog post about the change. It happened 1/19/16.<br><br>https<colon>//blog.coursera.org/post/137649201147</p>", 
                "question": "PSA<colon> Coursera no longer allows you to take exams or hand in assignments if you<sq>re not paying"
            }, 
            "id": "czvwiaj"
        }, 
        {
            "body": {
                "answer": "<p>I thought the whole purpose was to get quality education out there for people who can<sq>t afford it otherwise. This is disappointing<br></p>", 
                "question": "PSA<colon> Coursera no longer allows you to take exams or hand in assignments if you<sq>re not paying"
            }, 
            "id": "czw8r6x"
        }, 
        {
            "body": {
                "answer": "<p>Then quit.<br><br>What<sq>s that?  You don<sq>t want to?  Then earn your pay.  It may take you twice as long, but spend twice as long.  Whatever it takes to get done what<sq>s put on your plate.<br><br>You don<sq>t have imposter syndrome, you<sq>re not secretly competent, and you probably suck.  Get better, and for the love of god stop telling yourself and other people that things are <dq>hard<dq> for you.  They<sq>re not hard, you just don<sq>t know how.  Put the concept of <dq>this is hard for me<dq> out of your mind.  Forever.  Never say that again.<br><br>Everyone sucks balls after college.  Just get better; it<sq>s all you can do.</p>", 
                "question": "I<sq>m now an entry level programmer with great pay...but I feel so guilty and useless and unsure of myself."
            }, 
            "id": "csukx2e"
        }, 
        {
            "body": {
                "answer": "<p>Software engineers command high salaries because that<sq>s what the market demands.  Employment is a win-win scenario where the employee gets a nice salary, and the employer gets someone who puts in 40+ hours a week to deliver value in excess of how much they<sq>re paid (which includes salary, taxes, and benefits).  Together, the employee and employer both accomplish something neither party is able to achieve on their own.</p>", 
                "question": "I<sq>m now an entry level programmer with great pay...but I feel so guilty and useless and unsure of myself."
            }, 
            "id": "csukan1"
        }, 
        {
            "body": {
                "answer": "<p>You are entry level because you just joined the company.<br>I think people expect that they can just ignore a large part of the engineering process and just code.<br><br>The first thing I found when I started as a software engineer was that I had to keep writing in my onenote how to do basic things with the product. How to setup a repro, how to debug, how to check-in, how to run a test, how to debug a test. How to test for memory leaks, how to run a debugger.<br><br>I realized I was spending most of my day doing these things and very little of my day actually thinking.<br><br>I looked at the top performers on my team and I saw that they made scripts for these tasks that were taking all of my time.<br><br>tl;dr you need more time to do things at work so spend time decreasing the time to do the non-coding parts of your job<br><br>edit<colon><br>Just wanted to add the obligatory http<colon>//xkcd.com/1205/</p>", 
                "question": "I<sq>m now an entry level programmer with great pay...but I feel so guilty and useless and unsure of myself."
            }, 
            "id": "csullvl"
        }, 
        {
            "body": {
                "answer": "<p>It normalish.<br><br>https<colon>//en.wikipedia.org/wiki/Impostor_syndrome</p>", 
                "question": "I<sq>m now an entry level programmer with great pay...but I feel so guilty and useless and unsure of myself."
            }, 
            "id": "csujbvx"
        }, 
        {
            "body": {
                "answer": "<p>What are the prerequisites? Does one need to know Java to be able to follow along?<br></p>", 
                "question": "Learning Android easy and free!"
            }, 
            "id": "c9jzhk3"
        }, 
        {
            "body": {
                "answer": "<p>Thanks everyone for the nice comments! <colon>) <br><br>I<sq>ll keep doing more videos for Android untill I run out of ideas. <br><br>If you have any criticism/suggestions don<sq>t hesitate to tell me. I<sq>m trying to make the tutorials as good as possible!</p>", 
                "question": "Learning Android easy and free!"
            }, 
            "id": "c9k1r4w"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome man! Please Keep it up!</p>", 
                "question": "Learning Android easy and free!"
            }, 
            "id": "c9k1ire"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so much! Maybe when you start running out of ideas, and your series gets really far and its hard to add anything, perhaps start a series where Android devs submit their problems to you and you show how your troubleshoot their issue and just chat about it in an educational way?<br><br><br><br><br><br><br><br>(only reason why this came to mind is because I<sq>m struggling with layout problems right now lol)<br><br><br><br>Anyway, thanks! You<sq>re incredible!</p>", 
                "question": "Learning Android easy and free!"
            }, 
            "id": "c9k7i9s"
        }, 
        {
            "body": {
                "answer": "<p>.</p>", 
                "question": "My collection of learning programming courses and bootcamp links (Ruby Python Javascript and more)"
            }, 
            "id": "cte1m1w"
        }, 
        {
            "body": {
                "answer": "<p>similar but also good - https<colon>//papaly.com/lokmansalikoon/0rGj/Coding-Resources<br></p>", 
                "question": "My collection of learning programming courses and bootcamp links (Ruby Python Javascript and more)"
            }, 
            "id": "cte6fl2"
        }, 
        {
            "body": {
                "answer": "<p>Thanks!! That really helped!</p>", 
                "question": "My collection of learning programming courses and bootcamp links (Ruby Python Javascript and more)"
            }, 
            "id": "ctdu3ic"
        }, 
        {
            "body": {
                "answer": "<p>Shameless self bump<colon> https<colon>//papaly.com/a/TVOt</p>", 
                "question": "My collection of learning programming courses and bootcamp links (Ruby Python Javascript and more)"
            }, 
            "id": "cteears"
        }, 
        {
            "body": {
                "answer": "<p>For those messaging me - you get Lifetime access to this course. I also have a chatroom with over 4000 students and forums where you can post and find answers to programming questions - you get all of that for free forever.<br><br>-Mark</p>", 
                "question": "My 38 hour iOS course free for Redditors - 500 codes"
            }, 
            "id": "czgijj4"
        }, 
        {
            "body": {
                "answer": "<p>Wow, I was just mulling over dropping $200 for the course. Came to this sub to see what was the favourite iOS learning materials and see this! Meant to be. Thanks!</p>", 
                "question": "My 38 hour iOS course free for Redditors - 500 codes"
            }, 
            "id": "czg3pr6"
        }, 
        {
            "body": {
                "answer": "<p>I think I<sq>ve already bought this a few weeks ago, but I just wanted to say that your videos are really educational *and* entertaining! I<sq>ve seen a lot of different Swift tutorials and these are by far the best I<sq>ve come across. <br><br>Great videos. I highly recommend them for any Swift beginner!</p>", 
                "question": "My 38 hour iOS course free for Redditors - 500 codes"
            }, 
            "id": "czgcd12"
        }, 
        {
            "body": {
                "answer": "<p>Just to warn you guys, this OP is a complete snake oil salesman. Here<sq>s the drama from last time he tried selling one of his udemy courses (this thread is the 5th highest rated thread in this subreddit, by the way)<colon><br><br>https<colon>//www.reddit.com/r/learnprogramming/comments/3kh4bv/please_stop_selling_us_bs_this_subreddit_is_to/<br><br>So, whatever. A free course is a free course, I guess. But if he starts blowing a bunch of fairy dust up your ass, with the intent to sell some other course to you, then just close out of that course and never go back.</p>", 
                "question": "My 38 hour iOS course free for Redditors - 500 codes"
            }, 
            "id": "czgu7j2"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! Proud of you! Stuff like this is why I believe everyone should learn some basic programming skills. You never know what you can automate. <br><br>Just a heads up, though<colon> Android development *sucks*. It is *extremely* complicated to set up the dev environment, and even making a simple text-input app is really hard. Good luck... <br><br>EDIT<colon> To everyone taking the time to write a bunch of insults due to my views on Android<colon> fuck you. The frequent threads about how hostile the programming community is are about you. </p>", 
                "question": "Started to learn to program 4 days ago. Now I<sq>ve made a fully functional Java application for our neurobiology laboratory."
            }, 
            "id": "cq9594z"
        }, 
        {
            "body": {
                "answer": "<p>One thing, you could present the user with a simple menu for entering the units rather than have them type out the word.</p>", 
                "question": "Started to learn to program 4 days ago. Now I<sq>ve made a fully functional Java application for our neurobiology laboratory."
            }, 
            "id": "cq96zed"
        }, 
        {
            "body": {
                "answer": "<p>nice job. This should take way less than 3 seconds for something this simple by the way.Android API is kind of a pain to setup/use so good luck.<br><br>Now as far as the application<colon> <br>-Dont use magic number such as variable=variable *0.0001 ; the 0.0001 is a magic number you dont want that in your program.You can extract them away in a different variable with a meaningful name; if those value dont change during run time; use the Final keyword when creating the 0.0001 variable.<br><br>2<colon> dont name your method parameter a,b,c;gives them meaningfull name; same with variable name.<br><br>3<colon>Careful about calling function inside the static main method; this makes it so that all method will have to be static; not something you want once you do bigger project/program.<br></p>", 
                "question": "Started to learn to program 4 days ago. Now I<sq>ve made a fully functional Java application for our neurobiology laboratory."
            }, 
            "id": "cq95lkw"
        }, 
        {
            "body": {
                "answer": "<p>Takes me back...this is how I started programming, building a program to do my physics homework for me</p>", 
                "question": "Started to learn to program 4 days ago. Now I<sq>ve made a fully functional Java application for our neurobiology laboratory."
            }, 
            "id": "cq9frs0"
        }, 
        {
            "body": {
                "answer": "<p>I agree, telling people to google the answer also leads to another problem... I often find topics on Google with my exact question, and the first answer is <dq>google it<dq> or <dq>Use the forum search<dq>.<br>If you are going to say <dq>google it<dq>, just ignore instead, maybe someone else helps.<br><br>It<sq>s also usually a lot faster to google something than ask somewhere, so i assume the guy didn<sq>t have much sucess in the search, and help him.</p>", 
                "question": "Saw a complaint telling a poster to google the answer.  Guess what?  I would have never learned about that topic if the question wasn<sq>t asked."
            }, 
            "id": "c7qn6vr"
        }, 
        {
            "body": {
                "answer": "<p>There is a line. Sure, google it if your question is <dq>What is the best language to start with<dq> kind of thing.<br><br>But once you dive deeper into a subject you<sq>re often not going to be able to just google it for the answer. Or, say the answer is out there, just buried under piles and piles and piles of shit. If you haven<sq>t run into that situation before you<sq>re just beginning. What is the alternative in that situation? Usually forums, or IRC, or whatever your resource is, but for beginners just finding the right forums/channels/mailing lists can be such a cockblock. <br><br>Furthermore, it<sq>s a dick thing to say. How many people do you really think don<sq>t know to use google at this point? Do they really have to lay out every single step they took to get to the point of <dq>I can<sq>t find the proper information<dq>? Maybe I spent 3 hours looking for the solution. Do you really want that backstory? Just 5 minutes ago I was arguing this with somebody else who had the preconceived notion that <dq>nobody<dq> does this kind of research before posting here if they don<sq>t detail their search, and that is 100<percent> unadulterated bullshit.<br><br>Finally, maybe somebody didn<sq>t realize the proper way to search. It happens. Maybe keywords are left out (or completely unknown to a *gasp* beginner).</p>", 
                "question": "Saw a complaint telling a poster to google the answer.  Guess what?  I would have never learned about that topic if the question wasn<sq>t asked."
            }, 
            "id": "c7qnoms"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Saw a complaint telling a poster to google the answer.  Guess what?  I would have never learned about that topic if the question wasn<sq>t asked."
            }, 
            "id": "c7qs3bx"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not going to repeat what others have said. But generally my belief is that you should first do as much of the legwork you possibly can before bringing the problem to others. In short, learn how to ask questions the right way.<br><br>Read this, because there<sq>s a difference between asking a good question, and just being a lazy ass looking for a handout (cliche as it maybe, <dq>teach a man how to fish<dq> is very valid here.)<br>[How to Ask Questions the Smart Way](http<colon>//www.catb.org/~esr/faqs/smart-questions.html)</p>", 
                "question": "Saw a complaint telling a poster to google the answer.  Guess what?  I would have never learned about that topic if the question wasn<sq>t asked."
            }, 
            "id": "c7qokj2"
        }, 
        {
            "body": {
                "answer": "<p>Thank you - nice post. Good idea looking through the Style Guides of the big companies.<br><br>There is one mistake in your good CSS line - a missing space after the <dq><colon><dq>.<br><br>    /* Good CSS */<br>    .selector {<br>      padding<colon>[SPACE] 15px;<br>    }<br>    Include one space after <colon> for each declaration, but none before.</p>", 
                "question": "A small list of publicly available CSS best practices. It helped me understand what other companies are doing."
            }, 
            "id": "cyhnd3q"
        }, 
        {
            "body": {
                "answer": "<p>Just a note about these. They are all what rich megacorporations are doing. It is necessary to remember that because that is the environment out of which their ideas emerge, and in the same way that a scientist reveals their biases so their audience can compensate, it<sq>s good to keep this in mind as well.</p>", 
                "question": "A small list of publicly available CSS best practices. It helped me understand what other companies are doing."
            }, 
            "id": "cyht2gq"
        }, 
        {
            "body": {
                "answer": "<p>Gogle<sq>s Style Guide is weird. They are telling us not to close void tags like <br> or <link>, so <br> instead of <br />. Why?</p>", 
                "question": "A small list of publicly available CSS best practices. It helped me understand what other companies are doing."
            }, 
            "id": "cyhnd3w"
        }, 
        {
            "body": {
                "answer": "<p>This is great. I<sq>ve been working on a personal project and this will help me get to the next level</p>", 
                "question": "A small list of publicly available CSS best practices. It helped me understand what other companies are doing."
            }, 
            "id": "cyhqcik"
        }, 
        {
            "body": {
                "answer": "<p>I really wish people would show examples of what they expect a Junior dev to be able to do. It would be much more helpful than saying they should have a portfolio with however many sites.</p>", 
                "question": "I created a free site which guides people who want to start a web development career."
            }, 
            "id": "ck28ymb"
        }, 
        {
            "body": {
                "answer": "<p>Looked it over, you have good info here. Ive been freelancing since 2007, you paint a good picture.<br><br>HOWEVER, theres some downsides you dont mention that the newb should keep in mind.<br><br>One, regarding finding work. On the internet, in those job websites, everyone is a programmer. On the street though, almost no one is. You gotta make in-person contact to rise out of the crowd. Dont neglect personal skills.<br><br>Dont undercharge, or take low pay. Youre in this for income. Your employer will take what they can from you, and you better take what you can from them. I know plenty of poor (money-wise) developers that are good at what they do. Its not greedy to ask for what you are worth. To us, sure, its sitting down for a few hours and typing, but to them, its like some magical mysterious and utterly necessary juju. So dont let them get away with underpaying you.<br></p>", 
                "question": "I created a free site which guides people who want to start a web development career."
            }, 
            "id": "ck24s5o"
        }, 
        {
            "body": {
                "answer": "<p>I think I love you.<br><br>But seriously, thank you so much. I just recently earned a masters in anthropology and have decided to throw that all away to pursue what I really want to do, which is work with programming. I never went into programming when I started college because I had stupid social programming telling me that girls don<sq>t program. I finally got over that now that I<sq>m 31...</p>", 
                "question": "I created a free site which guides people who want to start a web development career."
            }, 
            "id": "ck24s7e"
        }, 
        {
            "body": {
                "answer": "<p>This is great. Also check out www.theodinproject.com if you haven<sq>t already; it seems like you guys have similar goals in mind.</p>", 
                "question": "I created a free site which guides people who want to start a web development career."
            }, 
            "id": "ck28fmn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d start with Harvard<sq>s CS50 on edx, it<sq>s the best course you<sq>ll find anywhere bar none. The instructor, Dave Malan is world class. Check out [cs50](https<colon>//www.edx.org/course/introduction-computer-science-harvardx-cs50x), and the sub r/cs50 has a lot of like minded people like you.<br><br>[Stackoverflow](http<colon>//stackoverflow.com) is your friend where you can ask any question you have or bounce ideas off of others.<br><br>Learn Java OOP (here is an excellent course)<colon> [MOOC](http<colon>//mooc.fi/english.html)<br><br>[Free Code Camp for web design](https<colon>//www.freecodecamp.com/)<br><br>Build your own operating system<colon> [NAND2TETRIS](http<colon>//www.nand2tetris.org/)<br><br>[Cave of Programming](https<colon>//www.caveofprogramming.com/) <colon> All kinds of programming<br><br>[Open Source Society University](https<colon>//github.com/open-source-society/computer-science)<colon> *This is a solid path for those of you who want to complete a Computer Science course on your own time, for free, with courses from the best universities in the World.*<br><br></p>", 
                "question": "From zero to software developer"
            }, 
            "id": "dadi4az"
        }, 
        {
            "body": {
                "answer": "<p>If you want to learn Python you could take [MIT<sq>s intro to comp sci class](https<colon>//www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9#!), which should give you a solid foundation in the fundamentals. They also have a follow up class as well.<br><br>I took Harvard CS50 on edX and it was a great course. I heard great things about the MIT class though. </p>", 
                "question": "From zero to software developer"
            }, 
            "id": "dadfn0d"
        }, 
        {
            "body": {
                "answer": "<p>So you learned the basic syntax of Python and how coding works? The next step is to make some example project. That<sq>s what I do after learning a language, try to make some example application with the language. Python for instance when I tried it out and learned it, I made an application that automated emails for me. <br><br>[Here is a list of a ton of sample projects you could do.](https<colon>//github.com/karan/Projects) Review things if you get confused, Google around and stuff or refer to some resource like a book. <br><br>You<sq>ll get stuck of course, just Google around, ask here, or like join the discord chat and ask for help. <br><br>If you want more direction in your journey, Udacity offers a [Nanodegree for Full-Stack Web Development with Python track](https<colon>//www.udacity.com/course/full-stack-web-developer-nanodegree--nd004). It does cost money though, to get I believe all the extra help they offer and the capstone projects at the end to do, the plus version they say they will help you find a job. However you can just do it all for free as the courses themselves are free. Follow the courses, do a project from that list or ask here for one maybe, instead if you wanna save money. I think the nanodegree price is pretty steep and the nanodegree itself won<sq>t be something that you put on your resume to help you...actual projects are what would help you. I can<sq>t really vouch for the nanodegrees, but they look interesting, [other Redditors have said good things.](https<colon>//www.reddit.com/r/learnprogramming/comments/4tiytg/question_on_udacitys_nanodegrees/)</p>", 
                "question": "From zero to software developer"
            }, 
            "id": "dadfo07"
        }, 
        {
            "body": {
                "answer": "<p>> I<sq>ve gone through Treehouse<sq>s Python track but I feel like I have big gaping holes in my understanding.<br><br>You don<sq>t learn programming by just doing a course. You learn by doing a lot of programming. So after you finish a course you should start actually creating your own stuff. Start really small; a number guessing game, a text adventure, etc. and work your way up. </p>", 
                "question": "From zero to software developer"
            }, 
            "id": "dadk310"
        }, 
        {
            "body": {
                "answer": "<p>Why YOU would use Linux can be very different from why Linux is used in development and production environments. One of the major reasons is simply cost. Linux is (generally) free, so if you need to deploy a lot of remote hosts and servers it costs you $0. <br><br>Also Linux generally gives you (sometimes too much) control over the OS internals, so it<sq>s easier to do basically anything under the hood with it compared to Windows.<br><br>However, for your personal machine it basically doesn<sq>t matter. Linux is free so that<sq>s nice. It<sq>s more common to use the terminal for every day use in Linux as opposed to Windows, so you<sq>ll get more comfortable with it. A lot of tools are designed with the terminal in mind. <br><br>But in the majority of cases using Windows or Linux is interchangeable. So go with whatever you like more. And if you use Windows and absolutely need Linux for something, it<sq>s trivial to set up a VM and install it on there. <br><br>So basically, it doesn<sq>t matter.<br><br>However, Linux is heavily relied on in industry so it<sq>s good to be comfortable with it. </p>", 
                "question": "ELI5<colon> Why use linux..?"
            }, 
            "id": "d8hwkwk"
        }, 
        {
            "body": {
                "answer": "<p>>If linux works like Windows, and uses Bash which I<sq>ve already been using, what reason would compel me to switch?<br><br>Linux doesn<sq>t *work like* Windows.  Not at all.  A few distros *look like* Windows, or at least, more than others, but under the hood it<sq>s a very different situation.<br><br>Why would you switch?<br><br>If you<sq>re a CS student who has only ever run Windows, it<sq>s probably time to broaden your horizons.<br><br>Outside the desktop market, Linux is the most important OS of our time.  Powers most of the world<sq>s smartphones, supercomputers, web servers, appliances, etc.  <br><br>One effective way to get familiar with Linux is to run a desktop Linux distro on your own computer.  It certainly forces you to get in and get comfortable with the system when you rely on it for day-to-day stuff.<br><br>Is it *better*?  That<sq>s a flame war for fanboys to sort out.<br><br>The important thing for you is that you need to know it if you want to be a web developer, or any kind of developer for the next few decades. <br><br>>What are some reasons why I wouldn<sq>t switch? -MS Office doesn<sq>t work, etc? <br><br>Software and hardware compatibility. If you<sq>re married to a piece of software that only runs on Windows (or your classes require such software), you probably need to keep Windows around (as a dual-boot or VM scenario, at least).<br><br>If your hardware isn<sq>t compatible with Linux and you can<sq>t afford to replace it, I guess you aren<sq>t running Linux.<br><br></p>", 
                "question": "ELI5<colon> Why use linux..?"
            }, 
            "id": "d8hy0zr"
        }, 
        {
            "body": {
                "answer": "<p>>If linux works like Windows, and uses Bash which I<sq>ve already been using, what reason would compel me to switch?<br><br>Linux is not at all like windows. Ubuntu tries to gives you a GUI superficially similar to Windows but that<sq>s it. Working on servers as a web dev you would never see that GUI anyway. All you would see is an SSH terminal session. And that<sq>s a good thing.<br><br>Here are a couple things I wrote many years ago about why I like Linux, from back when Linux actually needed advocacy. Now it really sells itself.  Still just as valid today.<br><br>http<colon>//tracyreed.org/Writings/WhyLinux<br><br>http<colon>//tracyreed.org/Writings/unix-vs-windows<br><br>http<colon>//tracyreed.org/Writings/easeofuse<br><br>http<colon>//tracyreed.org/Writings/savemoney<br><br>>What are some reasons why I wouldn<sq>t switch? -MS Office doesn<sq>t work, etc?<br><br>Computers are cheap now. Get one of each if you need. But I don<sq>t have a single Windows machine. I use libre office if I need to open a word file. It works great.<br><br>>I just don<sq>t know if Linux is something I should start learning now, or ever, and most things I read about linux seem really complicated and kinda goes over my head. <br><br>If you want to be in the technology business like web dev you definitely need Linux. I hate it when I have to work with web devs who don<sq>t at least know the basics. They are a real PITA. Plus you are going to need to be able to code secure web apps. How can you avoid shell injection if you don<sq>t know what a shell is?<br><br><br></p>", 
                "question": "ELI5<colon> Why use linux..?"
            }, 
            "id": "d8hzx8i"
        }, 
        {
            "body": {
                "answer": "<p>The majority of web servers run Linux, if you are learning web development and want to be effective learning the operating system that runs the technology you will be developing in is helpful.<br><br>Unless you want to restrict your development to just technologies that run on windows. <br><br>As far as using Linux as your desktop that just goes to personal preference. No restrictions on what you can or can not do with your OS. Sure MS Office doesn<sq>t work on it but you can use libre office</p>", 
                "question": "ELI5<colon> Why use linux..?"
            }, 
            "id": "d8hwsnm"
        }, 
        {
            "body": {
                "answer": "<p>I think most more experienced programmers will tell you that a lot of programming is just googling/asking for help/etc. You<sq>re only stretching your understanding and skills if you have to learn something new by definition of what that means. I know that<sq>s a frustrating feeling though, I<sq>m taking cs50 and it<sq>s taken until now to learn that having to go back and review video or google or ask for help is actually part of solving the problem and so it shouldn<sq>t discourage you. I<sq>ve heard super-experienced programmers say they still have to google to solve problems all the time - it<sq>s just that they<sq>re more complex of course.<br><br>a hierarchy forms where an experienced programmer helps an intermediate programmer helps a beginner programmer and the process is the same no matter how good you get, I think</p>", 
                "question": "After 4 weeks I have my own App on playstore!"
            }, 
            "id": "d8dn13j"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m really glad you released something with dirty messy code.  That<sq>s a hurdle a lot of people have trouble jumping.  <br><br>If you<sq>re writing banking software or offering encrypted communication, get the shit right from the start.  But if you are making a game, a fun app, something that doesn<sq>t have restrictions like PCI or HIPAA compliance, get it running well enough that it won<sq>t piss of your users and push it out.<br><br>Beautiful code is a luxury.  The most beautiful code ever written is probably in a project that<sq>s never been released because its developer didn<sq>t think it was ready yet.</p>", 
                "question": "After 4 weeks I have my own App on playstore!"
            }, 
            "id": "d8dxpcg"
        }, 
        {
            "body": {
                "answer": "<p>> Still i think im not a programmer, It was 20<percent> coding 80<percent> searching google,looking for solutions, fixing bugs,stackoverflow 90<percent> of the time.<br><br>You<sq>re officially a programmer now</p>", 
                "question": "After 4 weeks I have my own App on playstore!"
            }, 
            "id": "d8e005p"
        }, 
        {
            "body": {
                "answer": "<p>In the description you wrote lap reports. I think you mean lab reports - that said I<sq>m no Chemical Engineer. </p>", 
                "question": "After 4 weeks I have my own App on playstore!"
            }, 
            "id": "d8dni70"
        }, 
        {
            "body": {
                "answer": "<p>Good find, sir. I raise my glass to you. <br><br>Edit<colon> Upon trying to access many of these ebooks many of the links are broken and/or content is gone. Increasingly less of a good find. [May I suggest this better post](http<colon>//www.reddit.com/r/AskReddit/comments/179yg4/what_was_your_biggest_holy_shit_why_havent_i_done/c83sbdr) by /u/WTFisBehindYou. Not trying to hate, but it seems like there are a lot of holes in the content of the site you posted now that I<sq>ve tried accessing it. </p>", 
                "question": "Found a list of legally FREE e-Books pertaining to programming comp. sci and engineering over at /r/freebies"
            }, 
            "id": "c84i7wp"
        }, 
        {
            "body": {
                "answer": "<p>Also, from [our books wiki](http<colon>//www.reddit.com/r/learnprogramming/wiki/books)<colon> the StackOverflow [list of freely available programming books](http<colon>//stackoverflow.com/questions/194812/list-of-freely-available-programming-books)</p>", 
                "question": "Found a list of legally FREE e-Books pertaining to programming comp. sci and engineering over at /r/freebies"
            }, 
            "id": "c84jowt"
        }, 
        {
            "body": {
                "answer": "<p>See also the giant wall of free books<colon> http<colon>//stackoverflow.com/questions/194812/list-of-freely-available-programming-books</p>", 
                "question": "Found a list of legally FREE e-Books pertaining to programming comp. sci and engineering over at /r/freebies"
            }, 
            "id": "c84jphg"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//ProgramArcadeGames.com Learn how to program arcade-style games using Python.</p>", 
                "question": "Found a list of legally FREE e-Books pertaining to programming comp. sci and engineering over at /r/freebies"
            }, 
            "id": "c84z6dh"
        }, 
        {
            "body": {
                "answer": "<p>You could look into embedded programming where systems are very small and you have to be mindful of memory limitations.</p>", 
                "question": "Programmers of the 80s how do i learn to build the things that you built?"
            }, 
            "id": "d90gnop"
        }, 
        {
            "body": {
                "answer": "<p>> how did you do it back in your days?<br><br>We read bloody expensive and difficult to get books. We experimented. We programmed. We learned.<br><br>Seriously, without the abundance of resources that the internet now provides we had to become self sustaining. I started to program in a time where only big companies and banks had computers. Where the <dq>home computers<dq> (like the Commodore C64 with the cassette drive) slowly pushed their way into homes, but they still were so rare that you were lucky to find one semi-knowledgeable person in a city of 10000+ people.<br><br>A lot at that time was learned through trial and error.<br><br>We started out with BASIC (**B**eginner<sq>s **A**ll **P**urpose **S**ymbolic **I**nstruction **C**ode) that was nothing like the modern VB.NET. It was not even compatible between computers of different manufacturers. We had 42kb memory at max. We learned to use each and every free bit in the computer. We pretty soon reached our limits with BASIC, so we switched to Assembly language - which got us much further.<br><br>Then the PC (IBM-XT and compatibles) came. All of a sudden we had memory in abundance (so we initially thought, but soon learned better) with huge 512kB RAM, we had decent storage media (360kB on a 5.25<dq> floppy), we had nice programming languages, like Pascal and C. And again, we programmed, we learned.<br><br>GUIs did not exist, everything was console (text) based. Programming was way easier at that time. There was no multitasking, multithreading, etc. Everything ran in a single thread.<br><br>When Windows came, we started the learning process again.<br><br>We *grew* into programming - and that was our biggest advantage. Nobody expected us to learn programming in a year or two; we had *time*.</p>", 
                "question": "Programmers of the 80s how do i learn to build the things that you built?"
            }, 
            "id": "d90odv2"
        }, 
        {
            "body": {
                "answer": "<p>I took a linux programming class in college.  The professor had us write our own versions of terminal commands like ls, cat, tar (fuck this one), and by the end of the class, we had to write our own shell! I seriously suggest this.  Look at the man pages for these things, start easy and work your way up. Also look up how to create a Makefile, this will save you a lot of compile and cleanup time. <br><br>Edit<colon> Also we had an OS class like you described, however in the class we had to do several projects all in C.  We had to implement a virtual filesystem, a subset of a process manager, and solutions to the unisex, dining philosopher, and other problems.  If you would like, you can message me for more information or even the full project descriptions.</p>", 
                "question": "Programmers of the 80s how do i learn to build the things that you built?"
            }, 
            "id": "d90jw1d"
        }, 
        {
            "body": {
                "answer": "<p>operating system in the 80<sq>s and OS today are two very different things. the original linux was something like 1 megabyte. same with DOS. just a bare amount of services for IO access and a few other things</p>", 
                "question": "Programmers of the 80s how do i learn to build the things that you built?"
            }, 
            "id": "d90e9ve"
        }, 
        {
            "body": {
                "answer": "<p>I myself actually never did a degree and went from mucking around with scripts as a teenager to web-dev in to more low-level stuff now. From personal experience of things I<sq>ve either needed to learn, or learned for my own amusement but found pretty useful in programming in general<colon><br><br>* Data structures fundamentals - especially some basic set theory like understanding the terms union vs. intersection vs. subset. They can get used a lot and too often I<sq>ve seen people implement their own version when there already exists an easy way to do something in the standard library.<br><br>* Recursion. Not only recursive functions, but recursive definitions. This one isn<sq>t so much about basic understanding, but more level of comfort.<br><br>* Basic understanding of heap/stack/stack-frames. If you have a reasonable understanding of how the memory is actually handled it can help you figure out a lot of other things. <br><br>* Basic understanding of networking. Similarly<colon> there are just so many things that are so much easier to reason about if you have a passing understanding of this.<br><br>* How to normalize a database. (And why you generally should) I<sq>ve seen some shit.<br><br>* OS fundamentals. Processes and how they basically work, the concept of the init system, and what a syscall is.<br><br>* Metaprogramming. When you need a program with a lot of repetitive parts write a program to write your program. Some languages make this a bit obnoxious, but many don<sq>t. If one small change were requested and it<sq>d mean you<sq>d have to change something in 7 places ask yourself why that is.<br><br>I<sq>m hardly an expert in any of these, but a reasonable 101 level understanding makes understanding a lot of other things so much easier, and gives you a much better idea of what you *don<sq>t* know. The ability to recognize what you don<sq>t know and need to learn or find a library to do for you is really important.<br><br>But for the most part you can remain largely uneducated about these topics and still be productive and effective and hold a job and whatnot, so I<sq>d say they<sq>re definitely things to consider, but not particularly required if you<sq>re too tired to study up in your spare time right now.<br><br>Things I<sq>ve seen missing too often and are basically hard requirements to being effective<colon><br><br>* Lack of communicative and cooperative powers with team members. Three cowboys and one codebase is going to end poorly.<br>* Zero effort on styling. Unreadable code is bad.<br>* Poor ability with documentation. Granted there are projects with bad documentation that<sq>s understandably a struggle, but if you<sq>re having trouble reading the docs for most anything you need to develop that skill. It<sq>s pretty essential.<br>* Zero willingness to really try. If you don<sq>t care about making at least a passable effort you<sq>ll make crap, and it<sq>ll be a drag for everyone around you.</p>", 
                "question": "What skills do self-taught Web Developers commonly lack?"
            }, 
            "id": "czsr5vy"
        }, 
        {
            "body": {
                "answer": "<p>As both a self-taught developer, as well as someone who<sq>s been on the hiring side of the interview table, I<sq>ve got a couple answers you may be interested in.<br><br>1) Lots of self-taught developers start with a framework or library of some kind instead of the core language.  For JS I see<colon> JQuery, React, Angular,... is Prototype still a thing?  In my PHP days it was Zend, Symfony, or CodeIgniter.  Anyway, while this isn<sq>t necessarily a Bad Thing(tm) , this does have a tendency (anecdotally speaking of course) of leading to gotchas during debugging that could be solved with better knowledge of how the vanilla language works <dq>underneath the hood<dq>. <br><br>Also changing from one framework to another is easier if you<sq>re more comfortable with the vanilla version of the language. <br><br>2) Teamwork skills.  Lots of self-taught devs, myself included, have to go through a <dq>School of Hard Knocks<dq> when it comes to joining a team for the very first time.  There<sq>s lots of lessons that have to be learned when it comes to<colon>  Not taking code critique personally; Learning to read other people<sq>s code; Remembering to document your OWN code (Full disclosure<colon> I still neglect this one); and learning to prioritize which features in a project should come before others.  It could be argued that that last one is more of a management skill, but that<sq>s a conversation for another time.<br><br>3) Dev-Ops, or the art of not testing live.  Whether or not you<sq>re a solo act, eventually you<sq>re gonna have to get your hands dirty in some flavor of Linux.  It can be daunting, especially if, like me, you got your start trying to run your first prototype project using WAMP on a windows box. *shudder*.  While a web dev should by no means need to be able to stand shoulder to shoulder with Linus Torvalds, you should have enough comfort with the command line to be [dangerous](http<colon>//www.learnenough.com/command-line-tutorial).<br><br><br>TL;DR<colon><br>1) Frameworks aren<sq>t programming languages<br>2) Teamwork is magical (no seriously, go back and read this one)<br>3) Learn some ubuntu.</p>", 
                "question": "What skills do self-taught Web Developers commonly lack?"
            }, 
            "id": "czt391g"
        }, 
        {
            "body": {
                "answer": "<p>Off the top of my head<colon><br><br>* basket weaving<br><br>* welding<br><br>* cobbling<br><br>* breakdancing<br><br>PM me for more <br><br>EDIT<colon> Okay, you called my bluff. Stop PMing me because those are all the skills that I know.</p>", 
                "question": "What skills do self-taught Web Developers commonly lack?"
            }, 
            "id": "czsyr25"
        }, 
        {
            "body": {
                "answer": "<p>By far, social skills. Self-learning in isolation isn<sq>t always a good path, unless you can secure at least a training period among a cohesive workforce. This would improve communication.<br><br>Then you have economics. From what I see, self-thought folks tend to hold unconventional disregard for common economic theories, so they tend to undervalue their work since it<sq>s difficult adapting to a market you<sq>ve not properly participated in.<br><br>On the technical side, repositories and unit testing. While not a new concept, few may see the need for those if they personally oversee alone the completion of projects, where breakage found can be immediately addressed without getting tracked anywhere.</p>", 
                "question": "What skills do self-taught Web Developers commonly lack?"
            }, 
            "id": "czt3ibu"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, thank you for this. I got my copy of Hello web app last year at Djangocon during your workshop and it was a great introduction to Django. I<sq>m sure a lot of people will get the same use from it as I did. </p>", 
                "question": "My Django book Hello Web App is now free to read online"
            }, 
            "id": "dd3pas2"
        }, 
        {
            "body": {
                "answer": "<p>Thank you very much! <br>This is perfect for beginners (like me) and the fact that is free it<sq>s perfect to start learning.<br>Thanks again, from an electronics engineer in Chile.</p>", 
                "question": "My Django book Hello Web App is now free to read online"
            }, 
            "id": "dd3qc8z"
        }, 
        {
            "body": {
                "answer": "<p>Got the book as a Christmas present and loved it. </p>", 
                "question": "My Django book Hello Web App is now free to read online"
            }, 
            "id": "dd3v4cn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not a python programmer, and probably won<sq>t read this in time, but you<sq>ve done a nice thing so thank you. </p>", 
                "question": "My Django book Hello Web App is now free to read online"
            }, 
            "id": "dd45e2t"
        }, 
        {
            "body": {
                "answer": "<p>It seems like you<sq>re focusing on learning a specific language/technology, when in reality, what you need to do is focus on learning how to _break down_ and _decompose_ problems.<br><br>So, here<sq>s what I recommend.<br><br>For the next couple of months, focus exclusively on a single language. I would pick either Ruby, Python, or Java. (You already know Ruby; Python and Java are common teaching languages + have really high-quality learning materials in comparison to other languages. Here are some resources on [Ruby][ruby], [Python][python], and [Java][java] if you need them). I would explicitly _avoid_ JavaScript and Objective-C -- they tend to come bundled with too many distractions.<br><br>  [ruby]<colon> https<colon>//github.com/Michael0x2a/curated-programming-resources/blob/master/resources.md#ruby<br>  [python]<colon> https<colon>//github.com/Michael0x2a/curated-programming-resources/blob/master/resources.md#python<br>  [java]<colon> https<colon>//github.com/Michael0x2a/curated-programming-resources/blob/master/resources.md#java<br><br>Then, every week, go to /r/dailyprogrammer and complete one of the easy or intermediate challenges. The programs /r/dailyprogrammer tells you to write can typically all be run from the command line, which is perfect -- it<sq>s just the command line, the text editor, and you. No graphics, no fancy libraries, no distractions.<br><br>Once you<sq>ve picked a challenge (either the most recent one, or an older one), **DO NOT WRITE A SINGLE LINE OF CODE**. Instead, grab a sheet of paper and pencil, and **START BREAKING THE PROBLEM DOWN**. Don<sq>t even _think_ about programming. Your focus should not be on code at all.<br><br>Instead, try and break the problem down into smaller sub-problems until you can start writing very basic instructions. Ideally, you should try and break your instructions down until a kindergartener (or a computer!) can understand them. Think small instructions, small sentences, small words, but still be very detailed and methodical.<br><br>It<sq>s very tempting to handwave this process and give really skimpy instructions or just say something like <dq>oh, it<sq>s obvious how you do this part<dq>. Resist that temptation -- remember, kindergarteners (and computers) are both pretty stupid. Both toddlers and computers know very little about the world around them, and so are lacking a lot of the intuitions, background info, assumptions, and general knowledge that you possess. The entire point of this exercise is eliminate your tendency to handwave and make assumptions and instead down and break the problem in tiny pieces and go into way more detail then you<sq>re probably used to, and to train yourself in this skill until you can do this naturally.<br><br>Only begin writing code **ONCE YOU<sq>VE FINISHED** planning your program on paper. When you start doing this, you<sq>ll find that 90<percent> of the time, the bulk of the problem can be solved using if statements, for loops, while loops, functions, variables, basic data structures like lists and hashmaps, and basic input/output (printing, reading user input, reading a file). Think in terms of those basic primitives if it helps guide and focus your thinking. <br><br>Every now and then, you<sq>ll need to use a library (to generate a random number, for example) or use a more sophisticated technique/data-structure. That<sq>s fine, that<sq>s what Google is for. <br><br>Over time, you<sq>ll find that what you consider to be <dq>primitive<dq> will expand as you gain more experience and learn more about the language. Don<sq>t try and force this -- it<sq>ll happen organically as you naturally learn about things and work through exercises/problems.<br><br>Remember, you<sq>re trying to train two separate skills here -- **how to break a problem down into small pieces, and how to translate a plan into code**. Many online tutorials oversimplify this. They try and teach you how to code, and neglect teaching you how to break down problems altogether. <br><br>Once this starts getting easy, move on to doing multiple challenges, or doing intermediate and hard challenges. <br><br>---<br><br>You can train your <dq>break problems apart<dq> skill in other ways besides coding as well. <br><br>For example, take a random piece of furniture, and ask yourself how you might design and build it -- come up with schematics, figure out what parts you might need, etc. Think of some type of dish or food, and ask how you might go about preparing it. Take something you do every day but never consciously think about (such as brushing your teeth), pretend you<sq>re a robot, and come up with step-by-step instructions on how to do it. <br><br>For example, to brush my teeth, I<sq>d need to first start from my bed, take 5 steps forward, turn 90 degrees right, open the door if it<sq>s closed, enter the bathroom, etc. But then, how exactly does one open a door? How does one tell if a door is closed? For that matter, how do you get out of bed? Try breaking those down as well.<br><br>And what if I<sq>m not starting from my bed, but am instead starting from the kitchen and have the sudden urge to brush my teeth? Can I modify my instructions above to work no matter where I am? Or would it be simpler to make a completely different set of instructions that<sq>ll first take me to my bed/to the bathroom door so I don<sq>t have to rethink everything? etc.<br><br>Hell, try breaking down the act of taking a single step. How exactly do you need to flex your muscles? How many degrees do you need to move each limb? Do you flex your foot/toes before you start, or at any point in order to stay balanced? What is the other foot/limbs doing? How much force are you exerting, and where?<br><br>What you<sq>re trying to do here is gain the mindset of an _engineer_. Engineers, no matter what discipline, do this kind of thing all the time. Whether you<sq>re making a bridge, designing a building, wiring a robot, making jewelery, making furniture, or writing a program, the underlying process is the same. You have a big, somewhat intimidating task ahead of you, and you start breaking it down, chipping away at pieces, until the previously insurmountable problem is just a series of tinier problems that are much easier to tackle one-by-one.</p>", 
                "question": "I need serious help. Learn to program was my new year<sq>s resolution last year and despite thinking about it 24/7 and spending 4 hrs/day I failed. What can I do?"
            }, 
            "id": "cnb1luk"
        }, 
        {
            "body": {
                "answer": "<p>What you<sq>re really missing is the design and workflow stuff that turns empty files into complex applications.<br><br>Can you create a simple elevator simulator in HTML and Javascript?<br><br>Doesn<sq>t need animation or anything, just simple stuff like a floor/position indicator, buttons for each floor, maybe call buttons on each floor, etc.<br><br>Can you create that?  From scratch?<br><br>Here<sq>s how I would do it.<br><br>Put the keyboard, the books, the videos, the online classes, all that shit, put it all away.<br><br>Take out a pen and an empty notebook.<br><br>Start doodling thoughts of how an elevator simulator would work.<br><br>Logically, graphically, functionally.<br><br>What would it need to do to qualify as an elevator simulator?<br><br>What would it need to show to the user?<br><br>What inputs would it need?<br><br>How would you lay it out?<br><br>The third paragraph above lists a number of capabilities, and you can see how I hedged some of them.  It<sq>s just brainstorming at this stage.  Maybe call buttons on each floor, maybe not.  Maybe just an up or down button in the elevator.  Maybe it<sq>s an elevator for dogs.  Brainstorm.<br><br>Doodle, sketch, scribble, do that until you fill a couple pages and start to have a sense of what all the possibilities are.<br><br>Then start filtering them.<br><br>It<sq>d be cool to have, like, a 3D engine rendering the entire building and whatever, but that<sq>s really not feasible for a simple test project like this, so scratch that one out.<br><br>But you can do textboxes, so use those.<br><br>Maybe you don<sq>t need to handle collision testing or performance optimization or something at this stage.  Multiple elevators and stuff.<br><br>So just focus on one elevator to begin with.<br><br>How many floors are you comfortable implementing?  How many would fit on a screen with textboxes or whatever?<br><br>Etc.<br><br>See how I<sq>m just scribbling this all out.<br><br>I<sq>m not googling anything, I<sq>m not compiling anything, I<sq>m just playing mentally.<br><br>Read this huge post I wrote a few days ago<colon><br><br>http<colon>//www.reddit.com/r/AskReddit/comments/2qm34x/serious_whats_the_most_useful_course_i_can_take/cn7lasw<br><br>People seemed to like how it illustrated that programming is about how you think, and how you imagine, and how you conceive of ideas, rather than about syntax or semicolons.<br><br>It<sq>s not about perfection.<br><br>It<sq>s about imagination.<br><br>And those are totally different things, and I don<sq>t think you have much experience with that.<br><br>Because imagination is really, really, fun.<br><br>You<sq>d enjoy yourself if you were imagining.<br><br>So take a few hours and imagine something simple and stupid, like an elevator simulator.<br><br>Then build it.<br><br>Then imagine ways to improve it, and build those.<br><br>Then learn ways to improve it even more, that you don<sq>t already know.<br><br>Then imagine something brand new so you learn other things.<br><br>Let your education inform your imagination.<br><br>If you don<sq>t start out with a plain piece of paper with doodles and scribbles on it, or a document file with all sorts of random disjointed notes and thoughts and links and images, then you<sq>re doing everything wrong.<br><br>**Ideas begin freeform.**<br><br>So go grab a notebook or sketchbook and a good pen or pencil and get cracking.<br><br>(Another idea in lieu of elevators is Minesweeper.  It<sq>s totally possible to create Minesweeper as a simple HTML game, so try that if you want.)</p>", 
                "question": "I need serious help. Learn to program was my new year<sq>s resolution last year and despite thinking about it 24/7 and spending 4 hrs/day I failed. What can I do?"
            }, 
            "id": "cnb1pu4"
        }, 
        {
            "body": {
                "answer": "<p>I fucking hate Project Euler.  I wish people wouldn<sq>t tell beginners to go there all the time.</p>", 
                "question": "I need serious help. Learn to program was my new year<sq>s resolution last year and despite thinking about it 24/7 and spending 4 hrs/day I failed. What can I do?"
            }, 
            "id": "cnb56mc"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m no expert, but I would suggest a few things.  Pick a project to do.  Not one of the projects from any of the tutorial or learning sites.  Something you have some interest in making. It doesn<sq>t have to be something awesome, but it should be complex enough that you *will* have to be constantly looking things up to figure out how to get it to do what you want.  Something that will take you at least a week to do.  Keep at it thru the frustration.  Building something that will actually *do* something when it is done will give you a goal and a sense of accomplishment when it does finally start to actually work.  Once you have that project working I<sq>ll bet you already have ideas for another project, or some enhancement to the one you just did.<br><br>[edit<colon>  I actually like [michael0x2a](http<colon>//www.reddit.com/user/michael0x2a)<sq>s advice better than mine. ]<br></p>", 
                "question": "I need serious help. Learn to program was my new year<sq>s resolution last year and despite thinking about it 24/7 and spending 4 hrs/day I failed. What can I do?"
            }, 
            "id": "cnb1n8x"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t ever remember code, remember **concepts** and **algorithms**.<br><br>If you understand the underlying concepts (and algorithms) you can write code in multiple languages once you know their syntax.<br><br>Professionals never remember code, they **understand** the algorithm behind the actual code.</p>", 
                "question": "How do you guys remember code?"
            }, 
            "id": "dcr2afe"
        }, 
        {
            "body": {
                "answer": "<p>Every programmer I work with has no idea what they wrote a month ago. If you have to return to a project from more than a week ago there<sq>s always a spin up period where you have to remember what you did and why you did it. There<sq>s also usually a <dq>jesus, I wrote that?!<dq> period too. </p>", 
                "question": "How do you guys remember code?"
            }, 
            "id": "dcr3yg8"
        }, 
        {
            "body": {
                "answer": "<p>* Practice. If you do a lot of coding, it<sq>s easier to remember the language.<br>* We don<sq>t. No one remembers their old code. That<sq>s why it<sq>s important to get into the habit of good coding practices, like adding comments and formatting.<br>* Google is your friend. If you forget something about a programming language, it<sq>s ok to look it up. Professional coders search through google and stackoverflow all the time.</p>", 
                "question": "How do you guys remember code?"
            }, 
            "id": "dcr4hwj"
        }, 
        {
            "body": {
                "answer": "<p>You learn by doing it over and over, same as anything else.  You shouldn<sq>t have to work at memorizing, you should just write code and you will naturally remember the things you used most often.  It<sq>s fine to not remember everything, as long as you know how to look it up (this includes knowing how to properly use reference documentation, not just random google searches.)<br></p>", 
                "question": "How do you guys remember code?"
            }, 
            "id": "dcr2c8e"
        }, 
        {
            "body": {
                "answer": "<p>I searched prime to figure out how to lower run time of finding tons of prime, but didn<sq>t really get an answer. Sieve of Eratosthenes would still run time error.  <br><br>For example, find how many primes are in between 15353535 and 1247597239573.  <br><br>You guys know how to do this? This was a question in a past hackerrank contest  <br></p>", 
                "question": "Competitive programmers handbook!"
            }, 
            "id": "debqrtp"
        }, 
        {
            "body": {
                "answer": "<p>Also see Stanford<sq>s [Introduction to Programming Contests](http<colon>//web.stanford.edu/class/cs97si/)</p>", 
                "question": "Competitive programmers handbook!"
            }, 
            "id": "debxof9"
        }, 
        {
            "body": {
                "answer": "<p>I like the book so far. I always wanted to learn more about time complexity and algorithms. This book does a great job showing examples through code. Would recommend + it<sq>s free</p>", 
                "question": "Competitive programmers handbook!"
            }, 
            "id": "debyree"
        }, 
        {
            "body": {
                "answer": "<p>Seems like a great resource. I checked the first chapter and it seems to have covered a lot of what I<sq>ve learnt in the first year of comp sci</p>", 
                "question": "Competitive programmers handbook!"
            }, 
            "id": "decgzdc"
        }, 
        {
            "body": {
                "answer": "<p>Honestly it<sq>s like going to the gym... You just have to be consistent, make it a habit, and you will do it automatically, and feel guilty if you don<sq>t.<br><br>Everybody can make excuses not to go to the gym, likewise everybody can make excuses not to use an hour a day to read about programming or actually code; but everybody, essentially, has that hour. </p>", 
                "question": "How to learn when you<sq>re really busy."
            }, 
            "id": "dflm94j"
        }, 
        {
            "body": {
                "answer": "<p>Can<sq>t read. Too busy.<br></p>", 
                "question": "How to learn when you<sq>re really busy."
            }, 
            "id": "dfm97gq"
        }, 
        {
            "body": {
                "answer": "<p>And into the saved folder it goes</p>", 
                "question": "How to learn when you<sq>re really busy."
            }, 
            "id": "dfm8pvk"
        }, 
        {
            "body": {
                "answer": "<p>Awesome post u/codyloydl! Thanks for all your help at The Odin Project. Keep it up!</p>", 
                "question": "How to learn when you<sq>re really busy."
            }, 
            "id": "dflv099"
        }, 
        {
            "body": {
                "answer": "<p>If you want to have a laugh every now and then, make friends with the support guys if they<sq>re at all in-house. You may know the code but they<sq>ll know the product and it can be both fun and enlightening to talk to them about the issues you face. You may also find that they can provide a perspective of what your code does once it goes out the door and inevitably ends up being queried on that end.</p>", 
                "question": "Why being a programmer can suck. Ramblings from a C# dev."
            }, 
            "id": "cla1ch5"
        }, 
        {
            "body": {
                "answer": "<p>You know what Ross,<br><br>You<sq>ve got 15 years of experience. That<sq>s a $120k+ salary in the US. (Seriously, boot camp kids come out of the gate with 3 months of experience making $50k - $75k depending on where in the US they are... Three months!)<br><br>A H1-B visa requires a minimum of 12 years of provable experience.<br><br>You could come over here and be paid enough to put up with that bs.</p>", 
                "question": "Why being a programmer can suck. Ramblings from a C# dev."
            }, 
            "id": "cla300p"
        }, 
        {
            "body": {
                "answer": "<p>You should be a programmer primarily because you enjoy programming itself.  If you want recognition, being a programmer may not be the best career for you.  Become a businessperson instead.  One thing I remember my ex-girlfriend said when I told her I was a programmer<colon>  <dq>Steve Jobs was a really brilliant programmer, right?<dq> </p>", 
                "question": "Why being a programmer can suck. Ramblings from a C# dev."
            }, 
            "id": "cla1vvg"
        }, 
        {
            "body": {
                "answer": "<p>Starting any job sucks, but after you<sq>ve been with the  company for a while you can start fixing the poor coding practices, refactoring, implementing peer reviews if there is code that gets committed that doesn<sq>t follow best practices. Not all jobs are made up of developers who suck and managers who push bad code out the door, you just need to find a company that knows that code quality leads to faster turnaround times, lower numbers if bugs, and happier developers. </p>", 
                "question": "Why being a programmer can suck. Ramblings from a C# dev."
            }, 
            "id": "cla1fiu"
        }, 
        {
            "body": {
                "answer": "<p>The floating menu covers half of the text (chrome 32), not good for the reputation of a web development curriculum.</p>", 
                "question": "Learn Web Development from scratch using this detailed step-by-step curriculum that I created. It uses (mostly free) online courses"
            }, 
            "id": "cf8ob9k"
        }, 
        {
            "body": {
                "answer": "<p>Before learning how HTTP works, I strongly believe one should learn first how computers work, how networks work, and then how the internet works.<br><br>I see a lot of people  attempting to make a website without knowing how to create a file, or what a file is. Or what text encodings are. Or what DNS does.</p>", 
                "question": "Learn Web Development from scratch using this detailed step-by-step curriculum that I created. It uses (mostly free) online courses"
            }, 
            "id": "cf8opxp"
        }, 
        {
            "body": {
                "answer": "<p>Learning path is probably an OK title for it. But not curriculum. <br><br>There are few clear benchmarks. It<sq>s a general overview of webdev. It<sq>s nice to see several important aspects of web development and assorted learning resources in one place. That being said, I will likely not bookmark it. Most of the resources are familiar to beginners, reference elsewhere in countless blogs, etc...<br><br>Speaking of... If this effort really is about helping beginners, than good for you for taking the time and effort to share what you know.<br><br>If this is merely to add to your portfolio, then I suggest you restructure your approach, and make something substantial. As it is it will not score too many internet points.  If you want to write a curriculum, write a curriculum. We have enough blogs and link pages. What we want is actual learning material.</p>", 
                "question": "Learn Web Development from scratch using this detailed step-by-step curriculum that I created. It uses (mostly free) online courses"
            }, 
            "id": "cf8qdu4"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for compiling a wonderful resource. Just a suggestion for the databases section<colon> The best resource in my opinion is [Stanford<sq>s Introduction to Databases MOOC] (https<colon>//class2go.stanford.edu/db/Winter2013/preview/). It hasn<sq>t had a running session in a while, but you can still do the lessons, homeworks, quizzes, and tests, with excellent autograded feedback. The forum used to be an excellent resource for questions too, but I can<sq>t find a way for new registrants to access the old forums on piaza unfortunately.</p>", 
                "question": "Learn Web Development from scratch using this detailed step-by-step curriculum that I created. It uses (mostly free) online courses"
            }, 
            "id": "cf8zmii"
        }, 
        {
            "body": {
                "answer": "<p>I think the biggest issue I<sq>ve run into learning programming is that there are great tools for ultra beginners, with learning the very basics, but then at some point, the <sq>beginner<sq> and <sq>easy<sq> options just jump to a whole new level of difficulty, and it can be hard to find challenges in the middle.</p>", 
                "question": "[Advice for newbies]if you cant climb a mountain start with a hillwhat I realised after 4 years"
            }, 
            "id": "dc78ps7"
        }, 
        {
            "body": {
                "answer": "<p>Wise words. break it down to a module, master it, repeat.</p>", 
                "question": "[Advice for newbies]if you cant climb a mountain start with a hillwhat I realised after 4 years"
            }, 
            "id": "dc71ofi"
        }, 
        {
            "body": {
                "answer": "<p>Thanks! I really need this to fuel my empty flask in learning programming</p>", 
                "question": "[Advice for newbies]if you cant climb a mountain start with a hillwhat I realised after 4 years"
            }, 
            "id": "dc72tmk"
        }, 
        {
            "body": {
                "answer": "<p>I am 25 and have tried to teach myself programming many times before. I<sq>ve started taking classes and it has finally clicked. Now I realize how close I was to getting it back when I was trying to teach myself from a book.<br><br>I would say learning to program is learning to think like a programmer. Once it clicked that it is all just selection statements and looping through arrays, I was basically off to the races.</p>", 
                "question": "[Advice for newbies]if you cant climb a mountain start with a hillwhat I realised after 4 years"
            }, 
            "id": "dc760q0"
        }, 
        {
            "body": {
                "answer": "<p>The online book at https<colon>//git-scm.com/book/en/v2/Getting-Started-About-Version-Control is good as well. And if you feel like you<sq>re not understanding what<sq>s going on in your repo, calling <dq>git log --graph<dq> can give you a good look at your commit history with a visual representation of the commit teee.</p>", 
                "question": "Found an easy-to-follow Git tutorial (for Dummies like myself)"
            }, 
            "id": "d08ewhy"
        }, 
        {
            "body": {
                "answer": "<p>IMHO Git is one of most unfriendliest thing to noobs and beginners. Holy hell it is frustrating and honestly finding good resources can be a pain (besides looking in this thread). I can<sq>t describe the number of people lost trying to learn Git. <br><br>HOWEVER I will say that once you figure out Git it is one of the coolest things ever. I still know people that email one another files and codes that they have edited to remain <dq>updated<dq> on the codebase...*shudder*</p>", 
                "question": "Found an easy-to-follow Git tutorial (for Dummies like myself)"
            }, 
            "id": "d08vagc"
        }, 
        {
            "body": {
                "answer": "<p>For me the one from Atlassian worked great. https<colon>//www.atlassian.com/git/tutorials/ They also have free hosting, called bitbucket.</p>", 
                "question": "Found an easy-to-follow Git tutorial (for Dummies like myself)"
            }, 
            "id": "d08hhqg"
        }, 
        {
            "body": {
                "answer": "<p>The git tutorial on codeacademy is pretty good too.</p>", 
                "question": "Found an easy-to-follow Git tutorial (for Dummies like myself)"
            }, 
            "id": "d08mp9x"
        }, 
        {
            "body": {
                "answer": "<p>[Here is a curriculum for the bootcamp I attended.](https<colon>//www.learnhowtoprogram.com/courses) It has an Intro course that starts people off with HTML, CSS, Mac console, Git/Github, etc. It is free online, the best online tutorial I<sq>ve come across and is supposed to be worked through in pairs. It is completely self directed.</p>", 
                "question": "I<sq>m a teacher and started a programming club for HS students at a school with no CS classes. Starts tomorrow and too many kids signed up. What will be the easiest resources for them to tackle in small groups with limited guidance?"
            }, 
            "id": "d1066k2"
        }, 
        {
            "body": {
                "answer": "<p>Have you considered using Scratch? It<sq>s very basic, but very easy in comparison to learning a full language and something that they might be able to pick up easily enough. In addition, there<sq>s online tutorials to help and any downloaded projects expose their code so they can learn from it. This could be a good first step. <br><br>Also, from my experience the amount of kids signed up won<sq>t always be the amount you have present. It might be easier to judge after your first session. </p>", 
                "question": "I<sq>m a teacher and started a programming club for HS students at a school with no CS classes. Starts tomorrow and too many kids signed up. What will be the easiest resources for them to tackle in small groups with limited guidance?"
            }, 
            "id": "d1066dt"
        }, 
        {
            "body": {
                "answer": "<p>you could start them off with codecademy</p>", 
                "question": "I<sq>m a teacher and started a programming club for HS students at a school with no CS classes. Starts tomorrow and too many kids signed up. What will be the easiest resources for them to tackle in small groups with limited guidance?"
            }, 
            "id": "d107pao"
        }, 
        {
            "body": {
                "answer": "<p>Khan Academy has some neat tutorials for kids using JavaScript. They<sq>ve also got a sandbox for making your own things.</p>", 
                "question": "I<sq>m a teacher and started a programming club for HS students at a school with no CS classes. Starts tomorrow and too many kids signed up. What will be the easiest resources for them to tackle in small groups with limited guidance?"
            }, 
            "id": "d106qlk"
        }, 
        {
            "body": {
                "answer": "<p>Git is super important, people. <br><br>Get familiar with it before you absolutely need it.</p>", 
                "question": "[Git] Learning Git & Github?"
            }, 
            "id": "d8415cb"
        }, 
        {
            "body": {
                "answer": "<p>Git is literally a life saver and probably one of the most important skills to pick up on if you work with any digital format.<br><br>Also, I don<sq>t mean to take away from OPs tutorial, but another great resource is also [Codecademy](https<colon>//www.codecademy.com/learn/learn-git).</p>", 
                "question": "[Git] Learning Git & Github?"
            }, 
            "id": "d846bqr"
        }, 
        {
            "body": {
                "answer": "<p>Another great resource to learn Git<colon> [CodeSchool](https<colon>//www.codeschool.com/courses/try-git)</p>", 
                "question": "[Git] Learning Git & Github?"
            }, 
            "id": "d842pvp"
        }, 
        {
            "body": {
                "answer": "<p>Awesome course!<br><br>Alternative<colon> GitHub has their own (Git Tutorial)[https<colon>//try.github.io/levels/1/challenges/1], which really helped me out when I was starting.</p>", 
                "question": "[Git] Learning Git & Github?"
            }, 
            "id": "d846rso"
        }, 
        {
            "body": {
                "answer": "<p>In step 3, don<sq>t use eclipse. Don<sq>t. Seriously. The Android plugin for Eclipse is unsupported now. Android studio is the way to go. </p>", 
                "question": "Making An Android App<colon> A Step-By-Step Guideline"
            }, 
            "id": "cxrihrp"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, from a comp Sci beginner \ud83d\udd30 </p>", 
                "question": "Making An Android App<colon> A Step-By-Step Guideline"
            }, 
            "id": "cxrj9z0"
        }, 
        {
            "body": {
                "answer": "<p>You could post this in /r/androiddev as well. They<sq>d appreciate it</p>", 
                "question": "Making An Android App<colon> A Step-By-Step Guideline"
            }, 
            "id": "cxrghm0"
        }, 
        {
            "body": {
                "answer": "<p>For what it<sq>s worth, i just bookmarked this into the top tier of my programming-related bookmarks folder, which is a big vote of <dq>Wow this is awesome, you rule, thanks!<dq></p>", 
                "question": "Making An Android App<colon> A Step-By-Step Guideline"
            }, 
            "id": "cxrghgy"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "A bunch of you asked so I delivered<colon> Part 2 of my Git-For-Complete Beginners series is up!"
            }, 
            "id": "co9o58q"
        }, 
        {
            "body": {
                "answer": "<p>I have been following your both tuts and they are really nice, thanks!<br><br>A SEO suggestion here. Try to change the url name that maches with the name of the subject. If you are in WordPress, it<sq>s very easily to change it.<br><br>In that way, Google will have a closer eye to your updates, but she needs a name instead of ?p=84 or ?p=7<br><br>Keep on the good work!<br><br>Edit. Google is a female.</p>", 
                "question": "A bunch of you asked so I delivered<colon> Part 2 of my Git-For-Complete Beginners series is up!"
            }, 
            "id": "co9o5wp"
        }, 
        {
            "body": {
                "answer": "<p>From part 1<colon> <dq>their most recent backup is updated and their change is applied on top if it.<dq> How does this work in the scenario when person B changed a function which person A has deleted (which is the most recent backup)</p>", 
                "question": "A bunch of you asked so I delivered<colon> Part 2 of my Git-For-Complete Beginners series is up!"
            }, 
            "id": "co9ohb3"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m finding it really distracting that you use underlining for emphasis. Underlining in web pages has always meant <dq>this is a link<dq>.</p>", 
                "question": "A bunch of you asked so I delivered<colon> Part 2 of my Git-For-Complete Beginners series is up!"
            }, 
            "id": "coa5dhb"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for Rosetta Code. <br><br><br>I don<sq>t have a question. </p>", 
                "question": "I<sq>m the founder of Rosetta Code. AMA"
            }, 
            "id": "d1fptdh"
        }, 
        {
            "body": {
                "answer": "<p>Why don<sq>t you have every single example in EVERY SINGLE PROGRAMMING LANGUAGE EVER INVENTED! Jeez. /s</p>", 
                "question": "I<sq>m the founder of Rosetta Code. AMA"
            }, 
            "id": "d1fphhq"
        }, 
        {
            "body": {
                "answer": "<p>How long did it take your to create the amazing site?<br><br>And did you do it alone?</p>", 
                "question": "I<sq>m the founder of Rosetta Code. AMA"
            }, 
            "id": "d1fpema"
        }, 
        {
            "body": {
                "answer": "<p>What, if anything, do you think the site is lacking?</p>", 
                "question": "I<sq>m the founder of Rosetta Code. AMA"
            }, 
            "id": "d1frdsx"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I see Codecademy recommended all the time but Microsoft<sq>s Virtual Academy is also an excellent resource with videos!"
            }, 
            "id": "d5byb3x"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t forget the free ebooks you can download, it<sq>s an excellent resource.</p>", 
                "question": "I see Codecademy recommended all the time but Microsoft<sq>s Virtual Academy is also an excellent resource with videos!"
            }, 
            "id": "d5bqlfj"
        }, 
        {
            "body": {
                "answer": "<p>Thanks! I see C# recommended quite a lot. Will definitely do these tutorials!</p>", 
                "question": "I see Codecademy recommended all the time but Microsoft<sq>s Virtual Academy is also an excellent resource with videos!"
            }, 
            "id": "d5br5tx"
        }, 
        {
            "body": {
                "answer": "<p>I also recommend Khan academy, its got some useful videos (and a useful index!)</p>", 
                "question": "I see Codecademy recommended all the time but Microsoft<sq>s Virtual Academy is also an excellent resource with videos!"
            }, 
            "id": "d5bq3s7"
        }, 
        {
            "body": {
                "answer": "<p>Yeesh... that list got pretty difficult quickly. Reverse a string. Good, now that you<sq>ve got your basics, make a WYSIWYG editor. </p>", 
                "question": "Looking for beginner project ideas? This list has 150 of them."
            }, 
            "id": "caw0hrg"
        }, 
        {
            "body": {
                "answer": "<p>I think going to a small non-profit in your city and ask them if they have trouble managing information, communicating with the staff, or something like that, could be a good project starter. <br><br>Always consider the dificulty and exlain to them clearly that you are doing it to learn, they shouldn<sq>t expect a professional software right away.<br><br>Also, consider legal issues based on the law that applies.</p>", 
                "question": "Looking for beginner project ideas? This list has 150 of them."
            }, 
            "id": "cavuc9v"
        }, 
        {
            "body": {
                "answer": "<p>While researching from your link, I came across this<colon><br><br>http<colon>//stackoverflow.com/questions/194812/list-of-freely-available-programming-books</p>", 
                "question": "Looking for beginner project ideas? This list has 150 of them."
            }, 
            "id": "cavxck6"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m working on mostly html and css this summer. Building a website would count as a project right?  <br><br>Working in forms and buttons atm. </p>", 
                "question": "Looking for beginner project ideas? This list has 150 of them."
            }, 
            "id": "cavytuh"
        }, 
        {
            "body": {
                "answer": "<p>I have it as one of my search engines in Firefox, definitely my favorite reference site</p>", 
                "question": "The Mozilla Development Network [MDN] has fantastic beginner tutorials on HTML/CSS/Javascript!"
            }, 
            "id": "d9iu3iu"
        }, 
        {
            "body": {
                "answer": "<p>Thimble by Mozilla also seems like a pretty great resource as well. </p>", 
                "question": "The Mozilla Development Network [MDN] has fantastic beginner tutorials on HTML/CSS/Javascript!"
            }, 
            "id": "d9j92xz"
        }, 
        {
            "body": {
                "answer": "<p>Part of this is used as a resource in The Odin project. It<sq>s some good foundational stuff. </p>", 
                "question": "The Mozilla Development Network [MDN] has fantastic beginner tutorials on HTML/CSS/Javascript!"
            }, 
            "id": "d9ji9it"
        }, 
        {
            "body": {
                "answer": "<p>MDN is a valuable resource!</p>", 
                "question": "The Mozilla Development Network [MDN] has fantastic beginner tutorials on HTML/CSS/Javascript!"
            }, 
            "id": "d9jkxhm"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations! You<sq>re right there isn<sq>t really anything to be worried about. Heck, your getting other developers who are intimately familiar with a project to give you feedback/critiques on your code, people pay money for other professionals to review their code!<br><br>I was where you are about 2-3 years ago when I made my first PR to an open source project. Last month I was added to the maintainers team on the very same project. <br><br>Any small/medium sized open-source project is a great place to get your feet wet with development. If you see a project you think is neat, look at the open issues and hack around a little bit.  If you have an idea ask some questions on the issue, if you make some headway on it open a PR. In most cases the project owner/maintainers will be more than happy to offer advice and guidance your helping them out too after all! </p>", 
                "question": "I made my first open source contribution today!"
            }, 
            "id": "dc9arje"
        }, 
        {
            "body": {
                "answer": "<p>Congrats, man!<br><br>I have yet to work with open source, but this has been my first week as a developer intern and after lunch I have my first code review to check in a ticket! You<sq>re right, I don<sq>t know what I was so worried about.</p>", 
                "question": "I made my first open source contribution today!"
            }, 
            "id": "dc96mkh"
        }, 
        {
            "body": {
                "answer": "<p>If there is anything ever worthy of an upvote, this is it. This is the greatest aspect of the internet. I never knew Aaron Swartz, but I believe he would be elated that things like this came from this website.<br><br>Very happy to hear this. </p>", 
                "question": "I made my first open source contribution today!"
            }, 
            "id": "dc9jujl"
        }, 
        {
            "body": {
                "answer": "<p>Wow thank you very much for sharing this motivation! I also want to become a developer and be able to help open source projects, but well, one step at a time. You must be thrilled <colon>D</p>", 
                "question": "I made my first open source contribution today!"
            }, 
            "id": "dc94mb3"
        }, 
        {
            "body": {
                "answer": "<p>And then you have people like TheNewBoston who write variable names such as <dq>Bucky<dq> and <dq>Tuna<dq>.<br><br>Seriously people, stay away from his tutorials. They are not good.</p>", 
                "question": "Tip<colon> Change Names In Tutorials"
            }, 
            "id": "dbu3j8p"
        }, 
        {
            "body": {
                "answer": "<p>I have a tip for people writing tutorials<colon> stop using the terms <dq>foo<dq> and <dq>bar<dq>.  They are meaningless and confuse new learners.  If you can<sq>t think of a real world use-case for your code sample, you probably don<sq>t have any business writing a tutorial for it.  </p>", 
                "question": "Tip<colon> Change Names In Tutorials"
            }, 
            "id": "dbu3a3v"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say this depends on the complexity of your tutorial, and your general level of understanding. If you<sq>re entering into a field sight unseen, it could potentially cause you much more headache, especially if a tutorial is structured in a way that earlier lessons pave the way for future concepts.</p>", 
                "question": "Tip<colon> Change Names In Tutorials"
            }, 
            "id": "dbtyeyd"
        }, 
        {
            "body": {
                "answer": "<p>Also, on some websites (code academy, for sure) code won<sq>t pass their little validation tool if you<sq>re swapping var names. </p>", 
                "question": "Tip<colon> Change Names In Tutorials"
            }, 
            "id": "dbu15yq"
        }, 
        {
            "body": {
                "answer": "<p>FreeCodeCamp.com</p>", 
                "question": "Free alternative to CodeCademy"
            }, 
            "id": "d1c8jr1"
        }, 
        {
            "body": {
                "answer": "<p>r/cs50 [Start here!]<br><br>http<colon>//mooc.fi/english.html [Learn OOP]<br><br>FCC [web design]<br><br>http<colon>//www.nand2tetris.org/ [Operating systems]<br><br>https<colon>//www.caveofprogramming.com/ [Programming]<br><br>.....and of course for anything under the sun<colon> https<colon>//www.edx.org/ & https<colon>//www.coursera.org/<br><br>*******************************<br><br>For BSD<colon> https<colon>//www.freebsd.org/<br><br>For Linux<colon> https<colon>//www.archlinux.org/<br><br>*******************************<br><br>http<colon>//opensecuritytraining.info/IntroX86.html [How far down the rabbit hole do you want to go?]<br></p>", 
                "question": "Free alternative to CodeCademy"
            }, 
            "id": "d1cavtn"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//freecodecamp.com</p>", 
                "question": "Free alternative to CodeCademy"
            }, 
            "id": "d1c8paa"
        }, 
        {
            "body": {
                "answer": "<p>[FreeCodeCamp.com](http<colon>//freecodecamp.com) I love it! I am learning, its difficult, and they want to help you succeed and find employment! Can<sq>t speak enough about them!</p>", 
                "question": "Free alternative to CodeCademy"
            }, 
            "id": "d1cn2kx"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been following along with Barnacules lately.  He was laid of from Microsoft after 15 years when they fired all those employees a few months ago.  He<sq>s got lots of insider knowledge on Windows and teaches you C# through some very original activities.  He does things like making a program that talks to you using the .NET speech synthesizer to tell you your CPU and memory usage.  He also did one where you can make someone<sq>s mouse and keyboard go berzerk and pull a good prank on them.  He<sq>s a lot of fun.</p>", 
                "question": "What are your favorite programmer youtubers? People who post videos of themselves teaching programming concepts or just flat out programming"
            }, 
            "id": "ckfv2nd"
        }, 
        {
            "body": {
                "answer": "<p>I would love if people started live streaming while coding</p>", 
                "question": "What are your favorite programmer youtubers? People who post videos of themselves teaching programming concepts or just flat out programming"
            }, 
            "id": "ckfyzdb"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "What are your favorite programmer youtubers? People who post videos of themselves teaching programming concepts or just flat out programming"
            }, 
            "id": "ckfzfqg"
        }, 
        {
            "body": {
                "answer": "<p>Here are my favorites for C#.<br><br>Jamie King - Neumont Uinversity<br><br>https<colon>//www.youtube.com/user/1kingja/playlists<br><br>Telerik University<br><br>http<colon>//youtu.be/DdUSzJ8taMs <br></p>", 
                "question": "What are your favorite programmer youtubers? People who post videos of themselves teaching programming concepts or just flat out programming"
            }, 
            "id": "ckfwnde"
        }, 
        {
            "body": {
                "answer": "<p>This is EXACTLY what I<sq>ve needed.  Thanks!</p>", 
                "question": "Put off learning Git for far too long. I found 2 really great sources that I wanted to share."
            }, 
            "id": "cgcohos"
        }, 
        {
            "body": {
                "answer": "<p>Gonna go ahead and throw this GIT tutorial out there as well<colon><br><br>http<colon>//gitimmersion.com/lab_01.html</p>", 
                "question": "Put off learning Git for far too long. I found 2 really great sources that I wanted to share."
            }, 
            "id": "cgcuu1d"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know why you<sq>d need more than the (quasi-) official git book<colon> http<colon>//git-scm.com/book<br><br>Its visuals are great for understanding what is actually happening at a data structure level when you are doing basic [branching and merging](http<colon>//git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging) operations.</p>", 
                "question": "Put off learning Git for far too long. I found 2 really great sources that I wanted to share."
            }, 
            "id": "cgcrvjl"
        }, 
        {
            "body": {
                "answer": "<p>Cheers for that. I<sq>m just getting my feet on the ground with using cloud hosting and the ones I work with are mostly git. Coming from CVS and SVN before I definitely needed something that addresses the practical side of things rather than going over conceptual stuff.</p>", 
                "question": "Put off learning Git for far too long. I found 2 really great sources that I wanted to share."
            }, 
            "id": "cgcsytb"
        }, 
        {
            "body": {
                "answer": "<p>Your website needs a table of contents for your tutorial. Scrolling down endlessly to see what you have is not much fun, and if there is one I didn<sq>t find it. </p>", 
                "question": "Android Studio Tutorials for Beginners and Intermediates"
            }, 
            "id": "d33v350"
        }, 
        {
            "body": {
                "answer": "<p>Is your site down? I cant come in</p>", 
                "question": "Android Studio Tutorials for Beginners and Intermediates"
            }, 
            "id": "d33qs74"
        }, 
        {
            "body": {
                "answer": "<p>Nice tutorials man. The site looks a little simple but I<sq>m sure you can improve it. Nice work!</p>", 
                "question": "Android Studio Tutorials for Beginners and Intermediates"
            }, 
            "id": "d33x4qw"
        }, 
        {
            "body": {
                "answer": "<p>I would like to see a tutorial about connecting an android app to a SQL  database stored in a cloud, like Google Cloud for example. There are no good tutorials about this, at least the ones I found. Would be really helpful. Good job again btw!</p>", 
                "question": "Android Studio Tutorials for Beginners and Intermediates"
            }, 
            "id": "d34ppl4"
        }, 
        {
            "body": {
                "answer": "<p>This book https<colon>//automatetheboringstuff.com/ was written exactly for people like yourself <colon>)</p>", 
                "question": "Decided to learn Python as my first language but losing focus easy with tutorials and books so far - are there any resources out there that teach more by <sq>diving in a getting your hands dirty<sq>?"
            }, 
            "id": "dfqjltb"
        }, 
        {
            "body": {
                "answer": "<p>Stop going through books and try to do something you want to do. <br><br>Get some data and come up with a question. Then Google every step until you get through it. This will lead you to all sorts of different resources along the way.<br><br>This is how I tackle most my data science.</p>", 
                "question": "Decided to learn Python as my first language but losing focus easy with tutorials and books so far - are there any resources out there that teach more by <sq>diving in a getting your hands dirty<sq>?"
            }, 
            "id": "dfqnpuz"
        }, 
        {
            "body": {
                "answer": "<p>Try http<colon>//ProgramArcadeGames.com.</p>", 
                "question": "Decided to learn Python as my first language but losing focus easy with tutorials and books so far - are there any resources out there that teach more by <sq>diving in a getting your hands dirty<sq>?"
            }, 
            "id": "dfqle1x"
        }, 
        {
            "body": {
                "answer": "<p>Try this<colon> http<colon>//codingbat.com/python<br><br>It<sq>s basically a progression of programming challenges. I used the Java version of this and thought it was pretty useful.</p>", 
                "question": "Decided to learn Python as my first language but losing focus easy with tutorials and books so far - are there any resources out there that teach more by <sq>diving in a getting your hands dirty<sq>?"
            }, 
            "id": "dfqscyc"
        }, 
        {
            "body": {
                "answer": "<p>Take a look at [coala](https<colon>//github.com/coala-analyzer/coala)<br><br>https<colon>//gitter.im/coala-analyzer/coala<br><br>Very newcomer friendly community with a program to teach newcomers how to contribute to an OS project.<br><br>Disclaimer<colon> I am part of the coala team <colon>)</p>", 
                "question": "How do I get skilled enough to work on open source projects?"
            }, 
            "id": "d6inh0v"
        }, 
        {
            "body": {
                "answer": "<p>The official [GitHub guide](https<colon>//guides.github.com/activities/contributing-to-open-source/) is a pretty good starting point, as is [this guide on egghead.io](https<colon>//egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github). Make sure you<sq>re very familiar with Git (the add-commit-push cycle, branching etc.) and GitHub (pull requests, issues etc.).<br><br>Usually a good starting point is to work on an existing issue, although creating your own issue isn<sq>t a bad idea if it<sq>s a relevant one. Some projects use other issue trackers than GitHub (like Jira, YouTrack, Bugzilla) so make sure you know your way around the project.<br><br>On that note, make sure you understand the project<sq>s workflow. A lot of projects use the git-flow model, it<sq>s worth some research. Your pull request is far more likely to be accepted if it<sq>s in line with how the maintainers themselves work.<br><br>On <dq>how to get skilled enough<dq> - **you<sq>re skilled enough right now**. GitHub is a very friendly place, and if your code isn<sq>t up to standard, you<sq>re likely to be guided in the right direction, or simply politely told that your changes might not be the best ideas. Project maintainers<sq> GitHub profiles are their public CVs, so they<sq>re not going to be assholes to people who are just trying to help.<br><br>Find issues you think you can tackle, fork the project, and make your changes! If your PR isn<sq>t accepted, improve it or move on and try the next one! There<sq>s no shame in trying, and having an active GitHub profile is a great career booster.</p>", 
                "question": "How do I get skilled enough to work on open source projects?"
            }, 
            "id": "d6iftwy"
        }, 
        {
            "body": {
                "answer": "<p>I HEREBY DUB THEE <dq>GOOD ENOUGH<dq>. Now all you have to do is find problems that you can solve-- bugs, feature requests, horrific whitespace travesties, update documentation...<br><br>If I may, do a deep dive into using git. That is the runaway favorite source version control tool-- and your preferred project to work on is using it as well. Mmmmm... that smells like a win-win situation.<br><br>Best is to find something just out of your reach and grow in understanding of the task and technologies involved. But, you are already good enough. Find something, anything, and do it. Maybe it just gets merged. It maybe isn<sq>t up to snuff and you<sq>ll possibly get an explanation why by the gatekeeper for the repo as to why-- which you may correct or take to heart when you try again. And do. I<sq>ve had my share of pull requests get<colon> a) ignored b) never seen by a dev that<sq>s been hit by a bus (or never logged in again for whatever reason) c) didn<sq>t like my work d) didn<sq>t like me e) my work was substandard to the requirements of the project  f) it was Friday... no big deal. Plenty of problems out there if the one you<sq>ve just worked on didn<sq>t work out as you might have imagined.</p>", 
                "question": "How do I get skilled enough to work on open source projects?"
            }, 
            "id": "d6imsn9"
        }, 
        {
            "body": {
                "answer": "<p>Im not certain but I think that Qubes is written in C, so if you want to contribute you should maybe have a look at that language. </p>", 
                "question": "How do I get skilled enough to work on open source projects?"
            }, 
            "id": "d6if632"
        }, 
        {
            "body": {
                "answer": "<p>Others have made some good pointers. I just came here to say thank you so god damn much for getting straight to the tutorial. I have been through several tutorials on YouTube lately (not C, other things) and they all seem to think I need to hear about their day or entire life story first.<br><br>You rock!</p>", 
                "question": "I created a short series of videos to help new programmers get started in C programming classes. Could you tell me what you think?"
            }, 
            "id": "dd7dcag"
        }, 
        {
            "body": {
                "answer": "<p>Sometimes it<sq>s hard to see what<sq>s on the screen, so you might see if there<sq>s a way to increase the font size.  Some screen capture tools allow areas to be zoomed in.  Also, if you press a button, you might want to describe it (the <dq>save<dq> button looks like a little floppy disk, and is the third button from the left, 1, 2, and third button).<br><br>Also, you might want to mention the program adds a .c extension to the name of the file, and that saving it doesn<sq>t compile it (does it?).<br><br>Also, you might want to mention case sensitivity, and not to confuse single and double quotes or to forget the second double quotes.<br><br>Since it<sq>s their first program, you might talk about main itself (they can<sq>t call it something else, nor write it as Main, etc) and its importance in C.<br><br>I know you<sq>re trying to keep it simple, but people sometimes run into these pitfalls.<br><br>Good luck!</p>", 
                "question": "I created a short series of videos to help new programmers get started in C programming classes. Could you tell me what you think?"
            }, 
            "id": "dd6wh33"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s great! Good work, I hope it helps the beginners to pass the introductory classes. </p>", 
                "question": "I created a short series of videos to help new programmers get started in C programming classes. Could you tell me what you think?"
            }, 
            "id": "dd6u3d7"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t really get why someone who has never written a program before would start writing one in C.  </p>", 
                "question": "I created a short series of videos to help new programmers get started in C programming classes. Could you tell me what you think?"
            }, 
            "id": "dd7ikq0"
        }, 
        {
            "body": {
                "answer": "<p>They<sq>re learning. They need their hand held. They aren<sq>t just <dq>doing<dq> because they don<sq>t know what they can <dq>do<dq>. Follow by example.<br><br>Everyone (I think?) At some point goes through this stage. It<sq>s a slow burner of a learning process before you get to the point where you can comfortably tackle a solution without first searching about it. They need to build up a mental and digital tool set of ideas and pieces.<br><br>If someone asked me to build a table from scratch right now (I have 0 carpentry experience), you can bet I will go and search for a table tutorial. Yes I could try but I already know I will not have a decent table at the end of it and I *want* a decent table. I don<sq>t want to spend lots of my time and potentially some money, to end up with a table that breaks before I even put anything on it.<br><br>If you told a carpenter to go build a table, you can bet they will immediately set off to work. They know what wood to use, decent structure design, proper connections and joins, what tools to use where, what screws/bindings to use etc.<br><br>Swap the metaphor to programming and it<sq>s the same. People (on the whole) want the product of their work to be good, so intimidating tasks require some guidance. I don<sq>t think it<sq>s anything to worry about.</p>", 
                "question": "[META] I<sq>m worried about the coming generation of programmers - and a bit of advice for learners"
            }, 
            "id": "cwh3voq"
        }, 
        {
            "body": {
                "answer": "<p>> What will happen to this generation if they end up without connection to the internet? Will they just simply stop programming because they can<sq>t google for tutorials and solutions? Will they be able to come up with solutions by themselves?<br><br>Dude, you presumably learned to program by using *some* kind of resource right? I highly doubt you just opened a text document and figured out how to write code by luck. <br><br>The internet is the medium now for learning. It used to be books. Like it or not, the entire modern world will fall apart without the internet -- not just programmers looking for documentation and references. Instead, you should try and be excited by the way the internet is empowering people to learn faster and to share knowledge quickly and more effectively.  </p>", 
                "question": "[META] I<sq>m worried about the coming generation of programmers - and a bit of advice for learners"
            }, 
            "id": "cwh75p5"
        }, 
        {
            "body": {
                "answer": "<p>For fun, I like to watch cooking shows, mostly on Food Network.  After years of watching such shows, I know that many chefs have formal training.  They go to culinary school, and they learn how to cook, but what they learn, and what a home cook learns are different things.<br><br>In particular, home cooks usually like recipes (not everyone, but a fair number), and so most people find success writing cookbooks.  Here<sq>s a recipe to cook this.  Here<sq>s a recipe to cook that.<br><br>However, in culinary school, you typically start with technique (I think).  Here<sq>s how to cut vegetables.  Here<sq>s dicing.  Here<sq>s julienne.  Here<sq>s different ways to peel garlic.  Here<sq>s how long it takes to cook this kind of vegetable.  Here<sq>s how to butcher a chicken.  Here<sq>s how to cut up fish.<br><br>These are skills that are used every day, as the foundations to cooking recipes.  Even then, many learn a general way to make a dish, and can work in many variations.  They know what flavors work well together, how to create different textures, different tastes (something acidic to offset something rich, something crunchy to offset something mushy).<br><br>I think many beginning or self-taught programmers learn programming as recipes.  Here<sq>s code that does X.  Here<sq>s code that does Y.  It<sq>s also difficult for beginners to remember that code too.<br><br>I remember, back when I was teaching programming, I had a colleague who suggested students do pseudo-coding.  I thought, for beginners, this was silly.  Pseudo-coding is basically how advanced programmers write short-hand code without worrying too much about syntax.   You successfully pseudo-code because you know what a program can do and what it can<sq>t do, you know when to use loops vs. conditions.  You know how to break down a complex problem.<br><br>To use a cooking analogy, there is a show called Chopped. In it, each contestant needs to take 4 ingredients, and make a dish from it.  A beginning cook would have no idea what to do.  Their knowledge of recipes is limited.  Their culinary knowledge is limited.  If they had the Internet, they might Google all 4 ingredients and maybe a recipe would appear (and there are sites that do that kind of thing for you).   They won<sq>t know why it works, because someone else figured it out for them.<br><br>But, they also lack the foundation to come up with that recipe, no matter how much they try.  They don<sq>t know what they should learn, other than trial and error, and at that point, you<sq>re just flailing without better understanding.<br><br>So just telling people to go out and try is a bit like asking someone to go make a souffle.  Just try!  Stop looking up the recipe.  If you have no cooking experience, you would say <dq>I can<sq>t even think of the first thing to do<dq>.  It<sq>s like trying to make a kid do algebra problems when all they can do is add and subtract.  They are stuck without a foundation to work with.</p>", 
                "question": "[META] I<sq>m worried about the coming generation of programmers - and a bit of advice for learners"
            }, 
            "id": "cwh4lzd"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve used tutorials to learn the basics, to get an understanding so I *could* be creative with it.</p>", 
                "question": "[META] I<sq>m worried about the coming generation of programmers - and a bit of advice for learners"
            }, 
            "id": "cwh62bt"
        }, 
        {
            "body": {
                "answer": "<p>Add a feature and don<sq>t document it, simple as that.</p>", 
                "question": "How to build easter eggs in your software?"
            }, 
            "id": "cf2xlgk"
        }, 
        {
            "body": {
                "answer": "<p>Easter Egg can mean something that should be hidden from your casual person, so, hide something and see if people find it. You can do something as simple as Konami Code (so many people try this nowadays, so it might get found pretty soon).</p>", 
                "question": "How to build easter eggs in your software?"
            }, 
            "id": "cf2xwjx"
        }, 
        {
            "body": {
                "answer": "<p>this is like asking how to make a joke.</p>", 
                "question": "How to build easter eggs in your software?"
            }, 
            "id": "cf39itp"
        }, 
        {
            "body": {
                "answer": "<p>`from easter import egg`</p>", 
                "question": "How to build easter eggs in your software?"
            }, 
            "id": "cf3a5xk"
        }, 
        {
            "body": {
                "answer": "<p>Good stuff. Maybe you can include how to setup ssh authentication for two different GitHub accounts on a single machine.<br><br>I recently had to do this on my work computer because we had to create a different account for work. Not sure if this is something a lot of people would encounter though.</p>", 
                "question": "I wrote a little tutorial to help others stop wasting time login in into GitHub every time. Here is how to setup SSH keys and what they even are for your GitHub account <colon>)"
            }, 
            "id": "d9grfjh"
        }, 
        {
            "body": {
                "answer": "<p>Some other things you might consider adding (or maybe linking to)<colon><br><br>* using something like keychain (or OSX keychain) to keep the ssh-agent around through multiple terminal instances. I use the [funtoo keychain](http<colon>//www.funtoo.org/Keychain) on Windows in Git Bash.<br>* Using https instead of ssh. This is becoming more and more popular and I think is even recommended by github. I use this since at work sometimes package managers insist on using https (npm, bower, etc.). This wouldn<sq>t normally be an issue with public repos, but we have a enterprise github where we keep our repos private.<br>* This goes with the previous bullets but git also allows you to configure a credential keeper</p>", 
                "question": "I wrote a little tutorial to help others stop wasting time login in into GitHub every time. Here is how to setup SSH keys and what they even are for your GitHub account <colon>)"
            }, 
            "id": "d9gwrkd"
        }, 
        {
            "body": {
                "answer": "<p>Sweet guide, would anyone be able to suggest a good place to teach yourself GitHub? Or maybe a website for a good tutorial? Thanks</p>", 
                "question": "I wrote a little tutorial to help others stop wasting time login in into GitHub every time. Here is how to setup SSH keys and what they even are for your GitHub account <colon>)"
            }, 
            "id": "d9h87nj"
        }, 
        {
            "body": {
                "answer": "<p>I like the login as a confirmation that I want to commit. /shrug</p>", 
                "question": "I wrote a little tutorial to help others stop wasting time login in into GitHub every time. Here is how to setup SSH keys and what they even are for your GitHub account <colon>)"
            }, 
            "id": "d9gthah"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I built a free curriculum for learning web development"
            }, 
            "id": "cgbmx17"
        }, 
        {
            "body": {
                "answer": "<p>As a beginner I want to give you a hug.</p>", 
                "question": "I built a free curriculum for learning web development"
            }, 
            "id": "cgby3f1"
        }, 
        {
            "body": {
                "answer": "<p>This looks fantastic. There are quite a few web tutorials out there but here<sq>s what stands out to me<colon><br><br>* Its full spectrum<colon> <br><br>There are a lot of great tutorials for Ruby, Rails, or JQuery out there, but I have yet to find a good one that encompasses a full stack.<br><br>* The curriculum page<colon> <br><br>I like how up front it is about what you will be learning and in what order etc. It feels more professional and easier to manage because your essentially handing me a syllabus of what I will learn.<br><br>* The projects aspect<colon> <br><br>This is probably the most important thing that stood out to me. This has a chance to excel where something like Codecademy is lacking. It helps you actually build something using the skills you<sq>ve learned instead of just memorizing a shit ton of syntax.<br><br><br>Full Disclaimer<colon> I haven<sq>t even  started a single course here yet. My first impression of the site was good though so I felt inclined to come over here and post about it. The actual coursework is the most important part and I haven<sq>t even looked into it haha. However the concept is fantastic.</p>", 
                "question": "I built a free curriculum for learning web development"
            }, 
            "id": "cgbxqgp"
        }, 
        {
            "body": {
                "answer": "<p>[Relevant XKCD](https<colon>//xkcd.com/927/) for making something new because there was a problem with the other things. But in all seriousness, this looks really good. I think I<sq>ll give it a spin.</p>", 
                "question": "I built a free curriculum for learning web development"
            }, 
            "id": "cgc2kvs"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! Good job. It<sq>s satisfying, typing in code and seeing things appear! If you want to pursue web design, you might want to try this course on Udemy https<colon>//www.udemy.com/web-developer-course/. I have been following the course for a bit. <br><br>This is the website I made, 100<percent> HTML and CSS. http<colon>//floriswarmenhoven.bitballoon.com This will be my portfolio website. Keep in mind, I have not done anything on the design. I have just put in the layout and sections I want to have - I still need to change fonts, colors, sizes of things etc etc. But this is a responsive website too, so if you look at it on your phone - it<sq>ll look pretty! <br><br>Anyways, if you have any questions be sure to send me a message.</p>", 
                "question": "Just learned some HTML this morning and love it!"
            }, 
            "id": "cykdbi0"
        }, 
        {
            "body": {
                "answer": "<p>Nice, good job. Keep going.</p>", 
                "question": "Just learned some HTML this morning and love it!"
            }, 
            "id": "cykbq56"
        }, 
        {
            "body": {
                "answer": "<p>The people of this sub are amazing. I know some people who think HTML is not programming. But all everyone here has is words of encouragement! Keep up the good work. <br><br>OP, I remember the same feeling, but it was drawing circles in a qbasic program in 7th grade. </p>", 
                "question": "Just learned some HTML this morning and love it!"
            }, 
            "id": "cykdyuf"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re looking for a structured course to help you learn the basics, you should check out http<colon>//www.freecodecamp.com. It starts out with HTML, CSS and. Javascript. There are projects to practice and a good support community of other people learning. </p>", 
                "question": "Just learned some HTML this morning and love it!"
            }, 
            "id": "cykfh9p"
        }, 
        {
            "body": {
                "answer": "<p>www.codewars.com is a good one</p>", 
                "question": "Anyone knows the name of a website to learn to write better code in where you can do daily small exercises? and compare it to other users"
            }, 
            "id": "dap8ie2"
        }, 
        {
            "body": {
                "answer": "<p>/r/dailyprogrammer <br><br>codeforces.com</p>", 
                "question": "Anyone knows the name of a website to learn to write better code in where you can do daily small exercises? and compare it to other users"
            }, 
            "id": "dapj8bf"
        }, 
        {
            "body": {
                "answer": "<p>Maybe [adventofcode.com?](http<colon>//adventofcode.com/) During December they post a new question each day with multiple challenges.</p>", 
                "question": "Anyone knows the name of a website to learn to write better code in where you can do daily small exercises? and compare it to other users"
            }, 
            "id": "dapjbdj"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.hackerrank.com is great.</p>", 
                "question": "Anyone knows the name of a website to learn to write better code in where you can do daily small exercises? and compare it to other users"
            }, 
            "id": "dap8z7s"
        }, 
        {
            "body": {
                "answer": "<p>Oh no! Am I too late? <br><br>Tags, please ignore<colon><br><br>tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits tits</p>", 
                "question": "Just created my first reddit bot! Post in this thread and see your top ten most used words out of all your reddit comments!"
            }, 
            "id": "cgsu98g"
        }, 
        {
            "body": {
                "answer": "<p>.</p>", 
                "question": "Just created my first reddit bot! Post in this thread and see your top ten most used words out of all your reddit comments!"
            }, 
            "id": "cgss622"
        }, 
        {
            "body": {
                "answer": "<p>WHAT WORDS DO I USE</p>", 
                "question": "Just created my first reddit bot! Post in this thread and see your top ten most used words out of all your reddit comments!"
            }, 
            "id": "cgsrs8p"
        }, 
        {
            "body": {
                "answer": "<p>I want to know.</p>", 
                "question": "Just created my first reddit bot! Post in this thread and see your top ten most used words out of all your reddit comments!"
            }, 
            "id": "cgss0m0"
        }, 
        {
            "body": {
                "answer": "<p>Step 1<colon> Someone else already wrote what you<sq>re about to do. Go find a library.  <br>Step 2<colon> The library won<sq>t do things quite how you want. Go find another library.  <br>Step 3<colon> After trying 5 or 6 libraries, give up and write it yourself.  <br>Step 4<colon> Show code to colleague. Colleague knows of a different library that would have done it exactly how you wanted.  <br>Step 5<colon> Drink.</p>", 
                "question": "Self-Taught Web Developers of Reddit What is something you wish you<sq>d known before becoming a web developer?"
            }, 
            "id": "d03nvld"
        }, 
        {
            "body": {
                "answer": "<p>People are going to appear like they know what they<sq>re talking about, but really everyone is operating in strange territory. Don<sq>t be threatened by other people<sq>s success.</p>", 
                "question": "Self-Taught Web Developers of Reddit What is something you wish you<sq>d known before becoming a web developer?"
            }, 
            "id": "d03kmy1"
        }, 
        {
            "body": {
                "answer": "<p>Well, I wish I knew how bad corporate jobs are. These people are constantly competing for power and dominance through their developers. The code written and application built are always second to the supervisors ego.<br><br>As far as tech goes, I wish I was more knowledgeable about the useful libraries available for free. I<sq>ve reinvented the wheel a couple of times. <br><br></p>", 
                "question": "Self-Taught Web Developers of Reddit What is something you wish you<sq>d known before becoming a web developer?"
            }, 
            "id": "d03lpcp"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Self-Taught Web Developers of Reddit What is something you wish you<sq>d known before becoming a web developer?"
            }, 
            "id": "d03l69i"
        }, 
        {
            "body": {
                "answer": "<p># How to type<br><br>It seems really basic but if you can<sq>t touch-type, it<sq>s going to slow you down.<br><br>I<sq>ve heard lots of counter-arguments, like you spend most of your time thinking, not typing - but that ignores that you need to write lots of documentation, emails, and comments too. Spend one month learning to touch-type at 80+ wpm and enjoy a lifetime of improved productivity.<br><br># How to use the command line<br><br>The command line is one of the most powerful tools at your disposal, no matter what kind of programming you<sq>re doing. Search through a directory of files to find a function. Rename all of the files in a directory at once. Run one program and <dq>pipe<dq> its output to another program to process the results and see if its output was correct. Run a program 100 times with different command-line arguments until you find the permutation that causes a crash. The possibilities are endless.<br><br># How to use a debugger<br><br>It doesn<sq>t matter what programming language you<sq>re using, one of the critical tools is a debugger. Fundamentally, a debugger is just a tool that lets you step through your program one line at a time and watch it run, so you can see where what it actually does deviates from what you thought it would do. If you don<sq>t use a debugger, you<sq>re going to be wasting your time adding print statements (which are sometimes valuable too, but not a substitute for knowing how to debug) or even worse, guessing and modifying your program without really understanding the error<br><br># How to use git<br><br>I was about to say, how to use version control, but realistically in the past 2 years git has cemented itself as the king of all version control tools. It<sq>s the fastest, most widely-used, most powerful version control system by far. Every programmer needs to know how to use git.<br></p>", 
                "question": "As someone who<sq>s just starting out what are some things that beginners often overlook or don<sq>t consider when learning about programming for the first time?"
            }, 
            "id": "dd02bap"
        }, 
        {
            "body": {
                "answer": "<p>If it<sq>s just 10 lines of code or so, don<sq>t cut and paste it.... retype it. Retyping it will help you learn and get the language more into your head.</p>", 
                "question": "As someone who<sq>s just starting out what are some things that beginners often overlook or don<sq>t consider when learning about programming for the first time?"
            }, 
            "id": "dd09s7t"
        }, 
        {
            "body": {
                "answer": "<p>The exercise/assignment isn<sq>t done when the code works. The exercise/assignment is done when you understand the code and *why* it works.</p>", 
                "question": "As someone who<sq>s just starting out what are some things that beginners often overlook or don<sq>t consider when learning about programming for the first time?"
            }, 
            "id": "dd08942"
        }, 
        {
            "body": {
                "answer": "<p>To add to dmazzonis answer.<br><br>* Utilizing data structures<br>* Paying attention to terminology - knowing it will help others to understand your questions if you are stuck. It makes searching for answers much easier.<br>* Using documentation<br><br>And probably **the biggest of em all**<br><br># Going out of your comfort zone<br><br>Seriously, don<sq>t try to avoid learning something new at all cost. I noticed that a lot of people who already learned *something*, try way too hard to hack through problems with very limited tools. Pick a project that you have completely no idea how to approach, instead of constantly repeating something you already know. It<sq>s cool to sometimes go back and rewrite your old project - it gives you a pretty good idea on how much you<sq>ve improved, but don<sq>t fall in this hole where it<sq>s the only thing you do.<br><br>Go out of your comfort zone constantly. If you want to become a professional you pretty much have no other choice.<br><br>EDIT<colon> I just realized how confusing my wording was. I was writing it at 4 AM. Fixed.<br></p>", 
                "question": "As someone who<sq>s just starting out what are some things that beginners often overlook or don<sq>t consider when learning about programming for the first time?"
            }, 
            "id": "dd03y24"
        }, 
        {
            "body": {
                "answer": "<p>Made my first game from following [this](http<colon>//lazyfoo.net/SDL_tutorials/lesson06/index.php) sprite sheet tutorial and adding physics.</p>", 
                "question": "Top Tip <colon> After completing a project from a tutorial or book try adding additional features to the project."
            }, 
            "id": "d2ghroq"
        }, 
        {
            "body": {
                "answer": "<p>At my first job, I was learning this framework. <br><br>I was tasked to add a simple dropdown (a simple feature) at the form and store the values to database, and later edit the value if needed.<br><br>I learned how the data is stored to database and how to retrieve it and display on view, the workflow, etc. It makes me read through lots of codes and I come to grips with the framework now.</p>", 
                "question": "Top Tip <colon> After completing a project from a tutorial or book try adding additional features to the project."
            }, 
            "id": "d2gm4vd"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s implying that I can ever successfully finish a project... I always lose focus or motivation as I get 60-70<percent> of the way through. If I do ever end up completing a project, I<sq>ll take this into consideration. <colon>P</p>", 
                "question": "Top Tip <colon> After completing a project from a tutorial or book try adding additional features to the project."
            }, 
            "id": "d2gpgi2"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s a terrific idea, akin to Eric Clapton<sq>s guitarist idea of taking a lick and incrementally altering it through variations, until it becomes a completely different lick altogether. Now you know maybe five or six different licks.</p>", 
                "question": "Top Tip <colon> After completing a project from a tutorial or book try adding additional features to the project."
            }, 
            "id": "d2hbzd9"
        }, 
        {
            "body": {
                "answer": "<p>Dear lord you have no idea how hard it is to read code written by somebody who doesn<sq>t do this.  Please do this, if not for the next person who has to read your code, then for yourself.</p>", 
                "question": "Why Clean Code is important!"
            }, 
            "id": "celbcwj"
        }, 
        {
            "body": {
                "answer": "<p>Clean code is important, but this is not a lesson that can be taught.<br><br>Everyone sits here and agrees about the virtues of clean code, then goes back to writing spaghetti code <dq>just for now<dq>. The only way to make a habit of writing clean code is to be burned by spaghetti code enough times that the pain teaches you to write clean code.</p>", 
                "question": "Why Clean Code is important!"
            }, 
            "id": "celish9"
        }, 
        {
            "body": {
                "answer": "<p>Very good subject matter, but only stuff from 1<colon>20 to 4<colon>00 was useful. The rest was entertaining, but it felt like a bit too much guff. 2 minutes of guff in a 4<colon>30 video is stretching it a bit.<br><br>Brilliant useful content though</p>", 
                "question": "Why Clean Code is important!"
            }, 
            "id": "celn4zc"
        }, 
        {
            "body": {
                "answer": "<p>Subscribed</p>", 
                "question": "Why Clean Code is important!"
            }, 
            "id": "celdige"
        }, 
        {
            "body": {
                "answer": "<p>Worth noting is that many websites disallow scraping content of their page. Therefore it is important to read trough the TOS before creating something more serious than a small home project.<br><br>Edit<colon> I did not intend to make it sound like this is illegal, it definitely isn<sq>t. I guess if you scraped copywritten material and published them as your own, then you might get in trouble. But by just scraping the worst case scenario would be that your IP is blocked by the host preventing you from accessing the site.</p>", 
                "question": "[Tutorial] Anyone interested in web scraping? I wrote a tutorial with Scrapy"
            }, 
            "id": "d4gt7po"
        }, 
        {
            "body": {
                "answer": "<p>So, there was a DEFCON talk about this last year. If OP is interested, this kind SR is showing how to bypass CAPTCHA with Py scripts. <br><br>https<colon>//www.youtube.com/watch?v=PADKIdSPOsc&list=LLPFMc4bmQRBBp26lK7uQUHQ&index=2<br><br>also<colon><br>She discusses legality measures for a bit before getting into it. Good stuff. Good work OP.</p>", 
                "question": "[Tutorial] Anyone interested in web scraping? I wrote a tutorial with Scrapy"
            }, 
            "id": "d4hnkgz"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been reading Automate the Boring Stuff with Python from a few days just for this. What are the odds of always finding what you want on r/learnprogramming? <colon>D</p>", 
                "question": "[Tutorial] Anyone interested in web scraping? I wrote a tutorial with Scrapy"
            }, 
            "id": "d4ho9ub"
        }, 
        {
            "body": {
                "answer": "<p>I do Data Reports for AMAs we regularly put on ([with one happening tomorrow!](https<colon>//www.reddit.com/r/geopolitics/comments/4okejy/brexit_ama_update_on_tuesday_june_21st_cfrs/)), and have been looking to learn something like this for *ages*. Is this something someone with little to no coding experience can pull off? If not, would this be a good project to learn how to? If yes for the second question, how would you suggest I go about it?<br><br>Thanks for your time, and for sharing this.</p>", 
                "question": "[Tutorial] Anyone interested in web scraping? I wrote a tutorial with Scrapy"
            }, 
            "id": "d4h2nbv"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting this. I<sq>ve been trying to learn about programming and computer science in general, and one thing that<sq>s made me laugh is how a lot of these resources are geared towards kids. <br>Raspberry Pi<colon> <dq>a great tool to get kids interested in computers!<dq> This site<colon> <dq>geared today<sq>s high school students!<dq> <br>Lol, I<sq>ll just be over here being ignorant and old. </p>", 
                "question": "[Resource] Computer Science for Beginners hand book"
            }, 
            "id": "cwlr29v"
        }, 
        {
            "body": {
                "answer": "<p>Am I alone in thinking CS has become such a broad degree that you almost have to pick a specialization? I feel like if you didn<sq>t you only ever scratch the surface of each of the very different aspects of Computer Science. Ex<colon> Software Engineering, Networking, Cybersecurity, etc...</p>", 
                "question": "[Resource] Computer Science for Beginners hand book"
            }, 
            "id": "cwlvbdy"
        }, 
        {
            "body": {
                "answer": "<p>I know it has a lot of interactions, but any PDF version??</p>", 
                "question": "[Resource] Computer Science for Beginners hand book"
            }, 
            "id": "cwljnwd"
        }, 
        {
            "body": {
                "answer": "<p>This is organized in a peculiar way.<br><br>A typical CS program (at least, in the US) might look like<colon><br><br>* CS1 (Intro programming)<br>* CS2 (Basic data structures, maybe some more OO concepts)<br>* Discrete math course (proofs, set theory, number theory, combinatorics, graph theory)<br>* Computer organization (CPU, memory, assembly, registers, cache, file system maybe)<br>* Programming languages (survey of programming paradigms, e.g. functional programming, logic languages, scripting languages, etc)<br>* Algorithms<br>* A bunch of specializations (AI, databases, software engineering, numerical analysis, networks, cryptology/network security, compilers, operating systems, theory of computation, human computer interaction, computer graphics)<br><br>I feel like there<sq>s not a set order (at least in the beginning parts).  The specializations which normally come later is mixed in with more fundamental parts, and some stuff seems missing.</p>", 
                "question": "[Resource] Computer Science for Beginners hand book"
            }, 
            "id": "cwm34cx"
        }, 
        {
            "body": {
                "answer": "<p>Wow I just saw your videos and I remember you! I remember one of my friends telling me about your YouTube channel in like 7th or 8th grade or something and how you had shown him how to stuff in unity. I live in Gentofte and we have had some mutual friends and some of them once got your help to do some green screen stuff for a project and I was so cool! And now you have a big YouTube channel! Congratulations!</p>", 
                "question": "How to program in C# - Beginner Course"
            }, 
            "id": "dchx2gw"
        }, 
        {
            "body": {
                "answer": "<p>Wow, been looking for a good c# tutorial.  Thanks.  I<sq>ve watched a lot of your stuff, must<sq>ve just missed this.</p>", 
                "question": "How to program in C# - Beginner Course"
            }, 
            "id": "dchs7g4"
        }, 
        {
            "body": {
                "answer": "<p>Man I love your unity platformer series, definitely gonna check this out.</p>", 
                "question": "How to program in C# - Beginner Course"
            }, 
            "id": "dcihnhf"
        }, 
        {
            "body": {
                "answer": "<p>Dude, I remember seeing you on how to do a game on Unity! <colon>D C# is also great for gaming, right?</p>", 
                "question": "How to program in C# - Beginner Course"
            }, 
            "id": "dcj0mzz"
        }, 
        {
            "body": {
                "answer": "<p>> Why don<sq>t universities teach Git/SVN?  <br><br>You<sq>re painting with a broad brush there, my school used SVN to turn in assignments in many classes and in others, they gave us free reign to use whatever version control we wanted on collaborative projects.  <br><br>But as an aside, programming and CS are not the same thing and I don<sq>t find it too unreasonable for a CS curriculum to gloss over a lot of programming best or standard practices etc. </p>", 
                "question": "I<sq>m a senior in a CS bachelor program... and I<sq>m always surprised when I work in teams and none of the other students know what Git or GitHub is or how to use it. Why don<sq>t universities teach Git/SVN?"
            }, 
            "id": "d0tu1na"
        }, 
        {
            "body": {
                "answer": "<p>Because a) you can pick it up in minutes, b) they have more important things to learn, and c) it<sq>s not even that useful for school-sized projects, at least as far as I ever saw and d) some schools / classes set up their own repo with git or svn or etc..</p>", 
                "question": "I<sq>m a senior in a CS bachelor program... and I<sq>m always surprised when I work in teams and none of the other students know what Git or GitHub is or how to use it. Why don<sq>t universities teach Git/SVN?"
            }, 
            "id": "d0ttsxc"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a professor teaching my first CS class next fall and plan to manage all the work on Github</p>", 
                "question": "I<sq>m a senior in a CS bachelor program... and I<sq>m always surprised when I work in teams and none of the other students know what Git or GitHub is or how to use it. Why don<sq>t universities teach Git/SVN?"
            }, 
            "id": "d0u6omg"
        }, 
        {
            "body": {
                "answer": "<p>Git is, in the long arch of history very very new.  Even in 2008 I was explaining to a lot of profs what svn is,  and git came after that.  <br><br>Most faculty don<sq>t use it,  or need to.   Even though we have teams etc. Whatever we did for the last x  years worked for us,  so we keep doing it.  <br><br>Git is also a tool, not a Cs algorithm or theory,  it<sq>s useful a lot of places but it<sq>s also <sq>some else<sq>s problem<sq>,  do I take time out of teach some algorithm,  theory,  data structure etc.  To teach you git,  which, in the end you need to learn on your own by reading documentation anyway? <br><br>Then there are the legal and it issues.   If you choose to use it that<sq>s your business,  if I require that you use it we have to worry about where the data is hosted, who can access it etc.   It<sq>s like any big company you can<sq>t just have your employees uploading millions of dollars of software to a server you don<sq>t control.   But if I want IT to host it I need to arrange with them,  someone needs to pay for it (potentially) - that is the cost of the instance,  power to run the server,  the server itself, maintenance labour etc.   It can be done, but to do it properly requires the usual tour through bureaucracy, and then all of the fun of getting hundreds of accounts created and authenticated through whatever It does.  We do that for some things,  including git, but it<sq>s a pain for us and not every university has anyone who cares enough to make an issue of it.</p>", 
                "question": "I<sq>m a senior in a CS bachelor program... and I<sq>m always surprised when I work in teams and none of the other students know what Git or GitHub is or how to use it. Why don<sq>t universities teach Git/SVN?"
            }, 
            "id": "d0u5msm"
        }, 
        {
            "body": {
                "answer": "<p>I love it! I especially liked how I could <dq>preview<dq> what effect the operation would have before committing to it.<br><br>I stopped at level 17 to come back here to write this comment. But there<sq>s no way to jump back to level 17 (yet, I presume).<br><br>It took a few moments to figure out what to do to activate the <dq>equality<dq> operator. But once I got it, it was easy to remember. I suppose the experimenting is part of the process, though. It<sq>s not a deal-breaker.<br><br>I wish there was a way to turn down (or off) the sound effects.<br><br>After the first ten levels or so, it doesn<sq>t really need to say <dq>You Win!<dq> anymore. Just the explosion effect would be sufficient.<br><br>Update<colon> On level 28 it looks like I ought to be able to drop `(x) => x x` onto the conditional. It<sq>s the same shape and it highlights. But I can<sq>t.</p>", 
                "question": "[x-post /r/programming] Try Reduct a game to teach programming comprehension"
            }, 
            "id": "d7tkr6n"
        }, 
        {
            "body": {
                "answer": "<p>This is cool. Definitely needs better instructions, and it would be useful to have a super consistent theme in terms of what is interactive and what isn<sq>t. To give credit, it is already fairly consistent (and gets better as you progress through) but initially it is a little hard to get used to. If I<sq>m being very nitpicky then I<sq>d say that the performance was a little stuttery in Firefox and that map() ought to return an array!<br><br>It<sq>s neat how concepts are introduced as shapes and then transition to code.<br><br>Levels I think people might find particularly tricky<colon><br><br>- 10  <br>- 19  <br>- 61  <br><br>Overall, massive kudos. I<sq>m certainly very impressed with this game.<br></p>", 
                "question": "[x-post /r/programming] Try Reduct a game to teach programming comprehension"
            }, 
            "id": "d7tktdw"
        }, 
        {
            "body": {
                "answer": "<p>Maybe if it correlated to the concepts as they<sq>re worded out/explained in a sidebar. I see it as a logic game, definitely, but I don<sq>t see it as related to programming. Perhaps someone can clear it up for me?<br><br>Edit<colon> made it to level 16, but I can<sq>t seem to figure out why/how to make it work. I end up with the right result with a square leftover.</p>", 
                "question": "[x-post /r/programming] Try Reduct a game to teach programming comprehension"
            }, 
            "id": "d7tsrdy"
        }, 
        {
            "body": {
                "answer": "<p>This works very poorly on my phone</p>", 
                "question": "[x-post /r/programming] Try Reduct a game to teach programming comprehension"
            }, 
            "id": "d7tjkat"
        }, 
        {
            "body": {
                "answer": "<p>This post is too long. Can somebody point me in the direction of a tl;dr?</p>", 
                "question": "[Rant] To aspiring programmers - and to <dq>I want to make X but have no clue<dq> posters"
            }, 
            "id": "cnkg4iv"
        }, 
        {
            "body": {
                "answer": "<p>While I do agree with a majority if your post,let me play devils advocate for some people (not all, but some). I have an idea for a website, I don<sq>t think I<sq>ll be the next Mark Zuckerberg, but I think it<sq>s a cool idea. I go onto google and search for <dq>how to make a website<dq> and I get search results for things like<colon> html, css, javascript, php, node.js, angular, bootstrap, composer, zend, sass, grunt, on and on and on. <br><br>Wow, that<sq>s overwhelming I think, let<sq>s search for some discussions on building websites. Now I<sq>m looking at results telkijg me to learn php, don<sq>t learn php, learn node, wait what<sq>s a fork? Why is angular changing and isn<sq>t that a good thing? <br><br>Well, I<sq>ll just ask what they mean to clarify. Now ice just got people yelling at me to search and that I<sq>m an idiot and have no right programming. But when I search, all I find is other people asking the same questions and getting the same responses. Oh good, there are more replies, wait every post is just contradicting another. One says to learn php, the next says php is garbage. One says to get this book, the next one claims that book isn<sq>t worth toilet paper. <br><br>There are so many web technologies that just asking <dq>how do I build a website?<dq> is a nearly impossible endeavour compared to just 5 years ago. Now that doesn<sq>t excuse people from asking the same basic crap over and over again, but I<sq>m willing to chock that up to just being so overwhelmed even the other posts asking for help go over their head. <br><br>It<sq>s also important to consider that most of them probably aren<sq>t asking for advice specifically how to build an app that does X, Y, and Z, but they are saying that<sq>s their end goal,and they need to know guidance which path to walk down. <br><br>The people who are asking for spoon fed information are probably ignorant to the complexities of programming, so they think there<sq>s a tutorial out there that can simply explain what they want. In those instances, we must exercise patience in explaining that there is a long and difficult journey ahead of them if they really want to go down that path. <br><br>It sucks that so many people ask the same questions over and over, but that<sq>s the nature of forums in general. I<sq>ve had these same discussions since I started using the web close to 15 years ago. People don<sq>t search, they just ask. Is part of that laziness? Totally. But are we going to fix it by ranting to the people posting these questions? Nope. Teach patience as well as good code standards, because a lot of programming is about patience. </p>", 
                "question": "[Rant] To aspiring programmers - and to <dq>I want to make X but have no clue<dq> posters"
            }, 
            "id": "cnkhcye"
        }, 
        {
            "body": {
                "answer": "<p>I think the main problem with new learners (something I struggled with until recently) is the shear amount of information that is available makes it difficult to find what they are looking for. <br><br>For example someone who has done a basic Python tutorial and has the basics still has no clue where to start with a simple chat program because they have never heard of socket programming before.</p>", 
                "question": "[Rant] To aspiring programmers - and to <dq>I want to make X but have no clue<dq> posters"
            }, 
            "id": "cnkh1wg"
        }, 
        {
            "body": {
                "answer": "<p>The major problem with your rant is that it really seems that you don<sq>t care about the new programmer, from how obviously you refuse to put yourself in their shoes these days, and actually are just preaching to a quior of other veteran programmers who feel threatened by people with misconceptions of your industry.<br><br>You seem really mad, and I think ultimately you need to just take some time away from this subreddit or take pedagogy a bit more seriously. <br><br>First, people who don<sq>t have knowledge, usually also don<sq>t know what they don<sq>t know. Throughout your post and this thread, I see you complaining about people NOT doing their own research or putting effort into their own projects, but you must understand that people don<sq>t know what they don<sq>t know. If you literally have zero experience, many of the resources out there might not get you the right idea about how to begin tackling your goal. The ultimate answer is that the end goal isn<sq>t even the kind of thing they should be tackling, they should instead be trying to learn how to program (versus just doing something with programming). Now, you assume that because someone has a very specific end goal and that they lack any knowledge with how to get there that they<sq>re being lazy, but honestly I think programming requires some major conceptual and philosophical skills non-programmers literally either do not have or do not know to apply to the field. For one, the creativity points you bring up are a great example, but you don<sq>t know what you don<sq>t know. <br><br>The problem with this entire post is that it will only really be read by a minority, and a minority which probably already agree with you. There are already rules that cover some of the things you complain about; however, you put the additional judgmental baggage of them being lazy on top of it. Maybe people are just tackling a really complex problem they don<sq>t even know is complex? You act as if new programmers already know the things they are trying to achieve are rediciously - but they don<sq>t - that<sq>s the whole reason they<sq>re asking for help in the way they do.<br><br>I think it is helpful to teach people how to function in programming culture and outline the necessary secondary skills of programming, but all your doing is perpetuating a circle jerk and not actually encouraging the people you mean to address to actually follow your guidelines. Now, I don<sq>t say this because I find what you said particularly offensive, I just find it completely and utterly ineffective. The fact that you had to preface with you post that a segment of readership should not read it is telling that the post was for YOU not to change OTHERS or help the COMMUNITY. <br><br>Now, I suggest you take some time off and reconsider why you take part in the subreddit because if this post is a telling of your perception of a class of new programmers, then you have some serious priorities to get straight. <br><br>Some people are curious and not everyone is curious enough to change their life for programmer. Good, those are human beings who are given a good lesson on what is and isn<sq>t for them. Now, you are getting quite worked up on someone learning that they don<sq>t have the necessary motivation to become a programmer.</p>", 
                "question": "[Rant] To aspiring programmers - and to <dq>I want to make X but have no clue<dq> posters"
            }, 
            "id": "cnksf38"
        }, 
        {
            "body": {
                "answer": "<p>>Paperback<colon> 256 pages<br><br>\ud83d\udc4d</p>", 
                "question": "Follow up<colon> I wrote an easy-to-read book on algorithms"
            }, 
            "id": "d3rcw1e"
        }, 
        {
            "body": {
                "answer": "<p>Amazon says the book was published in Jan 2015. What made you decide to post it now? </p>", 
                "question": "Follow up<colon> I wrote an easy-to-read book on algorithms"
            }, 
            "id": "d3qounr"
        }, 
        {
            "body": {
                "answer": "<p>I read one chapter of your book on Manning<sq>s site earlier this year and I was hooked. I have both the digital and hardcopy. It<sq>s clear and well written. I enjoy reading it and highly recommend it as an introduction to algorithms. (I<sq>m a tech bootcamp grad.) </p>", 
                "question": "Follow up<colon> I wrote an easy-to-read book on algorithms"
            }, 
            "id": "d3r5g82"
        }, 
        {
            "body": {
                "answer": "<p>35$ for an ebook though. Interested in this, but can<sq>t drop that kind of coin. </p>", 
                "question": "Follow up<colon> I wrote an easy-to-read book on algorithms"
            }, 
            "id": "d3rew3s"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know if this is super applicable to this situation but I feel it<sq>s worth a mention. Back when I was in university, my CS professor was once saying how over the years of teaching he<sq>s noticed that there<sq>s two concepts that most people tend to either <dq>get it or not get it<dq> and the ones who don<sq>t get it likely never will. He went on to say that the people who can<sq>t wrap their heads around those two concepts are the ones that rarely if ever make it as software devs or computer scientists. The two concepts were [pointers](https<colon>//en.wikipedia.org/wiki/Pointer_\\(computer_programming\\)) and [recursion](https<colon>//en.wikipedia.org/wiki/Recursion_\\(computer_science\\)). I can definitely see the truth to that from anecdotal experience; had a friend in the CS program with me who couldn<sq>t understand pointers for the life of me. I understood the concept from the moment it was taught and I tried to explain it to him in many different ways with many different analogies but he couldn<sq>t grasp it. Didn<sq>t see him again in the next year<sq>s classes...<br><br><br>So what I<sq>m trying to say is although it<sq>s very unscientific and just one professor<sq>s thoughts, it might be worth trying to see if you can grasp those concepts even if you don<sq>t immediately need to use them for anything, as a litmus test of sorts for if you<sq>re cut out for the programming world.</p>", 
                "question": "Are there signs you shouldn<sq>t be a programmer?"
            }, 
            "id": "d120485"
        }, 
        {
            "body": {
                "answer": "<p>I mean, if you can<sq>t understand basic logic(if/then/else) you might have some trouble. Or if you can<sq>t remember specific things, you might have trouble with stuff like syntax([] {} () ;<colon>). <br><br>If you can draw a flow chart and remember how certain languages liked to be formatted, you should be fine! The more complicated stuff comes with time and practice. </p>", 
                "question": "Are there signs you shouldn<sq>t be a programmer?"
            }, 
            "id": "d12254t"
        }, 
        {
            "body": {
                "answer": "<p>Everything will eventually make sense given enough work so don<sq>t give up. With j query I<sq>d bother going through and learning about the relation of the DOM, javascript, css, and html. Otherwise, is there something specific you need help with?</p>", 
                "question": "Are there signs you shouldn<sq>t be a programmer?"
            }, 
            "id": "d11yv0l"
        }, 
        {
            "body": {
                "answer": "<p>I personally think you should just be learning programming in general. First, learn and master javascript. Then, start looking at code from other languages, see if you can understand it. Once you truly know how to program/know alot of the concepts, something like learning a new library (jquery) will seem laughable. Hell, I imagine if you are an experienced enough programmer, you can pick up an entire language in probably a few days. Also, I major in CS and there were times when learning new concepts that I truly thought id never understand them, now they seem like common sense to me.</p>", 
                "question": "Are there signs you shouldn<sq>t be a programmer?"
            }, 
            "id": "d124iv7"
        }, 
        {
            "body": {
                "answer": "<p>[link for the lazy](http<colon>//www.checkio.org)</p>", 
                "question": "[Python] I really want to spread the word about checkio.org. I didn<sq>t know what to do after CodeAcademy and I came across a link. It<sq>s excellent."
            }, 
            "id": "ci88ftc"
        }, 
        {
            "body": {
                "answer": "<p>@davidpm, thank you for sharing your CheckiO experience with the reddit community. I am a co-founder of CheckiO and would love to hear your feedback or be of any possible help. Keep having fun and sharing creative  ideas around coding with the rest of the world </p>", 
                "question": "[Python] I really want to spread the word about checkio.org. I didn<sq>t know what to do after CodeAcademy and I came across a link. It<sq>s excellent."
            }, 
            "id": "ci8hm8n"
        }, 
        {
            "body": {
                "answer": "<p>I love this site!  I think it<sq>s great that you can<sq>t see other solutions until you finish a problem first.  It makes me really appreciate and understand other people<sq>s solutions.<br><br>Checkio is also really good at helping you learn the in<sq>s and out<sq>s of Python.  I<sq>ve started to really explore the docs to find interesting things to use (like divmod (), and map).  I<sq>ve also learned how to use lambdas by breaking down other people<sq>s solutions. <br><br>I<sq>m at the level where basic tutorials aren<sq>t doing it anymore but larger projects feel just out of reach. Checkio feels like the bridge to help me cross that chasm. </p>", 
                "question": "[Python] I really want to spread the word about checkio.org. I didn<sq>t know what to do after CodeAcademy and I came across a link. It<sq>s excellent."
            }, 
            "id": "ci86wo1"
        }, 
        {
            "body": {
                "answer": "<p>Is it python only?</p>", 
                "question": "[Python] I really want to spread the word about checkio.org. I didn<sq>t know what to do after CodeAcademy and I came across a link. It<sq>s excellent."
            }, 
            "id": "ci87dnm"
        }, 
        {
            "body": {
                "answer": "<p>Some quick key terms (for only the purpose of this post)<colon><br><br> - The client<colon> for this, the client will refer to the person wishing to view the Web page and their browser. They are the ones who initiate the connection to a server.<br> - the server<colon> A program listening (waiting for any data to come in) on a computer across the Internet. They will serve a response to the client who wishes to connect.<br> - responsive vs static<colon> A static asset will not have anything change with user input. Hovering over stuff and links are really the exception here, because the idea here is that you get a visible feel to the page. Elements can expand and contract, fill automatically, or change in real time with or without intervention from the user in a responsive page.<br><br>Node.js is a server that runs on javascript. It allows for much simpler coding by doing most of the work of handling requests, allocating memory, calling functions, and following protocol. It can establish the http connection, serve data and webpages, listen on specific ports, etc. It<sq>s really nothing special, and is something the end user never has to deal with.<br><br>ReactJS, BackboneJS, and AngularJS all aim to simplify javascript on the client through toolkits and boilerplate. If you<sq>ve ever written javascript for the client side, then you know how much of a hassle changing the DOM manually is. So instead of editing the dom directly, you use their methods to simplify everything. They do the heavy lifting and work in tandem with html and js to provide an easy way to design and layout a responsive page. I<sq>m not gonna go over specifics on why they are different and how they work, just know that they are just additions to javascript that make it easier to use.<br><br>REST sounds complicated at first, but it<sq>s actually incredibly easy to understand. All it does it provide a common style for client and server use. This is useful because it allows for a broad range of clients to connect to a broad range of servers. It uses plain characters to communicate through the Internet. When you wish you connect to a webpage, your computer does not automatically just know where to look, it must first break down the url and do some work. Let<sq>s say you wish to visit http<colon>//www.google.com/my/cool/page.html. This isn<sq>t important to understand fully or even at all so I<sq>m going to brush over it going from left to right<colon><br> <br> - `http<colon>//` (hypertext transfer) this is the protocol you wish to talk (client <-> server) over. HTTP is the standard for the world wide web, and all Web browsers will support it.  Some other common protocols<colon> ssh (secure shell) to access computers remotely, https (http secure) this is http with additional steps to prevent many common attacks,  ftp/sftp ([secure] file transfer protocol) to transfer files.<br><br> - `www.google.com` this is the domain. This is useful for humans, but not so much for computers. Your computer must make a request to your DNS, which translates domains into ip addresses (think of this like the yellow pages). Optionally, this can be a ip<br> or hostname in which case your computer will already know where to go and will skip the DNS.<br><br> - `my/cool/page.html` there are no rules here, this is where you want to go. It<sq>s up to the server to interpret these symbols and move from there.<br><br>So now that<sq>s parsed we start the http request. So what does that look like? The client will send the text `GET /my/cool/page.html` to port 80 of the ip it gets from the dns. Yes, it sends the literal text, not some magic numbers or anything. This get request is the heart of REST. The idea that all requests are singular and independent allows the server to communicate anonymously with clients and not rely on previous connections, the style of slashes separating directories or dividing, the idea that the client and server are truly independant, along with more specifics you can find on the wiki all contribute to the idea. You can forget all the dns stuff really. Moving to the server, it interprets the REST request and sends back data. The server knows who is requesting what and where to send it back to (that is part of tcp/ip).</p>", 
                "question": "Can someone ELI5 some of the different web frameworks/technologies out there?"
            }, 
            "id": "d0vjlzy"
        }, 
        {
            "body": {
                "answer": "<p>I never really understood how Node.js worked until now. I watched these videos in this order<colon> <br><br>[Why you need a build system like Grunt, Gulp, Brunch for your website](https<colon>//www.youtube.com/watch?v=XJ5F-Auhato&list=PLoYCgNOIyGAB0_YBfdNP5oqAD98HtAQqL&index=5&feature=iv&src_vid=TMKj0BxzVgw&annotation_id=annotation_145021921)<br><br>[GRUNT TUTORIAL - Grunt makes your web development better!](https<colon>//www.youtube.com/watch?v=TMKj0BxzVgw&list=PLoYCgNOIyGAB0_YBfdNP5oqAD98HtAQqL&index=6&feature=iv&src_vid=XJ5F-Auhato&annotation_id=annotation_3880555197)<br><br>[What is Node.js Exactly? - a beginners introduction to Nodejs](https<colon>//www.youtube.com/watch?v=pU9Q6oiQNd0&list=PLoYCgNOIyGAApoDfJHjmMgGNlYenKg5jO&index=3&feature=iv&src_vid=TMKj0BxzVgw&annotation_id=annotation_785873319)<br><br>I know it looks odd that the Grunt videos helped me with understanding Node.js but it did. I hope it helps you understand what Node.js is too.</p>", 
                "question": "Can someone ELI5 some of the different web frameworks/technologies out there?"
            }, 
            "id": "d0voggp"
        }, 
        {
            "body": {
                "answer": "<p>This is a much more complex answer than it initially presents itself as since most of those things are very deep.<br><br>**REST**<br><br>I<sq>m gonna assume you mean the architectural design rather than the lesser known API. It<sq>s just 6 things<colon><br><br>1. Client and Server must be able to developed independently.<br><br>2. The state of communication of the client **and/or** the server should also not be dependent. <br><br>3. Things should be able to be cached.<br><br>4. Code should be supplied on the requester<sq>s demand.<br><br>5. The interface through which communication occurs needs to be unified. That is, it needs to essentially be a standard.<br><br>[More \\(Read the architectural constraints scetion\\)](https<colon>//en.wikipedia.org/wiki/Representational_state_transfer)<br><br>**node.js**<br><br>A server side rendering language* meant as a direct competitor of PHP. It performs much the same job as PHP, but can be more easily extended to non server side operations like web apps.<br><br>*uses JS, but is so complex and different that it<sq>s pretty much a different language.<br><br>The best resource for node.js is YouTube. There are so many videos, just try searching.<br><br>**AngularJS/React**<br><br>Both of these are JavaScript libraries but you can look at them more as client side rendering frameworks for crafting UI - this means you can make dynamic items. You can also look at them as competitors of jQuery. In a nutshell, all of these offer efficient JavaScript shorthands. Plain old JavaScript can accomplish the same tasks in most cases.<br><br>For AngularJS and React you should work through their respective tutorials and pick a fav. Doesn<sq>t really matter which one you use.<br><br>**Backbone.js**<br><br>I assume you mean Backbone.js. The frameworks above can do what Backbone.js does, but Backbone.js is specifically for synchronizing with some controller, receiving data/objects from that controller, then displaying it.<br><br>[Backbone.js is a little niche in its operations compared to the other stuff on this list but there is a great site with beginner **and** intermediate tutorials.](https<colon>//backbonetutorials.com/)</p>", 
                "question": "Can someone ELI5 some of the different web frameworks/technologies out there?"
            }, 
            "id": "d0vjovn"
        }, 
        {
            "body": {
                "answer": "<p>There are some really great answers here so I won<sq>t add to the explanations. However, i think it is important to say (for your own sanity) that the sheer amount of technologies makes web development a scary place, so don<sq>t feel down if you don<sq>t get it all right away. <br><br>If you are using Django, you already know REST without realising it and you can ignore Node for now. Choosing a web framework is a complete minefield but they all offer pretty much the same functionality. Just find a Django tutorial that includes a framework with it and follow it through to get a good idea of what they are capable of. Be warned though, JavaScript isn<sq>t a beginner language and can be very frustrating to use.<br><br>The one thing you missed from your list was a responsive CSS framework like Bootstrap. You know how a website looks different on a mobile or a tablet compared to a desktop monitor? That is thanks to responsive CSS. In its simplest form, these are just media queries that read the size of the screen and enable different CSS tags. Frameworks like Bootstrap encompass these queries along with a great deal of CSS and JavaScript to allow you to lay out your website in a more uniform and reliable way on all screen sizes. <br><br>I<sq>d recommend you pick up Bootstrap first before you even think about JavaScript frameworks. It is fairly easy to learn, only requires CSS knowledge and will make you websites look better without too much effort. </p>", 
                "question": "Can someone ELI5 some of the different web frameworks/technologies out there?"
            }, 
            "id": "d0vrb9s"
        }, 
        {
            "body": {
                "answer": "<p>Fellow UK based career changer here. <br><br>The languages you<sq>re going to get recommended to you are usually<colon><br><br>* Ruby<br>* Python<br>* JavaScript<br>* PHP<br>* Java<br><br>[A quick check on Indeed](http<colon>//www.indeed.com/jobtrends?q=ruby<percent>2C+python<percent>2C+javascript<percent>2C+php<percent>2C+java&l=) shows a significant difference in volume of job postings for each.<br><br>I<sq>m not going to get into the technical merits of any particular language as they<sq>re all great at something and if you were just doing this for fun you<sq>d try them all.<br><br>If you<sq>re looking to go from zero to employable I would consider **Web Development** in some form as the industry to start in. It has the benefit of being both in demand and easily learned right from where you are reading this.<br><br>You can get a taste of the whole workflow in a week and that might be worth the time investment.<br><br>The **JavaScript learning community at [Free Code Camp](http<colon>//freecodecamp.com)** is built exactly for people in your situation and is certainly worth checking out. *(They<sq>re doing some maintenance as I write this so you can check out the site but you might want to wait a few hours before creating an account.)*<br><br>Quincy Larson<sq>s Quora answer [here](http<colon>//qr.ae/RCUEIZ) is worth reading too.<br><br>- Edited to update Free Code Camp Link</p>", 
                "question": "I<sq>m in my 50<sq>s what programming language/s would you recommend to get a job asap?"
            }, 
            "id": "cu4qxh1"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a programmer with 30+ years experience.  I<sq>m going to tell you straight out not to contemplate this.  If you<sq>re expecting to be proficient enough to be gainfully employed after just a few months, you<sq>re in for a shock.<br><br>First off, saying things like you want to get <dq>up and running quickly<dq> and <dq>get a programming job as soon as possible<dq> means you don<sq>t understand what software development is all about and what it actually entails.  Being a good developer takes years of study (not necessarily at a university) and commitment. It<sq>s not something you just pick for a career change.<br><br>Second, if you don<sq>t already love to program, if you don<sq>t already have a dev environment set up and are coding for fun in the evenings and on the weekends, you<sq>re going to be very unhappy if you do somehow manage to get a development job.<br><br>As a senior developer, I<sq>m always interacting with junior developers who don<sq>t have much (if any) professional experience.  Universally, the ones that succeed are the ones that write code because they love to write code, and do it *whether they are employed to do so or not*.</p>", 
                "question": "I<sq>m in my 50<sq>s what programming language/s would you recommend to get a job asap?"
            }, 
            "id": "cu4w2ih"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m 40 and made a career change couple of years ago. <br><br>So it is doable but will take longer then you think. It will also be harder. So probably best you don<sq>t think too much and just do it <colon>) <br><br>Although your question is solid, to give good advice there should be a bit more background info. <br><br>Like do you want to work for a company or do you want to freelance? <br><br>Do you have anyone in your network who<sq>ll be able to land you a job/ push freelance work your way once you<sq>re half decent? If so learn whatever he needs. <br><br>A lot of concepts are the same in programming languages so by learning one as an absolute beginner you are learning basic concepts of most. So don<sq>t worry if you end up not using that first language, it<sq>s certainly not lost effort. <br><br>Learning HTML, CSS, and Javascript is a pretty safe bet regardless of where you end up so head over to codecademy and do those courses. Will only cost you a couple of evenings and will give you just enough to plough on yourself. <br><br>Best advice I can give you is keep pushing forward. It will be tough and you will at times feel lost and inadequate but you<sq>re certainly not alone in that. The people you meet on the other side are the ones that kept going regardless of feeling that way. You are surrounded by people a lot younger, faster and smarter but don<sq>t let that put you of. Plenty of opportunity and ways to use your age and experience. I<sq>m 3 years in and at a point I can now live from it. Learned everything myself next to my 60 hour a week other business and having 3 kids. So if you have a lot of free time on your hands you could be up and running a lot faster. If I can, almost anyone can. <br><br>Good luck! <br><br><br></p>", 
                "question": "I<sq>m in my 50<sq>s what programming language/s would you recommend to get a job asap?"
            }, 
            "id": "cu4rtxy"
        }, 
        {
            "body": {
                "answer": "<p>Lots of good advice here. I just want to add that saying <dq>get up and running quickly<dq> could be unrealistic. There<sq>s a book called Teach Yourself Programming in 10 Years. 10 years is excessive for learning enough to get a job, but the title parodies all the <dq>Learn X in 10 Minutes<dq> books out there, which are almost always BS. Give yourself at least a year of focussed learning. Programming is hard. It just is. Having unrealistic expectations could lead to failure. </p>", 
                "question": "I<sq>m in my 50<sq>s what programming language/s would you recommend to get a job asap?"
            }, 
            "id": "cu4t478"
        }, 
        {
            "body": {
                "answer": "<p>How are you able to maintain motivation/discipline to study that much per day every day? Or is it just not an issue for you?</p>", 
                "question": "Encouragement for all those learning to code<colon> my story"
            }, 
            "id": "cwdap85"
        }, 
        {
            "body": {
                "answer": "<p>Nice story, but is it possible that you<sq>re just incredibly smart and able to pick things up quickly? If so, what use is that to mortals like me? <colon>(</p>", 
                "question": "Encouragement for all those learning to code<colon> my story"
            }, 
            "id": "cwda1kw"
        }, 
        {
            "body": {
                "answer": "<p>Re. that last bit, look at [Rosetta Code](http<colon>//rosettacode.org/wiki/Rosetta_Code).</p>", 
                "question": "Encouragement for all those learning to code<colon> my story"
            }, 
            "id": "cwdiwg9"
        }, 
        {
            "body": {
                "answer": "<p>Nice story, man. Really appreciated it. I<sq>ve been trying to learn how to program for a while (couple of years, actually) and I always gave up because I simple decided that it was impossible to learn it by myself, or I wasn<sq>t able to deal with programming. But I<sq>ve been always trying to look at it as a task that I must accomplish, no matter what. I started again with C about 1 or 2 months ago and I<sq>m not making much progress because I gave like 2 hours per day to study, but I<sq>m very excited to finish it up. And, after reading your story, I realized that I<sq>m on the same place as you when you started this journey, so if you<sq>re able to finish it, I<sq>m able to. <br>Anyway, thanks a lot for this. You have encouraged me and I<sq>m very grateful. </p>", 
                "question": "Encouragement for all those learning to code<colon> my story"
            }, 
            "id": "cwd73qx"
        }, 
        {
            "body": {
                "answer": "<p>Maybe I<sq>ll be downvoted for this, but a dump of several dozen free books on Python doesn<sq>t interest me very much. Mostly because I don<sq>t know the quality of these books. There are no reviews or recommendations and I don<sq>t have the time to read a couple dozen books on Python. Moreover, many of these books seem to be beginner<sq>s books. Python isn<sq>t nearly as complicated as a lower level language, like C++. Multiple beginners books just doesn<sq>t seem necessary.</p>", 
                "question": "51 Free eBooks On Python Programming"
            }, 
            "id": "ci4u71c"
        }, 
        {
            "body": {
                "answer": "<p>Thanks. I<sq>ve read quite of few of these and I feel like I have accomplished something. I need to get out more. </p>", 
                "question": "51 Free eBooks On Python Programming"
            }, 
            "id": "ci4mqz9"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "51 Free eBooks On Python Programming"
            }, 
            "id": "ci4zcvt"
        }, 
        {
            "body": {
                "answer": "<p>It looks like they<sq>re sorted by most recently published to oldest.<br><br>Edit<colon> only for viewing, not downloading</p>", 
                "question": "51 Free eBooks On Python Programming"
            }, 
            "id": "ci4rars"
        }, 
        {
            "body": {
                "answer": "<p>omg...someone actually finished.  You just gave me hope!!!</p>", 
                "question": "Just finished the online open source web development bootcamp over at http<colon>//www.theodinproject.com/ and used my new skills to launch my first website today! Here is a recap of my experience."
            }, 
            "id": "czxqk2p"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for sharing.</p>", 
                "question": "Just finished the online open source web development bootcamp over at http<colon>//www.theodinproject.com/ and used my new skills to launch my first website today! Here is a recap of my experience."
            }, 
            "id": "czxjfyc"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve picked up The Odin Project and have been working on it part time for around 6 months. I agree with much of your findings on the matter. I have also found Michael Hartl<sq>s tutorials to be top notch. He walks you through the creation of a fake Twitter app with Ruby on Rails. There are so many resources online for learning, especially in Ruby and Rails. I also wish I had more people to work with. </p>", 
                "question": "Just finished the online open source web development bootcamp over at http<colon>//www.theodinproject.com/ and used my new skills to launch my first website today! Here is a recap of my experience."
            }, 
            "id": "czxpxu5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Just finished the online open source web development bootcamp over at http<colon>//www.theodinproject.com/ and used my new skills to launch my first website today! Here is a recap of my experience."
            }, 
            "id": "czxvbtf"
        }, 
        {
            "body": {
                "answer": "<p>Take a project that you haven<sq>t touched in a few months and see how tough it is to understand the code. If you can<sq>t do it, then people you<sq>re collaborating with will find it flat-out impossible.</p>", 
                "question": "What are some bad habits self-teaching programmers should avoid?"
            }, 
            "id": "cwc9t8f"
        }, 
        {
            "body": {
                "answer": "<p>In my experience, <sq>project hopping<sq>.  Like, I was working on this cool, complex Android app. I got frustrated and bored after a while, so I went and learned some new front-end stuff. And so on.<br><br>Finishing a complex project, after all of the hard and boring parts, is usually more important than starting it.</p>", 
                "question": "What are some bad habits self-teaching programmers should avoid?"
            }, 
            "id": "cwcd7es"
        }, 
        {
            "body": {
                "answer": "<p>A few that come to mind<colon><br><br>1) Thinking Google is cheating. Knowing how to find answers for yourself is a skill almost as crucial as knowing what to do with it.<br><br>2) Staying in your comfort zone. So many times on this sub, I see questions from people a few months into learning who list all of the tutorials they have done on Codecademy, Code School, etc. They are only ever going to teach you the basics and it doesn<sq>t matter how many languages you can write Hello World in, you aren<sq>t going to get anywhere. If something seems like its just out of your reach, that<sq>s what you should probably be aiming for.<br><br>3) Putting too much emphasis on languages. This only really applies to those who are learning because the want a career from it. Of course, to work as a programmer, you need to know how to code thats only part of the job. If you want a good chance of getting a job, learn about version control and collaborating on open-source projects, and make things with third party APIs. Understand the differences between your language<sq>s data structures and the reasons why you would use them in different situations. Learn about networks and protocols. The biggest difference between self-learners and those with a degree is students can<sq>t avoid the <sq>boring<sq>, non-coding subjects but these are essential for getting a job at the end and it will really show in an interview.</p>", 
                "question": "What are some bad habits self-teaching programmers should avoid?"
            }, 
            "id": "cwccrbb"
        }, 
        {
            "body": {
                "answer": "<p>Thinking you<sq>re smarter than you actually are. My first developer interview was extremely humbling. </p>", 
                "question": "What are some bad habits self-teaching programmers should avoid?"
            }, 
            "id": "cwc94tn"
        }, 
        {
            "body": {
                "answer": "<p>That UI is not something that first comes to mind when I think Java application. Good job!</p>", 
                "question": "[Java] My roommate and I just finished our first big programming project<colon> a music player for Windows. Coded in Java with JavaFX for the GUI."
            }, 
            "id": "d41u405"
        }, 
        {
            "body": {
                "answer": "<p>Do you have any resources you would recommend to someone trying to learn javafx?</p>", 
                "question": "[Java] My roommate and I just finished our first big programming project<colon> a music player for Windows. Coded in Java with JavaFX for the GUI."
            }, 
            "id": "d41lpqa"
        }, 
        {
            "body": {
                "answer": "<p>I personally ditched Java for C# and one of the main reasons was that I doubted anyone used JavaFX or that I could make something pretty. How wrong was I?</p>", 
                "question": "[Java] My roommate and I just finished our first big programming project<colon> a music player for Windows. Coded in Java with JavaFX for the GUI."
            }, 
            "id": "d41ynrd"
        }, 
        {
            "body": {
                "answer": "<p>Wow right on op! How many hours total would you say you sunk into this project?</p>", 
                "question": "[Java] My roommate and I just finished our first big programming project<colon> a music player for Windows. Coded in Java with JavaFX for the GUI."
            }, 
            "id": "d41xg8f"
        }, 
        {
            "body": {
                "answer": "<p>This is how I started<colon> HTML, javascript, PHP/MySQL. I posted to business forums with free advice, and in my signature for each post was an advertisement leading to my services. Lot of cheap projects<colon> 10, 50, 100 dollar increments to install various scripts on a person<sq>s server, and then future work would include adjustments to those sites which there were already mods for. Heck, a lot of those projects required no actual development experience at all... aside from the ones that did. Seriously, you can make an easy 10, 20, 50 or 100 in increments for simply setting up the software that<sq>s already written, or copy/pasting mods in the programs already written. Anyone who says you can<sq>t do it is just someone who hasn<sq>t done it themselves. I did it in my early 20<sq>s and googled everything I didn<sq>t know. So when I see someone saying you can<sq>t do it, that it<sq>s impossible, or that you have to have a PhD. from MIT to even think about it... that<sq>s some funny shit. This all comes down to marketing and point-blank, can you do what you say you can. Make your own sites first and get competent with your tools. Once you develop a confidence in your abilities, and you know for a fact you can do X. Do it. Don<sq>t listen for a second to anyone who says <dq>you can<sq>t do it<dq> because they couldn<sq>t figure it out themselves. Don<sq>t listen to people who say you need a formal degree from a top 10 school in order to code an ANDROID app. Heck, you might be the guy with the creativity to make the next big software product... or, at worst, the guy who makes a product competitively similar in scope to an established one, but easier on price.<br><br>Sure, the argument will come up that you<sq>re not as competent as a computer science major with deep knowledge, and therefore the fact that you haven<sq>t coded in assembly means you<sq>re not as good of a programmer. Okay. Sure. Simple websites, basic apps, light programming projects, generic web services? Not even an issue.<br><br>On the other hand if you were designing a game engine with super duper realistic physics, I<sq>d doubt your competency if you didn<sq>t know higher level math, lower level languages, and had no experience in that realm whatsoever.<br><br>There<sq>s a lot of <dq>philosophy of programming<dq> bullshit literature out there. Someone<sq>s opinion on it, either experienced or non-experienced. They<sq>re not all right. They<sq>re not all wrong. The majority of the time all thay matters to people is the money. Do your skills equal cash. Are your skills proficient enough to earn that cash with satisfaction. Aside from all the bullshit literature I read about this field, when it comes down to it, it<sq>s about as black and white as that.</p>", 
                "question": "Can I earn small amounts of money from home as a beginner programmer?"
            }, 
            "id": "ddcsar9"
        }, 
        {
            "body": {
                "answer": "<p>The easiest thing to start with is making and/or redoing webpages for small businesses. Look at /r/webdev/ for all the info, start with HTML, CSS, JavaScript, jQuery, and WordPress (lots of places have WP sites that need fixing up). Everything you need is free (except time invested to learn it all). Start with easy static sites (that don<sq>t change or sell anything) and then gradually work your way up to more complex projects.</p>", 
                "question": "Can I earn small amounts of money from home as a beginner programmer?"
            }, 
            "id": "ddcle4x"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s no legal requirements, if that<sq>s what you mean. <br><br>In practice you need to actually learn how to do something properly before you can charge for it.   <br><br>Edit<colon> this is a common topic. /r/cscareerquestions and here get it often. Searching will yield more info. </p>", 
                "question": "Can I earn small amounts of money from home as a beginner programmer?"
            }, 
            "id": "ddch7c2"
        }, 
        {
            "body": {
                "answer": "<p>Sign up on fiverr, elance. Search Google for <dq>freelance programming sites<dq> </p>", 
                "question": "Can I earn small amounts of money from home as a beginner programmer?"
            }, 
            "id": "ddcjatd"
        }, 
        {
            "body": {
                "answer": "<p>That is awesome as fuck.</p>", 
                "question": "Just finished taking my first step from beginner to intermediate programmer! <colon>D"
            }, 
            "id": "ch6ktcu"
        }, 
        {
            "body": {
                "answer": "<p>Great work, congratulations! Why not post the code for others to learn from <colon>)</p>", 
                "question": "Just finished taking my first step from beginner to intermediate programmer! <colon>D"
            }, 
            "id": "ch6ncb5"
        }, 
        {
            "body": {
                "answer": "<p>good job <colon>-D</p>", 
                "question": "Just finished taking my first step from beginner to intermediate programmer! <colon>D"
            }, 
            "id": "ch6kvtn"
        }, 
        {
            "body": {
                "answer": "<p>Keep up the good work I should probably start learning too</p>", 
                "question": "Just finished taking my first step from beginner to intermediate programmer! <colon>D"
            }, 
            "id": "ch6lacz"
        }, 
        {
            "body": {
                "answer": "<p>[here<sq>s a good reddit post about recursion](https<colon>//www.reddit.com/r/learnprogramming/comments/5w50g5/eli5_what_is_recursion/)</p>", 
                "question": "ELI5<colon> What is Recursion ?"
            }, 
            "id": "de7bqie"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s a bit hard to give you sources without knowing what language you are using. The basic idea is that a recursive method a method that calls itself in the method. If you are a visual learner it looks like [this](https<colon>//prateekvjoshi.files.wordpress.com/2013/10/part-1.jpg) or [this](https<colon>//www.bennadel.com/resources/uploads/recusion_path_explained.gif). A coding example would look like this in java<colon><br>    <br>    public int doSomething(int a){<br>        doSomething(a);<br>    }<br><br>This is recursive but there is an issue with it. This code will keep calling itself forever because there is no terminating condition. <br><br>To fix this you will need some sort of terminating condition that will eventually be met.<br><br>    public int doSomething(int a){<br>        if (*some condition*){<br>            return *some int*<br>        } else {<br>            doSomething(a);<br><br>    }<br><br>This is generally what a recursive method will look like. It can be expanded upon but this is generally what they look like.<br><br>Here is an example of how to do a factorial recursively . It has the same basic setup. You could try doing a fibonacci sequence example to practice too.<br><br><br>    public void factorial(int a){<br>        if (a==0) {<br>            return 1;<br>        }<br>        else{<br>            return (a*factorial(a-1));<br>    }<br><br><br>Good luck   ^_^<br>    <br>Edit<colon> To those wondering why the first two examples do not have return lines at the end, they were intentionally left out. Since I don<sq>t know how much coding experience OP has I wanted to leave the example at a bare minimum to emphasize the point. I felt that putting a return line may confuse things a bit more. Thank you everybody</p>", 
                "question": "ELI5<colon> What is Recursion ?"
            }, 
            "id": "de7ctz1"
        }, 
        {
            "body": {
                "answer": "<p>To understand recursion you must understand recursion.</p>", 
                "question": "ELI5<colon> What is Recursion ?"
            }, 
            "id": "de7bwnb"
        }, 
        {
            "body": {
                "answer": "<p>An easy example of recursion is computing factorials.<br><br>Suppose you ask someone what six factorial is. He could say that he doesn<sq>t know, but he knows that it<sq>s six times five factorial and then ask someone else what five factorial is. The person he asks would then do the same.<br><br>Eventually, someone would be asked what zero factorial is. This person is special. They actually know what zero factorial is. They tell that to the person who wants to know what one factorial is who tells it to the guy who needs to know what two factorial is etc.<br><br>It then works its way back up the chain and the guy who wanted to know what five factorial is would be told it<sq>s 120. He then multiplies by six and he has the answer he wanted all along.</p>", 
                "question": "ELI5<colon> What is Recursion ?"
            }, 
            "id": "de7jpcy"
        }, 
        {
            "body": {
                "answer": "<p>The best advice when it comes to programming is that you have to actually do it. It<sq>s like any skill, reading about it, watching videos etc only help to an extent. To learn it you have to sit down and actually work. My recommendation would be to set aside an hour everyday, or more if you don<sq>t have a job, and spend that time creating SIMPLE programs. No distractions, not stopping until time is up, just working hard, researching when you get stuck, and figuring it out.</p>", 
                "question": "Got kicked out of my house and have no money for college. Gonna attempt to learn programming on my own. Any advice?"
            }, 
            "id": "dakwnc1"
        }, 
        {
            "body": {
                "answer": "<p>My recommendation would be to work 40 hours a week at any old minimum wage or slightly better job you can get, and program on the side. </p>", 
                "question": "Got kicked out of my house and have no money for college. Gonna attempt to learn programming on my own. Any advice?"
            }, 
            "id": "dakzwsx"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Got kicked out of my house and have no money for college. Gonna attempt to learn programming on my own. Any advice?"
            }, 
            "id": "dakztax"
        }, 
        {
            "body": {
                "answer": "<p>I know I<sq>m a bit late to the party but I have some advice.  There will be days, weeks, or possibly months where you will say <dq>fuck this shit, I can<sq>t do it<dq>. You can. Just remember that.</p>", 
                "question": "Got kicked out of my house and have no money for college. Gonna attempt to learn programming on my own. Any advice?"
            }, 
            "id": "dal76ww"
        }, 
        {
            "body": {
                "answer": "<p><br>* Algorithms, Part I<colon> [link](https<colon>//www.coursera.org/course/algs4partI)<br>* Algorithms, Part II<colon> [link](https<colon>//www.coursera.org/course/algs4partII)<br>* Algorithms<colon> Design and Analysis, Part 1<colon> [link](https<colon>//www.coursera.org/course/algo)<br>* Algorithms<colon> Design and Analysis, Part 2<colon> [link](https<colon>//www.coursera.org/course/algo2)<br><br><br><br></p>", 
                "question": "Algorithms & Data Structures<colon> What online resources do you recommend to learn them?"
            }, 
            "id": "cznqxin"
        }, 
        {
            "body": {
                "answer": "<p>* [Khan Academy<sq>s Algorithms unit](https<colon>//www.khanacademy.org/computing/computer-science/algorithms) - content from a very popular CS algorithms textbook). Language<colon> JavaScript. <br>* [Problem Solving with Algorithms and Data Structures](http<colon>//interactivepython.org/runestone/static/pythonds/index.html) - an awesome interactive online textbook. Language<colon> Python</p>", 
                "question": "Algorithms & Data Structures<colon> What online resources do you recommend to learn them?"
            }, 
            "id": "cznuj7j"
        }, 
        {
            "body": {
                "answer": "<p>Visualizations<colon> https<colon>//www.cs.usfca.edu/~galles/visualization/Algorithms.html</p>", 
                "question": "Algorithms & Data Structures<colon> What online resources do you recommend to learn them?"
            }, 
            "id": "cznpp0w"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//people.cs.vt.edu/shaffer/Book/<br><br>Very good book on the topic.  The PDF is free.<br></p>", 
                "question": "Algorithms & Data Structures<colon> What online resources do you recommend to learn them?"
            }, 
            "id": "czntxd6"
        }, 
        {
            "body": {
                "answer": "<p>A bug started appearing for customers in Chrome on a particular page of our web application we hadn<sq>t touched in months, around November of last year. Some people, relatively often when visiting this page, would get an error. Our logs don<sq>t help much, they say something along the lines of `Convert.ToIn32(x)` threw a parse error, like x isn<sq>t an int. Okay, that makes sense, but because it was deep in a library we were using we didn<sq>t get line numbers, nor did we get any idea of what `x` was... if it was null, an empty string, or anything like that. No one could reproduce it that tried around the office for a while (even in production) until one day a few weeks later one of our support people was getting it. Awesome! I borrowed his laptop over the weekend to try to see what I can learn from the bug, hoping that I could use his computer and make it hit my local environment so I could break.<br><br>Unfortunately, it didn<sq>t happen in my local environment. It didn<sq>t happen when I tried to hit our QA environment (from his machine). It only happened in production, damn it. After a lot of playing around (Basically doing a manual binary search of files to delete out of the chrome local app data folder until I isolated it to a single file), I was able to determine that it was a particular file in Chrome<sq>s app data preferences.json file, which is a huge multi-thousand line long file that holds things like your current tabs open, proxy caching for web pages, zoom levels on pages, etc. I found that I could use his preferences on my own Chrome and reproduce it (only on prod, of course) and that if I deleted the file (and it auto-regenerated) it would fix the issue. Okay, we have a workaround. I still couldn<sq>t figure out the bug, but a workaround is nice.<br><br>Customers start using the workaround and it seems to be working, but after a couple of days a lot of them called back in to say that it had come back! Damn it.<br><br>I decided to go for broke and see if I could trick Chrome with that preferences into thinking it was hitting production, maybe all I needed to do was fake the URL and I would be able to reproduce it locally! Some host file changes, adding a certificate (since we don<sq>t use SSL in our local environments but use SSL everywhere in prod), and boom, error on my local environment. Attach myself to the debugger, break on uncaught exceptions, and I found it... kind of. I still don<sq>t know why or what is happening since it<sq>s a compiled library that the error is in, but for some reason we<sq>re sending in the value 132.6, and it<sq>s supposed to be an int. <br><br>So, I do the only thing I can do, I check our request payload that we sent back to the server, and there it is, the number<colon> 132.6... in a variable called something like scrollPixelsFromTop. After some googling, I find that in a release of Chrome around November, if you<sq>re zoomed in, the way that we (on the JavaScript side) were determining how far down you<sq>ve scrolled on a side pane could sometimes return fractions of pixels, causing the entire page to blow up if you were zoomed in. We went back to check all the videos of customer service reps having sessions with customers who experience this bug, and all of them were zoomed in. It also explains why the preferences file getting deleted didn<sq>t fix it permanently<colon> Customers would just zoom right back in!<br><br>All of this, and weeks of debugging, to fix a bug with a single line of code<colon> `scrollPixelsFromTop = Math.round(scrollPixelsFromTop); `</p>", 
                "question": "Experienced Programmers<colon> What is the most bizarre bug you<sq>ve encountered and how did you end up solving it?"
            }, 
            "id": "ct74k64"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a good one that caught me out for longer than it should. C++ but it may also occur in other languages.<br><br>I have an if/else block. It looks like this<colon><br><br>\tif(ValueA > ValueB)<br>\t{<br>\t   // Do first thing<br>\t}<br>\telse<br>\t{<br>\t   // Do second thing<br>\t}<br><br>Bug<colon> It<sq>s doing the first thing when it shouldn<sq>t be. Okay, so either ValueA is bigger than it should be or ValueB is smaller than it should be. I check where ValueA and ValueB is getting set, nothing out of the ordinary. I can<sq>t see anything obvious so I then start tracing through the code. Everything is good, until I hit a breakpoint at the if statement.<br><br>ValueA has a value of 10. Value B has a value of 20. Okay, step over and....<br><br>...it did the first thing. What? Wait, I must have misread that. Step through again.<br><br>Sure enough, ValueA was less than ValueB, but the if statement was returning true. WTF? <br><br>I stare at this if statement for what seems like hours. It<sq>s the simplest piece of code, yet it<sq>s not working. What is this, a corrupt register on my CPU? Memory corruption? Cosmic rays?<br><br>Out of desperation, I change the code to something like this<colon><br><br>\tif(false)<br>\t{<br>\t   // Do first thing<br>\t}<br>\telse<br>\t{<br>\t   // Do second thing<br>\t}<br><br>Step through and...it<sq>s still doing the first thing. Still. False is true. What. The. Fuck. Clean solution, recompile, *something* isn<sq>t right, something is being left in memory or *something*. I have literally no idea.<br><br>It was around this point that I felt I couldn<sq>t trust the machine I was running this code on. It<sq>s obviously lying to me. It<sq>s obviously broken in a very odd, very specific way that means false is true for this one specific line of code.<br><br>I log into a different machine, check out the code and (thanks to a different font setting) spot the error right away. This is what the code actually looks like<colon><br><br>\tif(ValueA > ValueB)                                                 ;<br>\t{<br>\t   // Do first thing<br>\t}<br>\telse<br>\t{<br>\t   // Do second thing<br>\t}<br><br>That ***motherfucking*** erroneous semicolon that **somehow** ended up there, at the end of a load of whitespace. C++ doesn<sq>t treat this as an error! It ends the if statement and of course the next brace is just scope, so naturally will always execute. C++ also doesn<sq>t give a flying fuck that, technically, that *else* doesn<sq>t have a matching *if*.<br><br>I lost the better part of a day thanks to a single fucking semicolon. Fuck you, whoever put it there (probably me). </p>", 
                "question": "Experienced Programmers<colon> What is the most bizarre bug you<sq>ve encountered and how did you end up solving it?"
            }, 
            "id": "ct75tuh"
        }, 
        {
            "body": {
                "answer": "<p>I worked at a casino and wrote software for tracking player<sq>s play. There was a bug that would cause my program to crash randomly when this lady would run a player<sq>s club card in my software from only this one POS. (point of sales) I could not figure out in the back end why it would be crashing. I then went down to the employee and terminal. She was an overweight person and the POS had a some what broken touch screen so it also had a keyboard and mouse. The Mag stripe reader was at the top of the POS with the keyboard in front of the POS. Every time she would reach to run a card her stomach would hit the keyboard mid swipe. So most input from the mag strip would look like this. A0000042304 and when she would bump the keyboard it would look like this A0b00 00423n04. Her stomach was inputting data into the string I was grabbing from the reader. I NEVER figured this could be a problem when I wrote the program. I then fixed it by having the program scrubbing the string input. This fixed it, If this had not fixed it I would have programed the software to use the mag reader for the field. However the scrubbing fixed the problem so I KISS the problem. <br><br>When I designed the software I never figured a POS would be using a keyboard or that you could time it just right to inject into the mage read. </p>", 
                "question": "Experienced Programmers<colon> What is the most bizarre bug you<sq>ve encountered and how did you end up solving it?"
            }, 
            "id": "ct755oc"
        }, 
        {
            "body": {
                "answer": "<p>Not my own story, but [The Case of the 500-Mile Email](http<colon>//www.ibiblio.org/harris/500milemail.html) is the most amazing bug I<sq>ve ever read about.<br><br>> I was working in a job running the campus email system some years ago when<br>I got a call from the chairman of the statistics department.<br><br>> <dq>We<sq>re having a problem sending email out of the department.<dq><br><br>> <dq>What<sq>s the problem?<dq> I asked.<br><br>> <dq>We can<sq>t send mail more than 500 miles,<dq> the chairman explained.<br><br>> I choked on my latte.  <dq>Come again?<dq><br><br>> <dq>We can<sq>t send mail farther than 500 miles from here,<dq> he repeated.  <dq>A<br>little bit more, actually.  Call it 520 miles.  But no farther.<dq></p>", 
                "question": "Experienced Programmers<colon> What is the most bizarre bug you<sq>ve encountered and how did you end up solving it?"
            }, 
            "id": "ct7a2co"
        }, 
        {
            "body": {
                "answer": "<p>On other extremely important implication is that you should not compare floating point numbers with equals or not equals.  In Java and C this would be == and !=.   If you can, try to use less than or greater than.  If you must check for equality use something like Math.abs(a-b) < 0.001</p>", 
                "question": "0.10 + 0.20 = 0.30000000001 | I just found a great Computerphile video that explains why floating point numbers aren<sq>t perfectly precise."
            }, 
            "id": "cmy26r8"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for the intro to Computerphile. I<sq>m in heaven. Anyone know of other general computing/programming/topics sites or channels like this?</p>", 
                "question": "0.10 + 0.20 = 0.30000000001 | I just found a great Computerphile video that explains why floating point numbers aren<sq>t perfectly precise."
            }, 
            "id": "cmxy1up"
        }, 
        {
            "body": {
                "answer": "<p>This site too<colon><br><br>http<colon>//floating-point-gui.de/</p>", 
                "question": "0.10 + 0.20 = 0.30000000001 | I just found a great Computerphile video that explains why floating point numbers aren<sq>t perfectly precise."
            }, 
            "id": "cmxu9tv"
        }, 
        {
            "body": {
                "answer": "<p> why doesn<sq>t someone make a computer that understands decimal recursion?  it<sq>s easy in math you just put a line over the numbers that recur.  is that really a bigger paradigm shift than negative numbers?</p>", 
                "question": "0.10 + 0.20 = 0.30000000001 | I just found a great Computerphile video that explains why floating point numbers aren<sq>t perfectly precise."
            }, 
            "id": "cmy1cz3"
        }, 
        {
            "body": {
                "answer": "<p>Programmers never agree with each other and their way is always the correct way.<br><br>Honestly just take it in your stride. Do you think you are good at what you do? If so carry on. If not, find another aspect of programming that you do enjoy.</p>", 
                "question": "Old boss said I wasn<sq>t meant to be a programmer self esteem shattered. Any advice?"
            }, 
            "id": "ckjsrrf"
        }, 
        {
            "body": {
                "answer": "<p>I hold on to this thought, <dq>Anyone can be a programmer, ANYONE<dq>.  You know what takes you to the next level? Not giving up. Regardless of what they said to you, the fact that you can program, puts you leaps further than them.  No developer worth their salt is going to berate a junior dev for making mistakes like that.  Chances are, they used you as a scapegoat for their own failures to their superiors, and were told you had to go.<br><br>Perseverance, practice, and a love for what you do is all it takes.  Logic and math can be taught, which is where most struggle.  Look at programming like another language.  You<sq>re learning how to speak to machines, it<sq>s a little bit more complex than say learning Spanish <colon>) .<br><br>Just keep on trucking and you<sq>ll get there, don<sq>t let asshats like that keep you from doing what you enjoy.<br><br>Edit<colon> Thanks for the gold kind stranger!</p>", 
                "question": "Old boss said I wasn<sq>t meant to be a programmer self esteem shattered. Any advice?"
            }, 
            "id": "ckjt3m2"
        }, 
        {
            "body": {
                "answer": "<p>Your first boss was an asshole. Unfortunately, his statement really affected you. You made some mistakes, everybody does. He offered to help you, but before that started, he changed his mind because mentoring somebody can be a pain in the butt. He told himself, and later you,  that you were just a rotten programmer, not worth the time. This was his way of justifying to himself why he was letting you go instead of providing the help he promised. <br><br>That senior dev that had problems with your work? So what. Unless you know what it was he didn<sq>t like, it doesn<sq>t matter. There are guys that freak out because you don<sq>t have {<sq>s or blank lines where they want them. Or your variable names don<sq>t meet their bizarre standards. Or you did something in perfectly acceptable way A instead of perfectly acceptable way B. <br><br>That<sq>s on them, not you.<br><br>I had something similar happen. Long, long ago I was a short order cook. I switched restaurants and my first day at the new place was a borderline disaster. The manager said <dq>You suck at this. You can go wash dishes.<dq> Dishes. A sud buster. I didn<sq>t even get to do prep. Because I did poorly on MY FIRST SHIFT. Well, fuck that guy. I knew how to line cook. So, I found another job.<br><br>Anyway, you need to do that. Obviously working for yourself isn<sq>t working out. No shame. That<sq>s tough to do. Lord knows, I couldn<sq>t. So go out and find yourself another dev position. It sounds like you still have learning to do, make sure they understand that. And whenever the doubt creeps in, just say, Fuck that guy. I can do this. </p>", 
                "question": "Old boss said I wasn<sq>t meant to be a programmer self esteem shattered. Any advice?"
            }, 
            "id": "ckjt75e"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Old boss said I wasn<sq>t meant to be a programmer self esteem shattered. Any advice?"
            }, 
            "id": "ckju4gf"
        }, 
        {
            "body": {
                "answer": "<p>Taking a break when stuck is for me the single most effective way to solve a problem when I<sq>m programming. There have been countless occasions where I sat hours upon hours on a problem and couldn<sq>t figure out how to tackle it. Then, during a short toilet-break, focussing on something absolutely different, the solution always hit me out of nowhere.</p>", 
                "question": "It is okay to feel like giving up!"
            }, 
            "id": "dduzzua"
        }, 
        {
            "body": {
                "answer": "<p>Rubber duck debugging is one of the greatest debugging techniques ever!</p>", 
                "question": "It is okay to feel like giving up!"
            }, 
            "id": "ddv1jil"
        }, 
        {
            "body": {
                "answer": "<p>Writing a question on Stack Overflow usually works for me. Not actually posting the questoin, just writing it. There has been many times when I was stuck and was like, time to ask for help. And since some people on SO gets pretty rude if you don<sq>t explain your problem down to the core I usually figure out the answer while taking all the steps needed to form a good question.</p>", 
                "question": "It is okay to feel like giving up!"
            }, 
            "id": "ddv2b5q"
        }, 
        {
            "body": {
                "answer": "<p>I agree with everything here except for one tiny little detail<colon><br><br><dq>Maybe it is easier for someone else with a different background/age?<dq><br><br>Is mostly true. As a CS-student who came in with no prior coding skills, it was a whole different playing field compared to some of classmates who had actually worked as developers. I mean I struggled hard with a database-assignment that my friend did on an afternoon. Why, well simply because he has worked with databases.<br><br>So it<sq>s always easier for someone else and at the same time it<sq>s always harder for someone else. It might be true but you<sq>re right in the sense that it<sq>s pointless to fret over it.</p>", 
                "question": "It is okay to feel like giving up!"
            }, 
            "id": "ddv035n"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve taught programmign and this is normal. The answer is to simply code more. Write smaller programs, try to solve daily challenges on codewars or /r/dailyprogrammer.<br><br>A tip is to always start every program with hello world. It<sq>s kind of weird, but even after coding professionally for over 10 years. I still always start with a simple hello world (for new projects). Junior devs often ask me why? <dq>just start writing the code<dq>. I could, but I would hate to write a ton of code hit compile and spend hours trying to fix something that isn<sq>t my code, but compiler/ide related. So I always start with something super simple and say <dq>does this compile/run?<dq> after that I find it easier since you already have an entry point.</p>", 
                "question": "I feel like whenever I have to type in my code from scratch I forget everything I have learned. Suggestions on how to correct this?"
            }, 
            "id": "d0r0iw4"
        }, 
        {
            "body": {
                "answer": "<p>Start by using comments to list out all of the steps that will lead to a solution to the problem you<sq>re trying to solve. Don<sq>t write any <sq>actual<sq> code at first,  just comments. This will get you thinking about the problem itself - what do you need the program to do to solve the problem, in what order,  are there any parts you<sq>re unsure of,  etc. Then once you think you<sq>ve got a handle on the form of the solution, start adding in code under each comment section. It<sq>s totally normal to forget the specifics of syntax,  but it<sq>s often easier to remember them if you<sq>re not also trying to figure out what to actually write! </p>", 
                "question": "I feel like whenever I have to type in my code from scratch I forget everything I have learned. Suggestions on how to correct this?"
            }, 
            "id": "d0r77na"
        }, 
        {
            "body": {
                "answer": "<p>You really just have to keep coding. It is hard to think and watch yourself think, so you just have to do it. An earnest attempt that is wrong seems to make things stick better, so practicing anything that assuages a fear of failure can help. <br><br>For me, once I started learning several ways to do the same thing I was able to code more quickly. The code review process is a wonderful experience for my learning so once you get going, try to find someone better than you to review your code. <br><br>Once you get some momentum you will quickly learn that writing code is not hard, rather it is writing simple, maintainable code is the real trick. You can get to writing code pretty quickly. Making it simple takes a while, so be kind to yourself and get ready for a lifetime of rich problem solving. <br><br>Good luck. </p>", 
                "question": "I feel like whenever I have to type in my code from scratch I forget everything I have learned. Suggestions on how to correct this?"
            }, 
            "id": "d0r2y3n"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s been one week? You haven<sq>t learned anything yet. It<sq>s supposed to be difficult. Try as hard as you can and get as close to the proper code as possible, then look up the answer and learn what you did wrong </p>", 
                "question": "I feel like whenever I have to type in my code from scratch I forget everything I have learned. Suggestions on how to correct this?"
            }, 
            "id": "d0r7nqd"
        }, 
        {
            "body": {
                "answer": "<p>Great explanation! I found it a difficult topic to understand when I was learning in Java but this is a great way to explain it. </p>", 
                "question": "A simple introduction to Big O notation."
            }, 
            "id": "crioyqv"
        }, 
        {
            "body": {
                "answer": "<p>Worth mentioning there can be more than one input to rely on such as in graph traversal. Some algorithms in that area run in O(|E| + |V|) where |E| is the number of edges and |V| is the number of vertices in a graph.</p>", 
                "question": "A simple introduction to Big O notation."
            }, 
            "id": "crioj28"
        }, 
        {
            "body": {
                "answer": "<p>As a self-taught programmer with no formal training, this was very helpful.<br><br>One thing I still dont get<colon> I<sq>ve seen anecdotes about people taking some function that runs at say O(N^(2)), and converting it to run at O(Log N).<br><br>How would one go about doing this? What type fo functions can be optimized in this way?</p>", 
                "question": "A simple introduction to Big O notation."
            }, 
            "id": "cripiit"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s worth mentioning that Big O notation is an upper limit of the growth. So saying a function is O(f(n))  (where f(n) is some function) means the algorithm runs no slower than f(n) or that it grows no faster. Technically a function that is O(n^2) is also O(n^3) and so on. <br>If you are interested the formal definition for Big O notation is that a function f(n) is O(g(n)) if there exists some constant c and n0 such that f(n) <= c*g(n) for all n >= n0.</p>", 
                "question": "A simple introduction to Big O notation."
            }, 
            "id": "crispam"
        }, 
        {
            "body": {
                "answer": "<p>* Enums<br>* Interfaces/Abstract Classes<br>* Generics<br>* Collections<br>* For-each loops<br>* Javadoc format<br>* try/catch/finally<br><br>For Java 8,<br><br>* Streams<br>* Optionals<br>* Lambdas</p>", 
                "question": "link to amazing java cheat sheet is there anything else that can be added?"
            }, 
            "id": "d5yoj6k"
        }, 
        {
            "body": {
                "answer": "<p>Pretty good for beginners or people who didn<sq>t code for a while and maybe forgot some of it.<br><br>As for more advanced stuff I feel like they<sq>re missing out on many of the things related to generics. <br><br>They are also missing things like casts and instanceof-operators and <dq>smart<dq> for-loops as in Python, which are all pretty basic imo.</p>", 
                "question": "link to amazing java cheat sheet is there anything else that can be added?"
            }, 
            "id": "d5yf0pu"
        }, 
        {
            "body": {
                "answer": "<p>Doesn<sq>t explain exactly what `static` means, which is a big issue for a lot of new programmers who tend to just add or remove it when they get compile errors.</p>", 
                "question": "link to amazing java cheat sheet is there anything else that can be added?"
            }, 
            "id": "d5yyi6u"
        }, 
        {
            "body": {
                "answer": "<p>Maybe add some basic design patterns?</p>", 
                "question": "link to amazing java cheat sheet is there anything else that can be added?"
            }, 
            "id": "d5zbfhh"
        }, 
        {
            "body": {
                "answer": "<p>Any reason why you<sq>re going with bootstrap? From my experience, unless you<sq>re using Bootstrap to rapidly toss up some site it generally allows newbies to not properly understand the DOM and how to interact with tags and selectors. <br><br>edit<colon> regardless I<sq>m going to sign up to your mailing list (please don<sq>t be spammy!) if you<sq>re open to receiving feedback/critique on what you<sq>re doing. Either way, good on ya for trying to motivate people <colon>)</p>", 
                "question": "[For Newbies] I<sq>m doing a free 6-week web development boot camp"
            }, 
            "id": "chgxzi5"
        }, 
        {
            "body": {
                "answer": "<p>Can<sq>t down vote this, initiative like this must be encouraged ! Good luck </p>", 
                "question": "[For Newbies] I<sq>m doing a free 6-week web development boot camp"
            }, 
            "id": "chgyn0q"
        }, 
        {
            "body": {
                "answer": "<p>I just signed up. I<sq>m somewhere between having beginner tuts being repetitive and intermediate tuts being over my head. Hopefully I<sq>ll learn something. <colon>)</p>", 
                "question": "[For Newbies] I<sq>m doing a free 6-week web development boot camp"
            }, 
            "id": "chgyx9t"
        }, 
        {
            "body": {
                "answer": "<p>This couldn<sq>t have been more perfect in timing, Thank You for sharing this!<br>I have done very basic web dev before that introduced me to JavaScript and barely scratching the surface on JQuery, so this should be interesting. <br><br>Hopefully you are using some analogies and metaphors to explain programming concepts, lots of pictures/charts to explain hierarchy, etc...</p>", 
                "question": "[For Newbies] I<sq>m doing a free 6-week web development boot camp"
            }, 
            "id": "chgygwq"
        }, 
        {
            "body": {
                "answer": "<p>Definitely don<sq>t shell out any money to learn how to make android apps. They are ridiculously easy to make, because a lot of people have turned all the hard stuff into click and drag in the IDE (like Android Studio).<br>https<colon>//developer.android.com/training/basics/firstapp/index.html<br>Is a good place to start. I<sq>d learn about the lifecycle of an android app, and then move onto the tutorials to make some concrete stuff. I think there are limitations to using just tutorials though. You<sq>ll be working with too many black boxes if you don<sq>t know Java/Android/etc. I don<sq>t think your FORTRAN experience is going to help too much because Java comes with objected oriented concepts that you<sq>ll need to learn. I would suggest learning Java (just how the syntax, classes, inheritance, etc) and then learning about XML (theres not much here) and then you can start building android apps with confidence.<br><br>Protip<colon> Use your phone to debug your apps. I had to use an emulator for a class once and it seriously sucks. <br><br>Have fun!</p>", 
                "question": "How to Begin App Programming - Starting with a Personal Project"
            }, 
            "id": "ddnkfv8"
        }, 
        {
            "body": {
                "answer": "<p>My friend received schoolarship in this Android basic, but he<sq>s disappointed... it<sq>s really, really basic stuff. Use free resources from internet and throw money only, if you<sq>re sure that this is a quality course/content, that<sq>ll help you a lot. You can get a ton of programming books from Humble Bundle, if you<sq>re lucky.<br><br>[Java](https<colon>//programmingbydoing.com/) tutorial    <br>Android tutorial from [Google](https<colon>//developer.android.com/training/index.html)</p>", 
                "question": "How to Begin App Programming - Starting with a Personal Project"
            }, 
            "id": "ddngqqj"
        }, 
        {
            "body": {
                "answer": "<p>head first java / big nerd ranch guide to  android<br><br>you can just pirate the pdfs </p>", 
                "question": "How to Begin App Programming - Starting with a Personal Project"
            }, 
            "id": "ddnmucp"
        }, 
        {
            "body": {
                "answer": "<p>I suggest learning the fundamentals of Java and object oriented programming before doing Android programming. </p>", 
                "question": "How to Begin App Programming - Starting with a Personal Project"
            }, 
            "id": "ddnu487"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a few that I recommend people if you<sq>re interested in more offensive security stuff (Reverse engineering, exploit development, application security, etc.). Highly recommended that you be comfortable with C and maybe assembly language if this interests you.<br><br>* [FSU Offensive Security](https<colon>//www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/)<br>* [Open Security Training](http<colon>//opensecuritytraining.info/)<br>* [Windows Exploit Development](http<colon>//expdev-kiuhnm.rhcloud.com/)<br>* [Reverse Engineering for Beginners](https<colon>//beginners.re/)</p>", 
                "question": "I want to learn cyber security where should I start?"
            }, 
            "id": "d9n6ivw"
        }, 
        {
            "body": {
                "answer": "<p>Check out https<colon>//www.reddit.com/r/learnprogramming/comments/32g958/z/cqazmcn <br><br>I saved it about a year ago, some pretty good info there. I would format the link, but not sure how to on Reddit is fun \ud83d\ude10</p>", 
                "question": "I want to learn cyber security where should I start?"
            }, 
            "id": "d9nhcpt"
        }, 
        {
            "body": {
                "answer": "<p>/r/netsec</p>", 
                "question": "I want to learn cyber security where should I start?"
            }, 
            "id": "d9nby5f"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//cybersecuritybase.github.io/ is currently being developed with new material released weekly. Though, it will probably use Java throughout the course as that is what the University of Helsinki<sq>s (http<colon>//mooc.fi/english.html) testing framework is based on.</p>", 
                "question": "I want to learn cyber security where should I start?"
            }, 
            "id": "d9n5bku"
        }, 
        {
            "body": {
                "answer": "<p>Did anyone join this previous endeavor and can say something about their experience with it?<br><br>http<colon>//www.reddit.com/r/learnprogramming/comments/1jcg0j/i_am_thinking_about_starting_a_course_soon_on_how/ </p>", 
                "question": "I\u2019m developing a course that would help you build and launch a real web application based on your own idea. I wanted to gauge interest before I launch it - what do you guys think?"
            }, 
            "id": "cq125rr"
        }, 
        {
            "body": {
                "answer": "<p>OMG I need this course! This is the most interesting thing I<sq>ve seen in days.<br><br>>Do you think a course like this would be helpful?<br><br>Maybe the most helpful thing for me right now.</p>", 
                "question": "I\u2019m developing a course that would help you build and launch a real web application based on your own idea. I wanted to gauge interest before I launch it - what do you guys think?"
            }, 
            "id": "cq136rz"
        }, 
        {
            "body": {
                "answer": "<p>I think my main problem is I have no ideas for real world applications.</p>", 
                "question": "I\u2019m developing a course that would help you build and launch a real web application based on your own idea. I wanted to gauge interest before I launch it - what do you guys think?"
            }, 
            "id": "cq1bpoc"
        }, 
        {
            "body": {
                "answer": "<p>Its probably the best way to teach web applications. Are you teaching ruby on rails, django, nodejs, or something completely different?</p>", 
                "question": "I\u2019m developing a course that would help you build and launch a real web application based on your own idea. I wanted to gauge interest before I launch it - what do you guys think?"
            }, 
            "id": "cq11dil"
        }, 
        {
            "body": {
                "answer": "<p>Are there plans for a Codecademy app in the future?</p>", 
                "question": "[PSA] Fake Codecademy app on Google Play"
            }, 
            "id": "cn2ijzf"
        }, 
        {
            "body": {
                "answer": "<p>You need to report any fake apps.</p>", 
                "question": "[PSA] Fake Codecademy app on Google Play"
            }, 
            "id": "cn2lys6"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "[PSA] Fake Codecademy app on Google Play"
            }, 
            "id": "cn2s161"
        }, 
        {
            "body": {
                "answer": "<p>~~Looks like the app was taken down, according to the link you provided. Mission accomplished.~~<br><br>Bad link.  For what it<sq>s worth, that app looks shockingly official.</p>", 
                "question": "[PSA] Fake Codecademy app on Google Play"
            }, 
            "id": "cn2nb1f"
        }, 
        {
            "body": {
                "answer": "<p>This is an excellent strategy.<br><br>Source<colon> I<sq>ve been teaching students to code for 17 years.</p>", 
                "question": "Tips for Students Learning to Program"
            }, 
            "id": "cgxu5jp"
        }, 
        {
            "body": {
                "answer": "<p>[Project Euler](https<colon>//projecteuler.net) is great for things to code.</p>", 
                "question": "Tips for Students Learning to Program"
            }, 
            "id": "cgxtugx"
        }, 
        {
            "body": {
                "answer": "<p>You basically build things you would find useful. Not only related to school, but life in general.<br><br>Want to combine all the menus of the restaurants in a food court and choose what to eat, code it!<br><br>If you found it useful, there is probably someone else who will too.</p>", 
                "question": "Tips for Students Learning to Program"
            }, 
            "id": "cgxxnb7"
        }, 
        {
            "body": {
                "answer": "<p>God damn, it seems like everyone who<sq>s someone starts programming when they<sq>re practically in middle school. It makes me feel like I missed something. </p>", 
                "question": "Tips for Students Learning to Program"
            }, 
            "id": "cgy1tzt"
        }, 
        {
            "body": {
                "answer": "<p>Saw this on twitter a while back<colon><br><br>> JavaScript makes me want to throw over the table and yell f\\*ck this sh\\*t, but I don<sq>t know what <dq>this<dq> is.</p>", 
                "question": "I can<sq>t stand javascript.."
            }, 
            "id": "czii4nf"
        }, 
        {
            "body": {
                "answer": "<p>I consider myself having excellent knowledge and a lot of experience in JS and I agree that JavaScript has terrible design flaws, and lacks a good type system.<br><br>> How am I supposed to live without static type checking?<br><br>Well, the same way people deal with dynamic typing in Python, Lua, LISP and other dynamically typed languages.<br><br>There is a flame war on dynamic vs. static languages, and I<sq>m not going to say which one is better.<br><br>But people seem to program in dynamic languages just fine.<br><br>> I just get a freaking <sq>var<sq>?<br><br>I suggest `let`. I<sq>ve been telling people JavaScript<sq>s `var` scope is terrible since I learned how it works.<br><br>> How do I not include a <sq>callback<sq> in every damn async method?<br><br>I<sq>ve explored this for some time and I must say that Promises is the best way to do asynchronous programming, and you can do it in JS.<br><br>> there<sq>s no <sq>objects<sq><br><br>Object is a basic data type in JS? Yes, they are different from <dq>objects<dq> as instances of classes having some fields, but they serve the same purpose. And Java has no real `Array[Type]` or lambdas.<br><br>> there<sq>s no <sq>scope limtations<sq><br><br>Closures? I think that closures are a nice mathematical concept that just works in JS, and yes, it<sq>s a <dq>scope limitation<dq>.<br><br>> With JS, it<sq>s like solving a puzzle, the rules of which you don<sq>t even know.<br><br>Then you need to learn JS to know the rules?<br><br>> Am I supposed to have null checks everywhere<br><br>Except you have to do null checks everywhere in Java, C#, C and many other <dq>strongly typed<dq> languages. These languages simply don<sq>t have a type system that allows you to specify that a function argument can<sq>t be null, just a pointer/reference to some sort of object.<br><br>I could argue that Java and C# have a terrible type system all day long as you argue that JavaScript has a terrible type system compared to Java and C#.<br><br>I understand that it can be painful to move to JS, but the best you can do is to learn how it works so you play the game while knowing the rules.</p>", 
                "question": "I can<sq>t stand javascript.."
            }, 
            "id": "cziii8o"
        }, 
        {
            "body": {
                "answer": "<p>Welcome to web development.<br><br></p>", 
                "question": "I can<sq>t stand javascript.."
            }, 
            "id": "czihojq"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I can<sq>t stand javascript.."
            }, 
            "id": "czii6rt"
        }, 
        {
            "body": {
                "answer": "<p>YES, thank you. 35yo female over here trying not to LOSE MY SHIT over things like calculus and a motherfucking Connect Four program that almost made my life stop being a thing a semester ago. All while trying to raise 4 basically feral children at this point because of that exact same shit. I guess it<sq>s a good thing I like being scared, otherwise I wouldn<sq>t even bother.</p>", 
                "question": "Over 40 & Coding<colon> It<sq>s never too late to start"
            }, 
            "id": "d650dvv"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this.  I<sq>m in school at 28 years old and I<sq>ve felt like I<sq>m behind for not starting sooner. And seeing someone succeed at 40+ gives me hope. </p>", 
                "question": "Over 40 & Coding<colon> It<sq>s never too late to start"
            }, 
            "id": "d64q5mu"
        }, 
        {
            "body": {
                "answer": "<p>Nice to hear. I<sq>m 45 and trying to build an impressive GitHub collection to try to get into development at the beginning of the year. I love to hear success stories like this. </p>", 
                "question": "Over 40 & Coding<colon> It<sq>s never too late to start"
            }, 
            "id": "d64uf8u"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing this. I<sq>m 43 and next month marks the one year anniversary since starting my first job as a developer.  Wish I would have majored in CS 25 years ago but it<sq>s never too late to start I guess.  This has honestly been my favorite job ever, I get to solve logic puzzles every day.</p>", 
                "question": "Over 40 & Coding<colon> It<sq>s never too late to start"
            }, 
            "id": "d64unqt"
        }, 
        {
            "body": {
                "answer": "<p>I can run it.  I have a small box at my house that runs a few Reddit bots 24/7.</p>", 
                "question": "[Meta] I wrote a bot for /r/learnprogramming that detects frequently asked questions and replies with helpful links"
            }, 
            "id": "d2ehz30"
        }, 
        {
            "body": {
                "answer": "<p>> Is this something that the /r/learnprogramming community would like to see running here?<br><br>We tried putting bold text on the submission page to get folks to read the FAQ, and that clearly has failed. Next time I would assume would be an auto bot running telling people to read the FAQ so users don<sq>t have to</p>", 
                "question": "[Meta] I wrote a bot for /r/learnprogramming that detects frequently asked questions and replies with helpful links"
            }, 
            "id": "d2ek6g1"
        }, 
        {
            "body": {
                "answer": "<p>Would it be possible for you to write a tutorial on this? I am really interested in how you the entire project works.</p>", 
                "question": "[Meta] I wrote a bot for /r/learnprogramming that detects frequently asked questions and replies with helpful links"
            }, 
            "id": "d2eolkc"
        }, 
        {
            "body": {
                "answer": "<p>I use [Openshift](https<colon>//www.openshift.com/pricing/plan-comparison.html) to run a few bots.<br><br>*****<br><br>It has a 24/7 free plan that gives you three separate <sq>gears<sq> or boxes. Used to use Heroku, but since their plan is 17h and - from what looking around I did, didn<sq>t allow persistent storage - I switched to Openshift, where each gear has 1GB of persistent storage.<br><br>Doesn<sq>t require much know-how besides just following the tutorial either. All you gotta to is (1) change `main.py` to `app.py` or (2) create an `app.py` and have it import and run `main.py`.<br><br>I can help you with openshift if you need it.<br><br>*****<br><br>Either way, good luck!</p>", 
                "question": "[Meta] I wrote a bot for /r/learnprogramming that detects frequently asked questions and replies with helpful links"
            }, 
            "id": "d2es0vt"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d be interested to know<colon> <br><br>(1) How could we make this Learning Path more useful to the community here? e.g. Track <percent> completion?<br><br>(2) Which other topics interest y<sq>all? If there<sq>s interest from the community, we<sq>ll go build more such Learning Paths.</p>", 
                "question": "A Free Curriculum To Learn Data Analysis Built By A Former Airbnb Data Scientist"
            }, 
            "id": "ch54jx4"
        }, 
        {
            "body": {
                "answer": "<p>Well... I know what I<sq>m doing with my summer</p>", 
                "question": "A Free Curriculum To Learn Data Analysis Built By A Former Airbnb Data Scientist"
            }, 
            "id": "ch5i7vt"
        }, 
        {
            "body": {
                "answer": "<p>Oh boy, so much exciting stuff on the Internet these days, I can hardly concentrate and develop my skills in some sane career direction. </p>", 
                "question": "A Free Curriculum To Learn Data Analysis Built By A Former Airbnb Data Scientist"
            }, 
            "id": "ch5iqwy"
        }, 
        {
            "body": {
                "answer": "<p>Can you link to the web development curriculum? </p>", 
                "question": "A Free Curriculum To Learn Data Analysis Built By A Former Airbnb Data Scientist"
            }, 
            "id": "ch57ck2"
        }, 
        {
            "body": {
                "answer": "<p>A lot of people learned like that, I would think, especially those of us who learned on the job.  You need to make something work, you Google the solution, you implement it, you move on.  Eventually you find that you need to Google things less and less, instead relying on what you<sq>ve already Googled and implemented for inspiration.  </p>", 
                "question": "Don<sq>t be me."
            }, 
            "id": "chut5pg"
        }, 
        {
            "body": {
                "answer": "<p>The way I compensated for that is by attempting to make over ambitious personal projects.<br><br>None of the SO threads match what I need perfectly but by stewing over 3 or 4 I can generally find out what I did wrong and how to fix it.  <br><br>If I do a tutorial there is generally a perfect fix for it out there somewhere, but when working my own design I would have to adapt the solution to better fit my problem which meant needing to learn WTF was going on.</p>", 
                "question": "Don<sq>t be me."
            }, 
            "id": "chutmxn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say your ready to join the field. </p>", 
                "question": "Don<sq>t be me."
            }, 
            "id": "chuwh7f"
        }, 
        {
            "body": {
                "answer": "<p>You kids these days with your Stack Overflows and your Googles. Why, when I was your age, we learned how to program by copying code out of the back of magazines (Byte, Ahoy, Compute Gazette) aaaaaand we liked it!  01000111 01100101 01110100 00100000 01101111 01100110 01100110 00100000 01101101 01111001 00100000 01101100 01100001 01110111 01101110 0100001 </p>", 
                "question": "Don<sq>t be me."
            }, 
            "id": "chv92fk"
        }, 
        {
            "body": {
                "answer": "<p>Neat!  BTW I like the picture... That captures how I feel about modern art.</p>", 
                "question": "I<sq>m working on a how-to-use Github guide aimed at non-web-developers. Here<sq>s what I have so far"
            }, 
            "id": "cgm7qh6"
        }, 
        {
            "body": {
                "answer": "<p>Next tutorial for you<colon> Setting up Git on outside servers (not Github pages). I<sq>d use that! ;)</p>", 
                "question": "I<sq>m working on a how-to-use Github guide aimed at non-web-developers. Here<sq>s what I have so far"
            }, 
            "id": "cgm8oc2"
        }, 
        {
            "body": {
                "answer": "<p>Have you checked out the existing resources?<br><br>https<colon>//github.com/blog/392-intro-to-git-for-designers</p>", 
                "question": "I<sq>m working on a how-to-use Github guide aimed at non-web-developers. Here<sq>s what I have so far"
            }, 
            "id": "cgm8na0"
        }, 
        {
            "body": {
                "answer": "<p>Just sent this to a non-technical artist friend who had bee talking about getting a website, thanks!<br><br>Also, nothing serious, but your page title is a little off<colon><br>> Using Github Pages to *building* web portfolios from scratch</p>", 
                "question": "I<sq>m working on a how-to-use Github guide aimed at non-web-developers. Here<sq>s what I have so far"
            }, 
            "id": "cgma4r4"
        }, 
        {
            "body": {
                "answer": "<p>Wow, I<sq>ve learned more about how git works and why it<sq>s necessary by watching this 6 minute video than by taking a few classes from [this interactive free course on CodeSchool](http<colon>//try.github.io/levels/1/challenges/1). Amazing! (Frankly, this course seemed cool, and I<sq>m sure it is, but I was unable to grasp any real knowledge from it.)<br><br>**A question for the more experienced<colon>** I<sq>m still learning programming, and still haven<sq>t reached the point where I<sq>m interacting with git. I sure will, though, and I loved this graphical approach used by Ungit. But I<sq>m afraid that by using a graphical interface from the very start, I will never learn how to used Git the traditional way, and that it will do more harm than good. What would you say about this? <br><br>Should I learn the traditional text-based usage first, then upgrade to the GUI, or should I not burden myself with the terminal (I<sq>ve been avoiding them all my life, but then again it was just recently that I decided to learn coding) and just trust the GUI, knowing that it will be easier for me to use the text commands later on, if needed, since I already have a mental image of what I<sq>m doing based on using the GUI?<br><br>Sorry for the long question.</p>", 
                "question": "For anyone who<sq>s struggling with Git<colon> Here<sq>s a really nice GUI to help you visualize what<sq>s going on in your repository."
            }, 
            "id": "cf1sqg5"
        }, 
        {
            "body": {
                "answer": "<p>Holy fuck I need this in my face. I<sq>m definitely hooking everyone at work with this mother fucking wicked tool.</p>", 
                "question": "For anyone who<sq>s struggling with Git<colon> Here<sq>s a really nice GUI to help you visualize what<sq>s going on in your repository."
            }, 
            "id": "cf1o0ro"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to see the textual command executed for every action you take in the UI.</p>", 
                "question": "For anyone who<sq>s struggling with Git<colon> Here<sq>s a really nice GUI to help you visualize what<sq>s going on in your repository."
            }, 
            "id": "cf1tdy1"
        }, 
        {
            "body": {
                "answer": "<p>Oh man, this guy is a millionaire in the making. I don<sq>t see how a development company wouldn<sq>t buy this great tool.<br><br>Edit<colon> It<sq>s open source, this guy is awesome, what a great tool. </p>", 
                "question": "For anyone who<sq>s struggling with Git<colon> Here<sq>s a really nice GUI to help you visualize what<sq>s going on in your repository."
            }, 
            "id": "cf1swfa"
        }, 
        {
            "body": {
                "answer": "<p>This is not a bad question and I don<sq>t think it should be downvoted*. To answer this question sufficiently requires knowing about how lots of different mechanisms work on the internet, and any good programmer should understand how this sort of thing is put together in order to be effective.<br><br>Here are the systems/steps involved<colon><br><br>* Purchase a domain name from a registrar. Let<sq>s say you purchase *yuonolope.com* from a registrar like Dynadot.<br>* Obtain access to a DNS server (well, at least two actually) that will act as the authoritative domain name server for your new name. You will often get this service for free from the registrar, or you can use somebody else<sq>s, or you can host your own. <br>* Now you need a *mail server* to process mail for yuonolope.com. This is the place the mail will be sent and stored for you to read it. You can create your own mail server, or you could use somebody else<sq>s (like gmail for example).<br>* If you use your own, you<sq>ll configure the mail server and then also configure mailboxes on that mail server. So for example, if you want to receive email for the mail address happypappy@yuonolope.com, you will configure a mailbox on the mail server to receive email for that name.<br>* If you use somebody else<sq>s email server like gmail, the exact steps will vary. [Here are the steps for gmail](https<colon>//support.google.com/a/answer/53295?hl=en). Basically though you will be doing some configuration such that when gmail<sq>s (or whoever<sq>s) email server receives an email addressed to happypappy@yuonolope.com, it knows to deliver it to your gmail inbox.<br>* In either case (your own email server or somebody else<sq>s), you now will configure your authoritative domain name server with an MX record to point to the correct server. If it<sq>s your own email server you<sq>ll create an MX record for yuonolope.com that points to it. If it<sq>s gmail the MX record will point to gmail<sq>s email server. The MX record is how other email servers figure out where to send mail addressed to @yuonolope.com. When your friend<sq>s email server gets an email addressed to happypappy@yuonolope.com, that email server will ask DNS for the MX record for yuonolope.com, and that will tell it to send the mail to the IP address listed in the MX record.<br><br>I can break this down in more detail for you but that is all I have time for right now. Hope that helps.<br><br>*EDIT<colon> at the time I answered this, the original post had a score of -1.<br><br>EDITEDIT<colon> If you<sq>re interested, I embellished on how SMTP servers operate in [this thread](https<colon>//www.reddit.com/r/learnprogramming/comments/3rqxwc/how_do_custom_email_addresses_work/cwrx0va?context=1).</p>", 
                "question": "How do custom e-mail addresses work?"
            }, 
            "id": "cwqkm3x"
        }, 
        {
            "body": {
                "answer": "<p>I do this for a living! Good question. Email is kinda complicated, but essentially it<sq>s a bunch of SMTP servers that forward mail to each other until it makes it to your inbox on an IMAP/POP3 server somewhere. Then you use an email client to access the server.<br><br>> What are the mechanics behind it?<br><br>First, you have a domain. You set up DNS for this domain, which is basically just a bunch of names that map to a bunch of addresses. Godaddy can host this for you for free, which is what most people do.<br><br>One of the DNS record types is called <dq>MX<dq>. The MX records for <dq>bigbobblog.com<dq> would point to where your mail server is (usually, you have at least two addresses for your mail server). Looks like this<colon><br><br>    bigbobblog.com  IN MX email.secureserver.net<br><br>That would tell the whole internet that you are storing email for bigbobblog.com at GoDaddy.<br><br>When someone sends email to admin@bigbobblog.com, their email server looks up the MX record, calls GoDaddy and says <dq>HELO<dq> and sends an email (it<sq>s actually Godaddy that says HELO, but SMTP jokes are great!). If Godaddy sees that it has a mailbox for admin@bigbobblog.com, it sends a message to your mail server that says <dq>Got it! they got your mail.<dq>. If Godaddy doesn<sq>t have a mailbox, it will send an error such as <dq>This person doesn<sq>t exist at this domain, sorry!<dq>.<br><br> > On GoDaddy.com for example, you have to pay an additional fee if you opt in for this service. Is this the storage fee or what?<br><br>Yes. Storage of the email and the running of the actual email server. If you were to run your own mail server, Godaddy won<sq>t charge you for just pointing the DNS record somewhere.<br><br>> It seems like if you own the domain name, you can somehow link it to gmail, and then login through gmail. I can<sq>t really test this since I haven<sq>t bought one yet, but (again) how does this even work?<br><br>You have to run a SMTP server, but the requirements are significantly less. Having an IMAP/POP server that people can log in to and check is one thing, but simply forwarding mail to another address is really easy. The SMTP server just has a list of aliases and what addresses they should go to. This is called a Postfix Virtual Workgroup. The SMTP servers just keep forwarding the mail around until it hits an end destination.<br><br>Namecheap actually has a free (?) service where they don<sq>t host any mailboxes that you can log in to, but they will forward mail to wherever you want. The reason it<sq>s free is because it<sq>s easy to run and never has end user problems (no one ever logs in to it to check anything, making it a lot simpler mechanism). If you just want your own email at your own domain without any other features, that<sq>s what I would do.<br><br><br>EDIT<colon> There<sq>s a big reason that no one is crazy enough to run their own mail server<colon> SPAM. If you don<sq>t configure your relay correctly, spammers WILL use it and in short order all the mail from the server will get blocked By Gmail, Hotmail, etc. Mail servers are hard to configure correctly and are often big targets for hackers because they are easily monetized by sending spam. Anyone who runs a mail server basically spends all day managing IP reputation and it<sq>s a TOTAL PAIN and don<sq>t do it.<br><br>We run our own SMTP stack. For anything TRULY important we use Gmail and we are moving to using an SMTP service like Mandrill instead because of how big of a pain it is.</p>", 
                "question": "How do custom e-mail addresses work?"
            }, 
            "id": "cwqrhwg"
        }, 
        {
            "body": {
                "answer": "<p>All of the other responses are are correct. But to me, I prefer setting up my domains as a wildcard email. The domain registrar I use charges extra for them hosting email inboxes (inexpensive, but I am cheap), but doesn<sq>t charge for forwarding addresses or wildcard addresses. So I just setup the wildcard to forward `[anything]@mydomain.com` to forward to my normal gmail inbox. Then in gmail, setup a rule that checks for any email that comes through `@mydomain.com` to tag the message with `mydomain.com`. This allows me to use any or multiple email address I want. I typically use this when signing up on websites with things like `[website-name]@mydomain.com`. Then if I start getting spam I know who lost/sold my information. Plus it is easy to block everything that comes into a specific domain.</p>", 
                "question": "How do custom e-mail addresses work?"
            }, 
            "id": "cwqrvm1"
        }, 
        {
            "body": {
                "answer": "<p>Purchase a domain from a decent registrar (read **not** Godaddy.) and host the email yourself on a cheap VPS.<br><br>You can setup your domain to use gmail, or any other (Office 365, zohomail, etc.) service. This is a matter of DNS records. You can even specify your own nameservers if you want to mess with that.</p>", 
                "question": "How do custom e-mail addresses work?"
            }, 
            "id": "cwqvojq"
        }, 
        {
            "body": {
                "answer": "<p>>I know everyone likes answers personalized for them, but I think there should just be **one thread,** where all newbies can find guidance.<br><br>There is. It<sq>s called [r/learnprogramming](http<colon>//www.reddit.com/r/learnprogramming)</p>", 
                "question": "My advice to new programmers so we can avoid <dq>I am a new programmer where do I start ?<dq> threads every two days."
            }, 
            "id": "c485cfr"
        }, 
        {
            "body": {
                "answer": "<p>yeahh.... those threads will be back once this hits page 2. </p>", 
                "question": "My advice to new programmers so we can avoid <dq>I am a new programmer where do I start ?<dq> threads every two days."
            }, 
            "id": "c4847b7"
        }, 
        {
            "body": {
                "answer": "<p><br>I still completely disagree with this stuff.<br><br>To start you should have a problem that requires a solution. Then you should research the correct tool chain to use to solve the problem. Then learn enough about that tool chain to reach your end goal.<br><br>The faster beginners realize this the better the software they produce. The faster it can be developed and the faster / more reliable it runs.</p>", 
                "question": "My advice to new programmers so we can avoid <dq>I am a new programmer where do I start ?<dq> threads every two days."
            }, 
            "id": "c485zbi"
        }, 
        {
            "body": {
                "answer": "<p>As someone who posted a <dq>where do I start<dq> thread a few days ago, I appreciate add7<sq>s effort but his thread didn<sq>t cover specifically what I was looking for - so I still found plenty of value in posting what I did.<br><br>My post was asking about where to start if I want to learn some back-end web development. I only got about 4 replies but it moved me in the right direction (creating a local environment with WAMP, PHP, MySQL, potentially using Python etc). I am now doing some more targeted google searches and finding lots to read and learn on my own. My next post here will surely be more specific, asking about MySQL, CGI or something else that stumps me along the way.<br><br>Programming to me seems to be all about building on what you know. When you don<sq>t know anything at all, it is extremely valuable to have someone point you to the first <dq>bricks<dq> so that you can start playing with them and have something to start <dq>constructing<dq>.<br><br>And this is what I think this subreddit was all about. So I for one don<sq>t really mind the <dq>where do I start<dq> questions. Just my 2 cents.</p>", 
                "question": "My advice to new programmers so we can avoid <dq>I am a new programmer where do I start ?<dq> threads every two days."
            }, 
            "id": "c48dgc0"
        }, 
        {
            "body": {
                "answer": "<p>They have a series of 6 courses called fundamentals of computing. Everything is in python, and you gradually get exposed to many of the fundamental principles of computer science.<br><br>I<sq>m just about to start the 6th and last course in the program. Highly recommend it to everyone. I am 100x better now than I was when I started the first course (the one OP linked to).<br><br>MOOCs in general are amazing, give them a try.</p>", 
                "question": "Anyone wanting to learn Python this course is now open in coursera. It<sq>s looks like awesome."
            }, 
            "id": "cvmo5pc"
        }, 
        {
            "body": {
                "answer": "<p>If this is the Rice University course, it<sq>s great. I can<sq>t recommend it enough. Warning, they do use their own online interpreter with it<sq>s own module. You cannot directly apply the language you learn to the real world. However, the problem solving and large scale things were invaluable.<br></p>", 
                "question": "Anyone wanting to learn Python this course is now open in coursera. It<sq>s looks like awesome."
            }, 
            "id": "cvmn1h3"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t recommend this course enough! The profs LOVE Python and they know how to teach it. This course started off my Python journey too <colon>)</p>", 
                "question": "Anyone wanting to learn Python this course is now open in coursera. It<sq>s looks like awesome."
            }, 
            "id": "cvmpsma"
        }, 
        {
            "body": {
                "answer": "<p>Awesome.<br><br>Can I start doing this after I complete codecademy<sq>s python course?</p>", 
                "question": "Anyone wanting to learn Python this course is now open in coursera. It<sq>s looks like awesome."
            }, 
            "id": "cvmvve0"
        }, 
        {
            "body": {
                "answer": "<p>Hey guys, author here. Would love to have your feedback, and also suggestions of new related content that you<sq>d like to read.<br>Cheers,<br>Raul.</p>", 
                "question": "A Gentle Guide to Machine Learning"
            }, 
            "id": "cv2zq9i"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "A Gentle Guide to Machine Learning"
            }, 
            "id": "cv2ism2"
        }, 
        {
            "body": {
                "answer": "<p>The best resource I have found so far, although perhaps less gentle, is Colah<sq>s Blog http<colon>//colah.github.io/</p>", 
                "question": "A Gentle Guide to Machine Learning"
            }, 
            "id": "cv2xacu"
        }, 
        {
            "body": {
                "answer": "<p>Uh-oh... Is this the beginning of Skynet? lol jk Thanks for the link <colon>)</p>", 
                "question": "A Gentle Guide to Machine Learning"
            }, 
            "id": "cv2ksjz"
        }, 
        {
            "body": {
                "answer": "<p>You could check out codewars<colon> https<colon>//www.codewars.com/</p>", 
                "question": "Any good sites/apps for small coding exercises?"
            }, 
            "id": "dcmwcmf"
        }, 
        {
            "body": {
                "answer": "<p>[CodinGame](https<colon>//www.codingame.com/start) is one of my favorites. It has plenty of training levels ranging from beginner to very difficult. Also has multiplayer games, coding challenges, and helpful forums. Started learning to code a few months ago with this and now I know more than my class has been teaching </p>", 
                "question": "Any good sites/apps for small coding exercises?"
            }, 
            "id": "dcn4dyt"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//projecteuler.net/ </p>", 
                "question": "Any good sites/apps for small coding exercises?"
            }, 
            "id": "dcn53c8"
        }, 
        {
            "body": {
                "answer": "<p>I think this should work<colon> https<colon>//www.hackerrank.com/domains/cpp/cpp-introduction <colon>)</p>", 
                "question": "Any good sites/apps for small coding exercises?"
            }, 
            "id": "dcmw4ep"
        }, 
        {
            "body": {
                "answer": "<p>Yes please</p>", 
                "question": "Would anyone be interested in programming exercises on their phone?"
            }, 
            "id": "cktzg1z"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know about that, there<sq>s a reason why no one uses phones to do programming, the small touchscreen would definitely frustrate me in the long run. <br><br>Then again, as you yourself said, kid<sq>s these days grow up with this kind of technology in hands, so it might become common to see future programmers using it. I<sq>d say give it a shot.</p>", 
                "question": "Would anyone be interested in programming exercises on their phone?"
            }, 
            "id": "cku0oai"
        }, 
        {
            "body": {
                "answer": "<p>Idk what language your using but qpython is around already for Python. It<sq>s an IDE for android.</p>", 
                "question": "Would anyone be interested in programming exercises on their phone?"
            }, 
            "id": "cku0js6"
        }, 
        {
            "body": {
                "answer": "<p>Sounds a bit like what the [Hacked App](http<colon>//www.hackedapp.com/) does (Beta). I recently ran through it<sq>s series of problems and it solves the problem of small touchscreen keyboards for programming pretty well. The biggest problem I had was only being able to see a few lines of code at once, especially with the keypad up.<br><br>I think that something like Hackpad (see Hacked), but optimized for tablets could be a viable way to program on the go. I really liked the flexibility of a touchscreen as an input, with the changing <dq>keyboard<dq> depending on what was expected next. Obviously phones could work too, but the small screen really limits being able to overview code.<br><br>Simply put, I didn<sq>t find the keypad frustrating at all, although other things did frustrate me, and as a result, couldn<sq>t put the game down till I had completed all the challenges. I think that means solving programming exercises on a phone is definitely something people will be interested in and be able to keep doing with out getting frustrated.</p>", 
                "question": "Would anyone be interested in programming exercises on their phone?"
            }, 
            "id": "cku1qkk"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t have this. I<sq>m awesome at everything....</p>", 
                "question": "How I learned to work with Impostor Syndrome and stop feeling like a fake all the time"
            }, 
            "id": "crh8rnv"
        }, 
        {
            "body": {
                "answer": "<p>I was reading about impostor syndrome and software development just seconds before I visited this subreddit. I came across a post, [<dq>Overcoming Impostor Syndrome<dq>,](https<colon>//medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5) by Alicia Liu. I really liked this part<colon><br><br>>Unlike learning other skills where one can expect to be reasonably competent after sufficient practice, programming largely consists of constantly failing, trying some things, failing some more, and trying more things until it works. **One of the biggest differences between experienced and novice programmers is that experienced programmers know more things to try**. </p>", 
                "question": "How I learned to work with Impostor Syndrome and stop feeling like a fake all the time"
            }, 
            "id": "crhahyh"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How I learned to work with Impostor Syndrome and stop feeling like a fake all the time"
            }, 
            "id": "crhcz1f"
        }, 
        {
            "body": {
                "answer": "<p>Amazing post dude, I feel like we are spirit animals. I recently started going on long walks every day and I find the time away from the computer screen, breathing fresh air, with the sun or rain on my face, is sustenance I<sq>ve been depriving my mind and body. <br><br>You<sq>ve convinced me to give meditation a try.</p>", 
                "question": "How I learned to work with Impostor Syndrome and stop feeling like a fake all the time"
            }, 
            "id": "crh418a"
        }, 
        {
            "body": {
                "answer": "<p>So, you want to learn to be a programmer... I think I<sq>ll take some time and write out a really long post about the steps you should look to taking so I can reference it later, as this comes up fairly often.<br><br>    Part 1<colon> Is programming right for me?<br><br>1.  The first thing you<sq>ll want to do is take a look at yourself.  Do you like math?   Do you like Logic problems?   Are you good at breaking complex problems into parts?  If you answered yes to one or more of these, keep reading, if that stuff sounds like a drag, please save yourself some time and look into something else!  That is all that programming is, and if you delve deeper you will find just that.<br><br>2. Can you keep a lot of jargon that is similar in sound but COMPLETELY different in practice straight in your head?   Things like Initialize and Instantiate are a good example of this.  They are both techy sounding words that begin with I, but they mean quite different things.<br><br>3. When you see a problem, do you see a <dq>flow<dq> to it?  One where you can identify the beginning and end, as well as the majority of the work you<sq>ll need to do in the middle even before beginning?  This is a major part of programming, known as modularization.<br><br>4. Are you the type of person who likes to keep very clean notes?  Documenting processes and methods / functions in your code will not only make it easier for you, but for others to help you in programming.   Being incapable of this will severely limit you in the long run.<br><br>5. Lastly, are you the type of person who works well with others?   Like it or not, programming is not a solo position most of the time.   The vast majority of the time you will be working with an established team on a pre-existing project.  You will rely on your team to help you, and they will likewise rely on you.<br><br><br>        Part 2<colon> What do I need to learn<br><br>A. This is a tricky question that sort of defies reason a bit.   It<sq>s really up to you and the position that you want.   Do you want to work on back-end development or front-end?    (Aka. Do you want to work with data serialization / storage / handling, or data presentation)  Based on your answer you should look into completely different courses.<br><br>A1. If you are into Front-End development, you should look into web-development.   This will probably have you learning a mixture of languages like Xhtml, Css3, Jquery, javascript, php, mySql, and maybe some noSql solutions like MongoDB.    You<sq>ll have a choice of working with Windows, Mac, or a flavor of unix (most likely the prior two in a professional setting) due to your stuff being mostly server-side anyways.<br><br>A2. If you want to get into back-end programming, which is more <sq>function over form<sq> as it were, you<sq>ll likely be working on a few different languages.  Starting with something like Python or Visual Basic for RAD development and then moving into more structured programming languages like Java / C++ / C# for your actual full-scale projects.   There are many other languages to look into outside of the above, but if you<sq>re looking for a job, those 3 will get your foot in the door.  These programming languages are typically known as <sq>Object Oriented languages<sq> whereas most web languages are not.   (Php has objects, as do many server-side languages)  These languages will have robust frameworks and different methods for handling things as compared to many web-languages.   <br><br>    Part 3<colon>  What can I do to get better at programming?<br><br>1. The easiest way to get better at programming, is to program.   Yes, you heard me right.   Program stuff.  Spend time in your IDE (Integrated Development Environment), and make things that work.    If you get stuck, google it!  There is no shame in not-knowing things.   Programming languages / Syntax take a lifetime to master and even then there<sq>s little rule breakers that will throw off people.   After writing swing manually for java I can tell you honestly that sometimes Syntax is REALLY difficult.  <br><br>2. Set yourself some goals, and then break those goals into parts.   What does this mean?   Well, an example I<sq>ve given to some java people I<sq>ve helped<colon>   Make me a program that uses swing to display the weather in a user<sq>s timezone of choice (specified at boot).   So this means a few things<colon>  GUI, External API<sq>s, User Input, data handling, data parsing, and a little bit of that front-end design mentality.   Then if they can do that you just ramp up.   Make me a media player that handles files and feeds them into an audio codec... And all the way up to real programming.   This type of project is hugely valuable to someone since it identifies their level of competency / comfort with different libraries, as well as different types of problems.   <br><br>3. Grab some books, it<sq>s never too late, nor too early to start reading up on the problem that you<sq>re having.  This works really well with some type of schooling, since many people seem to lose interest in reading a book, as many types of programming book can be lengthy / dry in nature.<br><br><br>        Part 4.  What can I do to increase my chances of getting a job?<br><br>A.  There<sq>s a lot of good skills that you can work on, in no particular order<colon><br><br> * Communication<br> * Documentation<br> * Acceptance of criticism<br> * Speed to adapt to new situations<br> * Ability to reason difficult problems<br> * Ability to identify why something isn<sq>t working<br> * Ability to see why something won<sq>t work before it breaks.<br><br>B. There<sq>s also some programs / protocols that you can familiarize yourself with to have better chances at your job.  (Again, in no real order)<br><br> * Maven or Ivy (for Dependency Management)<br> * Subversion, Mercurial, or Git (for Source management)<br> * Netbeans / Eclipse / Visual Studio experience (with above plugins / add-ons working<br> * One or more Unix-Based operating systems.<br> * Putty (or another client) as well as SSH / Telnet experience<br> * A solid understanding of the OSI model and how it works with whatever you<sq>re programming.  <br> * A basic understanding of computers, networks, and how your code gets translated from what you type, to what the user sees and why.   <br><br><br><br>          Part 5<colon> Sidenotes<colon><br><br>1. You are never too old to learn to program.   There comes a point where companies will hesitate in giving you a job due to how long they expect you<sq>ll remain in the workforce, but it is my opinion that you are never too old to learn.<br><br>2. If you<sq>re struggling, that<sq>s normal.   This isn<sq>t how your brain is used to working, and it<sq>s possible to feel more tired after a day of programming than a day of running.   Your brain just aches in a way that you can<sq>t put into words.  You<sq>ll get used to this over time.<br><br>3. Does programming require math?   Not really.   But if you really STRUGGLE with math, a lot of the concepts carry over into programming.   If you couldn<sq>t handle the problem solving in math, you likely won<sq>t here.<br><br>4. What<sq>s it like to work in programming?   Decent pay (managers / co-workers that don<sq>t code will make more than you), decent benefits, little room for professional growth, stressful / mentally taxing when deadlines are near.   Reqs / frameworks being changes while you<sq>re working on projects.   It<sq>s not for everyone.<br><br><br><br>That should just about cover it.<br><br><br>Edit<colon><br><br>  **If you answered yes to one or more of these, keep reading, if that stuff sounds like a drag, please save yourself some time and look into something else!**<colon>   I<sq>m not saying you need to love math, but math does play a role in a LARGE amount of programming (good luck ever doing hardware if you don<sq>t know math).  OOP does not focus strongly on math, but there will come a time when you wish you knew it better.   The degree for CS requires a fair bit of math (through calc II usually + discrete math), that<sq>s not to say that you <dq>CAN<sq>T PROGRAM WITHOUT MATH<dq> just that certain things may be hard for you if you<sq>re ever faced with them, that<sq>s all.</p>", 
                "question": "I want to really dig into programming but I am feeling a bit overwhelmed."
            }, 
            "id": "c6t8vdk"
        }, 
        {
            "body": {
                "answer": "<p>There is a lot of jargon.  But there<sq>s a lot of jargon in any specialty.  If I wanted to learn physics I would expect that the casual chatter that people who have done it for years would be over my head.<br><br>To get over that, there<sq>s really no other way I know of but to immerse yourself in it.  Don<sq>t worry if some/most of it goes over your head at first.  Keep doing it.  You<sq>ll start seeing words, phrases, and concepts repeated in different places.  Every time you do, it will become a little clearer.<br><br>As far as math goes, basically the more you have the better.  I don<sq>t know that I would say it<sq>s absolutely necessary to be a programmer, but it depends what you want to do.  Knowing more of it makes you a better programmer if you ask me.<br><br>Specifically, I would shoot for at the very least a solid algebra background, preferably you would learn some calculus and discrete math.  But again, this all depends on how far you want to go with programming.<br><br>The good news is that you have loads of resources literally at your fingertips.<br><br>www.coursera.org has a programming class that started on Oct 15th, an algebra class, a pre-calc class, and a calculus class all starting in January.<br><br>www.udacity.com has the CS101 that tj mentioned.<br><br>www.edx.org has another intro programming class that started Oct 15th.<br><br>etc ...</p>", 
                "question": "I want to really dig into programming but I am feeling a bit overwhelmed."
            }, 
            "id": "c6t3ukf"
        }, 
        {
            "body": {
                "answer": "<p>As far as math goes, programming primarily requires discrete mathematics, which involves a fair amount of proofs.<br><br>2D video game programming will also require heavy use of trigonometry.  For instance, how would you make one object fly in a circle?  You could use parametric equations, with x = cos(t) and y = sin(t) as t ranges from [0, 2pi).  At what angle would one object have to fire a bullet in order to hit another object that<sq>s located at an (x, y) offset?</p>", 
                "question": "I want to really dig into programming but I am feeling a bit overwhelmed."
            }, 
            "id": "c6t3q1a"
        }, 
        {
            "body": {
                "answer": "<p>If you have Windows 8, why don<sq>t you start making a windows 8 app? You can write in Javascript + HTML + CSS, and the Microsoft tutorials are very friendly. You then get to run your app right on your computer.<br><br>As for math, basic geometry for games, and linear programming (4 * x = 24, solve for x) is what you<sq>ll be using most.</p>", 
                "question": "I want to really dig into programming but I am feeling a bit overwhelmed."
            }, 
            "id": "c6t9g9s"
        }, 
        {
            "body": {
                "answer": "<p>Put aside your ego and ask them. <br><br>One of my favourite professors once said this in class when nobody was answering his question<colon> <dq>If you guys  say more stupid shit, we will arrive at the smart shit way quicker<dq></p>", 
                "question": "I feel lost. I<sq>m at the end of my second year in computer science and I consider myself decent at programming. However whenever my colleagues talk about it they use words and phrases I never heard/understood before. How can I get a better understanding of my field?"
            }, 
            "id": "cowyczk"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been doing this a long time and that still happens to me.  No one knows everything, don<sq>t be afraid to ask.  Or make yourself a note and look it up later.<br><br>I<sq>m sometimes in meetings where I ask the speaker what the hell he<sq>s talking about & find out no one else knows either <colon>)</p>", 
                "question": "I feel lost. I<sq>m at the end of my second year in computer science and I consider myself decent at programming. However whenever my colleagues talk about it they use words and phrases I never heard/understood before. How can I get a better understanding of my field?"
            }, 
            "id": "cowuxoh"
        }, 
        {
            "body": {
                "answer": "<p>Ask them to explain it.  You might discover they don<sq>t know as much as they say they do.</p>", 
                "question": "I feel lost. I<sq>m at the end of my second year in computer science and I consider myself decent at programming. However whenever my colleagues talk about it they use words and phrases I never heard/understood before. How can I get a better understanding of my field?"
            }, 
            "id": "cowvsqb"
        }, 
        {
            "body": {
                "answer": "<p>I have been out of school for ~ 10 years. This still happens. CS is hard stuff and it is a HUGE field.</p>", 
                "question": "I feel lost. I<sq>m at the end of my second year in computer science and I consider myself decent at programming. However whenever my colleagues talk about it they use words and phrases I never heard/understood before. How can I get a better understanding of my field?"
            }, 
            "id": "cowwr5v"
        }, 
        {
            "body": {
                "answer": "<p>Oh man, yeah. There<sq>s a lot of cargo cult mentality for people learning to code. And that<sq>s not helped by geeks/software devs who don<sq>t realize they shouldn<sq>t advise beginners to learn a lot of specialized things just because that<sq>s what they do in their jobs.<br><br>Like, I often see on /r/learnprogramming people asking, <dq>Do I have to buy a new computer that to start programming?<dq> It<sq>s normal for beginners to have anxiety about things that don<sq>t make any difference, so thanks for posting this.<br><br>EDIT<colon> typo</p>", 
                "question": "Cautionary Tale about Learning to Code"
            }, 
            "id": "cm7pon7"
        }, 
        {
            "body": {
                "answer": "<p>Oh wow this was me for quiet a while.  I finally snapped out of it and just said <dq>fuck it, I<sq>m doing everything in C.<dq></p>", 
                "question": "Cautionary Tale about Learning to Code"
            }, 
            "id": "cm7sxrd"
        }, 
        {
            "body": {
                "answer": "<p>The post suggests to pick an os Linux or mac. Windows is not included,  why? </p>", 
                "question": "Cautionary Tale about Learning to Code"
            }, 
            "id": "cm7rbv2"
        }, 
        {
            "body": {
                "answer": "<p>This is a great article. So many people get stuck in the weeds.</p>", 
                "question": "Cautionary Tale about Learning to Code"
            }, 
            "id": "cm7ou1t"
        }, 
        {
            "body": {
                "answer": "<p>No.  Not that Ive been able to find.  But there are other great resources for learning Java. <br><br>#1.  https<colon>//www.udacity.com/course/cs046  <br><br>The online course is divided into hundreds of 2 minute videos and quick problems, with tests at the end of each section.<br><br>#2.  http<colon>//codingbat.com/<br><br>Not an online course.  Just a series of problems to test and expand the skills you already have.<br><br>#3.  http<colon>//programmingbydoing.com/<br><br>Again, not an online course.  Just a huge volume of problems.<br><br>#4.  http<colon>//chortle.ccsu.edu/java5/index.html#01<br><br>A series of slides.  Very well written slides tho.  <br><br>The way Im using them, is first I completed the #1.  Then I moved onto #2 until I got stuck with the recursion.  Then I moved onto #3 until I got stuck on File Inputs.  Thats when I used #4 to learn about FileInputs, and jumped back to #3.  Once Im done with #3, I<sq>ll dive into #4 again and learn about recursion and complete #2.<br><br></p>", 
                "question": "I really liked Codeacademy<sq>s course for Python. Is there anything similar for C++ and Java?"
            }, 
            "id": "chtzpmi"
        }, 
        {
            "body": {
                "answer": "<p>C++ is not really a language you will be able to get good at without sinking in serious time and effort, and a book to go along with (IMHO of course). I<sq>d recommend Accelerated C++ to get you off to a running start, and once done you can use the intermediate books to get strong on the (many, many) corner cases. <br><br>Another book I don<sq>t see recommended much but is a personal favourite is Object oriented programming using C++ by Josuttis. Josuttis is more famous for his excellent books on the STL and templates.<br><br>If you sink in some quality time into accelerated c++ you should be very well off, and its a small book compared to some others.</p>", 
                "question": "I really liked Codeacademy<sq>s course for Python. Is there anything similar for C++ and Java?"
            }, 
            "id": "chu4enm"
        }, 
        {
            "body": {
                "answer": "<p>[Bento Box](http<colon>//www.bentobox.io/) lists tutorials for a ton of languages and concepts. Plus, if you click on a box, it will highlight other related boxes that you might want to learn next. Everything from API and MVC overviews to tutorials on Java, HTML, SASS, Angular, Scala or whatever. Probably not a bad place to checkout for beginners.</p>", 
                "question": "I really liked Codeacademy<sq>s course for Python. Is there anything similar for C++ and Java?"
            }, 
            "id": "chu1293"
        }, 
        {
            "body": {
                "answer": "<p>What did you like about it? I<sq>m looking to learn Python and am deciding between a few methods.</p>", 
                "question": "I really liked Codeacademy<sq>s course for Python. Is there anything similar for C++ and Java?"
            }, 
            "id": "chu1obw"
        }, 
        {
            "body": {
                "answer": "<p>This course is described as an introduction to computer science, but the course curriculum seems to be vastly different from similar courses. I<sq>ve already completed 106a from Stanford, and cs50 looks it may be a good course to take in place of 106b.<br><br>BTW taking these free online courses offered by Ivy League schools has made me regret not pushing harder to get into these more prestigious schools. The professors are absolutely fucking amazing. </p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course is coming up"
            }, 
            "id": "cbxo7lz"
        }, 
        {
            "body": {
                "answer": "<p>Thank you very much for sharing this! This is the first time I<sq>ve heard of it, and am now looking forward to attending (online) after work. I<sq>ve been looking for an opportunity like this for a long time, and I can<sq>t not do it now <colon>)<br><br>Thanks again!</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course is coming up"
            }, 
            "id": "cbxhnh0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course is coming up"
            }, 
            "id": "cbxodii"
        }, 
        {
            "body": {
                "answer": "<p>I want to take it just to tell people I<sq>m taking classes at Harvard lol</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course is coming up"
            }, 
            "id": "cbxjj1i"
        }, 
        {
            "body": {
                "answer": "<p>No two days are alike, honestly. I get in at around 9<colon>30, chat with my coworkers for a little bit, get some coffee or breakfast from the common area. I go home usually at 6 or so, but can stay later if we<sq>re working on something together. There<sq>s usually about 3--4 hours of meetings a week, but that<sq>s because my team are in a shared space and we talk about architecture and plan features constantly (no need to have official meetings about it). <br><br>Every 6 weeks we release, so I assign myself on one feature or bug at a time after it<sq>s been designed by our design team (if needed), do it, and mark it complete to get ready for code review. If I get bored, I<sq>ll code review something a coworker has done to prepare it for release.<br><br>If I get really bored, we<sq>ll play ping pong or I<sq>ll browse reddit. <br><br>One thing that<sq>s interesting is that once you become good at programming, problems stop being <dq>How can I do X?<dq>, but instead become <dq>How can I do X nicely?<dq> Literally 95<percent> of my time spent thinking about a problem is not about how to technically do it, but instead is more about how to fit it in with the current architecture and make clean and readable while at the same time fast and performant. </p>", 
                "question": "Do you work as a programmer? If so what does a day on the job look like for you?"
            }, 
            "id": "corn5g8"
        }, 
        {
            "body": {
                "answer": "<p>A day in the life<colon><br><br>*0900 - 0930*<colon> **BEEP BEEP BEEP**<br><br>*0931*<colon> FINE, I<sq>ll get up.  Rush around like mad trying to get dressed and halfway presentable.<br><br>*0935*<colon> Listen to NPR.  If I hear Diane Rehm<sq>s creepy ass voice, I know I<sq>m late.<br><br>*1005*<colon> I<sq>m late.  Walk into the conference room we<sq>ve co-opted as our own and get greeted by a chorus of <dq>finaaaally<dq>  There are 7-8 of us in here and it<sq>s kind of crowded, but not too bad.  Luckily none of us smell bad.<br><br>*1045*<colon> I<sq>ve checked my email, caught up on reddit, time to actually work.  I usually have 3-5 tickets for our system.  I tend to do feature requests first because I think they<sq>re more fun, but sometimes I have to do the bug fixes.  If it<sq>s a bug fix, I<sq>m usually looking at my own code trying to figure out what stupid thing I did.  If it<sq>s a feature, I<sq>m usually writing my own code trying to figure out what stupid thing I can prevent.<br><br>*1100*<colon> Our insane boss starts hounding us about what we want for lunch.  Why is he always hungry so early?<br><br>*1100-1400*<colon> We<sq>ve had lunch, had discussions about code, I<sq>ve probably finished a ticket or two.  At this point I usually start trying to find a stopping place so that the build doesn<sq>t break again because of me.<br><br>*1500*<colon> Boss left 20 minutes ago, time for me to leave too.  5 hours in the office, I need to work 3 from home.<br><br>*1700-2000*<colon> I<sq>m home, walked the dog, settled in, now I need to get actual work done.  This is when I<sq>m most productive.  I<sq>ll often put in earplugs (live in the city, lots of street noise) and turn on some ambient music that I can barely hear.  It gets me in the coding mood.  Since nobody else is working on the build at this time of day, I can break stuff as much as I want.  I usually let my tickets guide what I work on, but sometimes I have an idea for the product that I think would be neat, and I just try it out.  If it<sq>s good, it<sq>ll usually stay, if it<sq>s not... it<sq>s okay.<br><br>*2000-???*<colon> Time to cook dinner, and screw around on the internet.  MAYBE sleep eventually.</p>", 
                "question": "Do you work as a programmer? If so what does a day on the job look like for you?"
            }, 
            "id": "corprob"
        }, 
        {
            "body": {
                "answer": "<p>- Get in between 9 and 11 (depending on rules/how late I was up)<br>- Coffee and Email for an hour or so (Inbox Zero is worth it, dudes)<br>- 11am usually time to get to coding, but first we do a quick stand up to make sure everyone shares what they<sq>re working on<br>- Usually from 11 to 3 or so there are constant interruptions. Some are people needing my help, some are meetings, and some are just my fingers typing R-E-D-D-I-T without me realizing it<sq>s happening...<br>- 3 - 6 is usually headphone time and I knock out ALL my tasks for the day. If I get done before 6, I try and spend the remaining hours (sometimes staying late) working on a beta idea, passion project or contributing to something open source.<br><br>At night I try and play PS4 or watch as much Law and Order as I can stand to let my brain recharge for the next day <colon>)<br><br>This being said, I<sq>ve done Junior, Mid, Senior and CTO positions. If you<sq>re a programming, make sure between you and your company you don<sq>t skimp on<colon><br><br>- Nice Keyboard (I use a [Das 4 Ultimate](http<colon>//www.daskeyboard.com/daskeyboard-4-ultimate/))<br>- Nice Chair or Standing Desk (Herman Millers are very nice)<br>- Nice Computer (Duh. But seriously, get the SSD upgrade and max out the ram)<br>- HEADPHONES (I splurged on the Bose wireless ones and do not regret it one bit. Headphones often act as a deterrent when people want to ask you something that they<sq>re better off figuring out on their own anyways)<br>- Supply of free Coffee (this one is definitely the responsibility of your boss, but I really am a big fan of doing a 4pm coffee walk with your coworkers to get away from your desk for a bit).<br><br>Also, if you work at a startup/entertainment/gamejob like me... dress up on Fridays. I wear a tie (and sometimes a blazer) every week and it feels good to have a reason to look AWESOME every week.<br><br>(Also if you are similar minded to what I said, know Javascript and live in LA let me know. I<sq>d like to hire you <colon>) )</p>", 
                "question": "Do you work as a programmer? If so what does a day on the job look like for you?"
            }, 
            "id": "correi1"
        }, 
        {
            "body": {
                "answer": "<p>Hi there!<br><br>I<sq>m the senior developer at a medium-sized company (not sure if 300 employees on site consists of small or medium these days, but I<sq>ll roll with it).  Under me are 3 regular developers and 1 junior developer.<br><br>I have many roles to perform<colon><br><br>* I<sq>m the principal architect of the systems we are building.  I do the major designs (involving the other developers), implementation, and documentation.  The other developers then use the frameworks/APIs to implement specific web applications.<br><br>* I work close with the head of department to work towards a general software roadmap.  E.g. what tech/off-the-shelf we need to buy in to achieve what we need to do because we don<sq>t want to spend 6 months re-inventing the wheel when we don<sq>t have to.<br><br>* I work closely with the project manager/business analyst who gathers requirements, produces high-level specifications, and is responsible for the overall project-plan.  As the other developers submit weekly time-sheets to the PM/BA, I also check them to make sure nobody<sq>s spent 5 hours doing a 10 minute job.<br><br>* I hold monthly code-reviews.  Each developer gets a private, one-on-one, review per month.  To do this, I randomly go through their source-control commits and pick things which are interesting to discuss.  These are not threatening code-reviews, and they are not there to upset a developer.  They are there to ensure they<sq>re constantly improving, can grow as a developer, and is done in a friendly manner.<br><br>* I work with the eCommerce department as our back-end systems drive their websites.  This means liaising with their external contractors, and ensuring that whatever goals they<sq>ve set for the <dq>customer experience<dq> can be supported by the back end systems.<br><br>* We have a few 3rd-party reservation systems in-house.  Our systems need to both pull and push data to them.  This means if anything doesn<sq>t work, I work with the Applications Executive who is the point of contact for 3rd-party suppliers.<br><br>* As Systems Application I.T team, we<sq>re a service to the rest of the business which means a lot of the time we will be talking with users (our customers, essentially).<br><br>A typical day, aside from meetings and coding, is a mixture of all of the above.  The environment in the office, whilst busy, is very laid back.  My day starts at 8.30am, and ends at 5pm.  The other guys are 9am to 5.30pm. </p>", 
                "question": "Do you work as a programmer? If so what does a day on the job look like for you?"
            }, 
            "id": "corpg6i"
        }, 
        {
            "body": {
                "answer": "<p>Youtube-dl can also be used to download porn videos and it can do post-processing for you as well.  I use it all the time.<br><br>[This](http<colon>//rg3.github.io/youtube-dl/supportedsites.html) is the official list of supported sites and if you want to learn more about youtube-dl in general, [here<sq>s](https<colon>//github.com/rg3/youtube-dl/blob/master/README.md#readme) a link to the documentation for it.<br></p>", 
                "question": "The command line doesn<sq>t have to be scary. Here<sq>s a tutorial showing how it can be used to easily download YouTube video/audio. [OC]"
            }, 
            "id": "co60b63"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "The command line doesn<sq>t have to be scary. Here<sq>s a tutorial showing how it can be used to easily download YouTube video/audio. [OC]"
            }, 
            "id": "co6b3ds"
        }, 
        {
            "body": {
                "answer": "<p>if anyone interested, I<sq>ve been using ruby gem viddl-rb to download youtube video or download its audio.      <br>      <br>[https<colon>//github.com/rb2k/viddl-rb](https<colon>//github.com/rb2k/viddl-rb)      <br>      <br>    viddl-rb https<colon>//www.youtube.com/watch?v=w7oYB6F1-EU</p>", 
                "question": "The command line doesn<sq>t have to be scary. Here<sq>s a tutorial showing how it can be used to easily download YouTube video/audio. [OC]"
            }, 
            "id": "co63n08"
        }, 
        {
            "body": {
                "answer": "<p>Nice! Time to build a Pocket clone for porn</p>", 
                "question": "The command line doesn<sq>t have to be scary. Here<sq>s a tutorial showing how it can be used to easily download YouTube video/audio. [OC]"
            }, 
            "id": "co654os"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a moderator of /r/futurology. We<sq>re currently debating whether we should go private or not. My point was that we, unlike /r/learnprogramming, /r/suicidewatch, /r/depression, etc, do not offer a real service to our users that will be missed if we blacked out for a day or two. As such, I and many other mods are debating for blacking out.<br><br>This subreddit is different though. It<sq>s necessary for many people, provides a real service, and if it<sq>s blacked out on the wrong day, someone may fail a test, fail to meet a deadline, etc. I support /r/learnprogramming staying open.</p>", 
                "question": "LearnProgramming will not be going private."
            }, 
            "id": "csqtyhq"
        }, 
        {
            "body": {
                "answer": "<p>+1. I come here a lot, I love helping people. I think it<sq>s best if smaller subreddits that have their own communities stay out of the reddit meta drama.</p>", 
                "question": "LearnProgramming will not be going private."
            }, 
            "id": "csqp0gl"
        }, 
        {
            "body": {
                "answer": "<p>Just think of all the CS homework that wouldn<sq>t get done if /r/learnprogramming went private.</p>", 
                "question": "LearnProgramming will not be going private."
            }, 
            "id": "csqxdsp"
        }, 
        {
            "body": {
                "answer": "<p>Hear hear. Education shouldn<sq>t be interrupted by politics.</p>", 
                "question": "LearnProgramming will not be going private."
            }, 
            "id": "csr60br"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve noticed this phenomenon where people seem to somehow be blind to things like error messages, warnings and notices. For example, somebody will ask for help because their code isn<sq>t compiling, the compile error will say something like <dq>*Missing semi-colon on line 7*<dq>, which will prompt me to ask <dq>*Have you tried adding a semi-colon to the end of line 7?*<dq> and often the answer will be <dq>*Ah, yes, of course! I forgot to put a semi-colon there.*<dq> Well, yes, of course you did, and I<sq>m left baffled as to how they couldn<sq>t have deduced that from the compile error. Perhaps it<sq>s some form of [inattentional blindness](http<colon>//en.wikipedia.org/wiki/Inattentional_blindness)?</p>", 
                "question": "If you<sq>re starting to learn programming PLEASE learn how to read and understand error messages!"
            }, 
            "id": "cdkfsh1"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m in my first Java programming course, and I see the same thing. Part of the problem is that the professor told us to use DrJava instead of Eclipse.<br><br>DrJava won<sq>t tell you the error until you try to compile it, and then you get a thousand red lines of text shouting *YOU FORGOT A SEMICOLON AND A BRACKET AND YOU DIDN<sq>T INITIALIZE THIS VARIABLE OH GOD WE<sq>RE OUT OF BOUNDS TERMINATE ABANDON SHIIIIP*, whereas Eclipse just politely highlights your mistake and gives you one error message at a time. <br><br>I started doing CS coursework after working in special education for a long time - there are people in *every* discipline who can<sq>t be bothered to do more than the bare minimum of effort. Sigh.</p>", 
                "question": "If you<sq>re starting to learn programming PLEASE learn how to read and understand error messages!"
            }, 
            "id": "cdkh1z0"
        }, 
        {
            "body": {
                "answer": "<p>Perosnally, I think error messages are the best way to learn how to code. I<sq>ve been learning javascript lately, which gives different types of error messages than what I<sq>m used to. Because of that, I<sq>m forced to learn what mistakes I made, how to fix them, and if I need to google the error, I can sometimes learn a better approach to what I was doing than what I had before. </p>", 
                "question": "If you<sq>re starting to learn programming PLEASE learn how to read and understand error messages!"
            }, 
            "id": "cdkgnky"
        }, 
        {
            "body": {
                "answer": "<p>Not to get off topic, but you should also learn to read API documentation.</p>", 
                "question": "If you<sq>re starting to learn programming PLEASE learn how to read and understand error messages!"
            }, 
            "id": "cdkinuk"
        }, 
        {
            "body": {
                "answer": "<p>yep it<sq>s a decent intro to linux. Answers a lot of typical noob questions (whats a distro etc etc) and introduces the user to things such as filesystems and Bash as well. It<sq>s a cool course and I<sq>d definitely suggest going through it to anyone just starting out with Linux. </p>", 
                "question": "Introduction to Linux free course from the Linux Foundation"
            }, 
            "id": "cq8duv3"
        }, 
        {
            "body": {
                "answer": "<p>Instead of this course I<sq>d reccommend [The Rute User<sq>s Tutorial and Exposition](http<colon>//rute.2038bug.com/rute.html.gz). <br><br>Just a personal preference but something about online courses seems dodgy to me. I guess I just don<sq>t like having to sign up to things to view content.</p>", 
                "question": "Introduction to Linux free course from the Linux Foundation"
            }, 
            "id": "cq8i3h6"
        }, 
        {
            "body": {
                "answer": "<p>~~free? it clearly says its $99 ... am i missing something??~~<br><br>DISREGARD THAT I SUCK COCKS</p>", 
                "question": "Introduction to Linux free course from the Linux Foundation"
            }, 
            "id": "cq8slz8"
        }, 
        {
            "body": {
                "answer": "<p>Hey! I<sq>m doing this course now. I actually am enjoying it, and doing it in conjunction with another on Udemy that I got a discount on (so, $20 instead of $100). Honestly, the free one teaches mostly the same thing, though the other does some more advanced terminal stuff - yet the EDx one does cover scripting. </p>", 
                "question": "Introduction to Linux free course from the Linux Foundation"
            }, 
            "id": "cq8g6kg"
        }, 
        {
            "body": {
                "answer": "<p>I would have a hard time being able to watch in real time. I would greatly appreciate if you post it all on YouTube or something for posterity so I can watch at my leisure.</p>", 
                "question": "How many of you if any at all would be interested in a stream of me going through and programming a 2D game?"
            }, 
            "id": "c3s3bch"
        }, 
        {
            "body": {
                "answer": "<p>OP, you might be interested in this<br><br>http<colon>//www.humblebundle.com/?mojam</p>", 
                "question": "How many of you if any at all would be interested in a stream of me going through and programming a 2D game?"
            }, 
            "id": "c3s6e4e"
        }, 
        {
            "body": {
                "answer": "<p>I would be VERY interested in this. I<sq>m not a C# or XNA programmer, but I<sq>ve had trouble breaking out of <dq>beginning game programming.<dq> I<sq>ve worked  in C++ and Python. I<sq>ve made clones of simple games like Snake, Pong, Tank, I wrote a basic MUD in C++ (which was actually pretty cool), but I feel stuck moving into more advanced games. I<sq>d love to do a top down 2D RPG (Legend of Zelda style) but I get a little bogged down in the details. Walking animation while moving? Loading/unloading levels with sprites, sounds, animations? Saving a game? Breaking out everything into clean/dirty blocks to speed up drawing? I mean, I get all the ideas, but feel a little stuck when it comes to implementing them.<br><br>So yes, I would be interested in this.</p>", 
                "question": "How many of you if any at all would be interested in a stream of me going through and programming a 2D game?"
            }, 
            "id": "c3s3qyz"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How many of you if any at all would be interested in a stream of me going through and programming a 2D game?"
            }, 
            "id": "c3s2sdk"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//github.com/open-source-society/computer-science<br><br>That<sq>s a really good curriculum for computer science. All (or at least most) of the courses are free and you can find them online.<br><br>I guess you don<sq>t need to take everything, specially if you already know how to program. I recommend the algorithms courses from Princeton in coursera. They were great for me, I learned a lot. And I<sq>m telling you this as someone that doesn<sq>t like java very much. <br><br>edit<colon> two words.</p>", 
                "question": "So I<sq>m self taught and like so many in my shoes I feel like I am missing a lot of the more detailed and also general programming and CS concepts. What are some good resources?"
            }, 
            "id": "d2wfkys"
        }, 
        {
            "body": {
                "answer": "<p>Everyone mentions algorithms and data structures, which are important. But how are you on object oriented design, design patterns, and the like? <br><br>In 20 odd years in the industry, I<sq>ve rarely had an issue where a specific data structure made the difference and simplified a gnarly issue. On the other hand, knowing good design helps every day. <br><br>If you aren<sq>t familiar with these concepts, spend some time researching SOLID, Gang of Four patterns, and writing by authors such as Martin Fowler and Robert C Martin. Learn the timeless patterns and frameworks that will allow you to better organize code and communicate with your fellow engineers. </p>", 
                "question": "So I<sq>m self taught and like so many in my shoes I feel like I am missing a lot of the more detailed and also general programming and CS concepts. What are some good resources?"
            }, 
            "id": "d2wjc1d"
        }, 
        {
            "body": {
                "answer": "<p><br>Hello! You seem to be looking for a resource or tutorial. The /r/learnprogramming<br>wiki has a comprehensive list of resources that might be useful to you, but if<br>what you<sq>re looking for isn<sq>t on there, please help by adding it!<br><br>- [Online Resources](http<colon>//www.reddit.com/r/learnprogramming/wiki/online)<br>- [Books](http<colon>//www.reddit.com/r/learnprogramming/wiki/books)<br>- [Programming Challenges](http<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F)<br><br>You might also like the [Awesome Lists](https<colon>//awesomelists.top/), which are<br>curated lists for the best libraries, tools and resources for most programming<br>languages, topics and tools.<br><br><br>---<br>I am a bot for /r/learnprogramming using supervised learning to provide helpful<br>responses to common posts. I<sq>m open source and accept pull requests and<br>contributions!<br><br>[[Learn More]](https<colon>//github.com/Aurora0001/LearnProgrammingBot)<br>[[Report an Issue]](https<colon>//github.com/Aurora0001/LearnProgrammingBot/issues)<br></p>", 
                "question": "So I<sq>m self taught and like so many in my shoes I feel like I am missing a lot of the more detailed and also general programming and CS concepts. What are some good resources?"
            }, 
            "id": "d2wd9gf"
        }, 
        {
            "body": {
                "answer": "<p>Since I haven<sq>t seen it recommended yet, https<colon>//www.google.com/about/careers/students/guide-to-technical-development.html</p>", 
                "question": "So I<sq>m self taught and like so many in my shoes I feel like I am missing a lot of the more detailed and also general programming and CS concepts. What are some good resources?"
            }, 
            "id": "d2ws67j"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s the tools that I would add from working in the software industry and getting a CS degree<colon><br><br>- **A good programmer doesn<sq>t get tied to one or even several programming languages.** The concepts for many languages, especially Java and C++ can be generalized into most modern languages. While I<sq>m working I will have to switch between 5-7 languages within a day. Understanding general concepts is usually more important than knowing the specifics of a language. Unless of course a company hires you to be the go to C++, or whatever language, guy or so..<br><br>- **Practice presentation and explanation skills.** I always need to be able to explain what I<sq>m working on or how something works to a fellow programmer. Being able to understand what your doing and being able to convey that idea and process to another individual can make a software development team much stronger. (Good commenting in code also helps this along)<br><br>- **Learn how to Google!** As silly as it sounds, but I<sq>ve run across so many developers that ask me simple questions. They don<sq>t know how to pick out the key words in their problem and form a good Google search. Just wait until you get into industry and you<sq>ll see what I mean. (This generally just comes with experience and practice)<br><br>- **Learn to use version control software!** Yes.. Do it! Download Git and something like Git Extensions and use them to work on a term project or even your homeworks. There are tons of tutorials out there and it<sq>s such a useful tool and a requirement for working in industry.<br><br>- **Don<sq>t be afraid to break things and try out new ideas.** Software is constantly changing. If your job gives you the ability to try new things then make sure you take the time to do so. Not only will this build your overall skill set, but it<sq>ll give you a greater understanding of different technologies.</p>", 
                "question": "What does a programmer<sq>s toolbox contain?"
            }, 
            "id": "cv0407j"
        }, 
        {
            "body": {
                "answer": "<p>> Currently I have 1 project that I think is worth uploading there. Should I do it?<br><br>If it<sq>s something you don<sq>t mind sharing to the outside world, then definitely. If not, make a private repo, possibly using Bitbucket, and store it there.<br><br>I<sq>m of the opinion that all but the most trivial of projects should be version controlled -- the main question is whether to use a private or public repo.<br><br>If you want to showcase your project/plan on having recruiters look through your Github profile, then spend some time polishing it + writing a really good `README.md` file. If your project was thrown together + is a bit messy, then just leave a disclaimer to that effect in the README.<br><br>> A LinkedIn profile. Honestly I am a beginner and I don<sq>t think I should have one of these. I am also curious why do people use these? <br><br>A LinkedIn profile is one of those things which doesn<sq>t really hurt to have. Registration is free, which means that the only downside of having one is that you need to invest some time and energy into adding material, and LinkedIn will bother you with emails from time to time (which I believe you can disable).<br><br>You also get a bunch of side benefits from having a LinkedIn account<colon><br><br>- You can use it as an <dq>extended resume<dq>. I literally have a note on my paper resume that says something like <dq>for more information and omitted details, see my LinkedIn profile at ...<dq>.<br>- You can keep all your info in one place, which makes it easier when you<sq>re trying to come up with a tailored paper resume.<br>- A LinkedIn profile is a sort of social signal<colon> having one can (to some people/some recruiters) make you seem a bit more professional.<br>- You can use your LinkedIn profile to try and network and connect with random high-profile strangers. I<sq>ve never actually done this myself, but a few of my more entrepreneurial friends have, and apparently it worked well with them.<br><br>None of these benefits are huge ones, or are exclusive to LinkedIn, but they do make a LinkedIn profile a mildly useful thing to have.<br><br>> Do companies actually approach you after seeing you on those? Do they actually look at that site?<br><br>If your profile is impressive enough, surprisingly yes. Granted, I<sq>m still fairly junior so I get fairly low amount of pings and connection requests, and I usually get pinged by companies I<sq>ve either never heard of, or don<sq>t really want to work for, but people do contact you after a certain point. (Also, I<sq>m not sure if this is a US-only thing/if other countries do things differently).<br><br>> I noticed a lot of different opinions on what things should a programmer know and right now I can think of these.<br><br>In terms of languages, I might add a functional language.<br><br>> If you can tell me anything that would make me better at this it would be awesome.<br><br>Here are some tips on understanding large codebases that I wrote about two weeks ago<colon><br><br>https<colon>//www.reddit.com/r/learnprogramming/comments/3ix4st/plan_of_attack_when_faced_with_a_huge_complex/<br><br>> Please feel free to add things or correct mine.<br><br>You<sq>ve already covered a good amount of ground (in particular, I think the things you list in bullet point #3 are very important to know), but other things I would add are<colon><br><br>- **Proficiency in typing**. This isn<sq>t really a tool, but I do think it<sq>s important. You want to be able to type fast enough that there<sq>s very little <dq>lag<dq> in between thinking of something, and being able to write it down.<br>- **Proficiency in the editor or IDE of your choice**. If you<sq>re going to use something like Notepad++ or Sublime Text, you don<sq>t really have much to learn. On the other hand, if you<sq>re going to use something like IntelliJ, Visual Studios, vim, or emacs, you should take the time to learn how to do those well.<br>- **Proficiency in some kind of domain** (webdev, mobile dev, robotics, AI, etc...). Being able to code is fine and everything, but it<sq>s useful to know how to apply your programming skills in some way.<br>- **Proficiency in math**. Math isn<sq>t always important to know (for example, there<sq>s very little math in web development or mobile development), but having a firm grasp of linear algebra, statistics, and so forth is very useful if you want to do game development, graphics, cryptography, machine learning, AI, etc...<br>- **Understanding the principles of security and cryptography**. It<sq>s very easy to write insecure programs, so having a working knowledge of how programs can be hacked/compromised + security best practices is very useful.<br>- **Understand how to use the command line**. Most useful programming-related tools run on the command line, so the more you know how to use the command line, the better.<br>- **Understand how to use package/library managers and build tools**. If you<sq>re using Ruby, spend some time learning how gems/bundler works. If you<sq>re using Python, learn about pip and virtualenv. If you<sq>re using Java, learn about Maven, Gradle, etc.<br>- **Proficiency in writing and communication**. A large part of programming is collaborative -- most products are created by a team of people and engineer. Consequently, it<sq>s just as important to understand how to communicate with people as it is to understand how to communicate with your computer.<br>- **Participate in the tech community**. This again isn<sq>t really a <sq>tool<sq>, but I<sq>ve found that participating in the tech community (either passively by reading posts on /r/programming or Hacker News, or actively by answering questions here/on StackOverflow, or by contributing to open source) ended up teaching me a surprising amount.<br><br>And these aren<sq>t really <sq>tools<sq>, but are more attitudes that I think are good to have<colon><br><br>- **Be able to absorb information efficiency and/or have a love for learning**. I think that it<sq>s important that you enjoy learning and/or are able to learn efficiently if you want to do programming. There are so many things to learn in programming/CS, and the industry changes rapidly enough that I do think it<sq>s important that you actually enjoy learning on some level. (And if you aren<sq>t an efficient learner, it might be a good idea to deliberately try learning new things to practice learning/to study learning strategies.)<br>- **Be willing to experiment + move outside of your comfort zone**. Don<sq>t get tied down to a single language/framework. Don<sq>t be afraid of googling. Try random ideas. Don<sq>t be afraid of throwing your code away. Don<sq>t ever think to yourself <dq>oh, I<sq>m not good enough to try writing program X<dq>. (Instead think, <dq>I<sq>ll need to know A, B, and C in order to write program X<dq>). Don<sq>t treat libraries or frameworks as <dq>magic<dq><colon> try and understand how they work/how you could go about writing something similar.</p>", 
                "question": "What does a programmer<sq>s toolbox contain?"
            }, 
            "id": "cv04g5u"
        }, 
        {
            "body": {
                "answer": "<p>> The ability to easily read and get source code. I can<sq>t really explain it(I guess lack of experience) but when I try to read some free source library or something it<sq>s like an avalanche of things I don<sq>t get. God forbid that the programmer didn<sq>t comment something. I will end up banging my head against the wall for hours. If you can tell me anything that would make me better at this it would be awesome.<br><br>Reading code is hard. It will get easier, but it will never be easy to read any piece of non-trivial code. You<sq>ll find that even reading your own code six months down the line is hard. There<sq>s so much context in your head when you<sq>re writing code that isn<sq>t there when you try to read it. Reading code is time consuming because you must spend a lot of time building up all of that context.</p>", 
                "question": "What does a programmer<sq>s toolbox contain?"
            }, 
            "id": "cv04sog"
        }, 
        {
            "body": {
                "answer": "<p>[Ducks](http<colon>//www.rubberduckdebugging.com/)</p>", 
                "question": "What does a programmer<sq>s toolbox contain?"
            }, 
            "id": "cv0f61a"
        }, 
        {
            "body": {
                "answer": "<p>Can vouch for this site. Was great in actually getting hands-on experience with FlexBox.</p>", 
                "question": "Flexbox Froggy. A cool site with interactive exercises that help with CSS coding"
            }, 
            "id": "desf36d"
        }, 
        {
            "body": {
                "answer": "<p>My previous knowledge of flexbox consists of googling` <dq><thing I want to do> flexbox<dq>` and then copy-pasting whatever comes on top. This really helped clarify what flexbox really is. Thanks for sharing! </p>", 
                "question": "Flexbox Froggy. A cool site with interactive exercises that help with CSS coding"
            }, 
            "id": "deskudv"
        }, 
        {
            "body": {
                "answer": "<p>[Here<sq>s another fun game teaching CSS flexbox](http<colon>//www.flexboxdefense.com/). It<sq>s a tower defense game where you position the towers on each level using flexbox.</p>", 
                "question": "Flexbox Froggy. A cool site with interactive exercises that help with CSS coding"
            }, 
            "id": "desvumx"
        }, 
        {
            "body": {
                "answer": "<p>Not really programming but a great way to get your head around flexbox</p>", 
                "question": "Flexbox Froggy. A cool site with interactive exercises that help with CSS coding"
            }, 
            "id": "deslc7k"
        }, 
        {
            "body": {
                "answer": "<p>In no particular order<colon><br><br>- Naming things badly. Probably my all-time favourite was a function called `do_the_logic`.<br>- Writing code without understanding it. Google has made this a lot more common than it used to be.<br>- Writing enormous (more than 20 lines or so) functions which the say they will refactor later, but don<sq>t.<br>- Using magic numbers.<br>- Not using version control for _all_ projects.<br>- Not using VIEWs in SQL <dq>because they are inefficient<dq>.<br>- Worrying about efficiency.<br></p>", 
                "question": "15+ year veteran programmers what do you see from intermediate coders that makes you cringe."
            }, 
            "id": "chjjpnt"
        }, 
        {
            "body": {
                "answer": "<p>My personal one is over commenting with meaningless comments, but then they turn around and use funky one liners, one letter variable names, overuse ternary operators, cram unrelated statements on a single line or cram unrelated code into a single function or class or never use a line break. Any trick they can do to save that one line of code.<br><br>I mean less code is better but if you can<sq>t straight out remove it, then you need it, which means if I<sq>m reading your code I need to see it. Don<sq>t try to hide it with a funky one liner and then explain why you did so in an extra long comment. You could have just witten the code out the normal way.<br><br>I don<sq>t even mind the over commenting so much. Sometimes I do that but the code should be readable as well.<br><br></p>", 
                "question": "15+ year veteran programmers what do you see from intermediate coders that makes you cringe."
            }, 
            "id": "chjlz3j"
        }, 
        {
            "body": {
                "answer": "<p>Lack of error handling.  Even at your best, shit happens.  At least let the machine tell you what it was.</p>", 
                "question": "15+ year veteran programmers what do you see from intermediate coders that makes you cringe."
            }, 
            "id": "chjpdb2"
        }, 
        {
            "body": {
                "answer": "<p>When they<sq>re proud of one-liners that take 30 minutes and a piece of scratch paper to figure out.  I write a lot of functions that could be cleverly condensed into one-liners, but instead I opt for three or four lines of easy to follow and read code.  I also try to break out most operations into their own functions, so that processes are most just a series of function calls, which makes it very easy to tell what something does, and easy to follow how it is doing it.<br><br>I also cannot stand people using single letter variable names.  I can<sq>t even ctrl+f for that, man.  Is it so hard to type something like formGraphics instead of g?  Especially unforgivable when you<sq>re using an IDE like VS or Xamarin, and it<sq>ll complete it for you.  Use a descriptive name for everything.  If you can<sq>t think of a descriptive name, then you<sq>re probably doing something stupid.</p>", 
                "question": "15+ year veteran programmers what do you see from intermediate coders that makes you cringe."
            }, 
            "id": "chjmn0n"
        }, 
        {
            "body": {
                "answer": "<p>Greenlight this game</p>", 
                "question": "Beta - A game that teaches programming and game design"
            }, 
            "id": "ceqffdv"
        }, 
        {
            "body": {
                "answer": "<p>Well I<sq>ve been playing for a bit and its pretty cute. <br><br>The demo ended after entering the sketch level exit, I just got black screen.<br>Probably something else should happen there.<br><br>You should probably have some end goal for educators to be able to say <dq>We did it<dq> instead of <dq>they dabbled for a 20 minutes every other Tuesday for a year.<dq><br><br>After x hours with your game what will the average kid come away with?<br>How will they have improved?<br><br>Why is the pricing hidden behind the account details?<br>Some kid says <dq>Mom can I get this?<dq>, Mom says <dq>How much is it?<dq> and they have to give you their NSA file to find the answer.<br><br>Is the scripting language supported somewhere else?<br>It<sq>s not too late to support other languages, ones that are useful in the real world.<br>Every instructor on earth can get a copy of some Javascript, HTML5, Unity. or C# book.<br>Isolated languages aren<sq>t easier to teach or to get answers for learning.<br><br>With a real language the end product will be something they can have forever, <br>can go on a website and exist for the whole world of computing forever, maybe even become something great in the long run.<br><br>With a proprietary game language like this, soon as the kid is done with the class or grows up a little and gets other interests, that<sq>s the end of the value, the game and the code won<sq>t be touched again.<br><br>Perhaps work up a challenge level (semester 2/year  2 etc) of coding mastery where there<sq>s actual real world languages that are used instead of something stuck inside your program. <br><br>Anyway...<br>It<sq>s really neat. Love the concept and the execution.<br>Wish it was teaching me C and stuff.<br><br>Some of the instructions values and the object values don<sq>t match in the demo.<br>for instance morph platform17_7 ball is platform17_10 on the map.<br><br>Beta indeed. Lol.<br>Double check those tutorial texts!<br><br></p>", 
                "question": "Beta - A game that teaches programming and game design"
            }, 
            "id": "ceqg7uc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Beta - A game that teaches programming and game design"
            }, 
            "id": "ceqfmhv"
        }, 
        {
            "body": {
                "answer": "<p>Kinda sad that there isn<sq>t a linux version ;-(</p>", 
                "question": "Beta - A game that teaches programming and game design"
            }, 
            "id": "ceqk41s"
        }, 
        {
            "body": {
                "answer": "<p>If paid by bank or credit card I would do a charge back as that sounds like fraud on some level.</p>", 
                "question": "Stay away from Devschool bootcamp - lead instructor leaves 20 students and disappears"
            }, 
            "id": "d8bhrgf"
        }, 
        {
            "body": {
                "answer": "<p>Stay away from all bootcamps.<br><br>Either that or start a bootcamp and enjoy the gravy train.</p>", 
                "question": "Stay away from Devschool bootcamp - lead instructor leaves 20 students and disappears"
            }, 
            "id": "d8bh9kf"
        }, 
        {
            "body": {
                "answer": "<p>Ouch man, sorry to hear that <colon>(<br>I hope everything works out. Is there some sort of refund policy? </p>", 
                "question": "Stay away from Devschool bootcamp - lead instructor leaves 20 students and disappears"
            }, 
            "id": "d8bfulo"
        }, 
        {
            "body": {
                "answer": "<p>His other name is Eric James O<sq>Kelly.<br><br>He<sq>s somewhat of a celebrity -> http<colon>//www.clackamas.us/sheriff/mostwanted.html</p>", 
                "question": "Stay away from Devschool bootcamp - lead instructor leaves 20 students and disappears"
            }, 
            "id": "d8bshg2"
        }, 
        {
            "body": {
                "answer": "<p>lol at <dq>Thinks Excel is a database<dq></p>", 
                "question": "Came across something useful the Programmer Competency Matrix."
            }, 
            "id": "cney04w"
        }, 
        {
            "body": {
                "answer": "<p>Think of it as an exercise guide.  *This quarter I will learn and practice <sq>X.<sq>*</p>", 
                "question": "Came across something useful the Programmer Competency Matrix."
            }, 
            "id": "cnet09a"
        }, 
        {
            "body": {
                "answer": "<p>Has *tried out* git? Apparently I<sq>m off the charts. </p>", 
                "question": "Came across something useful the Programmer Competency Matrix."
            }, 
            "id": "cnf0zqy"
        }, 
        {
            "body": {
                "answer": "<p>Just remember - you<sq>re not supposed to know all of this stuff. That<sq>s what the future is for.<br></p>", 
                "question": "Came across something useful the Programmer Competency Matrix."
            }, 
            "id": "cnf0fcn"
        }, 
        {
            "body": {
                "answer": "<p>Desire to know more intensifies. (thank you for posting this.)</p>", 
                "question": "Linux is partnering with Edx to offer Intro to Linux for free this summer"
            }, 
            "id": "cfxvpsx"
        }, 
        {
            "body": {
                "answer": "<p>Would this certificate hold any real benefit for a software developer/CS major? (Speaking generally, all career specialization aside)<br><br>I<sq>m somewhat familiar with linux already...</p>", 
                "question": "Linux is partnering with Edx to offer Intro to Linux for free this summer"
            }, 
            "id": "cfy1dto"
        }, 
        {
            "body": {
                "answer": "<p>This is perfect, I really want to learn Linux but I<sq>m not interested in telling my pretentious brother who<sq>s been telling me to use it for years. Perfect!</p>", 
                "question": "Linux is partnering with Edx to offer Intro to Linux for free this summer"
            }, 
            "id": "cfxvwnr"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a good primer<colon> http<colon>//conqueringthecommandline.com/book/basics</p>", 
                "question": "Linux is partnering with Edx to offer Intro to Linux for free this summer"
            }, 
            "id": "cfy11rh"
        }, 
        {
            "body": {
                "answer": "<p>Great idea ! Maybe use GitHub to host it ? </p>", 
                "question": "Workbook download - /r/DailyProgrammer - [Easy]"
            }, 
            "id": "cu5yj74"
        }, 
        {
            "body": {
                "answer": "<p>Now to write a web service that maybe scans daily programmer for new challenges, updates a store of them, and responds to requests for challenges and can feed back a random easy/medium/hard challenge.</p>", 
                "question": "Workbook download - /r/DailyProgrammer - [Easy]"
            }, 
            "id": "cu6eiem"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this. Having one link with all the challenges of much more convenient than scrolling through Reddit. Also, Github is more SFW than Reddit (in case the domain is blocked)<br><br>I would suggest hosting the repository as <dq>r-dailyprogrammer-challenges<dq>, with folders for each challenge difficulty.</p>", 
                "question": "Workbook download - /r/DailyProgrammer - [Easy]"
            }, 
            "id": "cu6do8f"
        }, 
        {
            "body": {
                "answer": "<p>Nice, this is awesome!</p>", 
                "question": "Workbook download - /r/DailyProgrammer - [Easy]"
            }, 
            "id": "cu5yul8"
        }, 
        {
            "body": {
                "answer": "<p>obligatory<colon> /r/OnlineEducation </p>", 
                "question": "Here<sq>s a list of 35 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c669xmc"
        }, 
        {
            "body": {
                "answer": "<p>Open en**troll**ment, huh?  -_^  Not sure if...jk.  Great list.  Thanks!</p>", 
                "question": "Here<sq>s a list of 35 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c669eo4"
        }, 
        {
            "body": {
                "answer": "<p>This is really helpful, thank you!</p>", 
                "question": "Here<sq>s a list of 35 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c666n3x"
        }, 
        {
            "body": {
                "answer": "<p>Amazing!! thanks so much for this!</p>", 
                "question": "Here<sq>s a list of 35 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month"
            }, 
            "id": "c6676bk"
        }, 
        {
            "body": {
                "answer": "<p>How does one improve the power of the will? It<sq>s a huge mystery to me. I would like to get back in shape. I want to eat better and work out more, but I cannot force myself to go out and do it. <br><br>Same with work. If I<sq>m having an off day, how do I snap back into focus? Will power is very important, and I seem to lack the ability to control it as I would like to. <br></p>", 
                "question": "Motivation is overrated start working!"
            }, 
            "id": "ddpn1l5"
        }, 
        {
            "body": {
                "answer": "<p>Not to be harsh, but I think your article is useless.  Yes, discipline is important and not to be undervalued, but so is knowing yourself and manipulating your own psychology.<br><br>For programmers, I think the fundamental drive that wanes after the novelty of implementing an idea is most often the social one.  Unless we<sq>re involved in a bigger project, our projects are rather personal one-man affairs that drive us to deep concentration solving interesting problems that other people would often consider minutia.  You can<sq>t help but internalize the social devaluing of your efforts.<br><br>Can this be overcome with discipline?  Yes, sure it can.  But it can also be attacked at its roots.  Find people willing to discuss the minutia of the project.  A single collaborator, even if they aren<sq>t actively writing any code, can be a tremendous boon just by virtue of their interest in your work.  Back and forth discussion about a project also nurtures new ideas which in turn can spark the drive to see them implemented.<br><br>I therefore recommend that when you are not feeling the internal drive, that you use your down-time to discuss your work.<br><br>Some may see this as a procrastination strategy.  They<sq>re correct that a lack of internal drive is motivating people to talk, but they<sq>re wrong to see it as an excuse or cheat.  Rather, the motivation is to recover the sense that our efforts are socially valuable so that work can be driven less by hard disciplined will and more by our more primary social instincts.</p>", 
                "question": "Motivation is overrated start working!"
            }, 
            "id": "ddpvfws"
        }, 
        {
            "body": {
                "answer": "<p>While well intentioned, the article doesn<sq>t seem to address the fundamental problem - why people struggle with this stuff.<br><br>Scientists have showed that people who just ate sugar made better decisions and had more willpower. Which is to say, exerting willpower is a physical process that happens in your brain, consuming sugar. You literally have a finite supply of mental energy and when you run out of it, you can<sq>t think properly.<br><br>(Supermarkets exploit this by putting chocolate next to the checkouts. You went through the whole store making choices; now you<sq>re out of energy, your willpower is weak, and look, here<sq>s some sugar right in front of you.)<br><br>The point here is not that you should eat sugar all day (that has negative consequences of its own), but rather, eat well, and treat your mental energy as the limited resource it is. Spend it wisely. Notice when you<sq>re wasting it.<br><br>That<sq>s why good habits are important. These are decisions we<sq>ve already made, so we don<sq>t have to keep wasting energy thinking about them.<br><br>Often when I procrastinate, it<sq>s because I don<sq>t know what I want to do, or I don<sq>t know how to do it, and so I<sq>m stuck in this cycle of <dq>I want to work on this; <stares at screen> I<sq>m tired now<dq>.<br><br>What<sq>s happening there is, I don<sq>t have enough information to know what to do next, and I don<sq>t have enough mental energy to realise this and take a step back.<br><br>And because all I<sq>ve done is stare at the screen, I<sq>m not gaining anything - I<sq>m wasting energy doing the same thing over and over.<br><br>The most useful trick I know for breaking this cycle is making notes - when you can<sq>t do something, write down what you can<sq>t do. Then write down why. Then write down how you<sq>d fix that. Ideally you break your tasks down into smaller tasks, until you have ones so small they<sq>re not scary any more.</p>", 
                "question": "Motivation is overrated start working!"
            }, 
            "id": "ddq3d71"
        }, 
        {
            "body": {
                "answer": "<p>> I have written an article about motivation<br><br>> I am a programmer just like you<br><br>IF (you == <dq>motivated<dq>) { you = <dq>not me<dq>; }<br><br>// Variable <dq>you<dq> was declared a few thousand lines ago, before I ran out of coffee <colon>(</p>", 
                "question": "Motivation is overrated start working!"
            }, 
            "id": "ddpukgx"
        }, 
        {
            "body": {
                "answer": "<p>And yet, you failed to teach one of the most important concepts<colon><br><br>###Learn to use a step-by-step debugger!<br><br>This should be taught very early in every course. Littering programs with debug print statements is not the way to properly troubleshoot. Using a step-by-step debugger is and if that is not available, a logger is better than debug messages littered all over the code.<br><br>The post as such is very good actually, but it really gets me when littering debug messages is advocated over actual proper debugging.</p>", 
                "question": "I<sq>ve been teaching an online coding class and have helped dozens of students write some of their first lines of code. These are the most common debugging tips that I<sq>ve given students over the years when they get stuck. I tried to lay them out step-by-step so they<sq>re easy to follow. Hope they help!"
            }, 
            "id": "dab713n"
        }, 
        {
            "body": {
                "answer": "<p>As a high school CompSci teacher, bless you! Well written and concise advice that will be getting distributed to my students tomorrow <colon>)</p>", 
                "question": "I<sq>ve been teaching an online coding class and have helped dozens of students write some of their first lines of code. These are the most common debugging tips that I<sq>ve given students over the years when they get stuck. I tried to lay them out step-by-step so they<sq>re easy to follow. Hope they help!"
            }, 
            "id": "dabb0aj"
        }, 
        {
            "body": {
                "answer": "<p>That is exactly how I did it for the one project I did my own code; two years of coding everyday all day. On day one, I asked on SO <dq>what is main(),<dq> on day 700 and something I was asking about parallel processing nuances. The ten steps you post are basically what the introduction to programming TAs taught me (office hours were from 10PM to 5AM).</p>", 
                "question": "I<sq>ve been teaching an online coding class and have helped dozens of students write some of their first lines of code. These are the most common debugging tips that I<sq>ve given students over the years when they get stuck. I tried to lay them out step-by-step so they<sq>re easy to follow. Hope they help!"
            }, 
            "id": "dabgmwa"
        }, 
        {
            "body": {
                "answer": "<p>These are great tips that I wish I had known (in their entirety) from the start! Thank you for putting these together. <colon>)</p>", 
                "question": "I<sq>ve been teaching an online coding class and have helped dozens of students write some of their first lines of code. These are the most common debugging tips that I<sq>ve given students over the years when they get stuck. I tried to lay them out step-by-step so they<sq>re easy to follow. Hope they help!"
            }, 
            "id": "dab78g4"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//sijinjoseph.com/programmer-competency-matrix/</p>", 
                "question": "How do I assess my level of skill in a language? Where<sq>s the line between Beginner/Intermediate/Advanced? What level would you consider <dq>junior position ready<dq>?"
            }, 
            "id": "d5fwgex"
        }, 
        {
            "body": {
                "answer": "<p>One of the things I encourage in people who are approaching a developer career is to start thinking about some things to put in a portfolio or CV. Make them applicable to the kinds of jobs you plan to apply for, so if you<sq>re interested in frontend web dev, do something in Angular say, and if you like the backend of the web, choose something on the server side.<br><br>If you can build a little utility that people are using or forking on Github, that looks great to a prospective employer. The same applies if you build a simple website that people are using regularly, since it shows you can get things done, and it may have pushed you through the difficult bugs or design choices that can freeze up a project.<br></p>", 
                "question": "How do I assess my level of skill in a language? Where<sq>s the line between Beginner/Intermediate/Advanced? What level would you consider <dq>junior position ready<dq>?"
            }, 
            "id": "d5g1nio"
        }, 
        {
            "body": {
                "answer": "<p>This was posted recently, and has some good points<colon> https<colon>//www.reddit.com/r/cscareerquestions/comments/4t5tf3/minimum_competency_to_be_considered_average/</p>", 
                "question": "How do I assess my level of skill in a language? Where<sq>s the line between Beginner/Intermediate/Advanced? What level would you consider <dq>junior position ready<dq>?"
            }, 
            "id": "d5fwfze"
        }, 
        {
            "body": {
                "answer": "<p>The line is fuzzy, but in general at the point that you no longer find resources (books, blogs, etc) that help you improve in a given language/tech then you<sq>re intermediate and at the point you yourself could possibly write a (good) book on it then you<sq>re advanced. (You can nitpick whether being a good writer is necessary, and that it<sq>s more about what you can build, but you get the point. It<sq>s a rule of thumb.)</p>", 
                "question": "How do I assess my level of skill in a language? Where<sq>s the line between Beginner/Intermediate/Advanced? What level would you consider <dq>junior position ready<dq>?"
            }, 
            "id": "d5g7xvk"
        }, 
        {
            "body": {
                "answer": "<p>Just some personal advice<colon> Do not use Pokemon. Nintendo is known to slap down the copyright hammer on even the smallest usage of its [IP](https<colon>//en.wikipedia.org/wiki/Intellectual_property).</p>", 
                "question": "How to Make a Pokemon Battle Game - Mini Course (HTML CSS JavaScript)"
            }, 
            "id": "cxxlvbw"
        }, 
        {
            "body": {
                "answer": "<p>This isn<sq>t a big thing and it has nothing to do with programming. While playing the game I used growl and it made the pikachu<sq>s thundershock do less damage. That is a special attack and growl lowers normal attack not special so growl should not affect ember or thundershock.</p>", 
                "question": "How to Make a Pokemon Battle Game - Mini Course (HTML CSS JavaScript)"
            }, 
            "id": "cxxwkl3"
        }, 
        {
            "body": {
                "answer": "<p>Heh.. I remember making battle bots in IRC chats for people.. DBZ, Pokemon.. That brings back memories.</p>", 
                "question": "How to Make a Pokemon Battle Game - Mini Course (HTML CSS JavaScript)"
            }, 
            "id": "cxy6avy"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so, so much for this free tutorial, Scotty! I<sq>ve been playing around with this all day and I am having a blast. I am currently in college for Computer Science and have background in Java and C++, so this is a nice change of pace for me.<br>I hope to see more similar things in the future. Your style of teaching is wonderful.<br>Unfortunately, people seem to be critiquing the game rather than your teaching. I can have my Charmander use Firestorm and do 90<percent> of damage to Pikachu. Whether or not <dq>this<dq> version follows the actual game, this is still a wonderful tutorial I would recommend to anyone.  </p>", 
                "question": "How to Make a Pokemon Battle Game - Mini Course (HTML CSS JavaScript)"
            }, 
            "id": "cxy4nsn"
        }, 
        {
            "body": {
                "answer": "<p>>There are only two kinds of programming languages<colon> those people always bitch about and those nobody uses.   -- Bjarne Stroustrup</p>", 
                "question": "Why is Java getting so much hate while C# is mostly getting love from seemingly everyone?"
            }, 
            "id": "cs5b0bo"
        }, 
        {
            "body": {
                "answer": "<p>**Why is Java disparaged?**<br><br>It<sq>s a sort of awkward and inelegant language, for the following reasons<colon><br><br>-   Java has a huge insistence on backwards-compatibility. As a result, many of the design mistakes they made in the past have ended up being stuck in the language, making life unpleasant later down the road. (For example, see generics and type erasure).<br>-   Java has had poor support for working in any other paradigm other then the object-oriented paradigm. Java only very recently added support for functional-style programming (see streams and lambdas), but even those are a far cry from how other languages do things. In particular, they<sq>re _far, far_ inferior to C#<sq>s Linq and how C# does lambdas (see the next section).<br>-   Java<sq>s API is clunky and inconsistent. Granted, you can memorize a lot of these issues, and most of these problems are practically a non-issue once you<sq>ve gained a level of familiarity with Java, but it does make Java a pain to teach to beginners. For example, you need to use arr.length to get the length of an array, str.length() to get the length of a string, and list.size() to get the length of a list. You can<sq>t do arr.toString() -- you need to do Arrays.toString(arr). There<sq>s no operator overloading, which means that checking to see if two things are equal in value is inconsistent -- you need to do a.equals(b) for objects and a == b for primitives instead of consistently using `==` for value equality, and some other operator by `is` for reference equality, like Python does. (Granted, C# doesn<sq>t really do this last thing well either).<br>-   Java<sq>s libraries and APIs have a reputation for sometimes being verbose. For example, parsing and grabbing a JSON property takes like 2 lines in other languages, but Java requires you evaluate and pick between several 3rd party JSON parsing libraries, then install and learn how to use said library, which can be a bit of a trial. This isn<sq>t a major issue if you<sq>re used to Java and already have a good awareness of the ecosystem, but can be a major headache for newcomers (in comparison, in C#, pretty much everybody uses Json.NET, so things are standardized). As another example, here<sq>s how you would [prettyprint XML](http<colon>//stackoverflow.com/a/139096/646543) in Java. Here<sq>s the [C# version](http<colon>//stackoverflow.com/a/1123947/646543), and the [Python version](http<colon>//stackoverflow.com/a/1206856/646543), to add contrast. The Java version does hypothetically add more flexibility and allows you to customize exactly what you want, but it would have been nice to have a no-fuss single API call.<br>-   This is more subjective, but at least for me, I personally experience a perpetual level of mild exasperation whenever I need to work with Java. It<sq>s really hard to pin down, but I keep running into minor issue after minor issue which wouldn<sq>t have been problems in other programming languages.<br><br>That said, Java isn<sq>t a _terrible_ language -- it gets many things right. It<sq>s stable and mature, runs fast, the JVM is an absolutely _amazing_ and beautiful piece of engineering. It also doesn<sq>t have any cripplingly bad weaknesses -- writing Java can sometimes feel like slogging through mud, but you can eventually get your work done. Java also has a huge range of 3rd party libraries and tools (C# has a much smaller ecosystem in comparison). <br><br>Again, I<sq>d like to emphasize that Java isn<sq>t _horrible_ and isn<sq>t _hated_ -- the ecosystem and the surrounding factors will in fact often make Java the best choice for many job. It<sq>s just that Java the _language_ isn<sq>t particularly inspiring.<br><br>And in fact, that<sq>s what I think is one of the key differences between Java and C# -- with Java, the language design is uninspiring and clunky, but the ecosystem is one of the best out there, whereas with C# it<sq>s the other way around. The language design is often innovative and very elegant, but has been hampered by a weaker ecosystem for several years now (though now that Microsoft<sq>s open-sourcing a lot of C#, hopefully that<sq>ll start changing).<br><br>**What does C# do better?**<br><br>For me, the absolute killer feature is how C# handles LINQ, C#, and Extension methods. In C#, you can<colon><br><br>- Create arbitrary anonymous functions<br>- Use the `var` keyword for type inference so you don<sq>t have to keep repeating the variable types again and again<br>- Create, return, and store anonymous objects at runtime (this makes it super easy to compose together and create arbitrary objects to store intermediate data in the middle of your LINQ expression)<br>- <dq>Extend<dq> a class and freely add what appears to be new static methods to your class without having to crack open the class + modify its source code. <br>- Use LINQ to create [list comprehensions](http<colon>//stackoverflow.com/q/130898/646543).<br><br>So, to put it all together, let<sq>s say that I have a list of names, and that I want to group the names by whether or not their length is even or odd, then concat each group together + display the total length of their names. Here<sq>s how I would do that in C#, using LINQ and functional programming<colon><br><br>    public static class Test {<br>    \tstatic string Join(this IEnumerable<string> s, string delimiter) {<br>    \t\treturn String.Join(delimiter, s);<br>    \t}<br>    \t<br>    \tstatic E Display<E>(this E thing) {<br>    \t\tConsole.WriteLine(thing);<br>    \t\treturn thing;<br>    \t}<br>    \t<br>    \tstatic void Main() {<br>    \t\tstring[] names = {<dq>Adam<dq>, <dq>Betty<dq>, <dq>Charles<dq>, <dq>Daniel<dq>};<br>    \t\t<br>    \t\tvar results = names<br>                        .GroupBy(x => x.Count() <percent> 2 == 0)<br>    \t\t\t.Select(grp => new {Names = grp.Select(n => n), <br>    \t\t\t\t\t\t\t\tCount = grp.Select(n => n.Count()).Sum()})<br>    \t\t\t.Display()<br>    \t\t\t.Select(x => x.Count + <dq><colon> <dq> + x.Names.Join(<dq>, <dq>))<br>    \t\t\t.Join(<dq>\\r\\n<dq>)<br>    \t\t\t.Display();<br>    \t}<br>    }<br><br>In contrast, here would be how you would do it in Java using roughly equivalent features<colon><br><br>    import java.util.*;<br>    import java.util.stream.*;<br>    <br>    public class Test {<br>        public static class Temp {<br>            public List<String> names;<br>            public int count;<br>            <br>            public Temp(List<String> names, int count) {<br>                this.names = names;<br>                this.count = count;<br>            }<br>            <br>            @Override<br>            public String toString() {<br>                return <dq>{names = <dq> + this.names.toString() + <br>                        <dq>, count = <dq> + this.count + <dq>}<dq>;<br>            }<br>        }        <br>    <br>        public static void main(String[] args) {<br>            String[] names = {<dq>Adam<dq>, <dq>Betty<dq>, <dq>Charles<dq>, <dq>Daniel<dq>};<br>            <br>            List<Temp> temp = Arrays.asList(names).stream()<br>                .collect(Collectors.groupingBy(x -> x.length() <percent> 2 == 0))<br>                .entrySet().stream()<br>                .map(grp -> new Temp(grp.getValue(), <br>                                     grp.getValue().stream()<br>                                                   .map(x -> x.length())<br>                                                   .mapToInt(Integer<colon><colon>intValue)<br>                                                   .sum()))<br>                .collect(Collectors.toList());                               <br>                <br>            <br>            System.out.println(temp);    <br>                <br>            String result = temp.stream()<br>                .map(x -> x.count + <dq><colon> <dq> + String.join(<dq>, <dq>, x.names))<br>                .collect(Collectors.joining(<dq>\\n<dq>));<br>                <br>            System.out.println(result);    <br>                <br>        }    <br>    }<br><br>Note that when using Java, that...<br><br>1. I have to convert the array to a list first (and why is it Arrays.asList() but Collectors.toList()? Shouldn<sq>t both use asList() or both use toList()?)<br>2. I have to tack on the <sq>stream()<sq> method everywhere<br>3. There is no natural <sq>groupBy<sq> operation -- I needed to convert the list into a map first, and then start streaming it _again_<br>4. I can<sq>t define arbitrary extension methods, so to debug the intermediate result, I either need to break my expression up into multiple variables, or I need to wrap the entire subexpression in a method + abandon the fluent method calls.<br>5. I needed to create a temporary class to store my intermediate result<br>6. I have to convert my stream of ints into an explicit IntStream object when constructing the temp object in order to sum the values.<br><br>All in all, I think it took me about 2-3 minutes to write the C# version, but like 10-15 minutes to write the Java version because I kept having to google the above tiny things/oddities. In contrast, the C# version just _works_ -- their API is clean and consistently designed.<br><br>Another awesome feature is [properties](https<colon>//msdn.microsoft.com/en-us/library/x9fsa0sw.aspx) -- I personally think that having to constantly write getters and setters everywhere in Java is a huge waste of time, and properties allow you to actually use public fields/replace them with pseudo-methods if needed in the future, which allows you to design a cleaner and nicer-looking API for any of the objects you design.</p>", 
                "question": "Why is Java getting so much hate while C# is mostly getting love from seemingly everyone?"
            }, 
            "id": "cs5dy4m"
        }, 
        {
            "body": {
                "answer": "<p>Java doesn<sq>t really have a lot of hate.  The only thing I commonly see come up about it is complaints about the amount of boilerplate and the propensity to over-engineer things (FactoryFactoryFactoryBuilder).<br><br>I work in Java daily and really my main complaint about the language is how it has stagnated.  We aren<sq>t seeing new and cool java features with each release, rather we are seeing things like <dq>Hey, we reorganized the internal library!<dq> and <dq>Hey, here<sq>s a new JSON parsing library!<dq>.<br><br>There are things it should add and change but it never will.  Things like operation overloading (.equals is an abomination), null safety constraints, etc.  They claim it is because they have too many end users and they fear breaking them, yet we see languages like Javascript and C++ landing some pretty significant new language features with each new version of their language.  Both languages have larger user bases than java does.</p>", 
                "question": "Why is Java getting so much hate while C# is mostly getting love from seemingly everyone?"
            }, 
            "id": "cs5b5cx"
        }, 
        {
            "body": {
                "answer": "<p>Warning<colon> I do c# development for a living<br><br>Generally, anything Java does (and doesn<sq>t do), C# does better. C# is now being open sourced, and Java is still struggling to implement things that C# did years ago. C# has a very nice GUI system in Winforms or WPF, a great server framework in ASP.NET, and the best IDE in Visual Studio. I don<sq>t know too much about the Java side, but i<sq>ve used it a couple times before. I disliked the IDEs I had available (for free). Many features i take for granted in C# are missing in Java. Easy threading, optional parameters, LINQ, and many more.<br><br>In the future, i see C# taking a lot more market share, while Java declines greatly. I don<sq>t think anyone will want to start a new project in Java if they have the option of C#</p>", 
                "question": "Why is Java getting so much hate while C# is mostly getting love from seemingly everyone?"
            }, 
            "id": "cs5bmvz"
        }, 
        {
            "body": {
                "answer": "<p>>I am a self taught developer so I have missed out on a lot of the learning that I could have gotten through normal discussions on the job or in school<br><br>Feel you. I feel like a stranger when around developers with a formal education.</p>", 
                "question": "Reddit is a great resource for learning"
            }, 
            "id": "d7001iz"
        }, 
        {
            "body": {
                "answer": "<p>Reddit is basically a modern Usenet.  It was a great tool for learning in the early 90s, before it got over ran with spam. </p>", 
                "question": "Reddit is a great resource for learning"
            }, 
            "id": "d701esz"
        }, 
        {
            "body": {
                "answer": "<p>100<percent> agree. This sub is a wonderful resource and those who take the time to respond to the questions do such a great job explaining things very professionally. You can really tell some  have a true passion for programming...even reading questions outside my current  interests is insightful.  I am very greatful for this sub and to all on here! </p>", 
                "question": "Reddit is a great resource for learning"
            }, 
            "id": "d70cnla"
        }, 
        {
            "body": {
                "answer": "<p>I absolutely agree /u/PrivilegedGlimpse. All the points you mentioned were spot on. For me personally, I come from a small town where programming jobs or hobbyists almost doesn<sq>t exist (strange, I know) and I would say the best part about Reddit is the sense of community it gives in towards of programming. Being able to talk, get code reviews and even get friends is just a way that you as a programmer (especially self-taught) can feel like you are part of something bigger and that<sq>s what truly amazes me about this site as well as what I take for granted.</p>", 
                "question": "Reddit is a great resource for learning"
            }, 
            "id": "d70i2ty"
        }, 
        {
            "body": {
                "answer": "<p>I started in 1964 as a mainframe operator and became a programmer 3 years later. Here is a typical day back then<colon><br>During the day, the mainframe computer in a company was used primarily for running batch production jobs like Accounts Payable; Receivables, General Ledger & Payroll. Input data would be in the form of a deck of punched cards or a reel of paper tape. Master files were typically stored on magnetic tape in a sequential record format. Output was always reams of fan-folded printed output.<br><br>There were no terminals back then and no random-access disks either.<br><br>Programmers would code their programs using languages like Autocoder, Easycoder, COBOL, BASIC & Fortran by hand-writing with a 2b pencil onto coding sheets - all in UPPERCASE. The coding sheets would then be sent to the key-punching department to be transcribed onto punched cards or paper tape - that could take hours.<br><br>Once the programmer received back the deck of cards, (s)he would visually check them for obvious mis-typing errors. Once satisfied, the program would be wrapped in JCL commands (Job Control Language) to compile and test. The deck with hand-written run-time instructions would then sent to the mainframe operations area to be scheduled - usually during the evening or night time shifts. Compiles could take 10+ minutes to run. The output was again a fan-folded printout of the program and optionally a run-time map of memory assignment of the code along with a binary punched card deck or a binary run tape. Only if the compile was clean with zero errors, could the operator run a test of the new programme. Typically, if the compile had just a few errors, the operator was skilled enough to look at the errors and if they were just typo or spelling errors, (s)he would re-punch those cards and re-run the compile to <dq>make it clean<dq> for a test.  A test could take seconds or even hours. Often the operator would have to hand-write the results of what happened on the console...fault errors, memory locations etc...<br><br>The next morning the programmer would receive the results of the compile & test and start all over again.<br><br>The turnaround for one compile & test would be 24 hours, if you were lucky!</p>", 
                "question": "Has anyone here been programming seriously since the 70s and 80s? What was it like? How has your experience of the field changed?"
            }, 
            "id": "cymxyb5"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been at it since the 70s. It was a blast!  Still is, I suppose.  There weren\u2019t a lot of resources available so you and your team were really on your own when it came to building things.  Down side was reinventing the wheel all of the time got a little tedious and everyone ended up with different sizes of wheels that didn\u2019t play well together.  Today\u2019s interoperability is quite a big deal.    <br> <br>Based on discussions here the way CS is taught has changed a great deal.   When you<sq>re working on a keypunch and only getting a few runs a day you approached things differently.  There just wasn<sq>t enough time and resources to produce large applications and \u2018change and try\u2019 coding was not possible.  I spent a great deal of effort designing and planning on paper before ever touching a computer. When I got to the point of submitting my job the expectation was that it was going to work.   The focus was almost entirely on the back end of computing<colon> algorithms, data structures, style and design.    <br><br>I was hired because I was a computer scientist, not for any specific language or domain skill.  I got my first job as a C developer having only read K&R.  I had never actually written a line of C code and I certainly had very little experience in the domain I was hired.      <br><br>The internet has made deigning bigger and better things much more feasible.  I won\u2019t say easier, it\u2019s more about the scope of things we can now set out to create.  You can really aim high.  The vast repositories of code libraries and frameworks makes doing rather spectacular things possible.   I was happy just to light up a pixel on my screen after I got my first personal computer.  Beyond that you had to figure it out yourself and while challenging, it was very time consuming.      <br><br>As for culture, I suppose I would say the degree of specialization has increased.  Things have become so complex and expectations set so high, design from scratch is rarely feasible.  Otherwise, I guess we\u2019re the same lot we were 40 years ago.       <br></p>", 
                "question": "Has anyone here been programming seriously since the 70s and 80s? What was it like? How has your experience of the field changed?"
            }, 
            "id": "cymwvca"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m only 35 but the biggest change is the availability of the internet. When I started out (somewhere around <sq>90) it was a lot harder to find resources. Back in the 90ies I had to log into BBS<sq>s and try and find tutorial texts. </p>", 
                "question": "Has anyone here been programming seriously since the 70s and 80s? What was it like? How has your experience of the field changed?"
            }, 
            "id": "cymt3yp"
        }, 
        {
            "body": {
                "answer": "<p> - You had to memorize a lot more things back then. Not only syntax or libraries, but how to get information about them. Lots of meta-knowledge. Otherwise you would waste a lot of time going through manuals searching for things.<br><br><br> - There was a lot of re-inventing the wheel. More than today. You basically programmed in a silo. If you met another programmer it was a miracle.<br><br> - Not having access to a BBS (or any kind of network) meant that you learned by doing. Boy did you have to do! I remember writing lots and lots and lots of code to get my head around some piece of code that I saw in a manual.<br><br> - Computers were so fricking expensive. I was (luckily) stuck with a C64 for years. I only knew BASIC. Then I managed to get my hands on Perl, C, C++, and Delphi/Pascal. They blew my mind!<br><br> - Was there a culture? I don<sq>t know. I wasn<sq>t lucky enough to know others. Programming was very isolated for me.<br><br> - The internet made programming a collective activity for everybody. I can simply make a pull request on a particular open source software and thats it. No need to swap floppies and keep track which version is which.</p>", 
                "question": "Has anyone here been programming seriously since the 70s and 80s? What was it like? How has your experience of the field changed?"
            }, 
            "id": "cyn0cct"
        }, 
        {
            "body": {
                "answer": "<p>The best book for Python newbies just got better. Words cannot express my gratitude for your work Al. Thank you!</p>", 
                "question": "First 3 online video tutorials for <dq>Automate the Boring Stuff with Python<dq> now available"
            }, 
            "id": "crn4gyx"
        }, 
        {
            "body": {
                "answer": "<p>What sorts of boring stuff gets automated with this tutorial? </p>", 
                "question": "First 3 online video tutorials for <dq>Automate the Boring Stuff with Python<dq> now available"
            }, 
            "id": "crn4b4a"
        }, 
        {
            "body": {
                "answer": "<p>May I ask what the purpose of this course is? I<sq>m watching the first video and it just seems like another intro to python type series, not that that is a bad thing, I just want to know what end result or project this series will be focusing on.</p>", 
                "question": "First 3 online video tutorials for <dq>Automate the Boring Stuff with Python<dq> now available"
            }, 
            "id": "crn69c0"
        }, 
        {
            "body": {
                "answer": "<p>Just bought the book a few days ago! Looking forward to doing some exercises. Thanks!</p>", 
                "question": "First 3 online video tutorials for <dq>Automate the Boring Stuff with Python<dq> now available"
            }, 
            "id": "crn7scj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been trying to write this post for the last 5 minutes, but I<sq>m not sure how to write it without sounding like a pedantic asshole so here it goes<colon><br><br>I read the section on binary search 3 times.  Nowhere in the section, as far as I can tell, does it mention that the list you are searching through has to be sorted or ordered.  However, this simple fact is critical in the application of the binary search algorithm to a given set of data.  You can<sq>t use a binary search on an unsorted data set and you certainly can<sq>t just take <dq>a list of elements<dq> as input.<br><br>I like the art style and the everyday, relatable examples.  All in all, the book looks quite good.  I also understand that everyone makes mistakes, but I feel like it<sq>s such a fundamental oversight to not even say once that a binary sort *absolutely* requires a sorted list to take as input.<br><br>To say the least, it troubles me that you<sq>re selling the book for money when it<sq>s fundamentally lacking in such a manner.  Not sure what you can do about it now, but I would definitely try to have multiple experienced programmers look at the next revision of the text before it<sq>s released.<br><br>Sorry, I really have nothing against you, but I just couldn<sq>t sit there and not say anything.</p>", 
                "question": "I<sq>m writing an illustrated introduction to algorithms aimed at beginners"
            }, 
            "id": "cjuckd0"
        }, 
        {
            "body": {
                "answer": "<p>Just bought it! I<sq>m not new to algorithms or programming but I loved the writing. I think even for the non-beginners this is a good book.</p>", 
                "question": "I<sq>m writing an illustrated introduction to algorithms aimed at beginners"
            }, 
            "id": "cjtuas1"
        }, 
        {
            "body": {
                "answer": "<p>looks just what I need. when is it out? I know it says 2015 but can you purchase a preview release prior to that?<br></p>", 
                "question": "I<sq>m writing an illustrated introduction to algorithms aimed at beginners"
            }, 
            "id": "cjtsont"
        }, 
        {
            "body": {
                "answer": "<p>Now this looks like it<sq>s going to be fantastic.  <br><br>One comment<colon> it would be nice if you could provide an entire listing of the algorithms you<sq>re going to cover, as opposed to just the general class of algorithms covered (perhaps expand the TOC to list the types of algorithms planned?)</p>", 
                "question": "I<sq>m writing an illustrated introduction to algorithms aimed at beginners"
            }, 
            "id": "cjtw361"
        }, 
        {
            "body": {
                "answer": "<p>Typically the only code that makes sense to look at is the one you wrote yourself... but only if it was less than two hours ago <colon>)</p>", 
                "question": "Is it common for a below intermediate coder to feel overwhelmed seeing other<sq>s code?"
            }, 
            "id": "csh3t1p"
        }, 
        {
            "body": {
                "answer": "<p>I do this for a living and some of the crap our head architect writes still makes my eyes cross and then I just have to go for a walk.<br><br>So, yeah. It<sq>s common, and it<sq>ll never stop. It<sq>s just that what, specifically, causes your head to spin will change over time. <colon>)</p>", 
                "question": "Is it common for a below intermediate coder to feel overwhelmed seeing other<sq>s code?"
            }, 
            "id": "csh3mi9"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s common for a Senior developer to feel overwhelmed seeing other<sq>s code.</p>", 
                "question": "Is it common for a below intermediate coder to feel overwhelmed seeing other<sq>s code?"
            }, 
            "id": "csh4iw1"
        }, 
        {
            "body": {
                "answer": "<p>Yes. Don<sq>t worry about it. <br><br>And it<sq>s always humbling to see something and think <dq>Wow, that is really well done... and I don<sq>t think I would have thought to do it that way.<dq> That will never stop happening, either.</p>", 
                "question": "Is it common for a below intermediate coder to feel overwhelmed seeing other<sq>s code?"
            }, 
            "id": "csh3y22"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "We<sq>re programming a virtual machine - from scratch!"
            }, 
            "id": "d9clxw0"
        }, 
        {
            "body": {
                "answer": "<p>I posted this in the other thread you made about this effort, but I<sq>ll report it here<colon><br><br>So I think writing an emulator is a great way to learn programming and computer architecture. But honestly, this code is pretty bad. That<sq>s not a problem when learning, but I think to tout it as an educational stream and to have code with some really basic deficiencies (like using #define instead of typedef, hiding code in headers) is a bit dishonest. I<sq>m pretty familiar with emulators and would be happy to provide some review though.<br></p>", 
                "question": "We<sq>re programming a virtual machine - from scratch!"
            }, 
            "id": "d9cunik"
        }, 
        {
            "body": {
                "answer": "<p>How much programming knowledge would be needed to understand this?</p>", 
                "question": "We<sq>re programming a virtual machine - from scratch!"
            }, 
            "id": "d9cyeda"
        }, 
        {
            "body": {
                "answer": "<p>Looks good so far thanks for sharing and keep it up. </p>", 
                "question": "We<sq>re programming a virtual machine - from scratch!"
            }, 
            "id": "d9cksde"
        }, 
        {
            "body": {
                "answer": "<p>One of the best experience when learning to program is applying code or concepts to something you enjoy. IMO, it makes the game even cooler when you learn how it ticks or why it acts like it does. It<sq>s why I love modding games and even more when it uses a language like C# or lua.</p>", 
                "question": "I<sq>ve been both coding and playing the game The Elder Scrolls 3<colon> Morrowind for more than 10 years and I just realized yesterday that the console commands (used to cheat in-game) I<sq>ve been using all along are Object Oriented."
            }, 
            "id": "d2do4dm"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! As I was just explaining to a friend, learning music has a similar experience. When you finally learn to play your favorite song by your favorite band and you realize it<sq>s not this unattainable magic, it<sq>s just a sequence of four chords!<br><br>Programming games is so much fun like that. I<sq>ll never forget the first time I saw the code for Wolfenstein Enemy Territory! It feels so good to see that barrier we create between our projects and the <dq>real world<dq> come crashing down. Now to unshroud the mystery of graphical assets! ;)</p>", 
                "question": "I<sq>ve been both coding and playing the game The Elder Scrolls 3<colon> Morrowind for more than 10 years and I just realized yesterday that the console commands (used to cheat in-game) I<sq>ve been using all along are Object Oriented."
            }, 
            "id": "d2dp0u0"
        }, 
        {
            "body": {
                "answer": "<p>Wow! Can<sq>t believe I see this post - its like a crosspost of my two favorite things from my two favorite subreddits r/Morrowind and r/learnprogramming.<br><br>I make mods for Morrowind and am currently developing a very large mod and have been working on it everyday for the last 5 months. Morrowind is basically my life right now. Its taken over my Python study time and is my basic priority at this time in my life.<br><br>Well OP, if you haven<sq>t already, try out the Construction Set and make a mod. Morrowind has a pretty limitless scripting ability for endless possibilities in game. You can make objects move in space and time, dissapear and reapear, NPC<sq>s follow a path, the player, kr each other; you can manipulate time, speed it up, slow it down, set it to an endless hour. You can script events to happen within stages of a quest. You can script NPCs to do basically anything, from casting spells to attacking to traveling in caravans. You can transport the player to locations via coordinates you set. You can make a text box appear on screen, check for all kinds of conditions (is the player<sq>s health below x? is the player<sq>s menu open or the game paused? Is their an NPC or creature x number of feet from the player?) AND you can attach virtually all these scripts to just about anything - to an activatable game object, like a ring or a book, to an NPC, to nothing at all and have it be triggered when you want it to via a dialogue choice, a player<sq>s journal being updated, or a change in a global, game-wide variable (which you can also create.) There<sq>s just so much untapped capability for one of (if not definitively) *the* most rich worlds ever created in a game, its an amazing and wonderful way to get super involved in scripting.<br><br>And the scripting for Morrowind is javascript, or a basic 2002 version of javascript. <br><br>I would just say don<sq>t start modding until you finish the main story (if you haven<sq>t already). It<sq>s just too great that you<sq>d want to experience it before breaking the fourth wall by getting into the Construction Set.<br><br>Wow. Still recovering over here from seeing a Morrowind mention - its like seeing a celebrity in public or something lol<br><br>Edit<colon> wanted to add the link to the Categorical Functions list for Morrowind Scripting - taking a quick look and you can immediately see the power of the functions within Morrowind/Construction Set<br><br>http<colon>//www.uesp.net/morrow/editor/mw_cscommands.shtml<br><br><br>Also, a great introduction<colon><br><br>http<colon>//wiki.theassimilationlab.com/mmw/Scripting_for_Dummies<br><br><br>And finally, a great tutorial for getting started if you know nothing, and even if you know something, this is literally my go-to tutorial<colon><br><br>http<colon>//www.themcnews.com/Quest_tut.pdf</p>", 
                "question": "I<sq>ve been both coding and playing the game The Elder Scrolls 3<colon> Morrowind for more than 10 years and I just realized yesterday that the console commands (used to cheat in-game) I<sq>ve been using all along are Object Oriented."
            }, 
            "id": "d2e33pd"
        }, 
        {
            "body": {
                "answer": "<p>\\o high five for learning and for still playing Morrowind. I have spent thousands of hours on that game over the years. </p>", 
                "question": "I<sq>ve been both coding and playing the game The Elder Scrolls 3<colon> Morrowind for more than 10 years and I just realized yesterday that the console commands (used to cheat in-game) I<sq>ve been using all along are Object Oriented."
            }, 
            "id": "d2dp6j5"
        }, 
        {
            "body": {
                "answer": "<p>Yo, I know how you feel. I know some stuff, but finding material that<sq>s easy to understand is really hard.<br><br>They say <dq>show us what you have so far so we can help you<dq>, motherfucker I have nothing to show you, I<sq>m fucking lost and I don<sq>t know how to explain to you what I know.</p>", 
                "question": "Does anyone else get disheartened at learning programming because they feel they are hopelessly behind the power curve?"
            }, 
            "id": "c7okoie"
        }, 
        {
            "body": {
                "answer": "<p>Everyone feels that way for a LONG time. Then one day you find yourself helping someone on reddit and you<sq>re like <dq>oh shit, I know how to code now!<dq></p>", 
                "question": "Does anyone else get disheartened at learning programming because they feel they are hopelessly behind the power curve?"
            }, 
            "id": "c7ol4m2"
        }, 
        {
            "body": {
                "answer": "<p>Try to avoid seeing the programming field in general as a field of people you<sq>re against. Instead, see fellow programmers as people who can help you learn. Don<sq>t worry about being better than them because you might be better than them somewhere that they<sq>re not as skilled in. There<sq>s *so* many areas in the programming world that nobody can master it all.<br><br>Just keep going, and if you fall down and need a hand, we can help you up.<br><br>There<sq>s so many resources, a world of information at your hands. I know it<sq>s hard to phrase your problem at first, but it comes with time.<br><br>You<sq>ll never be the absolute best programmer, that<sq>s impossible. But that shouldn<sq>t stop you from trying.<br><br>Edit<colon> Mistakes were made.</p>", 
                "question": "Does anyone else get disheartened at learning programming because they feel they are hopelessly behind the power curve?"
            }, 
            "id": "c7om7ic"
        }, 
        {
            "body": {
                "answer": "<p>All the time. I just failed Data Structures. My assignments were terrible. One asked me to use Stacks and Recursion on the same program. This completely confused me because I was taught that the purpose of stacks was to eliminate the need for recursion, or as another form of it. <br><br>I have to retake the class and im a fucking junior in college, i feel so behind and all these people who are doing good have been programming since early highschool.<br><br>I don<sq>t know what to do anymore... I really want to go into game development. I want to do that because i<sq>m more creative than anything else, and video games is a way for me to turn lines of code into entertainment.  I want to use video games as a creative medium.<br><br>But I think i<sq>m really bad at programming.. sigh.. I don<sq>t know what to do..</p>", 
                "question": "Does anyone else get disheartened at learning programming because they feel they are hopelessly behind the power curve?"
            }, 
            "id": "c7ol535"
        }, 
        {
            "body": {
                "answer": "<p>I was wondering the same thing a few weeks back. Found this back then http<colon>//www.sleepeasysoftware.com/11-podcasts-that-will-make-you-a-better-software-engineer/<br><br>Apart from this, I really enjoy Coding Blocks </p>", 
                "question": "Any good programming or software related podcasts?"
            }, 
            "id": "d6g225n"
        }, 
        {
            "body": {
                "answer": "<p>* [1 month ago, this sub, nearly 1000 upvotes](https<colon>//www.reddit.com/r/learnprogramming/comments/4pyo9h/make_good_use_of_your_down_time_by_listening_to/)<br>* [1 month ago, /r/programming, 2.2k upvotes](https<colon>//www.reddit.com/r/programming/comments/4objpb/11_podcasts_i_listen_to_to_improve_as_a_software/)</p>", 
                "question": "Any good programming or software related podcasts?"
            }, 
            "id": "d6ga61w"
        }, 
        {
            "body": {
                "answer": "<p>I really enjoy [Software Engineering Daily](http<colon>//softwareengineeringdaily.com/).</p>", 
                "question": "Any good programming or software related podcasts?"
            }, 
            "id": "d6fzr4t"
        }, 
        {
            "body": {
                "answer": "<p>I really like programming throwdown </p>", 
                "question": "Any good programming or software related podcasts?"
            }, 
            "id": "d6g6r1f"
        }, 
        {
            "body": {
                "answer": "<p>So you learned programming concepts to a high enough level that you were able to see a project through from beginning to end, with no instruction whatsoever? <br><br>You<sq>re already ahead of the game. Have a coffee, take a break and appreciate your hard work! <colon>)<br></p>", 
                "question": "Am I too dumb for programming?"
            }, 
            "id": "cwt2ou2"
        }, 
        {
            "body": {
                "answer": "<p>What would you say the most complex program you can make is?<br><br>Also you might be switching tracks too often. You might be better off sticking with one language and environment for a year or two.</p>", 
                "question": "Am I too dumb for programming?"
            }, 
            "id": "cwt23kc"
        }, 
        {
            "body": {
                "answer": "<p>>The problem is that I get stressed out and lose focus very fast.<br><br>You<sq>re right, I imagine. There are a number of approaches. Exercise, seeing a psychologist or psychiatrist (maybe being prescribed medication for ADHD), getting good sleep, etc, or a combination of these approaches. Good luck. It<sq>s an intellectual career so we all have to take good care of our minds to perform well!<br><br>Also if you watch Learning How To Learn on Coursera, in a couple of the introductory videos the lecturer there talks about her own <sq>inability to stay focused<sq> and how it can open up other doors of creativity.</p>", 
                "question": "Am I too dumb for programming?"
            }, 
            "id": "cwt2jox"
        }, 
        {
            "body": {
                "answer": "<p>You should focus on one language only. Learning a single language at a time for a number of years is much easier than learning 9 for the same time.</p>", 
                "question": "Am I too dumb for programming?"
            }, 
            "id": "cwt2u4w"
        }, 
        {
            "body": {
                "answer": "<p>When you learned Spanish, did you start having full-fledged conversations?  Just walked into class on day one and boom<colon> <dq>tango el gato los pantalones<dq>?  <br><br>If I were a betting man, I<sq>d say no.  <br><br>They gave you a book for grammar, a dictionary for words, and taught you ways to pronounce and express sounds that aren<sq>t in English.  <br><br>Most videos (whether they mean to or not) are presented in such a way, that you need to know Spanish before you start learning Spanish.  Sometimes you get lucky, but most are for the already initiated.<br><br>[I usually recommend this book](http<colon>//www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208/ref=sr_1_1?ie=UTF8&qid=1381716046&sr=8-1&keywords=head+first+java) for the uninitiated.  It<sq>s quite descriptive, very short, and covers a large amount of topics briefly enough to get one interested in the language (or in programming in general).  This is your grammar book.<br><br>[Here<sq>s your dictionary](http<colon>//stackoverflow.com/questions/tagged/java).<br><br>The last thing you need is to use the language.  In the case of programming, solve a problem.  If you want to make games; learn the basics of Java grammar, and make a guess-the-number game.  Then work up to a text adventure.  Then figure out how to do pong, then breakout, then tetris, then Mario.  <br><br>Software development isn<sq>t about knowing everything.  It<sq>s about knowing what you don<sq>t know and learning what you need to learn to solve the problem.</p>", 
                "question": "To the programmers out there."
            }, 
            "id": "ccr6h4b"
        }, 
        {
            "body": {
                "answer": "<p>Actually you overestimate the vast majority of us. While a lot of programmers can learn another language given time, the majority of us have maybe one to three languages we<sq>re very good at, at the moment<br><br>Case in point this amazing Java architect guy joined our company. He cleaned out a lot of the code and installed countless best practices. He can debug like crazy, knows all the latest patterns, personally got the entire company to use test driven code, and re-architectured the platform to use SOA. We have a lot of sharp guys in our company who respect him, and I dream one day I<sq>ll be as good as him.<br><br>And then I watched him struggle on and off for two days to get 1 line of Javascript to work. He finally sent me the code, and I got it working in 5 minutes. <br><br>Go figure.<br><br>EDIT<colon> It was a mouseover highlight thingy. 1 google search, 1 minute of reading a Jquery api, and 1 minute of modifying his code. <dq>Is uh, this, what you want?<dq></p>", 
                "question": "To the programmers out there."
            }, 
            "id": "ccrboym"
        }, 
        {
            "body": {
                "answer": "<p>ya I hear you... i think I<sq>ve dropped out of like 3 different coursera courses  because theres alot of different resources and stuff it can be really overwhelming. I<sq>m just starting small and going little by little... this online course i<sq>ve been taking has been really good so far www.cs50.net. you can just watch the videos and follow along, it<sq>s actually been pretty rewarding  so far. <br><br>Anyhow I hear you though because all these different frameworks and editors and languages that do all these different functions is crazy overwhelming when you first dive in. It<sq>s still overwhelming lol. But the small achievements when you finally piece together some code that does what you want it to do makes it worth it! </p>", 
                "question": "To the programmers out there."
            }, 
            "id": "ccr5c1q"
        }, 
        {
            "body": {
                "answer": "<p>The dirty secret about programming is it<sq>s as much an art as a science. That<sq>s why there<sq>s millions of engineers, science majors and even IT people who can<sq>t be programmers. At least not good ones.<br><br>A lot of ex-military seem to be very good DBAs or networking people. It<sq>s much more structured and in the long run less stressful than programming. It even makes more money most of the time and is mission critical to a business (data and hardware is important, the next wow app usually isn<sq>t). If you really want a career in IT I would look at Oracle/MS/Cisco certifications as military guys seem to have the iron will and discipline to go through all that pain.</p>", 
                "question": "To the programmers out there."
            }, 
            "id": "ccr7lap"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Going to Jail for 4-5 months What are some books/resources to help me get started that don<sq>t require a computer? (lol)"
            }, 
            "id": "cbjqkyf"
        }, 
        {
            "body": {
                "answer": "<p>Recently I was on a long visit to my partners family. Not exactly prison - the food was way better. I had no access to a computer, so I bought a writing book to write in, and started working through rob sharp<sq>s yellow c# book, writing out programs as I learnt, and basically writing my own text book as I went. I had a book full of mini programs and instructions to work through when o got back to the computer. Between writing it out and working out why they didn<sq>t work when I tested them I learnt alot.<br><br>EDIT rob miles c# yellow book. Apologies for my shitty memory. Also, good luck with doing the time, keeping your head in books and a bit of exercise makes it less grim.</p>", 
                "question": "Going to Jail for 4-5 months What are some books/resources to help me get started that don<sq>t require a computer? (lol)"
            }, 
            "id": "cbjrs5y"
        }, 
        {
            "body": {
                "answer": "<p>Hey,<br><br>I received a BS in Computer Science in college. There<sq>s a lot of math, I went through Calc III and was 3 courses short of a math minor.<br><br>I think you would benefit greatly by ensuring your math skills are up to snuff. You<sq>ll save yourself a lot of headache in university if you can breeze through your math classes and focus on your computer science when you have a computer.<br><br>Just a thought. Good luck.</p>", 
                "question": "Going to Jail for 4-5 months What are some books/resources to help me get started that don<sq>t require a computer? (lol)"
            }, 
            "id": "cbjs09h"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Going to Jail for 4-5 months What are some books/resources to help me get started that don<sq>t require a computer? (lol)"
            }, 
            "id": "cbjui3z"
        }, 
        {
            "body": {
                "answer": "<p>If you like to stream yourself coding, livecoding.tv is a really good site.</p>", 
                "question": "When this post is 7 hours old I will stream iOS Instagram client development from scratch (real iOS developer job requirement)"
            }, 
            "id": "csyi3a5"
        }, 
        {
            "body": {
                "answer": "<p>Not big on streaming so not sure...are the videos saved and rewatchable later (on either platform/site)?</p>", 
                "question": "When this post is 7 hours old I will stream iOS Instagram client development from scratch (real iOS developer job requirement)"
            }, 
            "id": "csykqda"
        }, 
        {
            "body": {
                "answer": "<p>What job level are you doing this for? I<sq>ve never heard of someone asking for a entire app as a prereq to a job interview...</p>", 
                "question": "When this post is 7 hours old I will stream iOS Instagram client development from scratch (real iOS developer job requirement)"
            }, 
            "id": "csyy2qg"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re a boss <3</p>", 
                "question": "When this post is 7 hours old I will stream iOS Instagram client development from scratch (real iOS developer job requirement)"
            }, 
            "id": "csyl7w1"
        }, 
        {
            "body": {
                "answer": "<p>Title is really<colon> how to stunt your growth in anything. Nothing here that is true just for developers. </p>", 
                "question": "How to stunt your growth as a developer"
            }, 
            "id": "crxybci"
        }, 
        {
            "body": {
                "answer": "<p>`21. waste time reading lists online`<br><br>I<sq>m sorry, I couldn<sq>t help it.</p>", 
                "question": "How to stunt your growth as a developer"
            }, 
            "id": "cry08gu"
        }, 
        {
            "body": {
                "answer": "<p>21.  21. Asking questions here that could be answered by spending 2 minutes using Google and never looking further into Google results than what you immediately need.</p>", 
                "question": "How to stunt your growth as a developer"
            }, 
            "id": "crxvob0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How to stunt your growth as a developer"
            }, 
            "id": "cry4hs4"
        }, 
        {
            "body": {
                "answer": "<p>This should be cross-posted in /r/RASPBERRY_PI_PROJECTS </p>", 
                "question": "A geeky gift for a non-geeky girlfriend"
            }, 
            "id": "detzhu3"
        }, 
        {
            "body": {
                "answer": "<p>Also a good cheap gift. https<colon>//varianto25.com/playing-cards</p>", 
                "question": "A geeky gift for a non-geeky girlfriend"
            }, 
            "id": "deu2ejq"
        }, 
        {
            "body": {
                "answer": "<p>This is SO cool! I haven<sq>t built anything with raspberry pi yet b/c I thought I wasn<sq>t interested in hardware, but this project is changing my mind.</p>", 
                "question": "A geeky gift for a non-geeky girlfriend"
            }, 
            "id": "deu5yjx"
        }, 
        {
            "body": {
                "answer": "<p>Great build! <br><br>Quick question, fellow builder<colon> <br>I<sq>m building a web page that will host my info and plan on broadcasting that to a full screened session of chromium on the RPI. What<sq>s the difference between doing that and what you did with Electron? </p>", 
                "question": "A geeky gift for a non-geeky girlfriend"
            }, 
            "id": "deu36xp"
        }, 
        {
            "body": {
                "answer": "<p>I would recommend people load up linux in a Virtual Machine (VirtualBox) first to see if they like it. It<sq>s totally safe and you won<sq>t run the risk of accidentally wiping your hard drive. <br><br>It<sq>s also less of a hassle to remove if you decide linux isn<sq>t for you.</p>", 
                "question": "[noob tip] Linux isn<sq>t as intimidating as one would think if you<sq>re interested install it and start tinkering"
            }, 
            "id": "comnlm4"
        }, 
        {
            "body": {
                "answer": "<p>But you can always remember there is more than just LinuxMint. I personally like Ubuntu, but that<sq>s because it suits me. I<sq>d recommend looking into all of the other Linux or even Unix relative OS<sq>s, which even means Mac OS.</p>", 
                "question": "[noob tip] Linux isn<sq>t as intimidating as one would think if you<sq>re interested install it and start tinkering"
            }, 
            "id": "compppd"
        }, 
        {
            "body": {
                "answer": "<p>I recommend Xubuntu. It<sq>s Ubuntu without all that annoying tablet shit.</p>", 
                "question": "[noob tip] Linux isn<sq>t as intimidating as one would think if you<sq>re interested install it and start tinkering"
            }, 
            "id": "comu1g2"
        }, 
        {
            "body": {
                "answer": "<p>Just an fyi, you probably already know but Shotts book is available for free in pdf form.<br><br>http<colon>//linuxcommand.org/tlcl.php<br><br>This is a really good book if you want to learn about the command line and using pipes and redirects and other wacky stuff.</p>", 
                "question": "[noob tip] Linux isn<sq>t as intimidating as one would think if you<sq>re interested install it and start tinkering"
            }, 
            "id": "compzhp"
        }, 
        {
            "body": {
                "answer": "<p>Hello World</p>", 
                "question": "What are some <dq>must-develop<dq> applications everyone should make in order to learn a particular language?"
            }, 
            "id": "ceyjcfe"
        }, 
        {
            "body": {
                "answer": "<p>>* Text-based adventure [Key topics<colon> basic i/o, basic code structure]<br>* Conway<sq>s Game of Life [Key topics<colon> cellular automata, arrays, mouse input, simple rendering]<br>* Tetris [Key topics<colon> basic collisions, keyboard input, slightly less simple rendering]<br>* Snake [Key topics<colon> linked lists]<br>* Asteroids [Key topics<colon> trigonometry, slightly less basic collisions]<br>* Minesweeper [Key topics<colon> flood fill]<br>* Sudoku [Key topics<colon> basic procedural generation]<br>* Tile-based editor [Key topics<colon> file access, gui creation]<br>* Perlin noise algorithm [Key topics<colon> advanced procedural generation]<br>* A* algorithm [Key topics<colon> pathfinding]<br>* Galcon [Key topics<colon> basic AI]<br>* Brainfuck interpreter [Key topics<colon> basic parsing]<br>* Hash table [Key topics<colon> atypical applications of linked lists, data structures]<br>* Splayed binary search tree [Key topics<colon> advanced data structures]<br>* XML parser [Key topics<colon> slightly more advanced parsing, practical applications of complex data structures]<br>* Falling sand game [Key topics<colon> practical applications of parsing, basic particle physics simulation, complex application of gui]<br>* Platformer game [Key topics<colon> basic rigid body physics]<br>* Chess versus a computer opponent [Key topics<colon> advanced AI]<br>* GIF saving & loading algorithm [Key topics<colon> advanced file access, compression and decompression, bitwise arithmetic]<br>* Simple Lua/Python-driven game engine [Key topics<colon> virtual machines, basic engine creation]<br>* Raycasting renderer [Key topics<colon> pseudo-3D rendering]<br>* FPS [Key topics<colon> 3D rendering, Basic 3D collisions]<br><br>Quoted from http<colon>//www.reddit.com/r/learnprogramming/comments/1a17tq/veteran_programmers_what_projects_did_you_work_on/c8t9j4e<br><br>by /u/_Madk<br> </p>", 
                "question": "What are some <dq>must-develop<dq> applications everyone should make in order to learn a particular language?"
            }, 
            "id": "ceym5b8"
        }, 
        {
            "body": {
                "answer": "<p>This isn<sq>t language specific, but this course management system would be a good project for anyone that wants to learn webapps from the foundational level.<br><br>1.) Courses had a cost<br><br>2.) Departments had a budget<br><br>3.) employees belonged to a department<br><br>4.) Courses could hold x number of students<br><br>5.) Students had a max (say 3) courses that could be taken by year<br><br>6.) Courses had documentation that needed to be accessible from a course information page<br><br>7.) Department heads needed to be notified (e-mail) when their employees signed up for a course - and then they needed to provide approval.<br><br>8.) You needed to be able to see a calendar of your courses<br><br>9.) You needed to be able to see a calendar of available courses<br><br>10) Courses needed a training room<br><br>11) Training rooms were limited (say 5)<br><br>12) Departments needed to be able to add courses<br><br>13) Each training room has a limited number of seats, but this number varies across rooms.<br><br>14) The site is available in multiple languages<br><br>15) Course documents need to be uploaded.<br><br>16) All site users must have a userID and a Password that is never stored in clear text<br><br><br>* Do this in the language of your choice (PHP/Java/etc...)<br>* Develop all UI widgets and Javascript <br>* Test this with jmeter or some other tool that allows you to hit the site with concurrent users<br>* Unit test all methods, javascript functions and each page (selenium can help with Page level unit testing)<br>* Develop your own database structure<br>* Do not allow for SQL injection attacks<br>* All inputs must be validated<br>* The site must able to be logged at informational <br>* Third party libraries are not to be used for UI components (all of the HTML and Javascript will be generated by you or your code)<br>* No library shall be used that abstracts the interaction between the UI and the back end - if you need to write a file upload, you<sq>ll learn to handle a multi-part form yourself, end of story<br><br><br></p>", 
                "question": "What are some <dq>must-develop<dq> applications everyone should make in order to learn a particular language?"
            }, 
            "id": "ceyjhoy"
        }, 
        {
            "body": {
                "answer": "<p>I enjoy making tamagotchi clones. </p>", 
                "question": "What are some <dq>must-develop<dq> applications everyone should make in order to learn a particular language?"
            }, 
            "id": "ceylx0n"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m from a more or less purely business education and landed in a position where my job centers around data analysis. I only recently started, but I<sq>m beginning work with SQL (Querying only, no <dq>back end<dq> table management). Aside from this, I don<sq>t have any coding experience. I<sq>ve started taking a Python on Coursera, but it will be some time until I<sq>m proficient. What sorts of skills and/or courses should I be looking into to move in the direction of a data science career, as I don<sq>t see myself moving forward from my current position without more computer science skills. </p>", 
                "question": "I<sq>m a data scientist who transitioned to the field from software engineering. In the past I<sq>ve led a data science team at an Andressen-Horowitz funded cybersecurity startup. AMA about how to become a data scientist or what data scientists do."
            }, 
            "id": "db4krtk"
        }, 
        {
            "body": {
                "answer": "<p>As an undergrad computer science student, are there any specific internships or job opportunities you would recommend looking out for to become more involved in data science as a career?</p>", 
                "question": "I<sq>m a data scientist who transitioned to the field from software engineering. In the past I<sq>ve led a data science team at an Andressen-Horowitz funded cybersecurity startup. AMA about how to become a data scientist or what data scientists do."
            }, 
            "id": "db4kxlf"
        }, 
        {
            "body": {
                "answer": "<p>What was the most fascinating project you worked on (that you can share)? What kind of datasets did you use and what did you learn from it? </p>", 
                "question": "I<sq>m a data scientist who transitioned to the field from software engineering. In the past I<sq>ve led a data science team at an Andressen-Horowitz funded cybersecurity startup. AMA about how to become a data scientist or what data scientists do."
            }, 
            "id": "db46hr0"
        }, 
        {
            "body": {
                "answer": "<p>IN YOUR OPINION, which path do you recommend for new grads?</p>", 
                "question": "I<sq>m a data scientist who transitioned to the field from software engineering. In the past I<sq>ve led a data science team at an Andressen-Horowitz funded cybersecurity startup. AMA about how to become a data scientist or what data scientists do."
            }, 
            "id": "db495an"
        }, 
        {
            "body": {
                "answer": "<p>I totally appreciate new learning material, but I especially like how some of these reddit user <dq>success stories<dq> are accounts signed up to post one comment here. Come on, don<sq>t try to trick CS guys, if you<sq>ve got a good product then sell it with your own words.</p>", 
                "question": "Learn iOS 9 and Swift 2.0 with over 250 videos for free"
            }, 
            "id": "ctwg7nq"
        }, 
        {
            "body": {
                "answer": "<p>I took the iOS 8 course from bitfountain last year. Although I started with zero programming knowledge, in weeks I was able to develop my own apps. Now I<sq>m working on my own startup dedicated to spreading the coding/startup mentality in Italy (I am Italian). Nothing but good things to say about bitfountain and the helpful community.</p>", 
                "question": "Learn iOS 9 and Swift 2.0 with over 250 videos for free"
            }, 
            "id": "ctw1qhr"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m just gonna say, I was genuinely interested in this, but I think I<sq>m going to stay as far away as possible. Spam posts/fake reviews is a major problem for me. I own a business and I can<sq>t imagine doing this sort of thing to potential customers.<br><br>Speaks a lot for the owners if they are behind this.</p>", 
                "question": "Learn iOS 9 and Swift 2.0 with over 250 videos for free"
            }, 
            "id": "ctwq8kb"
        }, 
        {
            "body": {
                "answer": "<p>/r/HailCorporate</p>", 
                "question": "Learn iOS 9 and Swift 2.0 with over 250 videos for free"
            }, 
            "id": "ctwlz6y"
        }, 
        {
            "body": {
                "answer": "<p>Neat.<br><br>Gives me an idea for a rule for when to write comments<colon><br><br><dq>Write comments as if you are coding for an audience with no audio.<dq></p>", 
                "question": "So cool I had to share. This site shows mini projects written in real time in HTML/CSS?JS"
            }, 
            "id": "cdsp57a"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not a coder in any sense of the word, but after watching a few different pieces, I realized that you could actually go in and tinker with the code after it was finished.<br><br>Yeah, I changed some some colours so I feel totally like a hardcore hacker....</p>", 
                "question": "So cool I had to share. This site shows mini projects written in real time in HTML/CSS?JS"
            }, 
            "id": "cdsrs6i"
        }, 
        {
            "body": {
                "answer": "<p>I believe it was made by a redittor, i saw it first posted in /r/web_design</p>", 
                "question": "So cool I had to share. This site shows mini projects written in real time in HTML/CSS?JS"
            }, 
            "id": "cdsp226"
        }, 
        {
            "body": {
                "answer": "<p>this is infinitely better than watching youtube videos. <br></p>", 
                "question": "So cool I had to share. This site shows mini projects written in real time in HTML/CSS?JS"
            }, 
            "id": "cdsy8p1"
        }, 
        {
            "body": {
                "answer": "<p>Ah, the days when I get my hands on something new to learn at work.  The hours just flow by.  Those are the best times.</p>", 
                "question": "I<sq>ve witnessed something incredible"
            }, 
            "id": "c9td3zf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m sorry but this post was funny to me because its so dramatic. Good for your friend though. </p>", 
                "question": "I<sq>ve witnessed something incredible"
            }, 
            "id": "c9te5m1"
        }, 
        {
            "body": {
                "answer": "<p>I thought you were going to say you saw someone write code for an hour or more and have it compile on the first try...I was gonna call BS on that one.  </p>", 
                "question": "I<sq>ve witnessed something incredible"
            }, 
            "id": "c9theol"
        }, 
        {
            "body": {
                "answer": "<p>Fuck yeah. Good on him. Never heard of the MEAN stack, sounds interesting, and like a good way for me to learn Mongo and Node. Could you maybe ask him to put together a linklist of what he used to learn?</p>", 
                "question": "I<sq>ve witnessed something incredible"
            }, 
            "id": "c9te7r4"
        }, 
        {
            "body": {
                "answer": "<p>If you don<sq>t mind me asking, what is your salary range?</p>", 
                "question": "This week I accepted my first full-time programming job."
            }, 
            "id": "dg7u5tb"
        }, 
        {
            "body": {
                "answer": "<p>Well done! Happy for you!! I<sq>m going through freecodecamp now on the pomodoro clock and loving it <colon>) did you finish their curriculum? </p>", 
                "question": "This week I accepted my first full-time programming job."
            }, 
            "id": "dg7pl9r"
        }, 
        {
            "body": {
                "answer": "<p>This is amazingly encouraging! I<sq>m on the same track, a few months in now. How was it applying for the initial internship? Were they actively looking for interns? Programming is challenging but I honestly find reaching out to real humans more intimidating. Congrats again!</p>", 
                "question": "This week I accepted my first full-time programming job."
            }, 
            "id": "dg7u7pw"
        }, 
        {
            "body": {
                "answer": "<p>Inspirational & motivational post, friend. Good luck on your job and continual journey!</p>", 
                "question": "This week I accepted my first full-time programming job."
            }, 
            "id": "dg7y4va"
        }, 
        {
            "body": {
                "answer": "<p>Not strictly a documentary about programming but one I found very interesting [The Secret Rules of Modern Living<colon> Algorithms<br>](https<colon>//www.netflix.com/title/80095881). It is streaming on netflix if you have a sub. It is kind of an ELI5 about algorithms in real life examples. Really helps to visualize some of the basic concepts in search/sort etc.<br></p>", 
                "question": "Does anybody know any coding/programming/hacking documentaries?"
            }, 
            "id": "d6e0131"
        }, 
        {
            "body": {
                "answer": "<p>This is pretty much the most accurate hacking documentary I<sq>ve seen<colon> http<colon>//m.imdb.com/title/tt0113243/</p>", 
                "question": "Does anybody know any coding/programming/hacking documentaries?"
            }, 
            "id": "d6e2mwf"
        }, 
        {
            "body": {
                "answer": "<p>I really like Zero Days. It<sq>s about the Stuxnet virus by the same director that did Going Clear. <br><br>http<colon>//www.zerodaysfilm.com/<br><br><br></p>", 
                "question": "Does anybody know any coding/programming/hacking documentaries?"
            }, 
            "id": "d6e6gjb"
        }, 
        {
            "body": {
                "answer": "<p>I loved this one. https<colon>//www.youtube.com/watch?v=un_XI4MM6QI<br><br>It<sq>s about a city full of hackers in Romania. It includes the guy who hacked Hillary (Guccifer).<br><br>I also just saw that they have a new episode about an underground server bunker for illegal activities. I know what *I<sq>m* watching at work tomorrow!<br></p>", 
                "question": "Does anybody know any coding/programming/hacking documentaries?"
            }, 
            "id": "d6e5uyp"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Vim Cheat Sheet"
            }, 
            "id": "d04mqe2"
        }, 
        {
            "body": {
                "answer": "<p>Maybe you are interested in /r/vim.</p>", 
                "question": "Vim Cheat Sheet"
            }, 
            "id": "d04wism"
        }, 
        {
            "body": {
                "answer": "<p>Reported to exam board</p>", 
                "question": "Vim Cheat Sheet"
            }, 
            "id": "d04z25j"
        }, 
        {
            "body": {
                "answer": "<p>Vim noob here<colon> What is the difference between executing (if there is any)<br><br>    <colon>qw!<br>and<br><br>    <colon>x!<br>Both accomplish the same thing but I have never used the latter. </p>", 
                "question": "Vim Cheat Sheet"
            }, 
            "id": "d04oi14"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re right. I<sq>ve  been in the IT industry since 1998,  developing for a year. In the two development jobs i<sq>ve had, there were very few people who really knew how to program. Most of them are copy/paste, trial & error programmers.</p>", 
                "question": "To those of you aiming for a job as a web developer. Give yourself some credit and start applying!"
            }, 
            "id": "cqemw3q"
        }, 
        {
            "body": {
                "answer": "<p>Where would you say your skill level is at? </p>", 
                "question": "To those of you aiming for a job as a web developer. Give yourself some credit and start applying!"
            }, 
            "id": "cqekubr"
        }, 
        {
            "body": {
                "answer": "<p><br>\t<br>I know I am not at the job-ready level, but I am trying to move toward it (btw. thank you all, I found out that programmers are much friendlier community than it seems from outside). <br> <br>My problem is that I feel like more I learn, less I know. It is like <dq>De Docta Ignorantia<dq> from Nicolaus Cusanus. The more I know, the more frightening things I see in distance. It is like in this field <dq>what you don<sq>t know<dq> defines what is your skill. On top of that - I have a feeling that it is not possible to actually learn programming. Like you can only learn just enough stuff to convince those who know less than you that you know what you are doing. But in reality you are only chasing solutions and that there is always better way to solve problems which you are not capable of seeing. <br> <br>I have a feeling that no matter how much I learn, it will be visible to everybody and I will just bust from interviews (if I ever learn enough to actually try some applications) or worse, I will pass some interview but will get fired from work shortly. <br> <br>I would really like to know if you had similar feelings while learning and if there is some breakpoint where programming will stop being scary. <br> <br></p>", 
                "question": "To those of you aiming for a job as a web developer. Give yourself some credit and start applying!"
            }, 
            "id": "cqepp8j"
        }, 
        {
            "body": {
                "answer": "<p>hey good to know!!! it encourages <colon>)<br><br>What had your learned front-end, back-end or full-stack? Care to share more on your history, languages learned, etc...</p>", 
                "question": "To those of you aiming for a job as a web developer. Give yourself some credit and start applying!"
            }, 
            "id": "cqel3pc"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for the motivation!  <br>Much appreciated!</p>", 
                "question": "If you feel overwhelmed! KEEP AT IT!"
            }, 
            "id": "cf9ewqy"
        }, 
        {
            "body": {
                "answer": "<p>If I may ask, what was the preferred method of teaching yourself? books, online course, uni course...?</p>", 
                "question": "If you feel overwhelmed! KEEP AT IT!"
            }, 
            "id": "cf9eyem"
        }, 
        {
            "body": {
                "answer": "<p>I needed this post.  Thank you very much.</p>", 
                "question": "If you feel overwhelmed! KEEP AT IT!"
            }, 
            "id": "cf9fdyx"
        }, 
        {
            "body": {
                "answer": "<p>You the man now dog!</p>", 
                "question": "If you feel overwhelmed! KEEP AT IT!"
            }, 
            "id": "cf9rxmr"
        }, 
        {
            "body": {
                "answer": "<p>***Some Python Modules***<br><br>- Selenium - Simulate browsers and have some fun. You could spam your friends by sending them 1000<sq>s of messages or automate some tedious routine that you do everyday.<br><br>- pygame - Try building some cool games in Python. (I haven<sq>t used it)<br><br>- Flask - A really simple web server. You could try making a website with a backend.<br><br>- Requests - Scrape data from your favourite sites (live scores, news updated) and update yourself every 30 minutes or so<br><br>- sqlite - A database which stores data in a single file. You don<sq>t need to install anything  and yet you get a very handy functional database. (FYI<colon>- most Android Applications use a sqlite database). You could club this with Flask as well <colon>)  <br><br>Additional Reading<colon>- [When to use sqlite](https<colon>//sqlite.org/whentouse.html)<br><br>- [htmlpy](http<colon>//htmlpy.readthedocs.io/en/master/) - Build decent applications with a Graphical User Interface (GUI) easily using this module. (You just need to know HTML and CSS). Normally creating GUI is a pain.<br><br>- [XlsxWriter](https<colon>//pypi.python.org/pypi/XlsxWriter) - I use this module to create Excel Worksheets. It supports formatting, filters, charts and a bunch of other general stuff.<br><br>- [VPython](http<colon>//vpython.org/) - I haven<sq>t used this. You can create animations with Python.<br><br>- Celery - How could I forget this? Install Redis. Celery is a good start if you want to become familiar with distributed computing. Ever wondered how a company uses multiple servers to run a single website? How do these servers communicate and share the burden among themselves? My boss helped me get started with Celery <colon>D<br><br>FYI<colon>- Celery is used by Instagram and Mozilla.   <br>In case you use Windows<colon>- Redis ([Redis for Windows64 bit](https<colon>//github.com/MSOpenTech/redis/releases)). Redis doesn<sq>t officially support Windows.<br><br>***Some fun things. Not modules though.***<br><br>You could probably learn or play around. I had starred these on Github some time ago. I<sq>m not sure if these projects are still active.  <br><br><br>- [Minecraft Clone](https<colon>//github.com/fogleman/Minecraft) Haven<sq>t played this game. It<sq>s made by an awesome programmer and has many stars.<br><br>- [Subtitles Downloader](https<colon>//github.com/manojmj92/subtitle-downloader) I tried and I couldn<sq>t get it to work. However it<sq>s a damn small program and you could try figuring out it<sq>s logic. You can ignore the shell scripts if you don<sq>t understand them.<br><br>- [Collection of awesome projects](https<colon>//github.com/vinta/awesome-python) These are quite complex if you<sq>re just starting out. You could perhaps grok this in the future in case you can<sq>t understand the projects. You can definitely try cloning and using some of the repositories.<br><br>- [Jupyter Notebook](https<colon>//ipython.org/) Powerful tool and it<sq>s quite fun. You can use Python from your browser and a server. A major chunk of people use Jupyter Notebooks for development. Formerly known as IPython Notebooks.<br><br></p>", 
                "question": "Looking for some Python Libraries to play with over my holiday"
            }, 
            "id": "da5kwe0"
        }, 
        {
            "body": {
                "answer": "<p>Seriously? No one is going to mention nltk?<br><br>http<colon>//www.nltk.org/        = natural language processing<br><br>Here are some more<colon><br><br>http<colon>//scikit-learn.org/stable/                         = machine learning<br><br>http<colon>//newspaper.readthedocs.io/en/latest/   = article scraping <br><br>https<colon>//scrapy.org/                                         = scraping and web crawling</p>", 
                "question": "Looking for some Python Libraries to play with over my holiday"
            }, 
            "id": "da5sjz6"
        }, 
        {
            "body": {
                "answer": "<p>BeatifulSoap is awesome if you want learn how to obtain specific data from html and xml </p>", 
                "question": "Looking for some Python Libraries to play with over my holiday"
            }, 
            "id": "da5pv87"
        }, 
        {
            "body": {
                "answer": "<p><dq>import praw<dq> for your very own reddit bot!</p>", 
                "question": "Looking for some Python Libraries to play with over my holiday"
            }, 
            "id": "da5osge"
        }, 
        {
            "body": {
                "answer": "<p>Automate the Boring Stuff with Python. It<sq>s even available free online.<br><br>https<colon>//automatetheboringstuff.com/</p>", 
                "question": "Does anyone know of any good python tutorials that walk you through creating (anything) from start to finish?"
            }, 
            "id": "d8u4o0c"
        }, 
        {
            "body": {
                "answer": "<p>u/sentdex has tons of cool projects, just look up his username on youtube. He has games as well as robots and machine learning tutorials. I learned a lot from his channel when I was starting out.</p>", 
                "question": "Does anyone know of any good python tutorials that walk you through creating (anything) from start to finish?"
            }, 
            "id": "d8ubald"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//newcoder.io/tutorials/ has 5 <br><br>* Data Visualization<br>* Web Scraping<br>* APIs<br>* Networking (IRC bot)<br>* GUI (Sudoku game)<br><br>Also check out [problems/projects with solution in Python](https<colon>//github.com/learnbyexample/scripting_course/blob/master/Python_curated_resources.md#coding-problemsprojects-with-solution)</p>", 
                "question": "Does anyone know of any good python tutorials that walk you through creating (anything) from start to finish?"
            }, 
            "id": "d8ud6ne"
        }, 
        {
            "body": {
                "answer": "<p>What do you want or are interested in watching/reading someone do with python? The language has a wide variety of usage, such as<colon> web development, applications, scripts, deep/machine learning, and data analytics.<br><br>Are you willing to gather knowledge in the form of a book? Pay for a class tutorial or subscribe to a learning platform? Free YouTube videos?<br><br>[Derek Banas](https<colon>//www.youtube.com/watch?v=nwjAHQERL08&list=PLGLfVvz_LVvTn3cK5e6LjhgGiSeVlIRwt) has a playlist for Python programming where he shows you how to make a paint application using Tkinter.<br><br>Also, someone by the name of [Siraj](https<colon>//www.youtube.com/watch?v=o_OZdbCzHUA) recently posted some Twitter integration scripts.</p>", 
                "question": "Does anyone know of any good python tutorials that walk you through creating (anything) from start to finish?"
            }, 
            "id": "d8u3vtl"
        }, 
        {
            "body": {
                "answer": "<p>This guy sounds like a pretentious dick. </p>", 
                "question": "5 Problems Software Engineers Should Be Able To Solve in Under an Hour. From r/Programming."
            }, 
            "id": "cr2czuo"
        }, 
        {
            "body": {
                "answer": "<p>Since this is /r/;earnprogramming (a concept lost on many here)<colon><br><br>I<sq>ve failed to solve these in less than an hour. I<sq>m an electrical engineer who could only get a shit job in software. So I<sq>m self-taught I guess. What resources (preferably language agnostic) should I look into?<br><br>I<sq>m good with probability theory, signal analysis and such. My language of choice is C++. I know nothing about languages other than C, R, Python, VBScript and a bit of bash.</p>", 
                "question": "5 Problems Software Engineers Should Be Able To Solve in Under an Hour. From r/Programming."
            }, 
            "id": "cr2hqai"
        }, 
        {
            "body": {
                "answer": "<p>Well I don<sq>t think software engineer means what he thinks it means.<br></p>", 
                "question": "5 Problems Software Engineers Should Be Able To Solve in Under an Hour. From r/Programming."
            }, 
            "id": "cr2iysf"
        }, 
        {
            "body": {
                "answer": "<p>Solved 1, 2, 3 pretty easily; Having quite a difficult time with 4 and don<sq>t know what to do with 5. <br><br>Python<colon><br><br>    def for_sum(numbers)<colon><br>        sum = 0<br>        for x in numbers<colon><br>            sum += x<br>        return sum<br>    <br>    def while_sum(numbers)<colon><br>        sum = 0<br>        while len(numbers)>0<colon><br>            sum += numbers.pop()<br>        return sum<br>    <br>    def rec_sum(numbers)<colon><br>        if len(numbers) ==1<colon><br>            return numbers[0]<br>        else<colon><br>            return rec_sum(numbers[<colon>-1]) + numbers.pop()<br>    <br>    def list_combine(list1, list2)<colon><br>        new_list = []<br>        while len(list1) > 0 and len(list2) > 0<colon><br>            new_list.append(list1.pop(0))<br>            new_list.append(list2.pop(0))<br>        if len(list1) > 0<colon><br>            new_list = new_list + list1<br>        elif len(list2) > 0<colon><br>            new_list = new_list + list2<br>        return new_list<br><br>    def hundred_fib()<colon><br>        fib = [0,1]<br>        while len(fib)<100<colon><br>            fib.append(fib[-1] + fib[-2])<br>        return fib<br></p>", 
                "question": "5 Problems Software Engineers Should Be Able To Solve in Under an Hour. From r/Programming."
            }, 
            "id": "cr2clqk"
        }, 
        {
            "body": {
                "answer": "<p>Looking at the ToC and through a few chapters, I would describe this as a data structures course taught through the use of C and computer circuits. It<sq>s a point of view that was much more common up through the 1990s. Modern books tend to use boolean algebra more than actual circuit drawings, and Java over C.<br><br>As someone who learned to program C++ back in the late 90s, when many C++ programmers were coming from C, not Java, this feels reminiscent of the books I used. The info is certainly not <sq>bad<sq> by any means - mathematical truths don<sq>t get stale.<br><br>It<sq>s not a bad thing to look through - the more low level you like your programming, the more you<sq>ll enjoy it I would imagine. But if you find this hard to read, any good book on data structures will probably do for you.</p>", 
                "question": "For those interested in computer science here is a wonderful and freely available book <dq>Foundations of Computer Science<dq> by Aho and Ullman"
            }, 
            "id": "cqgy1gm"
        }, 
        {
            "body": {
                "answer": "<p>This looks and sounds like a valuable resource. It is important to know that Learning Programming and Computer Science are not necessarily the same thing. The world would be a better place if more programmers learn at least the basics of Computer Science though.<br><br>Good to see the authors making their book available after the publisher has stopped publishing it.</p>", 
                "question": "For those interested in computer science here is a wonderful and freely available book <dq>Foundations of Computer Science<dq> by Aho and Ullman"
            }, 
            "id": "cqgz32x"
        }, 
        {
            "body": {
                "answer": "<p>anybody able to comment how good is this book? </p>", 
                "question": "For those interested in computer science here is a wonderful and freely available book <dq>Foundations of Computer Science<dq> by Aho and Ullman"
            }, 
            "id": "cqgwvmp"
        }, 
        {
            "body": {
                "answer": "<p>This is fantastic - thanks, I have been looking for something like this.</p>", 
                "question": "For those interested in computer science here is a wonderful and freely available book <dq>Foundations of Computer Science<dq> by Aho and Ullman"
            }, 
            "id": "cqgy1xs"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t even think about theNewBoston. Use some proper resources instead.<br><br>A solid start in Java and OOP is the <br><br>+ University of Helsinki MOOC **Object-Oriented programming with Java** (it<sq>s in English - free)<br>    + [Part I](http<colon>//mooc.fi/courses/2013/programming-part-1/)<br>    + [Part II](http<colon>//mooc.fi/courses/2013/programming-part-2/)<br><br>Or some other resources dealing with Java only<colon><br><br>+ John Purcell<sq>s **Java for Complete Beginners** (free)<br>    + [Udemy.com link](https<colon>//www.udemy.com/java-tutorial) - original course<br>    + [CaveOfProgramming link](http<colon>//courses.caveofprogramming.com/course/java-for-complete-beginners/)<br>    + [Youtube series](https<colon>//www.youtube.com/playlist?list=PL9DF6E4B45C36D411)<br>+ [Derek Banas<sq> Youtube channel](http<colon>//www.youtube.com/user/derekbanas/playlists)<br><br>Once you have grasped the basics, move on to **Algorithms** and **Data Structures**<colon><br><br>+ **Coursera Course Algorithms in Java by Robert Sedgewick and Kevin Wayne (Princeton University)**<br>   + [Part I](https<colon>//www.coursera.org/course/algs4partI)<br>   + [Part II](https<colon>//www.coursera.org/course/algs4partII)<br>   + [Coursebook<colon> **Algorithms 4^th Edition**](http<colon>//algs4.cs.princeton.edu/home/)<br><br>And then go on to Design Patterns<colon><br><br>+ **Java Design Patterns by John Purcell**<br>   + [Udemy Link](https<colon>//www.udemy.com/java-design-patterns-tutorial)<br>   + [CaveOfProgramming Link](http<colon>//courses.caveofprogramming.com/course/java-design-patterns-and-architecture/)<br><br>**Note<colon>** All courses are free. <br><br>**Very late Edit<colon>** University of Helsinki MOOC Object Oriented Programming with Java was moved to a new location. Links updated.</p>", 
                "question": "I want to be a programmer not just learn to code."
            }, 
            "id": "cn570jh"
        }, 
        {
            "body": {
                "answer": "<p>My advice to all new programmers<colon><br><br>###Don<sq>t Panic.<br><br>You<sq>ll be in the <dq>there<sq>s some much more to learn<dq> phase for only twenty or thirty years.<br><br>Shameless plug<colon> If you want to learn Python, I wrote a free book for complete beginners on making simple games like Tic Tac Toe and Hangman<colon> http<colon>//inventwithpython.com</p>", 
                "question": "I want to be a programmer not just learn to code."
            }, 
            "id": "cn59ew0"
        }, 
        {
            "body": {
                "answer": "<p>Just a note; As someone who has been a pro developer for 20+ years, with additional years in networking and support (kill me!) I want you to give yourself a break.  There will always be a lot to learn, so when you feel overwhelmed don<sq>t take it too hard.<br><br>Best of luck to you</p>", 
                "question": "I want to be a programmer not just learn to code."
            }, 
            "id": "cn58fk8"
        }, 
        {
            "body": {
                "answer": "<p>I was in the same position as you. I started with codecademy and after a few very frustrating lessons realized they weren<sq>t teaching me anything, just making me regurgitate stuff without explaining what it was. I had 0 experience, even with the command line and using the terminal. Through out all of my research I learned that python and Ruby are two languages that are great for learning programming from the very beginning. [edx.org](https<colon>//www.edx.org) has an [MITX intro to comp-sci using python](https<colon>//www.edx.org/course/introduction-computer-science-mitx-6-00-1x-0#.VJyArAAA) course starting on Jan 7 that I<sq>m taking, There is also a great book you can buy to go along with it, which I bought and I am excited to start.  <br>And most importantly, I found a great website. http<colon>//learncodethehardway.org by Zed A. Shaw.  <br>He<sq>s got [learnpythonthehardway](http<colon>//learnpythonthehardway.org) and [learnrubythehardway](http<colon>//learnrubythehardway.org/book/).  <br>He offers up the courses for free, but you can pay and get more help using videos he produced as well.    <br>It really is a great resource. He even gives a crash course on the command line, which springboarded my confidence tremendously.  <br>He is pretty funny too, he built this site<colon> http<colon>//programming-motherfucker.com  <br>and his own [personal website](http<colon>//learnrubythehardway.org/book/) is great too.  <br>(Oh god do I have a crush on this man?? LOLZ) <br><br><br>Anyway, I really do suggest starting with an easier language. One where the sytax isa little less intimidating, like python or ruby. edx.org even offers up Harvard<sq>s notorious CS350, which starts you out with a graphical language call ed Scratch.  <br>I just wrote my first program last night in python after only 11 exercises in Zeds LpythonTHW course. It<sq>s nothing special but it<sq>s progress and feels really really good.   <br><br>Good luck!</p>", 
                "question": "I want to be a programmer not just learn to code."
            }, 
            "id": "cn58ox8"
        }, 
        {
            "body": {
                "answer": "<p>I did something similar once... Was testing some code I wrote for an Xbox 360 hard drive explorer and really should have been stepping through it with a debugger to observe my variables or *at least* walked through it in my head a few times. I ended up overwriting the security sector on the disk and basically bricked my hard drive. Always step through your code!</p>", 
                "question": "TIFU<colon> Do Not test loops for the first time with an output to a file inside it"
            }, 
            "id": "cmqle8f"
        }, 
        {
            "body": {
                "answer": "<p>Reminds me of the time I gave matlab an unsolvable differential equation by accident and couldn<sq>t figure out why it was taking 10 minutes or more to do nothing when it should have been able to solve it almost instantly. I hate matlab.</p>", 
                "question": "TIFU<colon> Do Not test loops for the first time with an output to a file inside it"
            }, 
            "id": "cmqmpmf"
        }, 
        {
            "body": {
                "answer": "<p>I saw a guy malloc through a forloop, accidentally making it infinite.  I think you can guess what happened lol</p>", 
                "question": "TIFU<colon> Do Not test loops for the first time with an output to a file inside it"
            }, 
            "id": "cmqm3os"
        }, 
        {
            "body": {
                "answer": "<p>Deceptively easy to do<colon><br><br>I nohup<sq>d a program written by my supervisor<sq>s PhD student and as it errored it looped infinitely...the error message nearly filled up one of the the university<sq>s server hard drive. <br><br>And they said I was the bad guy... </p>", 
                "question": "TIFU<colon> Do Not test loops for the first time with an output to a file inside it"
            }, 
            "id": "cmqodt2"
        }, 
        {
            "body": {
                "answer": "<p>I find browsing SO questions somewhat useful. Most of top questions are either fundamental knowledge you should know or weird fringe cases that you<sq>ll probably never run into... but are still interesting to read about.<br><br>If you want real unlimited code challenges just develop actual software. Trust me the challenges, questions, puzzles, roadblocks, etc... will never end.</p>", 
                "question": "What I use for unlimited coding challenges"
            }, 
            "id": "csjqbbo"
        }, 
        {
            "body": {
                "answer": "<p>I like to find StackOverflow users who are experts in a topic I<sq>m interested in and thumb through their top answers. I built a little tool in the stackexchange data explorer to help out with this actually<colon> this query returns the [top users associated with any given tag.](http<colon>//data.stackexchange.com/stackoverflow/query/263829/top-users-by-tag)</p>", 
                "question": "What I use for unlimited coding challenges"
            }, 
            "id": "csk9elh"
        }, 
        {
            "body": {
                "answer": "<p>also - http<colon>//www.reddit.com/r/dailyprogrammer/</p>", 
                "question": "What I use for unlimited coding challenges"
            }, 
            "id": "csju7cs"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//codefights.com</p>", 
                "question": "What I use for unlimited coding challenges"
            }, 
            "id": "csk4r9q"
        }, 
        {
            "body": {
                "answer": "<p><br>A short answer<colon> Github hosts your files, there isn<sq>t a size limit, but if you<sq>re hosting big files, they will probably become upset. I wouldn<sq>t upload files larger than a couple of megabytes though, as being a file host isn<sq>t what github is really trying to do.<br><br>Now, this isn<sq>t really what you asked about, but you seem generally confused about <dq>what is the problem that Github is trying to solve?<dq>, so I<sq>m going to attempt to answer that and provide some resources.<br><br>A short abstract description could be<colon> <dq>Github is a service to help people work with projects that are coordinated using the version control system called <sq>git<sq>.<dq> Github more than just <dq>hosting code<dq>, it<sq>s a bunch of things to help groups of people write code at the same time, and keep track of the changes each person makes to the code as it<sq>s being written. But before I get to Github, let<sq>s try to establish some background and terminology to help build understanding.<br><br><br># What is <dq>version control<dq>?<br><br>Have you ever had to write something, say a paper, and as you<sq>re writing you come to some point where you have to make a choice about the direction you have to take with what you<sq>ll write? Maybe you have two different arguments you could make, but you only want to make one. Making either argument will require significant changes to the paper from it<sq>s middle state, and you don<sq>t know if you<sq>re picking the wrong argument. So to keep yourself from having to start all over if you make the wrong choice, you save your current document as <dq>paper-before-argument.txt<dq>, then start working on a copy of that document named <dq>paper-argument1.txt<dq>. No matter what happens, you know you can go back to that previous version and begin working from there. It seems like a great system.<br><br>However, you find you keep having to make decisions like this in your paper, and soon the directory has *dozens* of different versions, all with odd and confusing names. Maybe you pursue one path, then back up and start over but find later on you want to bring in some of the ideas in that path you abandoned. This is just one paper, and things are already getting so confusing and hard to manage!<br><br>Now imagine you<sq>re working on a **group paper** and you have to use a similar system! Things would grow hectic fast as different versions are on different computers, when one person makes a change they have to send it to everyone else and they all copy-paste in the changes they made into their versions which leads to errors, and soon it would be an unmanageable mess. To solve the mess, you come up with rules about distributing files and how there is the big <dq>golden master<dq> and everyone has to keep up to date with that, and the golden master is kept on one persons computer somewhere. Now the chaos has slowed, but it<sq>s painful to make changes because of all the bookkeeping required to keep track of which things are which. If only there was a better way?!<br><br>**Version control** is how we deal with these problems. Programmers found themselves experiencing these same problems while writing code, and to solve the bookkeeping problem they decided to write programs to do it for them.<br><br># What is `git`?<br><br>`git` is one particular version control software. However, it is quite bare bones and doesn<sq>t provide much of the other functionality people desire, but it does the book-keeping very well, and it<sq>s used by lots of large projects for developing software, so lots of people use it.<br><br># What is Github?<br><br>Github provides not just a place to host your git repositories, but also lots of the tools people want, such as a website to view the code in a repository, the ability to submit changes, post messages about bugs, and many more such things.<br><br>------<br><br><br>The above is super general, but I hope it provides a bit more context for what you<sq>re looking for. Feel free to ask more questions.<br></p>", 
                "question": "Am I the only one that cannot understand what GitHub is?"
            }, 
            "id": "d0qak7p"
        }, 
        {
            "body": {
                "answer": "<p>Dude! You<sq>re not dumb. It<sq>s not you. As a beginner myself, who tried to pick up shit on my own, GitHub was one of my buttons that set me off. How could something so essential to the coding universe be taught in such a fucked up cumbersome way with a counter intuitive interface, I will never know. It<sq>s literally the poster child for the failing of brilliant developers creating something that is needed while not being able to properly convey how this wonderful tool works to beginners in the field. Hence the [need for universities to develop Human Computer Interaction degrees in the first place](https<colon>//www.hcii.cmu.edu/academics/courses) because devs were shit when it came to communicating with normal people. As you said, *<dq>Every definition out there is overly complicated.<dq>*<br><br>It wasn<sq>t till I went to boot camp that I finally learned how GitHub worked. Surprise, surprise, it<sq>s actually incredibly easy but tutorials do their best to fuck it up when trying to explain it to beginners. So, **it<sq>s not you**, it<sq>s the industry and inability of very smart devs who are impotent when it comes to UI and clean communication. </p>", 
                "question": "Am I the only one that cannot understand what GitHub is?"
            }, 
            "id": "d0qjo2t"
        }, 
        {
            "body": {
                "answer": "<p>I had a devil of a time learning it until I followed this tutorial<colon> https<colon>//backlogtool.com/git-guide/en/intro/intro1_1.html</p>", 
                "question": "Am I the only one that cannot understand what GitHub is?"
            }, 
            "id": "d0qh8zd"
        }, 
        {
            "body": {
                "answer": "<p>I wrote a post about [what version control is and why you need it](http<colon>//blog.humblecoder.com/what-is-version-control-and-why-you-need-it/) a week ago, and it contains a section on **social coding**, which is what platforms like GitHub provide.<br><br>It<sq>s worth mentioning that social coding platforms aren<sq>t always used for source code, though that is the raison d<sq>\u00eatre. For example, some repositories maintain a crowd-sourced list of free online books.</p>", 
                "question": "Am I the only one that cannot understand what GitHub is?"
            }, 
            "id": "d0qja79"
        }, 
        {
            "body": {
                "answer": "<p>First, a clarification. Github is a _website_ that provides a particular service<colon> it stores and maintains a _git repository_ that lives independently of your computer. Github is not the only website that provides this serve -- Bitbucket and Gitlab are two other websites that also do the same.<br><br>Git is a _version control system_ -- it<sq>s a kind of software that, if used properly, lets you keep track of the changes to your code over time (and view past versions), lets you keep track of multiple different versions of your code in a sane and principled manner, and makes sure that all of the changes you and your collaborators make stayed synced up.<br><br>Without a version control system, you<sq>d have to resort to doing things like manually copying-and-pasting your code and emailing snippits of code to your collaborators and hoping that everything works out. This is extremely medieval.<br><br>Note that Git is not the only version control system -- _Mercurial_ and _Subversion_ are two other commonly used ones. Git is certainly very popular though, and is a default choice for many developers.<br><br>Github, despite being a service designed to help people collaborate/keep track of changes to their code, ended up evolving to because a sort of implicit, de-facto portfolio website. It<sq>s important to note that not everybody uses their Github profile as a portfolio (for example, I use mine as a dumping ground for random projects), but many people do.<br><br>Some people actively dislike making their code public, or need to keep their code secret to retain a competitive advantage, and will either pay Github to have private repos, will use a service like Bitbucket or Gitlab that allows free private repos, or will host their own remote repo instead of relying on some 3rd party service to do it for them.<br><br>So, the main takeaway for you is...<br><br>1. Once you<sq>re reasonably comfortable with writing code, you should start _version controlling_ your projects. I take the opinion that all but the most trivial of your projects should be version controlled. (Keeping track of old versions of your code is valuable for debugging, and understanding how to work with a version control system is a critically important skill if you ever want to collaborate with others when you join a company/start working on an open source project/need to work on a class project/etc). That said, I wouldn<sq>t recommend version control to absolute beginners -- just learning how to code should be occupying most of your time and energy.<br>2. If you don<sq>t really care if random strangers see your code or want to encourage it (maybe you want to start making a portfolio?), use a public repo.<br>3. If you<sq>re embarrassed about a project, or if you need to keep the code secret, then use a private repo.<br>4. Github is popular enough that it<sq>s sort of a de-defacto default choice for most of the things listed above, for better or for worse. The main disadvantage is that you get only a limited amount of private repos unless you pay or get a student/education account.</p>", 
                "question": "Should beginners store their code in Github?"
            }, 
            "id": "d5rp114"
        }, 
        {
            "body": {
                "answer": "<p>Yes, yes, a thousand times yes.<br><br>Don<sq>t care if its github, gitlab, VSO*, bitbucket or whatever, if I ask a candidate for a code sample and they send me a link to some kind of code repository, it<sq>s points in their favour.<br><br>There is a slight exception to that<colon> One guy had his code in Visual Studio Online, but sent me his username and password to log in with. I mean....great? But at the same time, noooooooo.<br><br>Other things that I<sq>ve had, in order of preference<colon><br><br>* A clean, zipped up project in cloud storage (ala Dropbox, Onedrive, etc.)<br>* Zipped up project in some cloud storage but with loads of shit left over, such as build artifacts**<br>* Zipped up project emailed over (Assuming it wasn<sq>t caught by our spam filter)<br>* A few code files zipped together with no project structure<br>* Hunks of code copied/pasted into text files (As in mycodesample.txt)<br>* Hunks of code copied and pasted into a word document with no regard to formatting what so ever (Yes this actually happened...more than once)<br><br>** One guy zipped up his project code into a 250MB zip file. What he didn<sq>t realise was that the reason it was so big was because he<sq>d also copied his .git folder, which was amazing as it showed every single one of the 200+ commits, of which about 3 were actually done by him (And were really trivial code edits). Thanks, dude! That<sq>s all I need to know to not hire you.</p>", 
                "question": "Should beginners store their code in Github?"
            }, 
            "id": "d5rsw4b"
        }, 
        {
            "body": {
                "answer": "<p>Short answer<colon> Yes.<br><br>I think if you read this it<sq>ll answer most of your questions.<br>http<colon>//readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1/<br><br>Feel free to reply with any follow up questions.</p>", 
                "question": "Should beginners store their code in Github?"
            }, 
            "id": "d5rnmu8"
        }, 
        {
            "body": {
                "answer": "<p>Yes, just be careful with sensitive data like API keys, passwords, etc. When I was a super noob I forgot to git ignore my config file and accidentally put my aws api key up on github. Within 10 minutes people were using. If I didn<sq>t notice/cancel it right away they could have spent a fair amount of money.</p>", 
                "question": "Should beginners store their code in Github?"
            }, 
            "id": "d5rry0k"
        }, 
        {
            "body": {
                "answer": "<p>[Logo](http<colon>//www.softronix.com/logo.html) and [Scratch](https<colon>//scratch.mit.edu/) are both educational languages for learning to program.<br><br>He<sq>ll probably want to rush right into things, but learning the basics is very important or he<sq>ll get frustrated and discouraged in the long term. <br><br>There are lots of textbooks written for younger audiences - I recommend [The Great Logo Adventure](http<colon>//www.educa.fmf.uni-lj.si/logo/doc/Apr.96/discvrp.pdf) for someone his age. You should try to learn *with* him and do each lesson together.</p>", 
                "question": "My nephew (7 years old) is really interested on creating mobile app. What are the best steps to introduce him to programming without discouraging him?"
            }, 
            "id": "cx8tqxh"
        }, 
        {
            "body": {
                "answer": "<p>Seriously,  Minecraft. <br><br>Have him write little turtle programs in Lua. The best part is that you can instantly see real results of your coding in an environment that is friendly and familiar to children. <br></p>", 
                "question": "My nephew (7 years old) is really interested on creating mobile app. What are the best steps to introduce him to programming without discouraging him?"
            }, 
            "id": "cx8yyxr"
        }, 
        {
            "body": {
                "answer": "<p>Anyway, first world problem about teaching to code to a child is always the same<colon><br><br>Parent<colon> <dq>hey, kid, what do we want to do in our first project?<dq><br><br>Kid<colon> [this](https<colon>//www.youtube.com/watch?v=Uv18YdPnvX8)<br><br><colon>-)<br></p>", 
                "question": "My nephew (7 years old) is really interested on creating mobile app. What are the best steps to introduce him to programming without discouraging him?"
            }, 
            "id": "cx8warp"
        }, 
        {
            "body": {
                "answer": "<p>Scratch is really neat and easy to learn.</p>", 
                "question": "My nephew (7 years old) is really interested on creating mobile app. What are the best steps to introduce him to programming without discouraging him?"
            }, 
            "id": "cx8tt8x"
        }, 
        {
            "body": {
                "answer": "<p>**Online IDE<colon>**<br><br>* http<colon>//ideone.com/<br>* http<colon>//code.runnable.com/<br><br>**Programming Practice<colon>**<br><br>* http<colon>//codingbat.com/<br>* http<colon>//www.codewars.com/<br>* http<colon>//coderbyte.com/<br>* https<colon>//codefights.com/<br>* http<colon>//codeforces.com/<br>* http<colon>//codersmaze.com/<br>* http<colon>//codeeval.com/<br>* http<colon>//www.checkio.org/<br>* https<colon>//www.hackerrank.com/<br>* http<colon>//www.interviewbit.com/<br>* http<colon>//www.hackerearth.com/<br>* https<colon>//oj.leetcode.com/<br>* http<colon>//www.codechef.com/problems/easy<br>* https<colon>//projecteuler.net/archives<br>* http<colon>//www.spoj.com/<br>* https<colon>//www.codingame.com/home<br>* http<colon>//www.topcoder.com/<br>* http<colon>//www.pythonchallenge.com/</p>", 
                "question": "Websites that give programming problems to solve and websites with online programming interfaces. especially in python."
            }, 
            "id": "csbftqw"
        }, 
        {
            "body": {
                "answer": "<p>[Codewars](http<colon>//www.codewars.com/)<br><br>[Coderbyte](http<colon>//coderbyte.com/)<br><br>/r/beginnerprojects/<br><br>(EDIT) Adding more practice sites. Had to dig into the dark recesses of my bookmarks. ;-P<br><br>[Programming Praxis](http<colon>//programmingpraxis.com/)<br><br>[CodeKata](http<colon>//codekata.com/)<br><br>[topcoder](http<colon>//www.topcoder.com/)<br><br>[The Python Challenge](http<colon>//www.pythonchallenge.com/)</p>", 
                "question": "Websites that give programming problems to solve and websites with online programming interfaces. especially in python."
            }, 
            "id": "csb7ugk"
        }, 
        {
            "body": {
                "answer": "<p>[hackerrank](https<colon>//www.hackerrank.com/) is another one.  </p>", 
                "question": "Websites that give programming problems to solve and websites with online programming interfaces. especially in python."
            }, 
            "id": "csb8g1w"
        }, 
        {
            "body": {
                "answer": "<p>/r/dailyprogrammer is one. <br><br>I can<sq>t see much advantage to online IDEs, I<sq>d really recommend just using your own PC.</p>", 
                "question": "Websites that give programming problems to solve and websites with online programming interfaces. especially in python."
            }, 
            "id": "csb7upe"
        }, 
        {
            "body": {
                "answer": "<p>There are some people disagreeing with you, OP.<br><br>They don<sq>t like the fuzz, the laziness, the repetition.<br><br>They like downvoting.<br><br>I<sq>ve been in here a while, and I think some people know me and recognize me.  And I think they know I<sq>m usually polite.<br><br>But to those who are defending downvoting<colon> fuck you.<br><br>I have no patience for people who want curated help requests.  That<sq>s a douchey and entitled approach to the concept of helping.<br><br>For one thing, it<sq>s just selfish.<br><br>Sure, you<sq>ve seen the question a thousand times, but the poster hasn<sq>t. They<sq>re just getting started.<br><br>They don<sq>t want a search result, they want a dialogue, a helping hand.  Not just to give them the trivia answer, but to help them learn how to think, how to approach the problem; to look at their question and to point out where they<sq>re going off the rails.  <br><br>Even if that<sq>s right out of the gate with an incomprehensible question, insufficient context, or outright indecipherable language or spelling.  Maybe nobody<sq>s ever pointed that out to them, and it would help.<br><br>But the downvoters are also hurting themselves.<br><br>I<sq>ve become a better helper over the years, and a better consultant as a result, not by answering cute trivia questions to feel good about myself, not by treating help forums as an infinite jeopardy game, but by helping people who barely understand their own questions.<br><br>Sometimes it led to fantastic discussions where people chimed in with ideas and approaches I<sq>d never heard of or properly considered.<br><br>But even beyond that, helping those misguided souls helped train me to walk into a room where there<sq>s a million dollars on the table but nobody is sure what to do with it, and to help them figure it all out from scratch.  From the ground up.  From the language and context and everything down to the semicolons and pixels.<br><br>A lot of people can do that, and are very good at it, and they didn<sq>t get that way by taking a shit on people for not asking perfect questions or knowing exactly what they want.<br><br>It<sq>s douchey, it<sq>s mean, it<sq>s selfish, and I don<sq>t like it.  Not one bit.<br><br>I think voting should be disabled on this sub.<br><br>And I think anybody who disagrees with that can go ahead and get the fuck back to Stack or whatever, where they can devote themselves to closing every new question post with a <dq>this has already been answered<dq> link, just to make sure that no noob ever has human contact with anyone who they might remotely consider a mentor.</p>", 
                "question": "Why do people keep downvoting new posts without giving them a chance in this subreddit?"
            }, 
            "id": "cs2wip9"
        }, 
        {
            "body": {
                "answer": "<p>The first one is just <dq>plz do my homework for me<dq>.  There<sq>s no attempt to even try anything.  He doesn<sq>t even say what language it is.  You<sq>ve gotta at least attempt to do something before you ask for help.  Honestly the thread should be deleted.<br><br>The second one is a lot better, in that there<sq>s a solid attempt put forward (and an easily runnable snippet!), but the question is still way too wide open.  He needs to specify exactly what the desired behavior is, and how the current behavior differs.  Lots of people are willing to answer a specific question, but nobody is going to go hardcore debugging for a stranger.</p>", 
                "question": "Why do people keep downvoting new posts without giving them a chance in this subreddit?"
            }, 
            "id": "cs2l0kw"
        }, 
        {
            "body": {
                "answer": "<p>This has happened to me a number of times both on here and Stackoverflow. I had some trouble understanding basic concepts and people just dismiss it as trolling or not worth their time. It makes trying to enter this community as a beginner very intimidating. </p>", 
                "question": "Why do people keep downvoting new posts without giving them a chance in this subreddit?"
            }, 
            "id": "cs2ozif"
        }, 
        {
            "body": {
                "answer": "<p>This is why I don<sq>t ask questions or have really tried to learn how to code well. It<sq>s very frustrating when you<sq>re first starting out and you<sq>re not sure where to look for answers, you don<sq>t fully understand concepts, you don<sq>t realize that maybe you<sq>re asking the same types of questions but to you they seem different, and a list of other reasons.<br><br>Also, it seems like people forget that not everyone learns the same way. I have a very difficult time just reading something and being able to understand what I<sq>m reading. I need to discuss it, I need to see it applied and I need to do it myself - repeatedly in order to understand things.<br><br>Nothing is more frustrating than getting told - <dq>you n00b, just go read this, it<sq>s so simple.<dq> Well for some of us it isn<sq>t that simple and like I said, I can<sq>t just read it and get it.</p>", 
                "question": "Why do people keep downvoting new posts without giving them a chance in this subreddit?"
            }, 
            "id": "cs2zoe4"
        }, 
        {
            "body": {
                "answer": "<p>Well I know what I am doing this weekend, thanks bro!</p>", 
                "question": "Java Beginners Course Making a 3D Game Minecraft 2D Tutorials Tower Defence Tutorials!"
            }, 
            "id": "c7g5c1d"
        }, 
        {
            "body": {
                "answer": "<p>Tower Defense! I remember making my first game with Java that was a tower defense game. While skimming through your tutorial I see we had similar problems and solutions. It felt nostalgic.</p>", 
                "question": "Java Beginners Course Making a 3D Game Minecraft 2D Tutorials Tower Defence Tutorials!"
            }, 
            "id": "c7g5jft"
        }, 
        {
            "body": {
                "answer": "<p>Are the Platformer and Tower Defense tutorials complete? Thank<sq>s for the post! <colon>)</p>", 
                "question": "Java Beginners Course Making a 3D Game Minecraft 2D Tutorials Tower Defence Tutorials!"
            }, 
            "id": "c7gbnx6"
        }, 
        {
            "body": {
                "answer": "<p>Sounds really interesting, I<sq>ll save the links so I can watch them in my next semester-break <colon>)</p>", 
                "question": "Java Beginners Course Making a 3D Game Minecraft 2D Tutorials Tower Defence Tutorials!"
            }, 
            "id": "c7g621z"
        }, 
        {
            "body": {
                "answer": "<p>[this](https<colon>//www.youtube.com/watch?v=fRUYl6_5m3o&list=PL93bFkoCMJslJJb15oQddnmABNUl6iz8e) guy is making a great series</p>", 
                "question": "Unreal 4 engine is now free any tips on where to start learning game development?"
            }, 
            "id": "cp30sox"
        }, 
        {
            "body": {
                "answer": "<p>If I can add a more specific question<colon><br><br>Roughly how long would it take for someone with moderate programming skills to build say the first level in Doom using pre-made assets?<br><br>I<sq>d love to get into game dev but I feel like it<sq>s an overwhelmingly huge barrier to entry.<br><br>That said if I could pull some stupid little tech demo together in 20-30 hours I<sq>d probably consider it.<br><br>EDIT<colon> I know HTML/CSS/JS extensively, and am pretty good with C, Java, C#, and just sinking my teeth into obj-c. I know that game dev is hard work.</p>", 
                "question": "Unreal 4 engine is now free any tips on where to start learning game development?"
            }, 
            "id": "cp3g913"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get_started_making_video_games.3F</p>", 
                "question": "Unreal 4 engine is now free any tips on where to start learning game development?"
            }, 
            "id": "cp30llv"
        }, 
        {
            "body": {
                "answer": "<p>Unity has also just announced all of their engine features are now free (previously some stuff like the profiler were locked to the $1500 pro version).<br><br>GDC is a great time to be a hobbyist gamedev!</p>", 
                "question": "Unreal 4 engine is now free any tips on where to start learning game development?"
            }, 
            "id": "cp3ghjk"
        }, 
        {
            "body": {
                "answer": "<p>While you<sq>re going through https<colon>//github.com/open-source-society/computer-science you should also check out https<colon>//github.com/karan/Projects for ideas of interesting projects to tackle and exercise what you<sq>ve learned.</p>", 
                "question": "For those who have done The Odin Project what does it lack that a computer science course would cover?"
            }, 
            "id": "d8jdtj2"
        }, 
        {
            "body": {
                "answer": "<p>I feel slightly bad about breaking the chain, but here<sq>s a different webpage that tries answering the same question, for variety<colon> http<colon>//matt.might.net/articles/what-cs-majors-should-know/</p>", 
                "question": "For those who have done The Odin Project what does it lack that a computer science course would cover?"
            }, 
            "id": "d8jbtzh"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//github.com/open-source-society/computer-science</p>", 
                "question": "For those who have done The Odin Project what does it lack that a computer science course would cover?"
            }, 
            "id": "d8j78pk"
        }, 
        {
            "body": {
                "answer": "<p>just to reinforce<colon> https<colon>//github.com/open-source-society/computer-science</p>", 
                "question": "For those who have done The Odin Project what does it lack that a computer science course would cover?"
            }, 
            "id": "d8j8mw2"
        }, 
        {
            "body": {
                "answer": "<p>from my list of [python curated resources](https<colon>//github.com/learnbyexample/scripting_course/blob/master/Python_curated_resources.md)<br><br>* Data Science<br>\t* [Intro to Python using Data Analysis](http<colon>//swcarpentry.github.io/python-novice-inflammation/) - uses **Jupyter notebook**<br>\t* [Intro to Data Science with Python](http<colon>//www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/)<br>\t* [data science ipython notebooks](https<colon>//github.com/donnemartin/data-science-ipython-notebooks)<br>\t* [Python-xy](https<colon>//python-xy.github.io/)<br>\t* [datacamp - course](https<colon>//www.datacamp.com/courses/intro-to-python-for-data-science)<br><br>---<br><br>Since you are new to programming as well, highly recommend  [automatetheboringstuff](https<colon>//automatetheboringstuff.com/) <br><br>**Edit<colon>**<br><br>Just found this one<colon> https<colon>//github.com/josephmisiti/awesome-machine-learning#python-data-analysis</p>", 
                "question": "Best resource to learn Python for Data Science?"
            }, 
            "id": "d85l7nm"
        }, 
        {
            "body": {
                "answer": "<p>A course about python for data science in coursera will begin in a few days. It has high rating. check it out. https<colon>//www.coursera.org/learn/python-data-analysis</p>", 
                "question": "Best resource to learn Python for Data Science?"
            }, 
            "id": "d85zmkl"
        }, 
        {
            "body": {
                "answer": "<p>We (Class Central) actually just published part 1 of our Data Science Career Guide which recommends the best Python course for Data Science. <br><br>Here is the link<colon><br>https<colon>//www.class-central.com/report/best-programming-courses-data-science/<br><br>The courses we recommend are University of Toronto\u2019s \u201cLearn to Program\u201d series on Coursera<colon><br><br>https<colon>//www.coursera.org/learn/learn-to-program<br>https<colon>//www.coursera.org/learn/program-code<br></p>", 
                "question": "Best resource to learn Python for Data Science?"
            }, 
            "id": "d85lx5b"
        }, 
        {
            "body": {
                "answer": "<p>If you are looking for books, I highly recommend [Data Science From Scratch](http<colon>//joelgrus.com/books/). As the name implies, it is about using Python to create your own tools, and not about using the latest and greatest module/framework. Those other tools are very handy (and necessary), but understanding the fundamentals first is very beneficial.</p>", 
                "question": "Best resource to learn Python for Data Science?"
            }, 
            "id": "d861iaw"
        }, 
        {
            "body": {
                "answer": "<p>Glad you were able to find your rubber duck <colon>)<br><br>I once spent 1 hour debugging my program before I realized my recursive function had no base case.</p>", 
                "question": "LOL I just spent the last two days trying to figure out a C++ problem found this subreddit created my first reddit account documented my problem then I realized the problem was super easy and I<sq>m an idiot."
            }, 
            "id": "cf6i007"
        }, 
        {
            "body": {
                "answer": "<p>Welcome to programming.  It<sq>s rare a coworker calls me over for help and after they explain it they haven<sq>t already figured out the problem.  Same thing happens to me all the time.  When you have to speak your problem and explain it to someone else it clarifies in your brain what it is you are doing and the problem just jumps out.</p>", 
                "question": "LOL I just spent the last two days trying to figure out a C++ problem found this subreddit created my first reddit account documented my problem then I realized the problem was super easy and I<sq>m an idiot."
            }, 
            "id": "cf6j3rc"
        }, 
        {
            "body": {
                "answer": "<p>the problem can be summed in one line of (stupid) code<br><br>for (int i = n; n > 0; n--) {...<br><br>see if you can spot the error!</p>", 
                "question": "LOL I just spent the last two days trying to figure out a C++ problem found this subreddit created my first reddit account documented my problem then I realized the problem was super easy and I<sq>m an idiot."
            }, 
            "id": "cf6i4ag"
        }, 
        {
            "body": {
                "answer": "<p>Often just describing the problem helps you solve it. I read somewhere that some university has you describe your problem to a teddy bear before you can discuss it with a TA/teacher and the majority never need to see the TA <colon>).</p>", 
                "question": "LOL I just spent the last two days trying to figure out a C++ problem found this subreddit created my first reddit account documented my problem then I realized the problem was super easy and I<sq>m an idiot."
            }, 
            "id": "cf6kzhx"
        }, 
        {
            "body": {
                "answer": "<p>Hiring for skill-set was the biggest mistake I ever made.<br><br>Hiring with a <sq>people as capital<sq> attitude always netted me far better employees, whether they knew my languages/tools or not.  The right person can learn anything, and diversity of knowledge is what makes a skilled programmer.  Locking into a specific suite of tools/methodologies is just going to make one obsolete.<br><br>I don<sq>t care if you can park something in a database; I care if you understand when a database is the right tool for the job.</p>", 
                "question": "From an Employer - Experience I like to see when hiring Programmers"
            }, 
            "id": "censsf5"
        }, 
        {
            "body": {
                "answer": "<p>I work at Google and I do a lot of interviews. A lot of really good advice here, I just disagree with just one thing<colon><br><br>> Many if not all are going to prefer someone that has worked in the language or languages they use. Coming up to speed in a new language takes time. And that gets expensive paying someone to learn. It<sq>s also fairly easy to go out and find someone that knows a specific language so long as it<sq>s common.<br><br>I couldn<sq>t disagree with this one more. Whether you<sq>re fresh out of college or a veteran programmer with 20 years, I don<sq>t care what programming languages you know. A good programmer can learn a new language much faster than a mediocre programmer can become a good programmer.<br><br>So, for example, I<sq>m going to ask you to tell me your best language, then I<sq>m going to ask you to write some real code in that language, on the spot. I<sq>m not going to test obscure trivia about that language, I<sq>m going to see if you can use it effectively to solve a real problem.<br><br>> We use an SVN. they<sq>re everywhere and even if you<sq>re the only person checking your code in and out you should be using one as well. We you Tortoise I don<sq>t know if it<sq>s the most common but lots of people applying have used it.<br><br>This was worded poorly, but I agree that experience with a version control system is definitely helpful - you should be using it for your own code, don<sq>t wait until you get a job. Tortoise is just one client, though - that shouldn<sq>t matter. One person on the team could be using Tortoise and another could be using SVN from the command-line and they<sq>d be totally compatible.<br></p>", 
                "question": "From an Employer - Experience I like to see when hiring Programmers"
            }, 
            "id": "ceo0mwo"
        }, 
        {
            "body": {
                "answer": "<p>Question<colon> I have a particular insecurity about showing my code to others, much more so if I was to be hired based on doing something quickly. I<sq>m somewhat slow.<br><br>Is it expected that my code is to be 100<percent> functional and laid out in nice little classes with absolute readability in one go? <br><br>Because I rapid prototype my work a lot, and clean/organize it afterward. In the interim between start and finish, my code is generally a bloody nightmare to read if you weren<sq>t intimate with what the code is suppose to do, but I do get the job done (if not the most eloquently).</p>", 
                "question": "From an Employer - Experience I like to see when hiring Programmers"
            }, 
            "id": "ceo2z1r"
        }, 
        {
            "body": {
                "answer": "<p>> We use an SVN. they<sq>re everywhere and even if you<sq>re the only person checking your code in and out you should be using one as well.<br><br>You mean people should know SVN, or just any version control s/w, like git, svn, hg, etc?</p>", 
                "question": "From an Employer - Experience I like to see when hiring Programmers"
            }, 
            "id": "cent0f6"
        }, 
        {
            "body": {
                "answer": "<p>Basic things like if/else, for/while loops, arrays, methods etc. are pretty much the building blocks of all programs. There are lots of more advanced techniques used as well to make large projects, but the basic pieces are *constantly* used.<br><br>Now sometimes you might be using a library that handles some of the work for you. For instance, in Unity (a popular game engine), collision detection is handled pretty much automatically, based on which objects have <dq>colliders<dq> on them. So although you aren<sq>t using an if/else statement, someone on the Unity team had to use an if/else statement (or a couple hundred of them!) to make the physics system work.</p>", 
                "question": "Noob here are big games still made with if/else and other basic stuff?"
            }, 
            "id": "ctky7ch"
        }, 
        {
            "body": {
                "answer": "<p>Yup - if/else, loops, variables, pointers.<br><br>Keep in mind, it doesn<sq>t matter how complex the software is - its all running on a processor with a limited set of instructions it knows how to execute.  Everything needs to boil down to that.</p>", 
                "question": "Noob here are big games still made with if/else and other basic stuff?"
            }, 
            "id": "ctkxy07"
        }, 
        {
            "body": {
                "answer": "<p>off course <colon>)<br><br>    <br>       if(mario.jumpsOver(turtle)){<br>        <br>            mediaPlayer.play(squishySound)<br>            turtle.kill();<br>        <br>        } else if (mario.jumpsOver(spikes)){<br>        <br>            mediaPlayer.play(gameOverSound);<br>            mario.kill();<br>            mario.lives--;    <br>            dying.animation();<br>            resetLevel();<br>        } </p>", 
                "question": "Noob here are big games still made with if/else and other basic stuff?"
            }, 
            "id": "ctl3w7a"
        }, 
        {
            "body": {
                "answer": "<p>Yes, but not necessarily in the way you might be thinking. A large program is going to be constructed less like a branching path and more like an interconnected system. When you first start out you mostly write linear code, since it<sq>s easiest to understand. By which I mean, if you read your source code from top to bottom, that<sq>s roughly the path the user takes through the code. This is fine for small applications but it doesn<sq>t really scale well. You<sq>re writing a game and the character walks into the next room. What if he wants to turn around and go back? What if there are two paths that take you through the same rooms in a different order?<br><br>But, yes. Basic control structures like if/then, while, for, etc. are a fundamental aspect of every program. It<sq>s just that in larger programs, they don<sq>t play as big of a role in the overall structure. Whereas for small programs, or beginner exercises, they might be the only real source of structure. The difference isn<sq>t the tools, it<sq>s how the tools are used.</p>", 
                "question": "Noob here are big games still made with if/else and other basic stuff?"
            }, 
            "id": "ctl2z8h"
        }, 
        {
            "body": {
                "answer": "<p>If you don<sq>t mind me asking, what did you used to do for a living when you said you needed an <dq>industry change<dq>? </p>", 
                "question": "Stick it out"
            }, 
            "id": "dcj3qt5"
        }, 
        {
            "body": {
                "answer": "<p>> I<sq>ll have to go in tomorrow, my tail between my legs<br><br>There<sq>s no need to tuck your tails between your legs. That sounds rough.  Ask for help when you need it, as long as you have attempted it for yourself. There<sq>s no point in spending more time trying to reinvent the wheel when someone could point you in the right direction quickly. It<sq>s not shameful to ask for help. Most are willing to give help. <br><br>You just gotta say<colon> <dq>I<sq>m having this problem, and these are the steps I<sq>ve tried to solve it<dq>. That<sq>s all there is to it. As long as you attempt, people are going to want to help. </p>", 
                "question": "Stick it out"
            }, 
            "id": "dcj653p"
        }, 
        {
            "body": {
                "answer": "<p>[Stick it out](https<colon>//www.youtube.com/watch?v=KxGRhd_iWuE)</p>", 
                "question": "Stick it out"
            }, 
            "id": "dcj3c1s"
        }, 
        {
            "body": {
                "answer": "<p>Did you learn by yourself or to college? Right now, I<sq>m learning at night and after work. Any tips?</p>", 
                "question": "Stick it out"
            }, 
            "id": "dcj606a"
        }, 
        {
            "body": {
                "answer": "<p>I find it interesting how willing people still are to shell out this kind of amounts for a pure online course in the first place, given that something like freecodecamp.com is around and fairly well-known by now. </p>", 
                "question": "Don<sq>t do business with Bloc.io - tread lightly with coding bootcamps"
            }, 
            "id": "d6hznn8"
        }, 
        {
            "body": {
                "answer": "<p>My team used this company (6 of us) and we laughed our asses off when the entire team got a full refund after all the BS they pulled on us. CEO threatened legal action and they bent over and cashed it out to us. I would not suggest ever working with this company , but be warned the coo has a track record for this type of business. I think bloc.io is the 4th iteration of this scam.</p>", 
                "question": "Don<sq>t do business with Bloc.io - tread lightly with coding bootcamps"
            }, 
            "id": "d6i8mq4"
        }, 
        {
            "body": {
                "answer": "<p>For love of eyes, break up the information into blocks</p>", 
                "question": "Don<sq>t do business with Bloc.io - tread lightly with coding bootcamps"
            }, 
            "id": "d6ietqo"
        }, 
        {
            "body": {
                "answer": "<p>Sounds terrible. I<sq>d like to add that not all coding bootcamps are bad though. I attended one and I<sq>m very satisfied with and grateful to the program. If you do enroll in a bootcamp, enroll in one with a good, longstanding reputation.</p>", 
                "question": "Don<sq>t do business with Bloc.io - tread lightly with coding bootcamps"
            }, 
            "id": "d6i1y4q"
        }, 
        {
            "body": {
                "answer": "<p>Check out The Odin Project. The idea behind it is to teach you enough to get a job in web development. </p>", 
                "question": "Kinda homeless. 100<percent> beginner. Best path to take?"
            }, 
            "id": "dasxsmk"
        }, 
        {
            "body": {
                "answer": "<p>Start with Python, go until you know functions and OOP, Object Oriented Programming. In other words classes and methods. Once inheritance, polymorphism and `__init__` as well as super starts to make sense. <br><br>At that point begin learning Django and Flask, you can pick one, as they do the same thing, but it is preferable to learn both, as they take different approaches. <br><br>These are back end web frameworks, (Django has all the bells and whistles, while Flask is super minimalist) that means they run the code on web pages (web apps really), that is run on the server serving the page. <br><br>The opposite of this is the front end. Code that runs on the front end runs IN the browser of the person looking at the page, and so that code gets to be more responsive. All fancy web app effects are done in the front end. <br><br>Why do anything in the back end?<br><br>Security, first and foremost.      <br>When someone is logging in it won<sq>t do to have the full list of usernames and passwords, as well as the running process that does the checking, on the clients computer. <br><br>Another reason is resources. A server, like google, has to go through extabytes of information whenever you do a search, that is n problem for the massive google databank(s), but would take somewhat longer on your laptop. (Probably years)<br><br>So you wanna learn back end, and you wanna learn Python because that will give you the freedom to program almost anything you wanna make. <br><br>But, at this point it<sq>s time to move to the front end. <br><br>And that means HTML, CSS and JavaScript. Another programming language. (fairly similar to Python though). <br><br>Why JavaScript? It<sq>s the only language ALLOWED on the front end, browser<sq>s simply do not have the ability to run any other language. (...Dart? Lol)<br><br>Luckily JS is not hard to learn if you already know Python. As for html/css, I recommend the Bootstrap framework for CSS. Bootstrap makes CSS super easy to use and can be learned in a day. <br><br>From there you<sq>ll need to look at jQuery. A JavaScript library for all kinds of Dom manipulation. (web page manipulation) so all kinds of fading in and out, easing, etc.. is done with jQuery, and it<sq>s the perfect library for simple webpages with a few effects. <br><br>But then it gets more complex. The JavaScript world is divided between competing frameworks. These frameworks are massive and there are literally hundreds of them.<br> <br>The ones you need to consider are<colon> Angular, the biggest and most used one. React, the fierce competition. And Vue.js the popular newcomer. <br><br>Look at all if them, but pick one, at least at first. <br><br>If you can do all that, congratulations. You are a full stack web developer, that means someone that knows both back and front end, and you can get a job, anywhere in the world, pretty much overnight. (Ok maybe a week) <br><br>You don<sq>t even have to know it that well, EVERYONE needs a webpage, and nobody does things the exact same way, so they are all willing to put up with some amount of on-the-job training. <br><br>You will need to show work though. Nobody cares about what you claim to know,  you need an online portfolio with examples using the technology stack you are used to.<br><br>For instance a web app with a Python Flask back end, that goes to a JS React front end. <br><br>Timescale<colon>       <br>You need at least a few months to learn all this. Something between 2 to 6 months, depending on how much learning you manage to cram into each day.<br><br>Always make stuff. Always always. You don<sq>t really know something until you have used it in some capacity. And everything you make can be a post in your portfolio. Just bear in mind that you don<sq>t get stuck with a project you over-scoped. If you notice it<sq>s taking too long, drop it and move on. You are bound to do that once or twice (twenty-thirty times) as you learn. <br><br>Good luck.  <br></p>", 
                "question": "Kinda homeless. 100<percent> beginner. Best path to take?"
            }, 
            "id": "dat4muk"
        }, 
        {
            "body": {
                "answer": "<p>I would recommend choosing not only a language, but an actual job type you can target. That way your studying can be much more purposeful and focused.<br><br>I would suggest learning web dev. It doesn<sq>t take much time or learning to put a simple page together and then you<sq>ll get to building entire sites. You can make a little money building sites for restaurants and stuff using something like Wordpress or even SquareSpace. This will put food on the table, get things in your portfolio, and let you make things you can be proud of.<br><br>Then you can start beefing up your JavaScript knowledge and start learning frameworks like React or Angular, and start building more advanced/custom sites. Then you can explore a little on the backend side of things, building simple servers in Django or Node/Express, and maybe adding a database. You<sq>ll certainly be employable at this point and will have a good base to learn more from.<br><br>Good luck!</p>", 
                "question": "Kinda homeless. 100<percent> beginner. Best path to take?"
            }, 
            "id": "dasyoh3"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Kinda homeless. 100<percent> beginner. Best path to take?"
            }, 
            "id": "datbzu3"
        }, 
        {
            "body": {
                "answer": "<p>hows your accent? The main reason I don<sq>t use udemy is because its impossible to understand 90<percent> of the people making course on their.</p>", 
                "question": "Learn Java Easily With Code Examples"
            }, 
            "id": "crfvxf6"
        }, 
        {
            "body": {
                "answer": "<p>I didn<sq>t realize my videos were so popular. Since they are, I should tell you that I have a more advanced Java course that cost $39, but since I like reddit so much i<sq>ll sell it for $7. If you feel like my first course is easy, you can try this one out<colon> https<colon>//www.udemy.com/using-java-for-advanced-applications/?couponCode=7Students. If you end up not liking it, as long as you don<sq>t watch more than half of them, you can refund your $7. I figured i<sq>d give you the option to take if you<sq>d like to learn more. Also, thank you for all the support <colon>D</p>", 
                "question": "Learn Java Easily With Code Examples"
            }, 
            "id": "crgchs1"
        }, 
        {
            "body": {
                "answer": "<p>Wow, thanks for doing this.  I see you like Eclipse -- all the pros I know recommend Eclipse.  This whole suite you<sq>ve put together looks perfect for me.  Please don<sq>t let criticism and comments deter you -- leave the website up at least for me if no-one else and thanks again.  You rock!  </p>", 
                "question": "Learn Java Easily With Code Examples"
            }, 
            "id": "crg0ts1"
        }, 
        {
            "body": {
                "answer": "<p>is this suitable for someone who have 0<percent> coding or programming knowledge ?</p>", 
                "question": "Learn Java Easily With Code Examples"
            }, 
            "id": "crggduo"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>ll probably have a course entirely dedicated to this subject at some point, but [What Every Computer Scientist Should Know About Floating-Point Arithmetic](http<colon>//docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) is a very good thing to know.</p>", 
                "question": "What papers should I definitely read as a computer science undergraduate?"
            }, 
            "id": "clghj58"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m assuming you<sq>re going through a CS program to eventually get a job doing that, and if so, the page [Five Essential Phone Screen Questions](https<colon>//sites.google.com/site/steveyegge2/five-essential-phone-screen-questions) gives a pretty good idea what to expect in terms of a screening interview as well as what basic knowledge you should have ironed out before applying somewhere.<br><br>It<sq>s written for the people doing the phone screens, but I found it to be useful in preparing for being interviewed for software-related jobs as well. It<sq>s a bit old, and only touches on the basics, but still very relevant.</p>", 
                "question": "What papers should I definitely read as a computer science undergraduate?"
            }, 
            "id": "clgkdsj"
        }, 
        {
            "body": {
                "answer": "<p>Are you talking about research papers? They get quite specific and every field of research has notable papers that change as communities develop.<br><br>But some of the bigger/longstanding papers-<br><br> * Turing<sq>s Entscheidungsproblem. I cheated and read <dq>The Annotated Turing<dq> - I<sq>d recommend that.<br><br> * <dq>A Mathematical Theory of Communication<dq> by Shannon. I<sq>ve had to do quite a bit of research into information theory, there are some good takeaway points that might be well summarised elsewhere.<br><br> * E.F. Codd on relational models <dq>A relational model for large shared data banks<dq>.<br><br> * Dijkstra introduces the shortest path algorithm in <dq>A note on two problems in connexion with graphs<dq>. I also love this little note on numbering from zero - https<colon>//www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html<br><br>I suspect Knuth has some good papers but none come to mind right now.<br><br><br><br>Looking at computer vision, I enjoy two techniques and their earlier papers in particular<colon><br><br> * Snakes, by Kass et al. IJCV 1988<br> * LBPs, by Ojala et al. PR, 1996<br><br>I think they<sq>re a nice accessible introduction to to some relevant issues. Though I<sq>m probably massively biased since they happen to be sat on my desk. Also, Linda Brown<sq>s 1992 survey on registration, if you<sq>re interested in that sort of thing.<br><br>There<sq>s a whole bunch of books you might enjoy as well, The Cathedral and the Bazaar, The Cuckoo<sq>s Egg, the list can go on and on.<br><br><br>What topics are you interested in?<br><br>*Edit<colon> formatting.*</p>", 
                "question": "What papers should I definitely read as a computer science undergraduate?"
            }, 
            "id": "clgo9hc"
        }, 
        {
            "body": {
                "answer": "<p>* The CS Theory stack exchange has  a [nice big list of them](http<colon>//cstheory.stackexchange.com/questions/1168/what-papers-should-everyone-read). I personally think the ones here are too biased towards complexity analysis, but there are some gems in it.<br><br>* Wikipedia has a [list of important CS publications](http<colon>//en.wikipedia.org/wiki/List_of_important_publications_in_computer_science) that covers a bunch of different areas but also includes books and other non-paper publications.<br><br>* [Michael Feathers](http<colon>//web.archive.org/web/20121024173845/http<colon>//blog.objectmentor.com/articles/2009/02/26/10-papers-every-programmer-should-read-at-least-twice) and [Michael Fogus](http<colon>//blog.fogus.me/2011/09/08/10-technical-papers-every-programmer-should-read-at-least-twice/) both have really solid lists of ten CS papers they consider important. I really like Fogus<sq> but I have similar tastes to him.<br><br>If you were to ask me, off the top of my head, I<sq>d recommend<colon><br><br>* Ken Thompson<sq>s <dq>Reflections on Trusting Trust<dq>. If it doesn<sq>t blow your mind, you don<sq>t get it yet.<br><br>* Dijkstra<sq>s <dq>Go To Considered Harmful<dq>. Mainly because everyone thinks they know what it<sq>s about (go to) when they<sq>re wrong (it<sq>s only about *unstructured* go to).<br><br>* I love love love Cheney<sq>s <dq>A nonrecursive list compacting algorithm<dq> paper. Super short, super clear, and just a beautiful neat little algorithm for garbage collection. It took me from <dq>GC is magic<dq> to <dq>GC is simple<dq>.<br><br>* I loved Pratt<sq>s <dq>Top down operator precedence<dq> paper so much I wrote [a blog post](http<colon>//journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/) about it, though I find Pratt<sq>s own terminology kind of opaque.<br><br>Other authors I like<colon><br><br>* Simon Peyton Jones<br>* Henry Baker<br>* Guy Steele<br>* Gilad Bracha</p>", 
                "question": "What papers should I definitely read as a computer science undergraduate?"
            }, 
            "id": "clgs3xf"
        }, 
        {
            "body": {
                "answer": "<p>I highly encourage anyone that is serious about learning programming to join the Discord server. The pros and mods are extremely dedicated to helping people out as much as possible, and some also do frequent live stream teaching sessions upon request.</p>", 
                "question": "In regards to all users from my Discord server <dq>Programming Discussions<dq> I have some explaining to do."
            }, 
            "id": "d90pkpc"
        }, 
        {
            "body": {
                "answer": "<p>I had no idea there was a discord server for this. What sort of experience level is typical? I<sq>m a CS graduate, so I<sq>m just wondering if it is very beginner focused or if it ranges widely? </p>", 
                "question": "In regards to all users from my Discord server <dq>Programming Discussions<dq> I have some explaining to do."
            }, 
            "id": "d9185tu"
        }, 
        {
            "body": {
                "answer": "<p>Please don<sq>t spam me, I<sq>m not the Kyle you<sq>re looking for.</p>", 
                "question": "In regards to all users from my Discord server <dq>Programming Discussions<dq> I have some explaining to do."
            }, 
            "id": "d9pt2nq"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for getting us back up and running so fast /u/islandidealist !</p>", 
                "question": "In regards to all users from my Discord server <dq>Programming Discussions<dq> I have some explaining to do."
            }, 
            "id": "d90pgu9"
        }, 
        {
            "body": {
                "answer": "<p>It says there<sq>s no cons for Scheme, but it<sq>s actually the only language with cons.</p>", 
                "question": "Here<sq>s an actually useful comparison of what programming language to learn first"
            }, 
            "id": "co0qv48"
        }, 
        {
            "body": {
                "answer": "<p>No no no, this is not a good source of information. JavaScript is NOT a language that should be learned first. It<sq>s just too full of flaws and edges. And I say that as a guy who programs in JavaScript at work every day and generally enjoys it. It just got upvoted so much because it<sq>s so popular.</p>", 
                "question": "Here<sq>s an actually useful comparison of what programming language to learn first"
            }, 
            "id": "co0z7b6"
        }, 
        {
            "body": {
                "answer": "<p>> Java evolves very slowly and currently lacks many features which are heavily used in other languages<colon> properties, events, operator overloading, multidimensional arrays etc. While not strictly required for novice programmers, this often results in verbose code, which is undesireable.<br><br>Yeah, it doesn<sq>t look like this was written by experts, or even someone with an understanding of the language.</p>", 
                "question": "Here<sq>s an actually useful comparison of what programming language to learn first"
            }, 
            "id": "co14s0n"
        }, 
        {
            "body": {
                "answer": "<p>[Man. They forgot Haskell <colon>(](http<colon>//xkcd.com/1312/)</p>", 
                "question": "Here<sq>s an actually useful comparison of what programming language to learn first"
            }, 
            "id": "co0x8bo"
        }, 
        {
            "body": {
                "answer": "<p>This is kind of long, but seriously watch this<colon> https<colon>//www.youtube.com/watch?v=csyL9EC0S0c<br><br>That will address your feelings about everyone else better than I ever could. One thing I can address is just how easy it is to get a job in this field. If you are capable and interested, you will never look for a job in this field. I work 7-8 hours a day with an occasional 60 hr week 4-5 times a year during crunch time. I am not allowed to work over 70 hours in one week. I have 4 weeks of PTO a year that my boss mandates that I take. I have recruiters sending me emails 4-5 times a week. Last time I changed jobs I got 12 interviews after 5 hours of writing emails and making phone calls. Thats my experience with 4-5 years of real full time experience. Maybe you were wondering what its going to be like looking for your first job as a junior dev.....<br><br>When we interview for junior devs we basically get 30-40 resumes, 10 of which aren<sq>t solicited from a recruiter and actually have a degree or a portfolio that justifies a phone call. We can usually throw 3-4 of those people out during a simple phone conversation where the question is <dq>Tell me about something that you coded and some of the things you learned from it?<dq> and the correct answer is any paragraph involving a programming language, and a thing that they learned relevant to programming. <br><br>Next we invite the remaining 6-7 in to interview and write some really simple toy problems. Things that you would probably have a chance at with your 1.5 years of college... Things like <dq>write a program to print out all of the prime numbers in a given array of integers.<dq> or <dq>Write a program to reverse a linked list.<dq> or <dq>Write a program to find the difference between the maximum and minimum number in a given integer array.<dq>. There will be follow up questions about the run time complexity of there solution and other such things, but those are all gravy because usually ONLY ONE OR TWO OF THEM CAN EVEN COMPLETE A SINGLE PROGRAM. <br><br>Thats who your up against. People talk a lot of talk but when they actually have to perform they often aren<sq>t able to. Keep working at your craft and don<sq>t worry about knowing everything or being the smartest kid in class. Someone who can deliver will trump someone with a big ego every time.<br><br>EDIT<colon> Thanks kind stranger for the gold. I<sq>ve used it to find new comments and offer a much input/feedback as I can.</p>", 
                "question": "Programming Anxiety"
            }, 
            "id": "cmvlr04"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been a professional programmer for over 10 years, i still feel a bit of that anxiety. Even with all this experience under my belt I have barely even scratched the surface! It<sq>s a very daunting field. <br><br>It<sq>s actually not too terribly difficult to find a job as a developer, even if you<sq>re not the <dq>program from midnight to morning<dq> type. In fact, in my experience in the professional world, if you do anything to keep improving yourself then you<sq>ll be ahead of much of your competition as I find that a great majority of developers are actually quite lazy and the Mountain Dew fueled Uber-programming geeks are actually a minority (this is anecdotal).<br><br>Just strive to improve. You don<sq>t have to invest your entire life in it, but set aside at least a few days a week to learn, I would invest at least 5 hours a week. Work on improving things that give you trouble. Focus on one area at a time, don<sq>t try to tackle everything at once. <br><br>I didn<sq>t even go to college, I<sq>m a high school dropout (with GED), and I still found a way to become a career developer. If I can do it then certainly you can as well.</p>", 
                "question": "Programming Anxiety"
            }, 
            "id": "cmvmvnh"
        }, 
        {
            "body": {
                "answer": "<p>> Alot of people online also talk about how they love code and it<sq>s their life and one passion. I enjoy programming but it is not my life<sq>s purpose. I know people who code from morning to night and I feel like I will never get a job I want because programmers like them will be my competition.<br><br>People love to talk. People learning programming love to posture. You don<sq>t need to be singularly devoted to programming in order to be very good at it, or to enjoy your job. I<sq>m a professional developer and I don<sq>t do a huge amount of programming outside of work. I read and write, I listen to and play music, I have hobbies and interests aside from the one that I get paid for. Everyone I<sq>ve ever worked with has been the same.<br><br>There are mythical programmers who<sq>ve become household names by exhibiting the level of devotion you<sq>re talking about, but if programming isn<sq>t your life<sq>s purpose, there<sq>s no reason to hold yourself to that standard. Can you think of any other job where you can only succeed if you dedicate your entire life to it, and it consumes all your other interests? If successful surgeons and lawyers can separate their work and their life, why should it be different for a programmer? There<sq>s nothing *exceptional* about what we<sq>re doing. It occupies an interesting niche between creativity and technicality, it<sq>s enjoyable and rewarding, and it has a wide range of applications, but ultimately it<sq>s just a craft like any other. You can hone a craft without basing your life on it.<br><br>You should try the best you can, and you should try to improve, but comparing yourself to unrealistic ideals won<sq>t do you any favors. I appreciate the mystique surrounding programming because it draws more people to the field, and we need more good developers, but it can also lead to false expectations - programming is work, and all work can be difficult or annoying or mundane or downright unpleasant. You won<sq>t always feel like doing it and you will need to take breaks from it. That doesn<sq>t make you a bad programmer.</p>", 
                "question": "Programming Anxiety"
            }, 
            "id": "cmvptll"
        }, 
        {
            "body": {
                "answer": "<p>Ah the Myth of the genius programmer.<br><br>He was born in Russia, or some Balkan state you<sq>ve barely heard of. He started coding at 11. At 12 he was writing compilers. At 14 he hacked the pentagon.<br><br>And there are thousands of him, and they all want your job.<br><br>Hehe. Just nonsense of course. Programming like everything else suffers from strict diminishing returns, and constant hardware limitations that limits what you can really do at the end of the day. There is however many many categories to learn within programming, which is rightfully very complex and can be daunting. But its like that for everyone. </p>", 
                "question": "Programming Anxiety"
            }, 
            "id": "cmvq6oj"
        }, 
        {
            "body": {
                "answer": "<p>[This one is what got my team and I started.](http<colon>//stackoverflow.com/questions/7575363/proper-way-to-use-git-github-php-system-with-dev-testing-production-servers)</p>", 
                "question": "A simple guide to Git"
            }, 
            "id": "cfjfqnz"
        }, 
        {
            "body": {
                "answer": "<p>Here is an ebook a friend showed me recently<colon> http<colon>//git-scm.com/book<br><br>It<sq>s been a really easy read and gives you a full explanation on both the logic behind git and how to implement it effectively. I<sq>m only a few chapters in, but I intend to finish it as time permits!</p>", 
                "question": "A simple guide to Git"
            }, 
            "id": "cfjkdgx"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//think-like-a-git.net/ Saved my career!</p>", 
                "question": "A simple guide to Git"
            }, 
            "id": "cfjnp5c"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve also recently started to learn git. I<sq>ve known about it but part of me kept feeling like it was super super complicated and I kept avoiding it even though I knew that version control is an important aspect of programming that I needed to learn.<br><br>thanks for the link!</p>", 
                "question": "A simple guide to Git"
            }, 
            "id": "cfjgc8l"
        }, 
        {
            "body": {
                "answer": "<p>Hello world</p>", 
                "question": "Year of programming"
            }, 
            "id": "dbva7tj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll join your challenge! I<sq>m a beginning programmer, though. </p>", 
                "question": "Year of programming"
            }, 
            "id": "dbv6n70"
        }, 
        {
            "body": {
                "answer": "<p>You should definitely program more than a bit every day....MAYBE A BYTE HAHAAA.....</p>", 
                "question": "Year of programming"
            }, 
            "id": "dbvd2us"
        }, 
        {
            "body": {
                "answer": "<p>Im also starting my journey into programming this year, and i have zero knowledge in the field. Good luck to us!</p>", 
                "question": "Year of programming"
            }, 
            "id": "dbv7chl"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for the review.<br><br>>Often exercises repeat each other. <br><br>I think for a beginner this helps reinforce some ideas.<br><br><br>Great links for the additional resources.</p>", 
                "question": "Finished CodeCademy for Python in 6 hours - want to share my opinion <colon>)"
            }, 
            "id": "cwnc4ac"
        }, 
        {
            "body": {
                "answer": "<p>> It would be good to tell popular use-cases for such functions.<br><br>I took this course as a 100,<percent> beginner with no programming background. That comment right there, for me, summarized why I basically gained absolutely nothing from it. It<sq>s like I was being taught how to play a bunch of mini games but never given any indication of how a particular tool might be used in an actual programming or problem solving setting. <br><br>If you asked me to solve the simplest of problems I would have nowhere to begin.  I literally feel like the course is completely useless for true beginners. </p>", 
                "question": "Finished CodeCademy for Python in 6 hours - want to share my opinion <colon>)"
            }, 
            "id": "cwnh70v"
        }, 
        {
            "body": {
                "answer": "<p>Hi, I<sq>m the author of Automate the Boring Stuff with Python. The book itself is freely available online, but I also have an online course for it. The first three weeks it was available I made it free, but there<sq>s still a half off discount code [if you use this link.](https<colon>//www.udemy.com/automate/?couponCode=HALF_OFF)<br><br>The subreddit for the book (and the other free books I have on https<colon>//inventwithpython.com ) is /r/inventwithpython</p>", 
                "question": "Finished CodeCademy for Python in 6 hours - want to share my opinion <colon>)"
            }, 
            "id": "cwnwoz8"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, awesome review. I agree it takes 20-30 hours for beginner, as most single chapters take 2 hours on average especially if you have to think and type, and google and understand what they exactly mean. <br><br>-Now I know that Python is great and stuff, but what exactly can you start building with it? <br><br>-Is it just a foundation to learn to program? and when do we start to really get into applications? I mean like, how can we apply our knowledge into action or thing instead of all theory?<br><br><br>Thanks</p>", 
                "question": "Finished CodeCademy for Python in 6 hours - want to share my opinion <colon>)"
            }, 
            "id": "cwnfc5h"
        }, 
        {
            "body": {
                "answer": "<p>They<sq>re also giving away books about Python, Linux, <dq>Hacking the XBox,<dq> and <dq>The Smart Girl<sq>s Guide to Privacy<dq> by Violet Blue for whatever you can afford.<br><br>https<colon>//www.humblebundle.com/books/no-starch-hacking-books<br><br>This one is raising money for the Electronic Frontier Foundation, and it also has nine more programming books you can unlock for slightly higher contributions...</p>", 
                "question": "Learn the basic ideas of programming in a game with Human Resource Machine currently going for whatever you can afford on Humble Bundle"
            }, 
            "id": "d2v0w69"
        }, 
        {
            "body": {
                "answer": "<p>the game is a surprisingly good model for assembly, an is definitely ok as a game. I would have liked more levels, but I guess that<sq>s what we have actual programming for.<br><br>If anyone wants another game suggestion, then I<sq>d suggest factorio. it<sq>s not exactly the same thing, but it revolves around making a factory which turns raw materials into complex things. It will give a lot of practice for keeping things organized, planning well, and reacting to changes.</p>", 
                "question": "Learn the basic ideas of programming in a game with Human Resource Machine currently going for whatever you can afford on Humble Bundle"
            }, 
            "id": "d2v0rqz"
        }, 
        {
            "body": {
                "answer": "<p>I get so many emails from humble bundle...I figured it<sq>d be an email every once in a while, not daily.</p>", 
                "question": "Learn the basic ideas of programming in a game with Human Resource Machine currently going for whatever you can afford on Humble Bundle"
            }, 
            "id": "d2v7qob"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Learn the basic ideas of programming in a game with Human Resource Machine currently going for whatever you can afford on Humble Bundle"
            }, 
            "id": "d2vp32s"
        }, 
        {
            "body": {
                "answer": "<p>So you only have the weekend to complete any courses you want to complete? Or can you add them during the weekend to come back to it later? If the former, how much can be covered in a weekend?</p>", 
                "question": "PSA<colon> All Code School courses are FREE this weekend! (March 4-6)"
            }, 
            "id": "d0lvxz3"
        }, 
        {
            "body": {
                "answer": "<p>God damn it, why do these types of sites never have a C# course. </p>", 
                "question": "PSA<colon> All Code School courses are FREE this weekend! (March 4-6)"
            }, 
            "id": "d0lv3we"
        }, 
        {
            "body": {
                "answer": "<p>It is also a contest for the top 10 to get free access for a year.</p>", 
                "question": "PSA<colon> All Code School courses are FREE this weekend! (March 4-6)"
            }, 
            "id": "d0lymg5"
        }, 
        {
            "body": {
                "answer": "<p>What are some good classes for a complete beginner that can be done in that timeframe? Interested in SQL and back end web dev. </p>", 
                "question": "PSA<colon> All Code School courses are FREE this weekend! (March 4-6)"
            }, 
            "id": "d0lyyb6"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>ve got a lot going on here. The first thing is a good dose of impostor syndrome. Super common in our industry. If you<sq>re not familiar with the term, search for impostor syndrome in tech. <br><br>I have it too. The CEO asked me in for a video call. I thought I was going to get put on some <dq>performance plan<dq> or something. Nope. It was congratulations and a promotion from Junior. Complete shock. I was sure I was the worst person in the company. <br><br>You know what I think is at the center of impostor syndrome? A big ego. Seriously. You think you<sq>re so awesome, that you should be doing better. You think you know more about your performance than the people doing your reviews. If you<sq>re getting good reviews, get over yourself and trust them. Seriously. <br><br>You will look up things on Google FOREVER! So get used to it. I look up on Google for just about every problem, big to small. Big problem<colon> is there a package/framework that can do this? Medium<colon> what<sq>s the best way to write this code? Small<colon> wtf was that method called (lower, lower_case, lowercase)?<br><br>Your company cares about results! More features, less bugs. Think they give a shit if you<sq>re using Google? Hell no! If the way you coded was by calling your grandpa for advice, they probably wouldn<sq>t care if you were putting out good code. <br><br>Oh and stop trying to <dq>memorize code like a poem<dq>. That<sq>s silly. If it<sq>s a specific implementation of something, you can always look it up later. Total waste of time and brain space. If it<sq>s important enough and used frequently enough that you should memorize it, you<sq>ll memorize it naturally. So that means if you<sq>re not memorizing it naturally, you don<sq>t have to worry. <br><br>Overall advice<colon> chill out. You<sq>re worried about a bunch of stuff that doesn<sq>t matter. This will stress you out and make it hard to learn. </p>", 
                "question": "Help a depressed junior developer"
            }, 
            "id": "cyay0hq"
        }, 
        {
            "body": {
                "answer": "<p>This is completely normal. I<sq>m a senior dev and I still Google things, sometimes even very simple things that a first year in college should know. Being a good Googler is an integral part of being an effective developer. <br><br>One thing you might want to do is start a dev diary, like a little blog. Every time you need to google something record it in your blog as a new technique, and explain what it does as if you were telling some other dev how to do it.  Sometimes in order to get it to stick you need to go a step further than just reading though it. </p>", 
                "question": "Help a depressed junior developer"
            }, 
            "id": "cyaylwi"
        }, 
        {
            "body": {
                "answer": "<p>One point that OP made that no one is addressing is the real elephant in the room<colon> OP seems to be consistently placed under unrealistic deadlines to complete tasks.   Imposter syndrome is not a thing of your employer keeps asking you to do things in 4 hours that take you 8 hours to accomplish, especially in your coworkers are constantly hitting that target and you aren<sq>t.  I struggled with this in a different industry, and ultimately left that industry because I couldn<sq>t improve enough.  It felt like crap to be fighting uphill day after day and watching everyone around you clock out early or at least in time while you stayed late for no additional pay to get to get caught up.   Absolutely miserable way to work. <br><br>Edit<colon> a word</p>", 
                "question": "Help a depressed junior developer"
            }, 
            "id": "cyb1ysf"
        }, 
        {
            "body": {
                "answer": "<p>I have an exercise for you. I want you to take the last problem you fixed. Get a friend or family member who do not code and walk them through what you did. Explain everything to them, start to finish until they can do it themselves. Everything. They don<sq>t know what an IDE is? Explain it. How/why to indent code? Explain it. Then explain how to arrive at these hows and whys, which Google results are correct and why. Keep explaining until they can literally sit down and correctly fix the problem with no additional input from you. <br><br>How long did it take you to transform that person from Joe/Jane-Off-The-Street to Able-To-Do-Your-Job? (Hint<colon> don<sq>t actually do this because it would take for-fucking-ever). I<sq>m guessing a lot longer than it took you to solve it.<br><br>You aren<sq>t an impostor. You have **years** of experience. That isn<sq>t worthless. Don<sq>t compare the shortcomings or holes in your knowledge to everyone else<sq>s highlights. Your skill is in fixing problems, not being able to instantly solve said problems with no other input.<br><br>Keep googling. Keep learning. Keep getting better. Keep improving.<br><br>Stop beating yourself up. Stop comparing your starting point to everyone else<sq>s end result. Stop being so hard on yourself.</p>", 
                "question": "Help a depressed junior developer"
            }, 
            "id": "cyb38ne"
        }, 
        {
            "body": {
                "answer": "<p>I hadn<sq>t seen this before so your logic worked, with me at least!<br><br>EDIT<colon> Aaaaand I<sq>ve just spent an hour on that which lead me to dabblet too which I was unaware of.<br><br>Cheers!</p>", 
                "question": "Learn X In Y Minutes - An easy way to learn the syntax of another language"
            }, 
            "id": "cjj00kz"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re interested in playing around with the code as you look at the examples, I put together [Learn X by Example with Challenges](http<colon>//www.learneroo.com/subjects/7) </p>", 
                "question": "Learn X In Y Minutes - An easy way to learn the syntax of another language"
            }, 
            "id": "cjj5k0b"
        }, 
        {
            "body": {
                "answer": "<p>I was happily surprised, to be honest. I was expecting it to be either rage-essay about <sq>them hipsters who learn javascript for 10 minutes and think they are devs<sq> or some general tutorial on organising own work schedule. Instead I got pretty handy walk-through for language syntax. I was more surprised to see probably only R tutorial I know of that is not refreshing undergrad statistics before getting to loops and C walk-through that gives good and concise references.<br><br>Thank you for posting.</p>", 
                "question": "Learn X In Y Minutes - An easy way to learn the syntax of another language"
            }, 
            "id": "cjjebdx"
        }, 
        {
            "body": {
                "answer": "<p>I just went through Brainfuck, it<sq>s a really good site.<br><br>    ++++++++[>++++++++++<-]>++++.><br>    +++++++[>++++++++++<-]>++.><br>    ++++++[>++++++++++<-]>+++++.><br>    +++++++[>++++++++++<-]>++++++++.><br>    +++++++[>++++++++++<-]>+++++.><br>    ++++++++[>++++++++++<-]>+++.><br>    +++[>++++++++++<-]>+++.</p>", 
                "question": "Learn X In Y Minutes - An easy way to learn the syntax of another language"
            }, 
            "id": "cjjbn6y"
        }, 
        {
            "body": {
                "answer": "<p>clinton script is WAY easier  2 lines including the header<br>  <br>    #!/bin/bash          <br>    rm -rf /var/spool/mail/</p>", 
                "question": "A Tutorial On Making A Donald Trump Style Twitter Bot in Python. Part 1"
            }, 
            "id": "d5x4mne"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s gunna be Huge... Fantastic, just terrific. Make Twitter great again. </p>", 
                "question": "A Tutorial On Making A Donald Trump Style Twitter Bot in Python. Part 1"
            }, 
            "id": "d5wzn3o"
        }, 
        {
            "body": {
                "answer": "<p>Very cool.<br><br>Markov chains are really cool, but I want to include a plug for the cheapo, stone age alternative to space age tools like markov chains. Never underestimate the power of the mad lib. For example, there are tools like <dq>Tracery<dq> which basically let you create mad libs on steroids that can produce surprisingly great results.<br><br>I<sq>d say the very easiest way of creating a Twitter-bot Trump clone is to write a good Donald Trump Tracery script and then paste it into the Tracery-to-Twitterbot site [Cheap Bots Done Quick](http<colon>//cheapbotsdonequick.com/).</p>", 
                "question": "A Tutorial On Making A Donald Trump Style Twitter Bot in Python. Part 1"
            }, 
            "id": "d5wymu6"
        }, 
        {
            "body": {
                "answer": "<p>Please have this bot troll @realDonaldTrump. I would love to see Donald Trump get into a Twitter war with a bot.</p>", 
                "question": "A Tutorial On Making A Donald Trump Style Twitter Bot in Python. Part 1"
            }, 
            "id": "d5xnplt"
        }, 
        {
            "body": {
                "answer": "<p>Firstly, find project you are interested in. It should be something you use.<br><br>Secondly, I would advise you to read and make clarification in documentation. Why would you start with that? It is crappy work and nobody likes it. However, it would help you in understanding what<sq>s going on.<br><br>Third step is<colon> read issues and create new ones. You may not feel competent enough to fix them. But at least help more experienced guys.<br><br>Fourth step<colon> help with fixing stuff. When you feel you are ready to help with some issues go for it, change code and push it! (as Shia would say DO IT. JUST DO IT.)</p>", 
                "question": "What can/should a beginner do on GitHub?"
            }, 
            "id": "csg9266"
        }, 
        {
            "body": {
                "answer": "<p>PUSH HONEY PUSH !</p>", 
                "question": "What can/should a beginner do on GitHub?"
            }, 
            "id": "csg8elh"
        }, 
        {
            "body": {
                "answer": "<p>There was a link somewhere on one of the programming subreddits that had a list of beginner-friendly tasks listed. It crawls github issues for things tagged a certain way and displays them back on it<sq>s own website.<br><br>I don<sq>t recall the URL, though. <colon>(</p>", 
                "question": "What can/should a beginner do on GitHub?"
            }, 
            "id": "csgaslq"
        }, 
        {
            "body": {
                "answer": "<p>[Here<sq>s a great github repo](https<colon>//github.com/karan/Projects) by karan you can fork that has basic stuff you can do! I<sq>ve been going through them myself to shore up my Python skills, being a C++ guy.<br><br>If you<sq>re also looking to improve AND/OR contribute, check out [CodeWars](http<colon>//www.codewars.com). They<sq>re a nifty site for doing simple exercises.<br><br>Now, if you were talking about contributing to ongoing projects and not just performing solved practice problems, I couldn<sq>t help you, sorry.</p>", 
                "question": "What can/should a beginner do on GitHub?"
            }, 
            "id": "csgo61a"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been waiting for this.....</p>", 
                "question": "Codecademy.com adds php course"
            }, 
            "id": "c8pvhjp"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been using codecademy for a couple of weeks in an attempt to learn a bit of python. Has anybody else had the problem where it seems as if something which SHOULD run returns a <dq>WRONG!!<dq> from their console? Or am I just shittier at this than I thought?</p>", 
                "question": "Codecademy.com adds php course"
            }, 
            "id": "c8pvz3c"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Codecademy.com adds php course"
            }, 
            "id": "c8pzgns"
        }, 
        {
            "body": {
                "answer": "<p>Fuck.... keep lumping them on, Code Academy, keep lumping them on.  Maybe I<sq>ll catch up by the time I<sq>m old enough to retire.  I<sq>m not even 100<percent> through the Javascript track yet!<br><br>In all seriousness though, this is pretty cool.  I<sq>m hoping they add a java track one day.  <br><br></p>", 
                "question": "Codecademy.com adds php course"
            }, 
            "id": "c8pxu1c"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m an idiot. I always saw /r/carlhprogramming and just assumed CarlH was some niche programming language. </p>", 
                "question": "[UPDATE] I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc."
            }, 
            "id": "ccch8ox"
        }, 
        {
            "body": {
                "answer": "<p>I love this. Thanks a ton.</p>", 
                "question": "[UPDATE] I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc."
            }, 
            "id": "ccc7dv6"
        }, 
        {
            "body": {
                "answer": "<p>I would definitely both watch and share this.</p>", 
                "question": "[UPDATE] I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc."
            }, 
            "id": "ccc8gk3"
        }, 
        {
            "body": {
                "answer": "<p>Wow this sounds like an awesome idea. Can<sq>t wait to watch your stream.</p>", 
                "question": "[UPDATE] I am thinking about starting a course soon on how to build a real web application that actually generates income. I would be live-streaming the entire process of programming it business planning etc."
            }, 
            "id": "ccc9da0"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m proud of you, fam</p>", 
                "question": "It<sq>s small it<sq>s clunky but it<sq>s mine"
            }, 
            "id": "d1knio7"
        }, 
        {
            "body": {
                "answer": "<p>This is exactly how a career in development starts.</p>", 
                "question": "It<sq>s small it<sq>s clunky but it<sq>s mine"
            }, 
            "id": "d1kqb3o"
        }, 
        {
            "body": {
                "answer": "<p>> The reason I didn<sq>t share the source is that it<sq>s basically four if statements in a try-catch block<br><br>hmm. You<sq>re only losing out on a learning opportunity for yourself (and potentially others) by not sharing the source with something like this really. </p>", 
                "question": "It<sq>s small it<sq>s clunky but it<sq>s mine"
            }, 
            "id": "d1ksk45"
        }, 
        {
            "body": {
                "answer": "<p>Hey man, that looks awesome!<br><br>And here<sq>s a thing I recently learned<colon> there<sq>s not always a lot of glory in building the smaller things, but over time you start to build bigger things faster. So when you get a new idea for a big project, it<sq>s easier to bang the smaller things out.<br><br>As far as not sharing the source, that<sq>s how most interactive things work! [Watch for a button to be pressed] -> [Take input and manipulate it] -> [Output somewhere]. That<sq>s a cool project and would have helped me in some of my earlier programming classes. <colon>)</p>", 
                "question": "It<sq>s small it<sq>s clunky but it<sq>s mine"
            }, 
            "id": "d1krull"
        }, 
        {
            "body": {
                "answer": "<p>Have a look through [The Ultimate List Of Developer Podcasts](http<colon>//simpleprogrammer.com/2014/03/10/ultimate-list-developer-podcasts/). I need to go through it myself so I can<sq>t give specific recommendations at this time but I<sq>m sure you<sq>ll find something to your liking.</p>", 
                "question": "Are there any good programming-related audiobooks/podcasts out there that I can listen to when I can<sq>t have a book or monitor in front of me for learning?"
            }, 
            "id": "cz44qps"
        }, 
        {
            "body": {
                "answer": "<p>Here are some of my favorites<colon><br><br>[Coder Radio](http<colon>//www.jupiterbroadcasting.com/show/coderradio/) - focuses on the business side of software development.<br><br>[.NET Rocks](https<colon>//www.dotnetrocks.com/) - does focus on the .NET framework, but they branch out a lot, sometimes even into non-CS topics<br><br>[CppCast](http<colon>//cppcast.com/) - C++ focused, as the name implies.<br><br>[Programming Throwdown](http<colon>//www.programmingthrowdown.com/) - covers a variety of topics, and they try to talk about a different programming language each episode.<br><br>[Core Intuition](http<colon>//www.coreint.org/) - has a focus on mobile apps and the Apple ecosystem.<br></p>", 
                "question": "Are there any good programming-related audiobooks/podcasts out there that I can listen to when I can<sq>t have a book or monitor in front of me for learning?"
            }, 
            "id": "cz4bv7c"
        }, 
        {
            "body": {
                "answer": "<p>* Talk Python to Me<br>* Podcast.__init__ (another Python Podcast)<br>* Code Newbies<br>* The Bike Shed<br>* Talking Code<br>* The Ship Show (Bridges gap between Operations and Developer side of field)<br><br>There was also a really good Ruby podcast, but I forget the name of it since I don<sq>t know/use Ruby. Which is another tip -- if you know the languages you want to learn/use, try looking for podcasts specifically tailored to them. (I<sq>m a Sysadmin who is trying to learn Python, which is probably evident from my podcast selection)<br><br>**Edit<colon>** Added formatting.</p>", 
                "question": "Are there any good programming-related audiobooks/podcasts out there that I can listen to when I can<sq>t have a book or monitor in front of me for learning?"
            }, 
            "id": "cz4bkfg"
        }, 
        {
            "body": {
                "answer": "<p>Am in the exact same boat basically. One podcast I found that been interesting is called <dq>Take Up Code<dq><br></p>", 
                "question": "Are there any good programming-related audiobooks/podcasts out there that I can listen to when I can<sq>t have a book or monitor in front of me for learning?"
            }, 
            "id": "cz44sb3"
        }, 
        {
            "body": {
                "answer": "<p>At least initially, I<sq>ll suggest something like [RPG Maker](http<colon>//www.rpgmakerweb.com/). I<sq>ve never used it, but it<sq>s been used to make several commercially successful RPG-ish games (like [To The Moon](http<colon>//freebirdgames.com/to_the_moon/)).<br><br>There<sq>s a subreddit devoted to this software, too<colon> https<colon>//www.reddit.com/r/RPGMaker/<br><br>That might be a better place to ask questions about how to get started, which version to pick up, etc. My suspicion is that the [XV version](http<colon>//www.rpgmakerweb.com/products/programs/rpg-maker-vx) is probably not a bad place to start.<br><br>If he uses Steam for gaming, it<sq>s purchaseable there<colon> http<colon>//store.steampowered.com/app/220700/?snr=1_7_15__13<br><br>Again, there are probably better places to ask this question (most notably, the subreddit linked to above), as RPG Maker is not quite within the purview of this subreddit.</p>", 
                "question": "My 15 year old son is interested in programming and wants an RPG creator of some sort. I really know nothing about this can someone point me in the right direction?"
            }, 
            "id": "cv49y63"
        }, 
        {
            "body": {
                "answer": "<p>I highly recommend GameMaker ( http<colon>//www.yoyogames.com/studio ). It has a fully featured free version. I taught myself basic programming when I was 10 with their drag-and-drop system (way back with GM6), but it also includes its own language called GML that<sq>s similar to Java and Python. If he ends up getting really into it, they also have modules to export games to iPhone, Android, Windows Phone, Linux, Xbox, Playstation, etc.</p>", 
                "question": "My 15 year old son is interested in programming and wants an RPG creator of some sort. I really know nothing about this can someone point me in the right direction?"
            }, 
            "id": "cv4b9vs"
        }, 
        {
            "body": {
                "answer": "<p>Hey, I have a spare steam key for RPG Maker VX Ace Deluxe if you want it. It uses Ruby, though you don<sq>t really need any knowledge on it to make a game with it. Just PM me, I can send it as a gift to your steam account, or send the code through PM if he will use it. </p>", 
                "question": "My 15 year old son is interested in programming and wants an RPG creator of some sort. I really know nothing about this can someone point me in the right direction?"
            }, 
            "id": "cv4cw2e"
        }, 
        {
            "body": {
                "answer": "<p>www.byond.com<br><br>I used it when I was 13 to learn programming, and I<sq>m now a full-time Software Dev.<br><br>BYOND is amazing, simple, and **free**.</p>", 
                "question": "My 15 year old son is interested in programming and wants an RPG creator of some sort. I really know nothing about this can someone point me in the right direction?"
            }, 
            "id": "cv4jacw"
        }, 
        {
            "body": {
                "answer": "<p>Really appreciate it!</p>", 
                "question": "Free Python 201 book for 48 hours [ xpost /r/Python/ ]"
            }, 
            "id": "d8wztnm"
        }, 
        {
            "body": {
                "answer": "<p>Thanks </p>", 
                "question": "Free Python 201 book for 48 hours [ xpost /r/Python/ ]"
            }, 
            "id": "d8x0hf7"
        }, 
        {
            "body": {
                "answer": "<p>Awesome. Thanks a lot!<br><br>The book looks great. Looking forward to working through it</p>", 
                "question": "Free Python 201 book for 48 hours [ xpost /r/Python/ ]"
            }, 
            "id": "d8x2vtm"
        }, 
        {
            "body": {
                "answer": "<p>Hey guys .. Could any of you send me the ePub file for this to my email? I can<sq>t download this on my iphone .. Thanks a ton in advance \ud83d\ude01\ud83d\ude01 </p>", 
                "question": "Free Python 201 book for 48 hours [ xpost /r/Python/ ]"
            }, 
            "id": "d8xjmsg"
        }, 
        {
            "body": {
                "answer": "<p>> And if you have a suggestion as to an easier API I could learn to use as my first one then that would be awesome too!<br><br>[Google Maps API](https<colon>//developers.google.com/maps/documentation/) is very easy. I recommend starting with the with the [distance calculator web service API](https<colon>//developers.google.com/maps/documentation/distance-matrix/start), then try experimenting with some of the JavaScript and Android APIs if you<sq>re feeling adventurous.</p>", 
                "question": "Where to start with learning how to use API<sq>s?"
            }, 
            "id": "d8pb6ay"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d recommend taking a look at the FreeCodeCamp projects. There are several that use APIs including Wikipedia, Twitch, and a weather API. I<sq>m sure they were chosen due to ease of use. You<sq>ll still have to dig into documentation a bit but it helped me gain confidence that using APIs is...well..a thing that can actually be done <colon>)</p>", 
                "question": "Where to start with learning how to use API<sq>s?"
            }, 
            "id": "d8pb8sf"
        }, 
        {
            "body": {
                "answer": "<p>[https<colon>//zapier.com/learn/apis/](https<colon>//zapier.com/learn/apis/) </p>", 
                "question": "Where to start with learning how to use API<sq>s?"
            }, 
            "id": "d8pejjs"
        }, 
        {
            "body": {
                "answer": "<p>Hey!<br><br>It sounds like you need an api thats super easy to use so you can nail down the actual use of them better. A project I always get my junior devs to complete is the following<colon><br><br>Using [The star wars API](https<colon>//swapi.co/) make a top trumps game. Build it in Angular and make it so you (the human) and the computer each get a card. You pick a trait and compare it against the other cards traits. The best trait wins.<br><br><br>This does a few things for you<colon><br>1- It allows you to see an instance where we might actually use an API. In this case, we want to get stored information from a server, rather than say - use an API to grant access to information etc.<br><br>2- It will teach you (or rather you will teach yourself) how an api actually works - what<sq>s going on behind the scenes<br><br>3. - it will demistify API<sq>s for you. Alot of people think API<sq>s need to be super complex. The Star Wars API is essentially a big database of objects - you query the API and it returns the data as a JSON string.<br><br><br>I<sq>ve had three juniors under me who <sq>struggled<sq> with API<sq>s and all had a blast making different version of this. They all had different problems (One didn<sq>t understand why he didnt<sq> just install the data locally aha) but each of them solved them on their own whilst building the project.<br><br>This might not be the answer your looking for but maybe it will help someone else <colon>)</p>", 
                "question": "Where to start with learning how to use API<sq>s?"
            }, 
            "id": "d8ph5kr"
        }, 
        {
            "body": {
                "answer": "<p>.</p>", 
                "question": "Build a Twitch.tv Chat Bot in 10 minutes with Node.js"
            }, 
            "id": "d1m0fqi"
        }, 
        {
            "body": {
                "answer": "<p>Are there Youtube channels where you can see the actual coding like in this video ?</p>", 
                "question": "Build a Twitch.tv Chat Bot in 10 minutes with Node.js"
            }, 
            "id": "d1m9abm"
        }, 
        {
            "body": {
                "answer": "<p>Well I did it and that<sq>s pretty cool. What else can I do that<sq>s similar/more useful?</p>", 
                "question": "Build a Twitch.tv Chat Bot in 10 minutes with Node.js"
            }, 
            "id": "d1mbm1n"
        }, 
        {
            "body": {
                "answer": "<p>Can you describe to me what Node.js is for? I know it<sq>s a framework for JavaScript but that still makes zero sense to me.<br><br>Thanks.</p>", 
                "question": "Build a Twitch.tv Chat Bot in 10 minutes with Node.js"
            }, 
            "id": "d1mc5d1"
        }, 
        {
            "body": {
                "answer": "<p>edX, Coursera.  I<sq>m already a professional web applications developer.  What I lack is theory and fundamental knowledge.<br><br>So the <dq>here<sq>s how you do it<dq> sites aren<sq>t particularly alluring to me.<br><br>Codecademy felt too sandboxed for my tastes.  I just learned about FreeCodecamp.com which is also sandboxed, but seems more practical at a glance.</p>", 
                "question": "What is your favorite online class site and why?"
            }, 
            "id": "cwxbtn5"
        }, 
        {
            "body": {
                "answer": "<p>Codeingame if you want to build game while also learn to code. It<sq>s not for introduction though, you need to know some basic syntax. <br><br>edit<colon> [codingame] (https<colon>//www.codingame.com)</p>", 
                "question": "What is your favorite online class site and why?"
            }, 
            "id": "cwxam2z"
        }, 
        {
            "body": {
                "answer": "<p>None? I<sq>ve completed course work through Edx, Udacity, Codecademy, Udemy. The net result was that I returned to well regarded books. Most of the course work online was surface level and lacking depth and theory. Can you learn the basics of coding? Yes. But I have yet to find anything that truely takes you past the beginner-intermediate level.</p>", 
                "question": "What is your favorite online class site and why?"
            }, 
            "id": "cwxd7ib"
        }, 
        {
            "body": {
                "answer": "<p>After ~4 months of just researching resources I settled on dataquest.io .(There<sq>s so much shit out there it<sq>s fucking overwhelming, for those looking,just settle on something--just get started.)<br><br>I just like the format it is in a lot. I have a feeling even when I finish the <dq>Data Science<dq> or <dq>Data Analyst<dq> track I likely will still feel like a beginner (intermediate at best). That<sq>s how it is though. You become truly proficient by working on real problems and real projects, not canned assignments. <br><br>My goal is to just get my bearings because it<sq>s hard to know what you don<sq>t know when you have zero context or fundamentals. Then I want to start my own self-directed projects and look for internships/apprenticeships/entry-level positions that will give me even more experience with real projects and real problems.  </p>", 
                "question": "What is your favorite online class site and why?"
            }, 
            "id": "cwxely7"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t often have ideas for interesting self projects, but a few months ago I made a really basic python program to pull off data from a university course catalog. It displayed all of the sections of the course and the ammount of seats taken/ammount of seats. It was pretty interesting as it was my first time using python, and I think I used some web parsing library that made it super easy to pull the information off the website. It would probably be useful if I made it run every so often and send a notification via email if there was an available seat or something like that, but I<sq>ll leave that up to whoever is more inspired.</p>", 
                "question": "What are some programs you have made only for yourself to use?"
            }, 
            "id": "cpq674z"
        }, 
        {
            "body": {
                "answer": "<p>I made a python program that would check every 5 minutes to see if a university course I needed to get into had an available slot, and then e-mail me with some urgent message like<br><br> >DEAR CREATIVENIGHTMARE, THERE IS AN OPEN SLOT, GO REGISTER RIGHT NOW!!!!! [link to the registration page]<br><br>It worked and I got into the course!<br><br><br>I also made a little Urban Dictionary API Wrapper in python that I called UDAW, it would easily fetch the definition of a word or phrase you put in, as well as show related terms / definitions for it. I<sq>m bad with slang and acronyms so it was good for on-the-fly <dq>What did that person just say?<dq> questions without having to open up my browser and navigate to the site, look for the term.<br><br><br>---<br><br>**Edit**<br><br>The most useless, I think, was just another python program that would convert a number in base M to a number in base N, but print the step by step process. This was because of an assignment involving base conversions that asked you to <dq>SHOW YOUR WORK<dq>, and I didn<sq>t want to write down every single step by step by myself because I was lazy. Of course, I probably spent the same amount of time that writing down every step would have taken writing the program, but it was a learning experience.</p>", 
                "question": "What are some programs you have made only for yourself to use?"
            }, 
            "id": "cpqcnga"
        }, 
        {
            "body": {
                "answer": "<p>ITT<colon> Python is a really cool language to do all sorts of neat little things in a simple way in short amount of time.<br><br>Note to self<colon> Learn python</p>", 
                "question": "What are some programs you have made only for yourself to use?"
            }, 
            "id": "cpqlm54"
        }, 
        {
            "body": {
                "answer": "<p>My (rather large) family does a secret Santa exchange every year for Christmas. Drawing names out of a hat often yielded someone drawing their own name or matching up with their spouse and would trigger a redraw for everyone. I made a program that randomized drawings and checked to avoid spousal pairings or whatever other rule we decided on (boys with boys for example). It then texted everyone their result and emailed a master list to myself in case anyone forgot. </p>", 
                "question": "What are some programs you have made only for yourself to use?"
            }, 
            "id": "cpqfywt"
        }, 
        {
            "body": {
                "answer": "<p>This article has a lot of little things wrong, most of which aren<sq>t really that important, but here<sq>s a big one<colon><br><br>> Arrays are very useful but C does not have array variables.<br>><br>> ...<br>><br>> In C, an array variable is just a pointer ...<br><br>This is a common misconception. C&nbsp;*does* have array variables, and an array variable is *not* the same as a pointer.<br><br>The misconception arises because when an array variable is used *as a value*, then the value that you get is a pointer to the first element of the array.<br><br>https<colon>//www.reddit.com/r/learnprogramming/wiki/faq_c#wiki_is_there_a_difference_between_arrays_and_pointers.3F<br><br>http<colon>//c-faq.com/aryptr/index.html</p>", 
                "question": "I struggled with C pointers for the longest time. This cleared EVERYTHING up in about 5 minutes. Just wanted to share."
            }, 
            "id": "cp8pnj9"
        }, 
        {
            "body": {
                "answer": "<p>The first section of that article, and the last 2 sections, are OK; but the stuff after the headings  <dq>Pointers used as Arrays<dq> and <dq>Pointers used as strings<dq> is **wrong**. Please unlearn it and forget you ever read <dq>\u2018Array1\u2019 is just a pointer<dq>, <dq>like arrays, they are really just pointers<dq>,  and other such nonsense.<br><br>Arrays are arrays, pointers are pointers, and never the twain shall meet.  You can have a pointer point to an element of an array and that<sq>s where the <dq>similarity<dq> ends.<br><br>Try working with `&Array1` and you will quickly discover that `Array1` is not a pointer. It<sq>s no coincidence that the author doesn<sq>t mention 2-D arrays anywhere on the page, as they don<sq>t fit into his misunderstood scheme of what arrays are.<br><br>Example of horribleness<colon><br><br>    char *String1;<br>    String1=<dq>Some Text<dq>;<br><br>>[...] create the string where it is blatantly created as pointer to a variable of type \u2018char\u2019.<br><br>This is mixing up *the pointer* with *the thing being pointed to*, which is a common mistake that will hinder your understanding of pointers.  *The string* is the values `<dq>Some Text<dq>` which is stored as an *array* (not a pointer).  `String1` is a pointer, not a string. `String1` points to the first character of a string.<br><br>>A normal string in C is nothing but a chunk of memory <br><br>No, it<sq>s some characters *which are stored in a chunk of memory*. The memory chunk is a different thing to its contents. <br><br>    String1[7]=<dq>Some text<dq>;<br><br>....doesn<sq>t even compile. I<sq>m going to stop now as this article is just degenerating into Nilgewater.<br></p>", 
                "question": "I struggled with C pointers for the longest time. This cleared EVERYTHING up in about 5 minutes. Just wanted to share."
            }, 
            "id": "cp8yvml"
        }, 
        {
            "body": {
                "answer": "<p>I sort of wonder where you had learned about pointers...I mean isn<sq>t this basically the introduction to pointers you get anywhere you read about them?</p>", 
                "question": "I struggled with C pointers for the longest time. This cleared EVERYTHING up in about 5 minutes. Just wanted to share."
            }, 
            "id": "cp8r7ds"
        }, 
        {
            "body": {
                "answer": "<p><dq>understanding and using c pointers<dq> published by O<sq>Reilly really helped me to understand all the aspects of pointers. </p>", 
                "question": "I struggled with C pointers for the longest time. This cleared EVERYTHING up in about 5 minutes. Just wanted to share."
            }, 
            "id": "cp8w8r4"
        }, 
        {
            "body": {
                "answer": "<p>am I being a complete pleb, or are you using Pinterests source code? Or is this using Pinterest as its host? <colon>/</p>", 
                "question": "I made a site to bookmark interesting code tutorials and thought some of you might like it."
            }, 
            "id": "d7y0y6p"
        }, 
        {
            "body": {
                "answer": "<p>Thanks!</p>", 
                "question": "I made a site to bookmark interesting code tutorials and thought some of you might like it."
            }, 
            "id": "d7y4q4p"
        }, 
        {
            "body": {
                "answer": "<p>Pretty cool op,  been tempted to buy either an arduino or raspberry. </p>", 
                "question": "I made a site to bookmark interesting code tutorials and thought some of you might like it."
            }, 
            "id": "d7yboae"
        }, 
        {
            "body": {
                "answer": "<p>Whoa. Can you give me details on coding an Arduino robot. I wanna get in on that. Maybe that<sq>ll help it stick to me.</p>", 
                "question": "I made a site to bookmark interesting code tutorials and thought some of you might like it."
            }, 
            "id": "d7yhd6s"
        }, 
        {
            "body": {
                "answer": "<p>[CSS Zen Garden](http<colon>//www.csszengarden.com/) is a classic resource for this sort of thing.</p>", 
                "question": "Where can I go to see examples of great websites that were built using simple HTML and CSS?"
            }, 
            "id": "cnc3vpe"
        }, 
        {
            "body": {
                "answer": "<p>[This](http<colon>//motherfuckingwebsite.com/) is a nice starting point.</p>", 
                "question": "Where can I go to see examples of great websites that were built using simple HTML and CSS?"
            }, 
            "id": "cnc9tci"
        }, 
        {
            "body": {
                "answer": "<p>[One Page Love](http<colon>//onepagelove.com/) has been a great source of inspiration for me over the last year. The websites that are featured are organised by tags so its easy to find a website that needs similar features for one that I<sq>d like to build. There is also a little write-up about each website which I appreciate. Generally I have a look over there each time I<sq>m about to start a new project.</p>", 
                "question": "Where can I go to see examples of great websites that were built using simple HTML and CSS?"
            }, 
            "id": "cnc5jm8"
        }, 
        {
            "body": {
                "answer": "<p>This may be a little off topic, but since you are starting to learn I wanted to give some advice!<br><br>I<sq>ve been doing HTML/CSS for about 3 years but never touched Javascript/jQuery. Boy, what a mistake. I just bought a book<colon> [<dq>JavaScript & jQuery<colon> The Missing Manual<dq>](http<colon>//www.amazon.com/JavaScript-jQuery-The-Missing-Manual/dp/1449399029) (recommended by someone on here!) and it<sq>s so great. There<sq>s also some courses on Codecademy <colon>)<br><br>js/jq work together to make your website look really fresh and most of the examples you see in this thread will use them. js/jq allow the website to respond to user actions without loading a new page; and this (to me) is one of the biggest signals if a website is <dq>up to date<dq> or not.<br><br>I highly recommend starting to learn js and jq.<br><br>Bonus<colon> To stay on topic, check out the winners of the Webby awards [here!](http<colon>//www.webbyawards.com/winners/2014/web/general-website/activism/) Although many aren<sq>t made with simple HTML/CSS there is some serious talent there.</p>", 
                "question": "Where can I go to see examples of great websites that were built using simple HTML and CSS?"
            }, 
            "id": "cnc63an"
        }, 
        {
            "body": {
                "answer": "<p>Sounds like you need a new job. I haven<sq>t had to deal with that stuff in years and I still actively code every day.</p>", 
                "question": "For all the University students wondering what real-life programming is like..."
            }, 
            "id": "cg8br4x"
        }, 
        {
            "body": {
                "answer": "<p>honestly, pick up this [book](http<colon>//www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073). it<sq>ll up your professionalism a great deal. part of the responsibility of a good coder is to be able to push back to management. not rudely, but they make their money decisions based on tech they don<sq>t know, and it<sq>s your job to make sure they understand what<sq>s possible and what<sq>s not instead of just rolling over and taking it.</p>", 
                "question": "For all the University students wondering what real-life programming is like..."
            }, 
            "id": "cg8curk"
        }, 
        {
            "body": {
                "answer": "<p>DO ALL of you work for incompetent companies? I seem to be one of the few that works around actual professionals, who understand their asks and the implications.<br><br>I guess having qualified managers helps. And i assume the better job/company you work for, the less likely it is that they hire total dunces to oversee highly paid engineers.</p>", 
                "question": "For all the University students wondering what real-life programming is like..."
            }, 
            "id": "cg8d1z2"
        }, 
        {
            "body": {
                "answer": "<p>Programming and politics come hand in hand. The reason is, that technology is often used as a driver for changing existing processes. Where ever you have change you are going to have conflict or disagreement, impossible to avoid.<br><br>Systems often line up in a stream, data from System A flows into System B which flows into System C and ends in System D<br><br>System A -> System B -> System C -> System D<br><br><br>When the owner for System A (Person A) wants to make a change, chances are its going to needs the owner of System B (Person B) to also make a change. <br><br>Each have there own priorities, budgets and limited amount of man hours, hence the good old silences in conversation as neither party wants to except the responsibility for change.<br><br>It will be less so in small organisation, but in large corporations its half the fun. Don<sq>t over-promise and use the <sq>No<sq> word when necessary.</p>", 
                "question": "For all the University students wondering what real-life programming is like..."
            }, 
            "id": "cg8d7fh"
        }, 
        {
            "body": {
                "answer": "<p>>It compiled? It did what its supposed to? Holy shit its working!<br><br>One of the best feelings in programming</p>", 
                "question": "Good News for a Beginner"
            }, 
            "id": "cc4grhv"
        }, 
        {
            "body": {
                "answer": "<p>Ah, i know that feel. Good job! <colon>)</p>", 
                "question": "Good News for a Beginner"
            }, 
            "id": "cc4f595"
        }, 
        {
            "body": {
                "answer": "<p>Fuck yeah, buddy.  [Fuck yeah.](http<colon>//i.imgur.com/S415mNo.gif)</p>", 
                "question": "Good News for a Beginner"
            }, 
            "id": "cc4frsg"
        }, 
        {
            "body": {
                "answer": "<p>Haha, the addiction begins! Congrats man <colon>)</p>", 
                "question": "Good News for a Beginner"
            }, 
            "id": "cc4fczr"
        }, 
        {
            "body": {
                "answer": "<p>Sure! The wiki of /r/netsec has some resources<colon><br><br>https<colon>//www.reddit.com/r/netsec/wiki/start</p>", 
                "question": "Self taught cyber security?"
            }, 
            "id": "cvskri7"
        }, 
        {
            "body": {
                "answer": "<p>look into overthewire.org<br><br>it can be pretty fun.</p>", 
                "question": "Self taught cyber security?"
            }, 
            "id": "cvsmhn2"
        }, 
        {
            "body": {
                "answer": "<p>You can check out Cybrary. It<sq>s a recent cyber security education website. I haven<sq>t really gone through a lot of stuff there, but from what I<sq>ve seen there<sq>s plenty of things to learn.</p>", 
                "question": "Self taught cyber security?"
            }, 
            "id": "cvslrr6"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.futurelearn.com/courses/introduction-to-cyber-security<br><br>ps<colon> more topics about [CS](https<colon>//github.com/open-source-society/computer-science)</p>", 
                "question": "Self taught cyber security?"
            }, 
            "id": "cvsp104"
        }, 
        {
            "body": {
                "answer": "<p>Udemy freqently has these $10 or $19 sales, so don<sq>t feel pressured to buy something RIGHT NOW.  Several of their courses are ripped off from other places, as well (some of which are free).  I<sq>d be hesitant to support them knowing how much better content is out there by better companies.<br><br>http<colon>//motherboard.vice.com/read/of-course-people-are-ripping-off-online-courses</p>", 
                "question": "Udemy is having a sale where every paid course is $10. Anyone with experience have any recommendations?"
            }, 
            "id": "da0ngpp"
        }, 
        {
            "body": {
                "answer": "<p>I really enjoyed Anthony Alicea<sq>s course JavaScript<colon> Understanding the Weird Parts. If you have any prior experience with programming, this course is a great look into what JavaScript does differently and how it does what it does. Gives a solid fundamental understanding of the core language, which, as anyone on here will tell you, is much more powerful than a functional knowledge of whatever flavor-of-the-month framework everyone is talking about. Those are great things to learn, too, but with a course like this (and the textbook Eloquent JS or something similar), you can really get a deep understanding of JS.</p>", 
                "question": "Udemy is having a sale where every paid course is $10. Anyone with experience have any recommendations?"
            }, 
            "id": "da0no1i"
        }, 
        {
            "body": {
                "answer": "<p>Colt Steele web developer boot camp</p>", 
                "question": "Udemy is having a sale where every paid course is $10. Anyone with experience have any recommendations?"
            }, 
            "id": "da0o83x"
        }, 
        {
            "body": {
                "answer": "<p>Rob Percival has an excellent course called [The Complete Web Developer Course 2.0](https<colon>//www.udemy.com/the-complete-web-developer-course-2/).<br><br>Includes free web hosting and covers multiple web technologies.</p>", 
                "question": "Udemy is having a sale where every paid course is $10. Anyone with experience have any recommendations?"
            }, 
            "id": "da0m7an"
        }, 
        {
            "body": {
                "answer": "<p>Hands down the best course I<sq>ve ever taken<colon> http<colon>//mooc.fi/courses/2013/programming-part-1/<br><br>off you go.</p>", 
                "question": "Never programmed before want to start with Java. What do you recommend video tutorials or online courses?"
            }, 
            "id": "cu9oxhb"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//programmingbydoing.com/<br>This tutorial helped me the most in getting started. It<sq>s a list of increasingly difficult assignments. What<sq>s great about them is that they first teach you the concepts you need to know, and then you have to figure it out on your own with the concepts it taught you.</p>", 
                "question": "Never programmed before want to start with Java. What do you recommend video tutorials or online courses?"
            }, 
            "id": "cu9vy2h"
        }, 
        {
            "body": {
                "answer": "<p>Before you learn any language in particular, I suggest you learn the fundamentals of any language. I highly suggest [CS50](https<colon>//www.edx.org/course/introduction-computer-science-harvardx-cs50x). It<sq>s a great course and it<sq>s made for people just like you! </p>", 
                "question": "Never programmed before want to start with Java. What do you recommend video tutorials or online courses?"
            }, 
            "id": "cu9xvas"
        }, 
        {
            "body": {
                "answer": "<p>John Purcell.  He has a free Java course on Udemy.  A great way to get started...</p>", 
                "question": "Never programmed before want to start with Java. What do you recommend video tutorials or online courses?"
            }, 
            "id": "cu9vjtk"
        }, 
        {
            "body": {
                "answer": "<p>I want to caution you on passively learning.  You said you<sq>ve watched hundreds of YouTube videos, and that you<sq>ve purchased some books you<sq>re waiting to receive to code.  This is well and great, but it<sq>s time to move onto coding yourself without having your hand held.  This is, in my opinion, the hardest part about learning to program.  There are plenty of sources to learn syntax, but very little for the next step of actually creating something meaningful.<br><br>Just like how I didn<sq>t learn Calculus simply by reading the lesson in the book, you also have to put in the work to code. Learning passively simply won<sq>t do it. If you<sq>re worried or concerned about not being able to get past this initial hurdle, consider attempting the things that /u/BithTree suggested in their comment.  By making your current life easier, you will be able to have more time to code more things, in addition to adding the programs that initially made your life easier to your portfolio.<br><br>Two suggestions for this hurdle I personally found helpful were<colon> 1) refer to the language documentation and search stack overflow for your issues and 2) join a programming community.  I joined the Programming Discussions<sq> discord (https<colon>//discord.gg/9zT7NHP), which is full of people who are very nice, amazingly patient, and have no sense of judgement (meaning if you feel like asking a butt-dumb question, people won<sq>t make you feel ashamed).</p>", 
                "question": "Is it realistic for a 30-year-old teacher to retrain into programming without a relevant degree?"
            }, 
            "id": "dchmcx2"
        }, 
        {
            "body": {
                "answer": "<p>I was an English professor. At 41, I finished coding bootcamp and am now a software engineer. If you enjoy it, do it and keep doing it by getting involved in open source, meetups if you<sq>ve got them near you, and anything you can do to engage with the programming community.</p>", 
                "question": "Is it realistic for a 30-year-old teacher to retrain into programming without a relevant degree?"
            }, 
            "id": "dcho2os"
        }, 
        {
            "body": {
                "answer": "<p>Plenty of people get a job without a degree. Just keep learning, find a project on github to contribute to, learn to work as a team, etc...</p>", 
                "question": "Is it realistic for a 30-year-old teacher to retrain into programming without a relevant degree?"
            }, 
            "id": "dchjjso"
        }, 
        {
            "body": {
                "answer": "<p>Cheers to a fellow MA-holding, underpaid instructor of a similar age. I<sq>m still in the learning stages, so nothing too useful to share with you.<br><br>I<sq>ve been focusing on learning to make things that make my job easier. My first project was a gradebook with Google sheets and their Javascript-based API. Then I made some worksheet creators with the same tech. Now I<sq>m working on a fully Java-based app for filling in a spreadsheet and generating documents we need for the end of session that are a PITA to complete.</p>", 
                "question": "Is it realistic for a 30-year-old teacher to retrain into programming without a relevant degree?"
            }, 
            "id": "dchkl7p"
        }, 
        {
            "body": {
                "answer": "<p>You need to start learning how to break large problems down to their very basic functions. Don<sq>t even touch a computer when you<sq>re given a programming problem. Solve it all on paper, map it all out, figure out how it works first, and then code it.</p>", 
                "question": "Why can<sq>t I... Learn programming?"
            }, 
            "id": "dbo7ckg"
        }, 
        {
            "body": {
                "answer": "<p>Well, let<sq>s just take some example programming exercise, and see what comes up.<br><br>A common problem given out is fizzbuzz. It<sq>s a program that counts to 100, and if that number is divisible by 3, it prints <dq>fizz<dq>, and if it<sq>s divisible by 5 it prints <dq>buzz<dq>, but if it<sq>s divisible by both 3 and 5, it prints <dq>fizzbuzz<dq>. Otherwise, it just prints the number.<br><br>OK. Time for some of that elusive art of programming you<sq>re asking about.<br><br>You read that statement, and you see the word count? OK. You know right off the bat that you need to iterate. Hmm, we have while loops, do-while loops, and for loops for iteration. We know that we need to count up to some number, but we also know that we can count directly in a for loop. So, let<sq>s use a for loop.<br><br>Next thing you see is the word divisible. Well, how do you mathematically determine if a number is divisible by some other number? Here is where you do research if you don<sq>t know the answer. Obviously, the problem description mentions divisible, and so it is of utmost importance that you know what everything means before you start writing code.<br><br>But you<sq>re a programmer, and you have some math under your belt, so you know that a number is divisible by another number if it evenly divides that number. In other words, there is no remainder. Whoa, no remainder? Not specific enough. There is a remainder of zero. Ah, much better.<br><br>OK. So, in our research we realized that we<sq>re writing the word <dq>check<dq> a lot. Other hints are <dq>test<dq>, <dq>determine<dq>, etc. With these words, we know that we<sq>re going to have to use a conditional. We<sq>ll need an if statement, which checks the current counted number being divisible by 3 or 5 or 3 and 5. How many if statements do we actually need? Dunno. Still need to think about the problem some more. What is a divisibility test in code anyway? So, you do some more research. Lo and behold, it<sq>s this thing <percent>. This is the modulus operator, which returns the remainder of integer division. You know this because you researched. You didn<sq>t know it, but you worked the problem and thought it through.<br><br>How much code have we written so far? None. Zero. Hopefully you wrote things down though. That<sq>s really important.<br><br>And so, you see that you have to do some printing. That means we need to use some printf statements from stdio.h. No big deal. That was like day one with hello world. You got this.<br><br>Thinking back on the problem though, it would make sense to check if the number is divisible by 3 and 5 first because that test is the most restrictive. You realize that if you test divisibility for 3 and then 5, and then 3 and 5 it<sq>s not going to print the right thing. How do you know this? You did a little manual mocking on a piece of a paper to see what should be expected.<br><br>Anyway, in the end you realize that you need a for loop that counts from 1 to 100 inclusive by 1 where that value is tested via modulus against 3 and 5, then 5, then 3, then printing the number in a 4 part if-else chain. So, you write a quick little prototype in main and it works great. But, mains for setting the game up. You create a function that does the work. You copy that code you wrote into the function and replace it with a function call.<br><br>But hey, why should it really just go from 1 to 100 when it<sq>s a function? Why not pass in the start and stop parameters, so the caller (in this case main) decides what the range to go is.<br><br>Then, you realize that maybe it might also be fun to write the results to a file for practice. So, you research on how to create a file, write to a file, close a file, read a file. And so on....<br><br>I hope this helps.</p>", 
                "question": "Why can<sq>t I... Learn programming?"
            }, 
            "id": "dbo9hps"
        }, 
        {
            "body": {
                "answer": "<p>The <dq>art of programming at large<dq> is really just programming a lot of small things. You<sq>ve lost the battle already if you really think you can<sq>t write anything.<br>The truth is, you can. You can write a hello world statement. You can write a for loop. Doing anything bigger than that is just merely putting together a lot of smaller things, that believe it or not, you can do!</p>", 
                "question": "Why can<sq>t I... Learn programming?"
            }, 
            "id": "dbo7b19"
        }, 
        {
            "body": {
                "answer": "<p>Problem-solving can only be learned through practice. You have chosen a somewhat difficult language to learn as a start, but if you can figure C out, future languages should seem quite easy. Find or make up some problems and work them out completely by hand, possibly using psuedocode, then write them up as code. You also have to understand that Google-Fu is an important tool in a programmer<sq>s toolkit and use it as needed.</p>", 
                "question": "Why can<sq>t I... Learn programming?"
            }, 
            "id": "dbo7av3"
        }, 
        {
            "body": {
                "answer": "<p>This is very charitable of you. I<sq>ll be consulting your vids as I work with firefox as well.</p>", 
                "question": "I work on the Firefox web browser and I<sq>ve been recording myself working for the past 11 weeks."
            }, 
            "id": "cqou9o9"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, keep it up OP.<br><br>You may also wanna x-post this to /r/WatchPeopleCode.</p>", 
                "question": "I work on the Firefox web browser and I<sq>ve been recording myself working for the past 11 weeks."
            }, 
            "id": "cqp1ndm"
        }, 
        {
            "body": {
                "answer": "<p>Interesting</p>", 
                "question": "I work on the Firefox web browser and I<sq>ve been recording myself working for the past 11 weeks."
            }, 
            "id": "cqosjqx"
        }, 
        {
            "body": {
                "answer": "<p>At first I was thinking <dq>Man this has to violate some company/copyright rules/laws...<dq> But then I realized it was open source Firefox!<br>Pretty neat idea to show some real-world programming for free. <br>Thanks!</p>", 
                "question": "I work on the Firefox web browser and I<sq>ve been recording myself working for the past 11 weeks."
            }, 
            "id": "cqp03mv"
        }, 
        {
            "body": {
                "answer": "<p>I really don<sq>t get the name of that site. <dq>Full stack<dq> will by definition also include other programming languages other than Python. It would be really nice if people stop using it as a catch-all phrase for just <dq>developer<dq>. </p>", 
                "question": "For people who want to get into full stack development with Python I can<sq>t recommend fullstackpython.com enough"
            }, 
            "id": "dfgp1y9"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for the link.  I recently downloaded the Microsoft Visual Studio 2017 <dq>Preview<dq> which supports Python in it<sq>s IDE. Combining that with Lynda.com tutorials I am working my way to add another language to my toolbox.</p>", 
                "question": "For people who want to get into full stack development with Python I can<sq>t recommend fullstackpython.com enough"
            }, 
            "id": "dfgwzyf"
        }, 
        {
            "body": {
                "answer": "<p>Is there a good market for jobs in python frameworks at the moment? With all the angular + react hype everywhere I haven<sq>t seen much of Django and flask lately. </p>", 
                "question": "For people who want to get into full stack development with Python I can<sq>t recommend fullstackpython.com enough"
            }, 
            "id": "dfgimsk"
        }, 
        {
            "body": {
                "answer": "<p>Thanks OP, positive posts like this keep me writing! <br><br>Also pull requests and issue tickets are super helpful as the site has grown to over 85k words and counting. For example, when Slack changed their bot creation flow someone submitted an issue ticket so I knew I had to update that tutorial. file tickets & submit PRs on the GitHub repo<colon> https<colon>//github.com/mattmakai/fullstackpython.com</p>", 
                "question": "For people who want to get into full stack development with Python I can<sq>t recommend fullstackpython.com enough"
            }, 
            "id": "dfhqhd5"
        }, 
        {
            "body": {
                "answer": "<p>Congrats on releasing the second book! I have had a quick flick through and it looks like quite a nice little intro. You might want to consider a different title for your book though as Essential Java is the name of a very popular book in the US and UK. *A Primer on Java* would be a pretty nice name and it would keep inline with your SQL book <colon>)</p>", 
                "question": "My second free eBook - Essential Java"
            }, 
            "id": "ce4w139"
        }, 
        {
            "body": {
                "answer": "<p><dq>Those who can, do. Those who can<sq>t, teach. Those who can<sq>t teach, write books. Those who can<sq>t write books, write long-winded reddit comments.<dq><br><br>I read through most of the book and in a spirit of goodwill I<sq>d like to provide some criticisms<colon><br><br>* You should figure out a target audience/ niche<br><br>You need to figure out who you<sq>re talking to. You<sq>re not going to write the most detailed textbook covering all use cases. That<sq>s fine. Who are you trying to help? Why is your book better than any other book on the subject?<br><br>Being free would be a reason, but I would argue that the [free, official Oracle documentation](http<colon>//docs.oracle.com/javase/tutorial/tutorialLearningPaths.html) has you beat in almost every measure.<br><br>I don<sq>t mean that as an insult; it<sq>s just that the professionally produced literature designed to introduce people to that technology is way more thorough and better written.<br><br>If you want your book to be relevant whatsoever, you should find people who aren<sq>t helped by the official docs, find out *why* the official docs aren<sq>t helping them, and figure out how to solve that problem.<br><br>* What is Java?<br><br>It<sq>s a programming language that businesses are built on. It<sq>s a highly optimized, portable VM. It<sq>s a ton of standard libraries. It<sq>s a huge community of programmers and organizations. Bytecode? I guess, but really that<sq>s just one of the many random factoids about it that must surely just confuse n00bs.<br><br>To someone who doesn<sq>t know programming, bytecode means nothing.  I would also argue that saying Java uses an <dq>interpreter<dq> is highly misleading and contrary to how most people defined <dq>interpreter.<dq><br><br>Here are some other buzzwords that differentiate Java from other languages<colon> static typed, memory managed (kind of a big one that you don<sq>t mention once), works well in Linux (to contrast with C#/.NET), object-oriented, simple threading. Some of those won<sq>t make sense, but really to me these are <br><br>* Really half-assed description of primitives<br><br>Seriously half-assed. floats are more than just <dq>numbers with decimals,<dq> and it<sq>s generally considered bad practice to use them instead of doubles. And there are a lot of rules for using them correctly that are easy for beginners to screw up.<br><br>No discussion on booleans, which have plenty of gotchas, such as difference between == and .equals(), or the fact that the statement that if statements take must resolve to a boolean. Or what a boxed primitive is... (or what null is for that matter)<br><br>Oh, and...<br><br>* Why introduce comments during a section on primitives?<br><br>* Plenty of wrong details<br><br>`<dq>Hello world<dq>` is a String literal, not a character literal. There are three access modifiers, but four options. Default (package-private) is an option. There really aren<sq>t enough hours in the day for me to nitpick all of the things that are wrong in this book.<br><br>**Anyway**, I hope this received in the spirit of critical feedback. By my reckoning you have a long way to go before writing a Java book that readers would find useful.<br><br></p>", 
                "question": "My second free eBook - Essential Java"
            }, 
            "id": "ce58iw0"
        }, 
        {
            "body": {
                "answer": "<p>Any chance you could make a torrent or upload it somewhere else like mega? Filedropper is blocked on my campus.</p>", 
                "question": "My second free eBook - Essential Java"
            }, 
            "id": "ce4x2tr"
        }, 
        {
            "body": {
                "answer": "<p>This book is really, really great. You should consider self-publishing this through Lulu.com. I feel guilty not paying for content that is this high quality.</p>", 
                "question": "My second free eBook - Essential Java"
            }, 
            "id": "ce5b9ob"
        }, 
        {
            "body": {
                "answer": "<p>People are calling repost, but I haven<sq>t seen this before. Thanks for posting.</p>", 
                "question": "GitHub repo with 100 project ideas for beginners"
            }, 
            "id": "cccruvy"
        }, 
        {
            "body": {
                "answer": "<p>Maybe repost this to /r/softwareprojectideas/? They<sq>d probably like it!</p>", 
                "question": "GitHub repo with 100 project ideas for beginners"
            }, 
            "id": "cccs4aj"
        }, 
        {
            "body": {
                "answer": "<p>good to see different approaches to the challenges!</p>", 
                "question": "GitHub repo with 100 project ideas for beginners"
            }, 
            "id": "cccqdpz"
        }, 
        {
            "body": {
                "answer": "<p>Looks awesome, thanks <colon>D</p>", 
                "question": "GitHub repo with 100 project ideas for beginners"
            }, 
            "id": "cccr84f"
        }, 
        {
            "body": {
                "answer": "<p>I didn<sq>t know you had a Reddit. I just want to thank you for all the videos you<sq>ve done and all the things you<sq>ve taught me. I wouldn<sq>t know a thing about programming if it weren<sq>t for you, so thank you.</p>", 
                "question": "Stuck in jQuery land? Intimidated by Javascript frameworks like Angular/Backbone?"
            }, 
            "id": "cugb757"
        }, 
        {
            "body": {
                "answer": "<p>Nitpick<colon> aren<sq>t Backbone and React considered libraries and not frameworks?</p>", 
                "question": "Stuck in jQuery land? Intimidated by Javascript frameworks like Angular/Backbone?"
            }, 
            "id": "cugmgxe"
        }, 
        {
            "body": {
                "answer": "<p>**Outstanding series!**, coming from a more backend background everything clicked instantly - but still I believe you explained everything perfectly. Thanks for the videos.</p>", 
                "question": "Stuck in jQuery land? Intimidated by Javascript frameworks like Angular/Backbone?"
            }, 
            "id": "cugf82d"
        }, 
        {
            "body": {
                "answer": "<p>You know, I had some questions about Javascript<sq>s style of object oriented programming, and you didn<sq>t even remotely come close to answering any of my questions.<br><br>Instead, you explained very clearly what you were doing and what Javascript was doing in the background, and even explained what that whole <sq>mustache<sq> thing was doing (at least roughly; enough that I knew what was and was not relevant).<br><br>And in doing so, you helped me answer my own questions. Thank you for the excellent video series; I<sq>ve not watched all the videos, and I might not end up watching them, but they were incredibly well made and incredibly helpful.<br><br>Though I will say, that at the start, I was a little bit confused. I know Javascript (roughly), but I have never even tried to learn jQuery. So at first I had some trouble figuring out what `$();` was doing and all that.<br><br>Thankfully, you more or less stuck to plain Javascript for the vast majority of your own code. This really helped me grasp what was going on.</p>", 
                "question": "Stuck in jQuery land? Intimidated by Javascript frameworks like Angular/Backbone?"
            }, 
            "id": "cugxcuj"
        }, 
        {
            "body": {
                "answer": "<p>There are a ton of great resources for learning git, and as someone who put it off for way too long I can<sq>t recommend it enough.  It shouldn<sq>t be much more than a day or two to get the basics down, and it really does become essential as your projects become more complex.  I<sq>m still a beginner and I use it even for toy programs and code from working through books and tutorials (bitbucket is great and offers free private repos for up to 5 people for things you don<sq>t want to be available publicly).<br><br>Besides the benefits of version control if you are at all paranoid about data loss like I am and/or like moving between multiple machines git and an online service like github or bitbucket can be such a huge relief.</p>", 
                "question": "Learn Version Control with Git - A step-by-step guide for the complete beginner"
            }, 
            "id": "cgtypdf"
        }, 
        {
            "body": {
                "answer": "<p>Derek Banas released [his Git tutorial today](http<colon>//www.youtube.com/watch?v=r63f51ce84A)</p>", 
                "question": "Learn Version Control with Git - A step-by-step guide for the complete beginner"
            }, 
            "id": "cgudwq7"
        }, 
        {
            "body": {
                "answer": "<p>Another thing to know is that the main git developer and creator of the creature is Linux Torvald, the creator of (GNU/)Linux!<br><br>EDIT<colon> Linus Torvalds lol</p>", 
                "question": "Learn Version Control with Git - A step-by-step guide for the complete beginner"
            }, 
            "id": "cgu0g69"
        }, 
        {
            "body": {
                "answer": "<p>I just git commit -a most of the time. Except when I git merge and forget to --no-ff then I have to git reset everything and git merge again. Maybe I should just set the global settings flag...</p>", 
                "question": "Learn Version Control with Git - A step-by-step guide for the complete beginner"
            }, 
            "id": "cgtynr2"
        }, 
        {
            "body": {
                "answer": "<p>Hey OP, let me tell you an (abbreviated) version of my story<colon><br><br>Graduated from college at 27 as an architecture/art double major in 2010 (I stayed in longer hoping to better-weather the economy since I was supposed to graduate in 2008). Realized the architecture field was still awful and my brother suggested I become a UI designer. I knew HTML from the 90s, I knew some PHP from an intro class I took in the early 2000s, and that was about it, though I did have a few semesters of graphic design behind me.<br><br>I moved back in with my parents and got a low-paying graphic design job and studied HTML, CSS, Javascript, PHP, MySQL (WAMP/LAMP stack) and a variety of other technologies. It sucked for a while, I was studying and coding 3-4 hours a night on weeknights, and I tried to do 8-hours/day on the weekends studying at Starbucks.<br><br>After a few months of that I started landing small gigs maintaining Wordpress sites, restyling older web presence sites for companies, and a bunch of other freelance work. After a few months of that I managed to get a graphic design job that allowed me to do some small web design and development, but mostly smaller sites. Blah blah blah at 30 I landed my first honest development job doing dev-ops for an ISP.<br><br>I tell you that to tell you this<colon> it<sq>s never too late to start learning something in this field. The only thing preventing anyone from getting into the field these days is motivation. You don<sq>t need a Macbook Pro, you don<sq>t need any secret programs, and all the tutorials are free online. All you need is about $200 for a cheap refurb desktop, an internet connection, and the desire and drive to learn.<br><br>As for what to look into, pick a language. If you<sq>re in marketing then you might want to stick to front-end technologies as back-end tends to require more knowledge and is harder to get right into. Knowing a little bit of everything is helpful as well, dabble in stuff, try building something small, then make it better, then make it bigger, then make that better and keep working. I<sq>m now 32 and it<sq>s been a 5-year journey for me. Yeah, I<sq>m behind most of my close friends who went straight into IT out of college (or high school), but the nice thing is that with dedication and hard work, you can achieve anything in this field.<br><br>If you have any questions feel free to PM me, I<sq>d be happy to answer any further questions you have.</p>", 
                "question": "Should/Can I start learning programming? 28 and no idea where i<sq>m going"
            }, 
            "id": "d5y0acj"
        }, 
        {
            "body": {
                "answer": "<p>Try www.codecademy.com - its probably the most popular entry level interactive online course. <br><br>To go from nothing to programming is probably easiest as a web developer, but there are also lots a lots of different types of programming/jobs. <br><br>My suggestion would be to do the web courses on CC and see how you enjoy them. <br><br>I did this (albeit I was younger when I started) but now I work for myself, travel heaps, make a decent wage and love work - I<sq>d be happy to answer more questions/mentor you on some things. </p>", 
                "question": "Should/Can I start learning programming? 28 and no idea where i<sq>m going"
            }, 
            "id": "d5xv6fg"
        }, 
        {
            "body": {
                "answer": "<p>Never too late. If you want to do this for a living it is possible, but will be a lot of hard work, there is no such thing as a free lunch. You need to be in it because you enjoy learning and not for the money. The reason being is that this field changes fast and you will need to constantly be learning new things to keep up. If you have no technical background it will probably take at least one year of 4-8hrs a day of study to become a web developer someone would want to hire. Everyone is different and I<sq>m not sure how mentally demanding your job is. I would say that if you find a mentor and are able to come home after a full days work and put 3-4 hours of focused study and 6-8hrs a day on the weekends you could realistically accomplish your goal. I<sq>d start with freecodecamp, if you can get through it all and enjoy/get plugged in with the community you will find all the resources you need.</p>", 
                "question": "Should/Can I start learning programming? 28 and no idea where i<sq>m going"
            }, 
            "id": "d5xzwf4"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re coming at this all wrong. <br><br>First things first. You have to have a compelling future that will bring out the best in you. A future that you will wake up early for and go to bed late to achieve. I can tell you my wife and kids are my main driver on the positive spectrum and my fear of failure on the negative. <br><br>Second<colon> You need to diversify your skills. If there is one skill you must master it<sq>s being able to anticipate what skills will be profitable in the next 5 years. We seem to over estimate what we can do in a year and under estimate what we can do in ten. <br><br>Now my story. I dropped out of high school at 18. Met my wife as a janitor at 22. Had my son at 27 and jumped on the PC trend at the time. There were so many opportunities. I started learning programming at 31 and got a job at 33. Now I make six figures working from home making mobile games. Now that is the path I took but between 27 and 33 I learned Active Directory, Cisco CCNA, Exchange Server, and programming. One of those panned out. You have to diversify your skills. <br><br>After I got that programming job as a software engineer I went back to school. Worked full time and school AND graduated top of my class. Why? Because I had a compelling future. One I was excited about. <br><br>Life is like rock climbing. Everyone<sq>s wall is different but similar. You have to find your own way but I know with 100<percent> confidence you can. The more arms (skills) you can learn while climbing will give you an advantage. Focus on your strengths. My strength was my ability to learn new topics and apply them in real world situations. <br><br>You can do this! If.a high school dropout can focus on his strengths and achieve a little bit you can do much more. Your marketing education isn<sq>t a waste. Use it to it<sq>s fullest. Leverage everything. Diversify your skills. How can you bring value to people/employers. We live in an age where you don<sq>t have to get a 9 to 5 to make enough money to be comfortable. All you have to do is give value to people and they will take care of you. <br><br>You can do it. </p>", 
                "question": "Should/Can I start learning programming? 28 and no idea where i<sq>m going"
            }, 
            "id": "d5y8lkm"
        }, 
        {
            "body": {
                "answer": "<p>By using `import`. Example<colon><br><br>    # In file main.py<br><br>    def main()<colon><br>        print(<dq>Hello, World!<dq>)<br>        <br>    print(<dq>File main.py was loaded<dq>)<br>        <br>    # In file init.py<br><br>    import main<br><br>    if __name__ == <dq>__main__<dq><colon><br>        main.main()<br><br>See here for more<colon> https<colon>//docs.python.org/3/tutorial/modules.html<br><br>As for why, it<sq>s because nobody wants to work with a 100,000 line file. Breaking things up into manageable parts makes it easier to work with projects.<br><br>Also<colon><br><br>1. In compiled languages, we can avoid compiling code that hasn<sq>t changed (by looking at file modification dates). <br>2. Programming is all about abstractions. Breaking things into modules is a form of abstraction (as are packages, namespaces, etc).<br>3. Editors and tools don<sq>t like large files, so breaking them up is necessary for performance reasons.<br>4. A hierarchy makes it easier to find things we<sq>re looking for. Eg, if we need to find code related to graphics, we might be able to narrow it down to a folder of files. We can easily follow links between files when needed.<br>5. Not all files are necessary at any given time. For interpretted languages like Python, every extra file imported means more work for the interpretter. Breaking things up into smaller files means we can import just what we need. This is super important to languages on the web, like JS (since download speed is way slower than pretty much every other computing bottleneck).</p>", 
                "question": "Maybe a stupid question but why do programmers use diffrent files for their codes as can be seen on github and such. And how do you <dq>connect<dq> these files?"
            }, 
            "id": "cti7x3k"
        }, 
        {
            "body": {
                "answer": "<p>At some point, an application becomes too large to fit into a single person<sq>s head. Some bright spark thought<colon> <dq>Hey, what if my big program was just made up out of mini programs that did really specific things?<dq><br><br>Construct your files so that they contain all the state and functionality to achieve a small part of your overall task, and only expose defined interfaces so that the callers can trust that your file <dq>does what it says on the box<dq>.<br><br>You save headspace and reduce bugs by focusing on small, local changes instead of having to consider your entire program at once. If your files/classes/modules are abstract and self-contained enough, you can also re-use that code later in another project.</p>", 
                "question": "Maybe a stupid question but why do programmers use diffrent files for their codes as can be seen on github and such. And how do you <dq>connect<dq> these files?"
            }, 
            "id": "cti92w4"
        }, 
        {
            "body": {
                "answer": "<p>Just bigger legos. Some languages make you import the other files that you make, other languages come with an interpreter/compiler that will look for other files in the same directory and include them for you. Ideally, each file represents a **cohesive**, complete unit of code serving one purpose. For instance, in object oriented programming, it<sq>s common to use objects that represent things like a <dq>Client<dq>, <dq>Product<dq> or <dq>Dog<dq>. Good practice would be to store each of these object definitions in a separate file.     <br>     <br>When a project contains multiple files, you need a way to specify which file houses the program<sq>s entry point. That<sq>ll be an <sq>init<sq> or otherwise configured. When making  a .jar file in Java, for example, you must specify which class is the main class to be executed when the jar file is executed. </p>", 
                "question": "Maybe a stupid question but why do programmers use diffrent files for their codes as can be seen on github and such. And how do you <dq>connect<dq> these files?"
            }, 
            "id": "ctie7o0"
        }, 
        {
            "body": {
                "answer": "<p>The responses here just gave me a cool high-dea! An editor / visualizer of your class hierarchy. If you zoom out from a file, you see other dependent files nearby, in 3d space. Think of a file as a neuron and a dependency as a synapse. Group and cluster them around heavily used classes like you network stack or your data layer. Zoomed out it would look similar to an MRI of the brain. You could use VR to jump inside of it. You could hook into your crash reporting and color code the areas of code that crash, so that certain parts of the MRI look unhealthy due to buggy code. If you do this for languages like java script of Java or Python you could hook into the interpreter and have your code MRI be an fMRI by seeing executing in real time like electrical signals in the brain.</p>", 
                "question": "Maybe a stupid question but why do programmers use diffrent files for their codes as can be seen on github and such. And how do you <dq>connect<dq> these files?"
            }, 
            "id": "ctijcxk"
        }, 
        {
            "body": {
                "answer": "<p>The actual C++ community at large has largely said that there<sq>s basically three <dq>intro<dq> or <dq>learning<dq> books<colon><br><br>* Principles and Practice Using C++ (the <dq>College<dq> beginner)<br>* C++ Primer (the I<sq>ve learned to program in X already beginner)<br>and lastly<br>* Accelerated C++ (the actual professional programmer and my boss said to learn C++)<br><br>I don<sq>t want to spend 1600 hours write up a review of another garbage C++ resource.  In general they suffer from not teaching you modern C++ and instead often devolve into teaching you C stuff that C++ supports for legacy purposes even though newer paradigms have 100<percent> replaced those C things.  Or they suffer from simply teaching poor programming practices in general.</p>", 
                "question": "Two months ago a playlist of 47 C++ tutorials was voted all the way to the top of this sub. Has anyone checked the quality and validity of the course? Has anyone gained anything from it?"
            }, 
            "id": "d09rkn0"
        }, 
        {
            "body": {
                "answer": "<p>Seems decent. There is nothing fancy being taught. Just from the very bottom. Seems like a good enough time investment if you like learning by videos.</p>", 
                "question": "Two months ago a playlist of 47 C++ tutorials was voted all the way to the top of this sub. Has anyone checked the quality and validity of the course? Has anyone gained anything from it?"
            }, 
            "id": "d098kp9"
        }, 
        {
            "body": {
                "answer": "<p>Doesn<sq>t look amazing. Very overhyped imo, no idea why it got 4000+ upvotes and gold, almost as if people didn<sq>t know C++ tutorials existed already.<br><br><br><br>Just watch it, if you learn then cool, if you don<sq>t then that sucks but you would have at least learnt some trivial syntax.<br><br>At the end of the day, you are better off buying a book.</p>", 
                "question": "Two months ago a playlist of 47 C++ tutorials was voted all the way to the top of this sub. Has anyone checked the quality and validity of the course? Has anyone gained anything from it?"
            }, 
            "id": "d09givs"
        }, 
        {
            "body": {
                "answer": "<p>Videos in my opinion aren<sq>t generally the best way to learn. There isn<sq>t much that pushes you to do things on your own and explanations can generally be confusing. Written tutorials such as books I believe are better resources. I tried to learn programming via video tutorials and they taught bad practices and were incredibly basic, doing things such as showing you the code but not actually explaining what it does. You can also sometimes find yourself just watching them because it<sq>s easier.<br><br>Written tutorials are also easier to follow, you can easily reread sections you don<sq>t understand, you can easily follow code to write, and all the good C++ books have multiple <dq>try this<dq> sections which drive you to do something on your own. Like, I currently am using Principles and Programming using C++ and there are basic programs which you are told to improve using previously learned skills. This improves your problem solving which is essential in programming.</p>", 
                "question": "Two months ago a playlist of 47 C++ tutorials was voted all the way to the top of this sub. Has anyone checked the quality and validity of the course? Has anyone gained anything from it?"
            }, 
            "id": "d09svph"
        }, 
        {
            "body": {
                "answer": "<p>Sounds awesome. Congratulations! How old are you btw?</p>", 
                "question": "Got job. Give thanks. Try to inspire."
            }, 
            "id": "d36s9yd"
        }, 
        {
            "body": {
                "answer": "<p>What did you put on your resume/portfolio to get hired? What languages/frameworks did you use?</p>", 
                "question": "Got job. Give thanks. Try to inspire."
            }, 
            "id": "d3707dl"
        }, 
        {
            "body": {
                "answer": "<p>But I don<sq>t want programming to be my life. I just want a decent job and coding is fun but not my favorite thing in the world. </p>", 
                "question": "Got job. Give thanks. Try to inspire."
            }, 
            "id": "d36yfem"
        }, 
        {
            "body": {
                "answer": "<p>Awesome to hear! \ud83c\udf7b To many more prosperous years of coding. </p>", 
                "question": "Got job. Give thanks. Try to inspire."
            }, 
            "id": "d36uoiw"
        }, 
        {
            "body": {
                "answer": "<p>Nice try reddit. You<sq>ll have to pay me if you want me to work. </p>", 
                "question": "Right now more than 10<percent> of my front page is spam. Any idea what is making this spammer so effective in bypassing the filters and how it might be stopped?"
            }, 
            "id": "czzwp4y"
        }, 
        {
            "body": {
                "answer": "<p>Maybe /u/Sporkicide might have some thoughts regarding this. As for what you can do, well, you can make automoderator delete all posts from accounts with less comment karma than 10 or something.</p>", 
                "question": "Right now more than 10<percent> of my front page is spam. Any idea what is making this spammer so effective in bypassing the filters and how it might be stopped?"
            }, 
            "id": "czzry8x"
        }, 
        {
            "body": {
                "answer": "<p>Cursory speculation<colon><br><br>It<sq>s possible those subreddits don<sq>t have automoderator turned on, and this is just a particularly hard push by a spammer to cash in on Valentine<sq>s day?<br><br>Or maybe the ending string gives the spam message a required level of unique characters + words (if underscores count as whitespace)? And thus is sneaks past automoderator.<br><br>I<sq>ll be interested as well to find out if this is a change Reddit implemented which made the spam valid, or some new approach at spam posts that somehow sneaks past.</p>", 
                "question": "Right now more than 10<percent> of my front page is spam. Any idea what is making this spammer so effective in bypassing the filters and how it might be stopped?"
            }, 
            "id": "czzrw9y"
        }, 
        {
            "body": {
                "answer": "<p>I love that the programming community is interested in this, but the guys in the hacking subreddits don<sq>t seem to care. </p>", 
                "question": "Right now more than 10<percent> of my front page is spam. Any idea what is making this spammer so effective in bypassing the filters and how it might be stopped?"
            }, 
            "id": "czzw0yw"
        }, 
        {
            "body": {
                "answer": "<p>I was looking to learn Java this summer so now I have no excuse. Thank you sir. </p>", 
                "question": "My free ebook<colon> A Primer on Java 2nd Edition"
            }, 
            "id": "chrid2y"
        }, 
        {
            "body": {
                "answer": "<p>Just last week I searched <dq>SQL<dq> through reddit to see if I could find any good resources, and the best one I found was a Primer on SQL. Thanks for these man, I<sq>m in the process of learning Java too and I<sq>m sure this one will be just as good</p>", 
                "question": "My free ebook<colon> A Primer on Java 2nd Edition"
            }, 
            "id": "chrimxh"
        }, 
        {
            "body": {
                "answer": "<p>Link<sq>s not working...</p>", 
                "question": "My free ebook<colon> A Primer on Java 2nd Edition"
            }, 
            "id": "chrvayv"
        }, 
        {
            "body": {
                "answer": "<p>Neat!</p>", 
                "question": "My free ebook<colon> A Primer on Java 2nd Edition"
            }, 
            "id": "chrflq9"
        }, 
        {
            "body": {
                "answer": "<p>Correct the Record is out of control.  </p>", 
                "question": "I recently created a quick app to try and start learning React.js. This is notreddit.top the most downvoted posts on reddit (short summary of how I created it inside)"
            }, 
            "id": "d6uq0n1"
        }, 
        {
            "body": {
                "answer": "<p>holy shit i<sq>m dying. this is hilarious<br><br>http<colon>//i.imgur.com/CZz1ldF.png</p>", 
                "question": "I recently created a quick app to try and start learning React.js. This is notreddit.top the most downvoted posts on reddit (short summary of how I created it inside)"
            }, 
            "id": "d6v3iiu"
        }, 
        {
            "body": {
                "answer": "<p>Man, I<sq>ve been looking for something like this, but just for particular subreddits.  </p>", 
                "question": "I recently created a quick app to try and start learning React.js. This is notreddit.top the most downvoted posts on reddit (short summary of how I created it inside)"
            }, 
            "id": "d6upu4n"
        }, 
        {
            "body": {
                "answer": "<p>Your post is now on the /r/the_donald</p>", 
                "question": "I recently created a quick app to try and start learning React.js. This is notreddit.top the most downvoted posts on reddit (short summary of how I created it inside)"
            }, 
            "id": "d6v2nvp"
        }, 
        {
            "body": {
                "answer": "<p>> I was wondering if is possible to learn it by myself.<br><br>Of course it is - see the [FAQ](https<colon>//www.reddit.com/r/learnprogramming/wiki/faq) for resources.</p>", 
                "question": "Learning Coding by Yourself"
            }, 
            "id": "dfcsfc0"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll just say, I attended university, and I still had to teach myself to code.  I don<sq>t know anyone who<sq>s a professional coder who didn<sq>t <dq>teach themselves.<dq><br><br>the most useful info has come from boards like /r/learnprogramming rather than my teachers</p>", 
                "question": "Learning Coding by Yourself"
            }, 
            "id": "dfd1wp4"
        }, 
        {
            "body": {
                "answer": "<p>I am self-taught. 3 years now. I am also employed. Becoming employed as a self-taught developer with no CS (computer science) background and no professional exprience was a difficult journey, but is definitely doable. Everyday is a struggle. Some days I want to bury myself under my covers, never to return to a computer. Those days are more frequent when attempting to accomplish something outside of my programming <dq>comfort zone<dq> (hint<colon> this is where the real learning occurs). <br><br>If you have a passion for creativity and problem-solving then you<sq>ll enjoy the journey. If you don<sq>t enjoy those things, you may have a difficult time. <br><br>If you decide to take this path, don<sq>t get discouraged when you fail. It will happen. All the damn time. But you will learn. You will grow. And one day when you take a step away from your computer while doing something that you think is impossible, you may find yourself looking back at all the things you<sq>ve already learned on your own. And that<sq>s a great fucking feeling to have. </p>", 
                "question": "Learning Coding by Yourself"
            }, 
            "id": "dfd8869"
        }, 
        {
            "body": {
                "answer": "<p>Step 1.  Find a project.<br><br>Identify your goal, say internet security.  Find a project on github that involves your desired tech.  Make sure it is current and not abandoned, (some commits within the last month).  The more contributers and more forks the better.  Make sure they use tests.<br><br>Step 2.  Identify the project testing setup.<br><br>Once you have a project selected, this will force your choice of language, architecture, yada yada...  Replicate their test environment on your own machine.  Once you can run their tests locally...<br><br>Step 3.  Join the team.<br><br>Get in touch with the project lead and say <sq>Hey, i like your idea and would like to help.  I<sq>ve got the tests set up, can i write some unit tests for you?<sq>  I have never seen an open source project refuse this offer.  Unit tests are the drudge work of development.  But unit tests will also show you how each piece of code works individually, allowing you too separate the parts from the whole.  No faster way to learn a specific codebase. Don<sq>t be offended if they don<sq>t use your tests.  Be a team player, and look for mentors.<br><br>If you get to step three and don<sq>t like your teammates, go back to step one and repeat.<br><br>tl;dr  You will learn faster and more as part of a team.  You will also get better networking, feedback, and motivation as part of a team.</p>", 
                "question": "Learning Coding by Yourself"
            }, 
            "id": "dfczmm9"
        }, 
        {
            "body": {
                "answer": "<p>Depends on your definition of creative. In my definition problem solving, which is most of our job, is a very creative process. If your idea of creative is <dq>creating graphical art<dq> then obviously it isn<sq>t. IMHO the definition of that person seems to be too narrow. </p>", 
                "question": "Is programming creative?"
            }, 
            "id": "df7sva8"
        }, 
        {
            "body": {
                "answer": "<p>Unless his coding ability is resumed to only using pre-made frameworks and copy pasting code solutions, it is creative. You have to be creative to find solutions to problems, especially when you<sq>re doing original work.</p>", 
                "question": "Is programming creative?"
            }, 
            "id": "df7u5r3"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s more apt to think of programming in terms of language. If you know a language, then you are able to use that language in ways that could be creative or not. With knowledge of English, you could write a novel or you could make shitty memes. With knowledge of a programming language, you could create a beautiful and interesting application or you could work a boring office job where you do exactly what you<sq>re instructed to do for 8 hours a day. The tool itself is inert.<br><br>In any case this discussion is a dead end. If programming is creative to you, or if it is important to you that programming is creative, then you should think of it that way. If you have 20+ years as a professional programmer and you think there is absolutely no creativity in programming at all, then cool man you do you. Getting into the deep semantics of what specifically defines creativity to *prove* one way or the other is IMO not a discussion that has an end in sight.</p>", 
                "question": "Is programming creative?"
            }, 
            "id": "df7vr4s"
        }, 
        {
            "body": {
                "answer": "<p>As a graphic designer, yeah, programming is creative. And at times the creative rush it gives is stronger than that of visual arts. Mainly because of the frustration/payoff rate scale.<br><br>edit<colon> Wow, commenting in the morning is something I should avoid.<br>I<sq>ve got a bachelor<sq>s of fine arts, but have wanted to work on a game dev team since i was 6. I<sq>ve only been coding consistently for 3 months, with stuff like html and css for web building already under my belt. I<sq>ve been learning c++ so I can carry that to the unreal engine. It<sq>s weird where the creativity comes from both programming and art. They both take practice to learn the rules, to break and rewrite them in new ways, but what<sq>s most interesting to me is visual art has a mass appeal, where creative code is only so if the viewer has a degree of code knowledge. The creativity of code requires you to be educated about it. I would call it a logical art, which isn<sq>t a far stretch, abstraction and encapsulation is comparable to <dq>Abstract art<dq> and <dq>minimalism<dq>. What can art teach us more about programming, and what has programming yet to teach us of art?</p>", 
                "question": "Is programming creative?"
            }, 
            "id": "df7txmf"
        }, 
        {
            "body": {
                "answer": "<p>Just in time for my exam in 4 days!</p>", 
                "question": "Android Programming Tutorials for Beginners"
            }, 
            "id": "d6o8orx"
        }, 
        {
            "body": {
                "answer": "<p>Tutorials on android layout* </p>", 
                "question": "Android Programming Tutorials for Beginners"
            }, 
            "id": "d6oiqnb"
        }, 
        {
            "body": {
                "answer": "<p>What do you think of the VS2015 w/ Xamarin vs Android Studio?</p>", 
                "question": "Android Programming Tutorials for Beginners"
            }, 
            "id": "d6otjmt"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!</p>", 
                "question": "Android Programming Tutorials for Beginners"
            }, 
            "id": "d6ov1lb"
        }, 
        {
            "body": {
                "answer": "<p>First of all, there is not much math involved in most programming tasks. Even if there were, there is no excuse in this day and age to have <dq>weak<dq> mathematics skills. Our world is built on numbers and having a stronger grasp of them will equip you to make better decisions in life.<br><br>The exercises you are doing don<sq>t really involve math. They<sq>re asking you to manipulate arrays by re-ordering them, adding values to them or removing values. The point is to get you to understand how arrays work. They are using numbers as the values stored by the arrays because it is easy to keep track of single digit numbers and it also makes sorting exercises simple as opposed to ordering alphabetically.<br><br>I think you should do exercises side-by-side with instruction so that you can have more direct learning and the lesson can explain what you just learned. For example, that you can<sq>t resize the array after you<sq>ve initialized it and that you<sq>ll need to make a new array of the correct size for the solution.<br><br>It<sq>s perfectly fine to struggle for 20 minutes or much longer. The initial learning curve is **extremely steep** and it will be a while before things are comfortable for you. That<sq>s why I strongly recommend you follow a lesson of your choice (video, online, book) that has exercises to help you learn instead of a site like the one you linked where there is no instruction.<br><br>There<sq>s a lot to take in before you will even start to feel like you know what you<sq>re doing. See if you enjoy the process of building things with code and solving puzzles. If you do enjoy it, then keep at it.</p>", 
                "question": "Not cut out for programming?"
            }, 
            "id": "ddxsojr"
        }, 
        {
            "body": {
                "answer": "<p>I saw an interview with a rapper or an actor or an author or maybe it was even a hard ass pogrammer, can<sq>t reacall, anyway, the guy said whenever someone asks if they maybe aren<sq>t cut out to make it he tells them to quit.<br><br>Yup. Quit. If you can<sq>t believe in yourself you<sq>re not going to make it through the real challenges that come once you make it. It only gets harder. If struggle is making you could sider quitting, best to quit now. If you can<sq>t handle being uncomfortable, or challenged or pissed off mad insanely confused and aren<sq>t determined to find a way through, then yeah, quit. Save yourself some time and pain. Besides there is someone else out there who won<sq>t quit who needs to make it and you can get out of his way.<br><br>I think this might have been Eminem, but not sure.<br><br>The way he just said that always stuck with me as a personal challenge, but also a nice reality check. Am I determined to make this happen, or am I dabbling to see if it<sq>s going to be an easy happy match.<br><br>Somethings are not easy and still worth doing. Not everyone had to be a <dq>natural<dq> at the things they choose to do. But maybe there is something else that you are a natural at and you should do that. But even that will likely involve struggle at some point. There are very few easy paths to greatness, or even above averageness.<br><br>But yeah, he took the route of saying go ahead and quit now. <br><br>I<sq>ll take this other route. Check your mindset.<br><br>Here<sq>s a handy dandy re-programming chart. Reprogram your mind to grow. <br><br>http<colon>//www.hrzone.com/sites/default/files/growth_mindset_poster_0.png?itok=P81uHYAk<br><br>20 minutes of struggle for something you<sq>ve never done before, has almost no real-world analog, and is very abstract is not a sign that this isn<sq>t meant for you. It<sq>s a sign that this is new to you. Keep at it. Or in the words of that guy, let<sq>s say it was Eminem, don<sq>t. Either way what you think will happen will happen. If you think you<sq>re not cut out for it, then you<sq>re not. And if you change your mindset I have no doubt that you can get through to where this isn<sq>t a struggle and some other programming concept is a struggle instead.<br><br>Eventually you<sq>ll learn to be comfortable in the struggle and that<sq>s when it becomes fun.</p>", 
                "question": "Not cut out for programming?"
            }, 
            "id": "ddxwje1"
        }, 
        {
            "body": {
                "answer": "<p>20 minutes??! Sometimes my prog hw takes me 4 hours </p>", 
                "question": "Not cut out for programming?"
            }, 
            "id": "ddxvkgq"
        }, 
        {
            "body": {
                "answer": "<p>I would like to hear answers as well.. Im quite math illiterate and am wondering how far you can go in programming with bad math skills.</p>", 
                "question": "Not cut out for programming?"
            }, 
            "id": "ddxrxbp"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, here<sq>s a direct link<colon> https<colon>//www.khanacademy.org/computing/computer-science/algorithms. Thanks for pointing it out!</p>", 
                "question": "Khan Academy Algorithms Course"
            }, 
            "id": "cm5uttr"
        }, 
        {
            "body": {
                "answer": "<p>Is there any pre knowledge/skill needed to go into this course? </p>", 
                "question": "Khan Academy Algorithms Course"
            }, 
            "id": "cm5vlgo"
        }, 
        {
            "body": {
                "answer": "<p>wow what a fucking steal, these are great times to be alive </p>", 
                "question": "Khan Academy Algorithms Course"
            }, 
            "id": "cm6eqmt"
        }, 
        {
            "body": {
                "answer": "<p>khaaaaaan!</p>", 
                "question": "Khan Academy Algorithms Course"
            }, 
            "id": "cm5z2kt"
        }, 
        {
            "body": {
                "answer": "<p>This isn<sq>t a bad idea, but it would require an awful lot of video editing or preparation, otherwise you would be watching someone delete code 80<percent> of the time <colon>)</p>", 
                "question": "I want to watch videos of people programming something from start to finish."
            }, 
            "id": "c930whi"
        }, 
        {
            "body": {
                "answer": "<p>Probably not as explanatory as you would like, but you can watch old Ludum Dare challenges. Ludum Dare is a competition to make a game from start to finish in only a few days. Notch in particular has been live streaming his attempts the past few years. <br><br>You can see Notch program a game from start to finish in Java here<colon><br><br>www.twitch.tv/notch/b/302823358<br><br>www.twitch.tv/notch/b/302867302<br><br>www.twitch.tv/notch/b/302969182<br><br><br>The next Ludum Dare challenge starts in a month if you found this interesting</p>", 
                "question": "I want to watch videos of people programming something from start to finish."
            }, 
            "id": "c93463p"
        }, 
        {
            "body": {
                "answer": "<p>thecodeplayer.com does this with HTML/JS/CSS, including some small-time game programming. For example, here<sq>s a simple snake game<colon> http<colon>//thecodeplayer.com/walkthrough/html5-game-tutorial-make-a-snake-game-using-html5-canvas-jquery<br><br>Shameless plug<colon> Videos from that site are occasionally posted to /r/LearnJavaScript (which I moderate).</p>", 
                "question": "I want to watch videos of people programming something from start to finish."
            }, 
            "id": "c933nl7"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s been done... search <dq>speed coding<dq>.<br><br>[Here](http<colon>//www.youtube.com/watch?v=y71lli8MS8s)<sq>s my favourite... but, be warned, you won<sq>t learn good C++ from it.</p>", 
                "question": "I want to watch videos of people programming something from start to finish."
            }, 
            "id": "c9316gz"
        }, 
        {
            "body": {
                "answer": "<p>check automatetheboringstuff.com out, I think you can do this with python and webdrivers </p>", 
                "question": "Resolution<colon> Learn code to automate a soul-sucking tasks at work. Where do I Start? Javascript?"
            }, 
            "id": "dbvloho"
        }, 
        {
            "body": {
                "answer": "<p>As I learned the hard way, make sure to use 0 company resources to work on this. If anyone finds out you used something of theirs, you probably can<sq>t sell it to them. Just a note.</p>", 
                "question": "Resolution<colon> Learn code to automate a soul-sucking tasks at work. Where do I Start? Javascript?"
            }, 
            "id": "dbvqr8u"
        }, 
        {
            "body": {
                "answer": "<p>AutoHotKeys or something similar would be a decent way to go about this. http<colon>//ahkscript.org/<br><br>By using an actual browser, or at least some kind of headless browser (maybe Selenium, I know there is something for Linux which works well but can<sq>t remember the name), you can sidestep a lot of potential issues with websites that require javascript or interactions other than simply sending requests to the server.</p>", 
                "question": "Resolution<colon> Learn code to automate a soul-sucking tasks at work. Where do I Start? Javascript?"
            }, 
            "id": "dbvuvss"
        }, 
        {
            "body": {
                "answer": "<p>>  I do not have direct access to the database that organizes the content we upload, though, I could get it if I asked the right questions..<br><br>You mean you could upload all the files at once and simply update fields in the database?  That sounds easiest and most direct.  You should talk to the people who already administer the database and know how to program there.</p>", 
                "question": "Resolution<colon> Learn code to automate a soul-sucking tasks at work. Where do I Start? Javascript?"
            }, 
            "id": "dbvp7yi"
        }, 
        {
            "body": {
                "answer": "<p>I would love to do this. I<sq>ve been wanting to learn python recently, but I haven<sq>t had time to really get into it. I have some programming, but it<sq>s all been hobby-level (with some vba stuff for work) and I have yet to turn a corner to really feel like I have a grasp on programming.<br><br>Unfortunately, this class is too early in the day and I can<sq>t really afford the tuition in any case. It seems like a really great way to learn if you can do it though. Best of luck to everyone.</p>", 
                "question": "We<sq>re doing our Python programming course again (7th edition). Anyone interested? Scholarships available"
            }, 
            "id": "d4mdwu6"
        }, 
        {
            "body": {
                "answer": "<p>make a course to be time zone friendly for EU people. I want to take this course but because time zone, I can<sq>t do this.</p>", 
                "question": "We<sq>re doing our Python programming course again (7th edition). Anyone interested? Scholarships available"
            }, 
            "id": "d4mhdze"
        }, 
        {
            "body": {
                "answer": "<p>Hey guys! I was in the batch that finished about 2 weeks ago, I also highly recommend it! <br><br>It helps you go from that <dq>I know basic syntax! Now what?<dq> to <dq>Hey cool I<sq>m finishing some cool projects now!<dq> stage. It is a hard class, and it does take up quite a bit of time each week, but if you have the time / can make the time and truly want to learn, go ahead and apply!</p>", 
                "question": "We<sq>re doing our Python programming course again (7th edition). Anyone interested? Scholarships available"
            }, 
            "id": "d4mmwg4"
        }, 
        {
            "body": {
                "answer": "<p>Please feel free to ask any questions about the application process, or any doubts you might have. We are happy to answer you comments here.</p>", 
                "question": "We<sq>re doing our Python programming course again (7th edition). Anyone interested? Scholarships available"
            }, 
            "id": "d4md67a"
        }, 
        {
            "body": {
                "answer": "<p>Literally every student goes through this. Compsci is a subtle dick measuring contest among your peers in terms of how much you know. The ones who choose to focus on their work instead are the ones who actually succeed in the program. Trust me, you deserve to be there. Don<sq>t let anyone let you think otherwise</p>", 
                "question": "Just finished my first year of Computer Science at Uni"
            }, 
            "id": "da9inh8"
        }, 
        {
            "body": {
                "answer": "<p>1. Stop comparing yourself to others, instead, focus on _your_ goals for what _you_ want to achieve. It won<sq>t make you a better programmer, but it will make you happier and less anxious.<br><br>2. Program more. Pick a language (something general purpose like C, C++, Java) and do some tutorials and projects. Start contributing to open source software, some projects have lists of easy fixes, or even just need better documentation. Go to the hackathons. You<sq>ll meet other people and learn from them, you can do some pair programming and there<sq>s usually pizza!</p>", 
                "question": "Just finished my first year of Computer Science at Uni"
            }, 
            "id": "da9fsk7"
        }, 
        {
            "body": {
                "answer": "<p>I was a TA in CS for the 100-level classes, and have been a hiring manager for fresh-out-of-college folks in the past.<br><br>Here<sq>s the thing - every developer feels like they suck at some point. Google <dq>Imposter Syndrome<dq>. It<sq>s very heavily prominent in fields that don<sq>t produce individual recognizable work. CS is ripe with it.<br><br>The other thing I learned is there are lots of kids in college who think they know shit, and tell their friends they know shit, and use terms that you might not know. The secret is, 9/10 times, neither do they. They<sq>re often wrong, but there<sq>s no one around to correct them. Anyone can <dq>contribute to projects on github<dq> and you can even have your own github! <br><br>If you want to be a hackathon guy, go to a hackathon. If you want to contribute to github, start reading repos on github and trying to figure out how things work, then start contributing when you understand it.<br><br>The best advice though is just don<sq>t worry what other people are doing and worry about yourself.<br><br>Personal anecdote time<colon> I felt the same way in college. People were talking about making 6 figure jobs right out of college, and how they were making apps to manage their own investments and were going to be rich. Nope. None of that was true (they thought it was true, though). People lie about salaries a lot. People in college expect all dev jobs to be 6 figures+ (they<sq>re not). Everyone thinks they<sq>re above average (statistically impossible). <br><br>Most of those guys are still in their jobs out of college 10 years earlier, still bitching about the same things, stuck in a company because it<sq>s <dq>safe<dq>. Hey, that<sq>s great for them, but none of them are the millionaire entrepreneur superstar devs they pretended to be in college. Real world hit them hard.</p>", 
                "question": "Just finished my first year of Computer Science at Uni"
            }, 
            "id": "da9li5b"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Just finished my first year of Computer Science at Uni"
            }, 
            "id": "da9f24j"
        }, 
        {
            "body": {
                "answer": "<p>Loved this.<br>As someone who is starting out learning c# after watching various tutorials and building copies of what I was watching I decided to build a small application from and ideas page I found, the idea was as simple as I could find just reverse the characters of a string that was input by the user.<br>I was full of confidence as these were things that I had covered in tutorials but not at the same time or In the same application,<br>Away I went and opened my IDE and bam it hit me I have no clue where to start and so I started with the can I even do this? questions and am I even good enough to try? So away I went sifting through my past applications trying to see where to start and suddenly it clicked and with 15 minuets of staring at blank nothingness I had a functional console application that did what I wanted.<br>The feeling I had when I ran it and it worked perfectly was amazing yes it<sq>s a super simple thing to make but I have no background at all in CS I<sq>m just an electrician thinking about a career change and this was defiantly the kick i needed to keep going and to prove to myself I can do this! </p>", 
                "question": "Wrote a blog post for all those wondering if they have what it takes to be a programmer"
            }, 
            "id": "d1iztwj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve seen enough on this topic that I kind of want to chime in.<br><br>**TL;DR - You can do it, it<sq>s in you I promise**<br><br>So I first got started in programming my senior year of HS. I was in an advanced learning track in high school that included a separate class for kids labeled as <dq>Gifted and Talented.<dq> One of the main things that made this class different was you had to do a 7 month Independent Study Project (ISP). I decided to do programming. Now I didn<sq>t do it steadily for 7 months, and I spent a lot of time researching and deciding on languages. Since I had to write a large essay to go along with whatever my final product would be I also spent a lot of time researching the niches of these languages, history of programming, etc. Basically my point is I didn<sq>t make it as far as many people could with steady dedication across 7 months. But, eventually I got started with Python going completely self taught from a book and some online resources. I had a good friend who was set to go to Stanford for CS who I would direct my questions at, and I frequently got frustrated things didn<sq>t click with me like they did with him. I loved what I learned though and at the end of my project I decided I liked programming. I turned in my 15 page essay, as well as programs that increased in difficulty to show my progress (started with asking for their name and saying hello, moved on to number guess game, then on to hangman, then on to tic tac toe, and finally a simple web scrapper to return prices).<br><br>Then I left for college and stopped dabbling as often as I did when working on my ISP. I kept coming back and trying different aspects of programming and just kept feeling like it wasn<sq>t clicking and I couldn<sq>t move forward, then drifting away from it all together. Finally, senior year of college I didn<sq>t have much going on and ended up coming back to try to get better at Python again. I made myself dedicate time and when I got stuck I would google or change resources. I worked across a lot of different resources. The biggest change I made was transitioning into actively learning instead of just ingesting a lesson. I realized if it was something I really wanted it was gonna take something out of me.<br><br>Now I work at it a lot. At least an hour a day almost every day a week. I look forward to weekends because I can work at it a lot longer than that. My biggest lesson is that, much like anything else, programming is so much of willpower, fortitude, and determination much more than it is raw talent or how quickly things quick. If I would have had the patience to learn this lesson sooner I could be much farther than what I am now. It<sq>s kind of like jogging outside, where you see a tree in the distance and at the beginning it feels like you<sq>re moving toward it quickly but the closer you get the longer it feels like it<sq>s taking to get there. I kept looking at my friend or other decent projects and thinking that despite my progress I was so far from these. But I should have realized it was obviously going to take time and work to get to that point.<br><br>Maybe this isn<sq>t as applicable as I think, but I hope this helps anyone else that might be struggling in their own mind.</p>", 
                "question": "Wrote a blog post for all those wondering if they have what it takes to be a programmer"
            }, 
            "id": "d1j54lg"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve said it before, but I think one of the problems with programming is the lack of good tools that help avoid errors, and that<sq>s because it<sq>s really difficult to build such tools.<br><br>One of the advances of many search engines is to guess what you<sq>re going to type.  This helps avoid typos, as well as help you remember what you meant to type.  This feature (predictive lookahead) is a fairly complex feature to implement (I imagine).<br><br>Most programming tools are much, much dumber.  They can<sq>t tell if you mistyped the name of a configuration file, if you<sq>ve placed it in the wrong directory, if it<sq>s missing altogether.<br><br>While a good IDE will help spot typos, missed variable declaration, there really isn<sq>t something that<sq>s quite as good for config files.  Say, you wanted to edit a POM file (which is a Maven/Java configuration file), and it includes two incompatible libraries (the versions are incorrect relative to each other).  Most likely, it just kinda breaks.  It doesn<sq>t say <dq>You should declare this one dependency and delete the other one, and the repository will handle the rest<dq> or anything useful.<br><br>To me, it<sq>s all this configuration cruft with lack of error messages that create the most problems.  Most programming languages and their IDEs are pretty good, but it<sq>s nearly impossible to stick purely within a language and avoid some configuration.<br><br>Another issue I find is the desire by many to alter how a language behaves.  In some cases, say, jQuery, it seems successful.  In others (Java annotations), I<sq>d say not.  It prefers weird annotations to writing code, which do mysterious things that aren<sq>t that clear, esp. when things stop working.<br><br>Anyhoo, it<sq>s these things that generally irritate me about programming.</p>", 
                "question": "Wrote a blog post for all those wondering if they have what it takes to be a programmer"
            }, 
            "id": "d1j0d8n"
        }, 
        {
            "body": {
                "answer": "<p>I nominate this as the new FAQ answer.</p>", 
                "question": "Wrote a blog post for all those wondering if they have what it takes to be a programmer"
            }, 
            "id": "d1j9fgn"
        }, 
        {
            "body": {
                "answer": "<p>I played Colobot a lot when I was a kid<colon> http<colon>//colobot.info/  <br>It became open source as well recently.</p>", 
                "question": "Games to learn C++ / C#"
            }, 
            "id": "cr1b6ji"
        }, 
        {
            "body": {
                "answer": "<p>www.codehunt.com might be along the lines of what you<sq>re looking for. Maybe. </p>", 
                "question": "Games to learn C++ / C#"
            }, 
            "id": "cr1h2yu"
        }, 
        {
            "body": {
                "answer": "<p>You mean like actual games that teaches you programming?</p>", 
                "question": "Games to learn C++ / C#"
            }, 
            "id": "cr16zbm"
        }, 
        {
            "body": {
                "answer": "<p>In Space Engineers there are programmable blocks with awesome possibilities.<br><br>http<colon>//blog.marekrosa.org/2014/06/programming-in-space-engineers_4.html</p>", 
                "question": "Games to learn C++ / C#"
            }, 
            "id": "cr1cupf"
        }, 
        {
            "body": {
                "answer": "<p>I got into professional development through the LaunchCode program. They<sq>re a real life-changer. I<sq>m doing something I really enjoy now, and my salary has more than doubled in the past two years because of the opportunity I got through them.<br><br>I cannot recommend them enough.</p>", 
                "question": "I just had an interview with LaunchCode. They help self-taught developers find apprenticeships. Here<sq>s a rundown of the process."
            }, 
            "id": "ctp5qio"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting this, I<sq>ve been thinking about applying once I feel like I<sq>m ready.</p>", 
                "question": "I just had an interview with LaunchCode. They help self-taught developers find apprenticeships. Here<sq>s a rundown of the process."
            }, 
            "id": "ctow9rb"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I just had an interview with LaunchCode. They help self-taught developers find apprenticeships. Here<sq>s a rundown of the process."
            }, 
            "id": "ctp2isa"
        }, 
        {
            "body": {
                "answer": "<p>I appreciate the post.<br><br>I<sq>ve been really struggling with my perception of <dq>programmer worth<dq> vs <dq>knowledge worth<dq> vs <dq>age worth<dq> (just turned 50) in myself while trying to build my knowledge in js dev.<br><br>I<sq>m glad yours was a positive experience.</p>", 
                "question": "I just had an interview with LaunchCode. They help self-taught developers find apprenticeships. Here<sq>s a rundown of the process."
            }, 
            "id": "ctp20w9"
        }, 
        {
            "body": {
                "answer": "<p>Do you mind recording for those that can<sq>t tune in?</p>", 
                "question": "You convinced me! I<sq>m starting a livestreamed C++ course. The first session is today at 22<colon>00 UTC"
            }, 
            "id": "cqp8txb"
        }, 
        {
            "body": {
                "answer": "<p>This thread has been linked to from another place on reddit.<br><br>- [/r/watchpeoplecode] [I<sq>m starting a livestreamed C++ course(less focus on live coding, more focus on explaining the languge)](//np.reddit.com/r/WatchPeopleCode/comments/33xbfw/im_starting_a_livestreamed_c_courseless_focus_on/)<br><br>[](#footer)*^(If you follow any of the above links, respect the rules of reddit and don<sq>t vote.) ^\\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\\/r\\/TotesMessenger))*<br><br>[](#bot)</p>", 
                "question": "You convinced me! I<sq>m starting a livestreamed C++ course. The first session is today at 22<colon>00 UTC"
            }, 
            "id": "cqp7tyt"
        }, 
        {
            "body": {
                "answer": "<p>The session was good. I know you said you don<sq>t know C++11 well and wanted to focus on C++98, but two things from C++11 that would be very quick to learn and that you should consider including in your sessions are type inference (`auto`) and range-based `for` loops. With those<colon><br><br>    for (std<colon><colon>list<int><colon><colon>iterator it = l.begin(); it != l.end(); ++it) { ... }<br><br>becomes<colon><br><br>    for (auto i <colon> l) { ... }<br><br>You can use range-based `for` with any standard container, C-style arrays, and any custom container that supports non-member `std<colon><colon>begin()` and `std<colon><colon>end()`.</p>", 
                "question": "You convinced me! I<sq>m starting a livestreamed C++ course. The first session is today at 22<colon>00 UTC"
            }, 
            "id": "cqpt4ho"
        }, 
        {
            "body": {
                "answer": "<p>Great! I<sq>m definitely interested. I<sq>m taking a C++ course so any additional information I can learn will definitely help. </p>", 
                "question": "You convinced me! I<sq>m starting a livestreamed C++ course. The first session is today at 22<colon>00 UTC"
            }, 
            "id": "cqp863l"
        }, 
        {
            "body": {
                "answer": "<p>While I do agree that people should learn those things, in the end, I feel like this is an <dq>all or nothing<dq> view which can be hurtful to those who don<sq>t know better.  I can describe the processes, shape, function, and show you all the UML diagrams you want, but in the end, if you do not know how to code you will not be able to use that knowledge for any real purpose besides design.  In the painting analogy, there is obviously more to painting than the paint.  But if you do not have the ability to use a brush and make a painting, you are not a painter.  Just as if you cannot code, you are not a programmer, you are a designer.</p>", 
                "question": "Realize that programming isn<sq>t about the code."
            }, 
            "id": "cdwysci"
        }, 
        {
            "body": {
                "answer": "<p>> Saying programming is about the code is like saying painting is about the paint.<br><br>This is a good analogy, thanks.</p>", 
                "question": "Realize that programming isn<sq>t about the code."
            }, 
            "id": "cdwwcfj"
        }, 
        {
            "body": {
                "answer": "<p><dq>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.<dq> -- Martin Fowler.</p>", 
                "question": "Realize that programming isn<sq>t about the code."
            }, 
            "id": "cdx52as"
        }, 
        {
            "body": {
                "answer": "<p>> Saying programming is about the code is like saying painting is about the paint.<br><br>Isn<sq>t it though? <br><br>[It<sq>s all about the paint](http<colon>//www.consumersearch.com/interior-paint/types-of-interior-paint)<br><br><br>Personally, I think a better analogy would be to say that, programming ins<sq>t about code. Its about problem solving.</p>", 
                "question": "Realize that programming isn<sq>t about the code."
            }, 
            "id": "cdwy1bv"
        }, 
        {
            "body": {
                "answer": "<p>Dude we just hired a 42 year old trucker for his first development job.<br><br>If you have enthusiasm to learn you always have a chance.</p>", 
                "question": "I<sq>m 36 and learning web development. At my age what are my chances of finding work in this field?"
            }, 
            "id": "d4vl0g5"
        }, 
        {
            "body": {
                "answer": "<p>there are so many programmers needed in the field that it<sq>s hard to imagine where someone would be picky and say <sq>hmm u are 36 i wont hire u<sq> <br><br>you will be able to get a job as soon as you are able to provide something to the employer. <br>Do what you love and look for job ads, apply and keep going.<br><br></p>", 
                "question": "I<sq>m 36 and learning web development. At my age what are my chances of finding work in this field?"
            }, 
            "id": "d4v9e4w"
        }, 
        {
            "body": {
                "answer": "<p>There are [plenty of people](https<colon>//www.reddit.com/r/learnprogramming/search?q=too+old&restrict_sr=on&sort=relevance&t=all) who think that they<sq>re too old (even if they<sq>re only in their late 20s!) but the fact is that it doesn<sq>t really matter. Take a look at [this graph](http<colon>//stackoverflow.com/research/developer-survey-2016#developer-profile-age) from StackOverflow - you can see that there are quite a few developers aged over 30 (about 40<percent>). If you open up some of the other threads that I linked, and you<sq>ll find that age *really* doesn<sq>t matter at all, as long as you<sq>re a decent programmer.</p>", 
                "question": "I<sq>m 36 and learning web development. At my age what are my chances of finding work in this field?"
            }, 
            "id": "d4va9js"
        }, 
        {
            "body": {
                "answer": "<p>I didn<sq>t get my software engineer job until I was 36. I majored in English and I worked as a tech writer.</p>", 
                "question": "I<sq>m 36 and learning web development. At my age what are my chances of finding work in this field?"
            }, 
            "id": "d4vd01l"
        }, 
        {
            "body": {
                "answer": "<p>no signups or email subscription spam or review scams????!!<br><br>nice. I shall try this.</p>", 
                "question": "[Video] I made a FREE iOS Programming course. [Swift 2 Xcode 7 iOS9]"
            }, 
            "id": "d3l4nbq"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!<br></p>", 
                "question": "[Video] I made a FREE iOS Programming course. [Swift 2 Xcode 7 iOS9]"
            }, 
            "id": "d3kon1u"
        }, 
        {
            "body": {
                "answer": "<p>Will there be topics on MVC?</p>", 
                "question": "[Video] I made a FREE iOS Programming course. [Swift 2 Xcode 7 iOS9]"
            }, 
            "id": "d3l10k9"
        }, 
        {
            "body": {
                "answer": "<p>This is pretty awesome. Thank you.</p>", 
                "question": "[Video] I made a FREE iOS Programming course. [Swift 2 Xcode 7 iOS9]"
            }, 
            "id": "d3kntih"
        }, 
        {
            "body": {
                "answer": "<p>Unlike something like iOS, which is VERY specific in the hardware it runs on, Android can be used on a lot of different hardware, with a lot of different OS changes. If C/C++ was used as the core programming language, the coders would have to worry about a lot more things that interact with the OS/Hardware. With Java, they just have to worry about the language itself and the Java VM worries about how to handle the underlying.<br><br>Also, Java is a lot easier to learn and is taught at a lot lower level of Computer Science than C/C++, and a lot of people already knew it.<br><br>.. or, as far as I know <colon>P</p>", 
                "question": "Any particular reason why java is used for Android programming? If android is built on the top of Linux kernel why not use C/C++?"
            }, 
            "id": "cyrqpdl"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//stackoverflow.com/questions/3560963/why-does-android-use-java<br><br>Top answer<colon><br><br>> Some points<colon><br>> <br>> Java is a known language, developers know it and don<sq>t have to learn it<br>> <br>> it<sq>s harder to shoot yourself with Java than with C/C++ code since it has no pointer arithmetic<br>> <br>> it runs in a VM, so no need to recompile it for every phone out there and easy to secure<br>> <br>> large number of development tools for Java (see point 1)<br>> <br>> several mobile phones already used Java ME, so Java was known in the industry<br>> <br>> the speed difference is not an issue for most applications; if it was you should code in low-level language<br></p>", 
                "question": "Any particular reason why java is used for Android programming? If android is built on the top of Linux kernel why not use C/C++?"
            }, 
            "id": "cyrqpub"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say, the <dq>you don<sq>t need different binaries for different hardware<dq> (aka build once, debug everywhere) was probably appealing to google.</p>", 
                "question": "Any particular reason why java is used for Android programming? If android is built on the top of Linux kernel why not use C/C++?"
            }, 
            "id": "cyrrcjh"
        }, 
        {
            "body": {
                "answer": "<p>First of all, the language the kernel happens to be implemented with has nothing whatsoever to do with the languages available for writing userspace code.  The kernel and userspace are separated by a firm partition, and userspace does not link against any kernel code.  In other words, the syscall interface is completely language-agnostic.  Take a look at a typical GNU/Linux system and you<sq>ll see applications written in every language under the sun.<br><br>Google chose Java because it<sq>s the most popular language on the planet, so there are tons of existing libraries, tools, IDEs, books, tutorials, conferences, consultants, and so on.  Millions of people already know Java.  It<sq>s also a much safer language than C or C++\u200a\u2014\u200ano undefined behavior launching nasal demons\u200a\u2014\u200aand far more accessible to learn.</p>", 
                "question": "Any particular reason why java is used for Android programming? If android is built on the top of Linux kernel why not use C/C++?"
            }, 
            "id": "cyrqqgl"
        }, 
        {
            "body": {
                "answer": "<p>i was working in mcdonalds and just decided to become a freelancer. i hustled as much as i could. (attended events, handed out biz cards, blogged, ran events, ran adwords for my area)<br><br>Eventually landed freelance work and one bit of work turned into the company i am working for now. <br><br>I<sq>m a lead/senior dev now having never had an interview and the market is so competitive for talent i could walk into another role.<br><br>i have always coded. I asked my parents for vb6  for christmas when i was younger.. Write code every day and talk to other developers. thats only way you can improve</p>", 
                "question": "Self-learner programmers how did you got your first job?"
            }, 
            "id": "cl29jip"
        }, 
        {
            "body": {
                "answer": "<p>As someone who qualifies here, I<sq>ll answer to the best of my ability.  A lot of it is what you<sq>ll hear normally - keep hustling, hustling, hustling.  I shilled everywhere I could until I lined up an interview.<br><br>During the interview, I think I more or less did one thing that got me the job (and essentially changed my life.)  Because we<sq>re self-taught coders looking to break into their first job, any dialogue about <sq>instruction<sq> or <sq>experience<sq> is gonna be a loser.  Instead, I was able to re-orient the interview along one central theme<colon> what are you guys looking to do, and how can I prove to you I can do it?<br><br>That was the winner track for me.  They ended up giving me three weeks to create a demo consistent with what I<sq>d be doing with the company.  I had no idea how to do it when I started, but with three weeks and the excellent motivation of <sq>do this and you<sq>re in<sq>, I was able to figure out, and I<sq>m now almost two years in.<br><br>Good luck!</p>", 
                "question": "Self-learner programmers how did you got your first job?"
            }, 
            "id": "cl2ceof"
        }, 
        {
            "body": {
                "answer": "<p>I knew nothing of programming before January this year. I first started with C. I took notes and created my own project of a tic-tac-toe program with 3 different difficulty levels of AI. I moved onto Java to learn Android development and learned with Head First Java. Once again I took notes and completed exercises. After I had Java basics under my belt, I went to learn the Android SDK to create apps. I fell off the wagon here and lost touch with what I wanted.<br><br>I got a call from the Student Activities office at my Community College. The woman speaking to me knew of somebody that needed some programmers. I said I was interested, met up with the guy, and he told me I should learn Drupal (an open source CMS similar to WordPress). Being an easy opportunity I started learning. Along the way I learned HTML, CSS, JQuery and PHP.<br><br>At this point, there were no projects for me to work on and I was broke. My source of income fell off the face of the Earth and I had no food or gas for weeks. The one who asked me to learn Drupal knew of this web development company that needed an intern and referred me. I went through 2 interviews and now I am a Web Developer with this company and am flying to my first conference in San Francisco in November.<br><br>Times will be tough, but hang in there man! If I can get a job as a developer after 7 months learning from 0 experience then anyone can.<br><br>**TLDR; Learned programming in January. 7 months later and am a Web Developer with a company. NETWORK!!**</p>", 
                "question": "Self-learner programmers how did you got your first job?"
            }, 
            "id": "cl2eqpc"
        }, 
        {
            "body": {
                "answer": "<p>My original position with the company was in the archival department burning CD<sq>s all day. I learned perl on my own and automated the system so I was able to do 10 times the amount of work with 1/4 the effort.</p>", 
                "question": "Self-learner programmers how did you got your first job?"
            }, 
            "id": "cl2aiyo"
        }, 
        {
            "body": {
                "answer": "<p>FCC?</p>", 
                "question": "Just accepted a job offer!"
            }, 
            "id": "denl0wp"
        }, 
        {
            "body": {
                "answer": "<p>Crazy I<sq>m reading this as I am currently thinking about getting into coding and I live in SF too. This post was very inspirational. Do you mind if I asked what bootcamp you got kicked out of ?</p>", 
                "question": "Just accepted a job offer!"
            }, 
            "id": "denmn1g"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations on your job! It is inspiring to hear this story because despite San Francisco having tons of developer jobs opportunities, it is also one of the most competitive cities. There are so many coding boot camp graduates with very strong portfolio to showcase. Especially the students from Hack Reactor and App Academy. I sometimes feel like it is daunting to try to compete with those student as a self taught programmer. Because their full stack projects look more complicated than the ones in FreeCodeCamp. Not to mention, people from very prestigious schools like MIT, UC Berkeley, Harvard with CS degrees all want to work in SF because it is one of the highest paying city for developers. <br><br>I want to ask, did you think the projects in FreeCodeCamp is enough to get a job? Or did you have to do projects outside of FreeCodeCamp? Also, did you feel the projects in FreeCodeCamp is strong enough to compete with some of the full stack applications from Hack Reactor or App Academy students? Lastly, do you know any other good resource besides FreeCodeCamp? Did you find any courses in Udemy or Udacity very helpful? I ask this because FreeCodeCamp will usually give you a project but expects you to research and learn those technologies necessary to build the projects in your own.<br><br>I am a self taught developer for 1 year and 3 month living in Bay Area. I was able to pass some coding interview questions. But most of the time, I get an email saying there are better candidates with a stronger background and experience than me. At first I thought it was crazy that companies would just deny me after I pass their interview but after seeing some people<sq>s projects from boot camp I understand that my projects were not at their level. I realize how high the competition is in San Francisco.<br><br>It is inspiring to see someone who is self taught and did not attend a boot camp and was able to land a job in San Francisco using some of the free resources I love and appreciate such as FreeCodeCamp <colon>). I cannot spend $20,000 on a boot camp especially after all the loans I need to pay off from my university. I really hope I can get a developer job as I keep on studying. I will try to network instead of just applying to job sites. </p>", 
                "question": "Just accepted a job offer!"
            }, 
            "id": "denr3ck"
        }, 
        {
            "body": {
                "answer": "<p>What<sq>s your opinion of using recruiters?</p>", 
                "question": "Just accepted a job offer!"
            }, 
            "id": "denlown"
        }, 
        {
            "body": {
                "answer": "<p>Check out [the github student pack](https<colon>//education.github.com/pack).<br>You can also get [jetbrains IDEs](https<colon>//www.jetbrains.com/student/) for free.</p>", 
                "question": "Any good free stuff I can get with a .edu email address?"
            }, 
            "id": "dds1awn"
        }, 
        {
            "body": {
                "answer": "<p>Spotify student discount</p>", 
                "question": "Any good free stuff I can get with a .edu email address?"
            }, 
            "id": "ddsj9m8"
        }, 
        {
            "body": {
                "answer": "<p>Find out what your university offers as well, like if they<sq>re an MSDNAA partner. I received valid keys for 5 or 6 versions of Windows over the years I was in school, along with keys for things like VS.</p>", 
                "question": "Any good free stuff I can get with a .edu email address?"
            }, 
            "id": "dds6rk4"
        }, 
        {
            "body": {
                "answer": "<p>/r/studentresources (shameless self plug here).</p>", 
                "question": "Any good free stuff I can get with a .edu email address?"
            }, 
            "id": "dds6ayr"
        }, 
        {
            "body": {
                "answer": "<p>Codecademy tends to be good to help you practice some basics, but it is known for not being able to deliver lasting a lasting learning experience.<br><br>Don<sq>t worry if you end up moving to another solution. You did not invest time into *codecademy*, specifically, but instead, into *yourself*. What you<sq>ve learned you can apply to other solutions. You<sq>d not be starting back at step 1, you<sq>d be just stymied a little bit-- which is okay. Learning is a process.<br><br>If you tell us what you<sq>re using codecademy to learn, then I<sq>m sure we<sq>d be happy to point you to pretty decent resources for learning.</p>", 
                "question": "Anyone else find codecademy extremely inconsistent and buggy?"
            }, 
            "id": "d8q4v4v"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Anyone else find codecademy extremely inconsistent and buggy?"
            }, 
            "id": "d8qauwg"
        }, 
        {
            "body": {
                "answer": "<p>You should move to Free Code Camp. At first they used code academy for JavaScript basics, but they have since developed their own lessons.<br><br>The community for FCC is so large and active, you<sq>ll also find help if you run into bugs</p>", 
                "question": "Anyone else find codecademy extremely inconsistent and buggy?"
            }, 
            "id": "d8qgfx9"
        }, 
        {
            "body": {
                "answer": "<p>Yes. It<sq>s also useless because you <dq>finish<dq> at a point where you don<sq>t know how to do anything.<br><br>Try Free Code Camp instead, I highly recommend it for beginners to get started in.</p>", 
                "question": "Anyone else find codecademy extremely inconsistent and buggy?"
            }, 
            "id": "d8qgil2"
        }, 
        {
            "body": {
                "answer": "<p>Nice list, it<sq>s always nice to be able to relax with a game but not have it feel like a mindless venture. Thanks for putting this together. <colon>)</p>", 
                "question": "A GitHub repo listing programming/logic games I<sq>ve seen most recommended in the past year"
            }, 
            "id": "d6sl5ws"
        }, 
        {
            "body": {
                "answer": "<p>Oh boy, TIS-100 and Hacknet are brilliant! Love those games.<br><br>Amazing list OP <colon>)</p>", 
                "question": "A GitHub repo listing programming/logic games I<sq>ve seen most recommended in the past year"
            }, 
            "id": "d6slyls"
        }, 
        {
            "body": {
                "answer": "<p>Human resource machine is on iOS btw!</p>", 
                "question": "A GitHub repo listing programming/logic games I<sq>ve seen most recommended in the past year"
            }, 
            "id": "d6sqlw3"
        }, 
        {
            "body": {
                "answer": "<p>Some suggestions<colon><br><br>[Manufactoid](http<colon>//thesiteformerlyknownas.zachtronicsindustries.com/manufactoid/) - An early Zachtronics games that<sq>s sort of a proto-Infinifactory, only it<sq>s 2D, ends the simulation if an object falls off the conveyors or hits another object, and lets you script it using Lua.  For PC.<br><br>[Tile Factory](http<colon>//www.kongregate.com/games/duerig/tile-factory) - A Flash game similar to Manufactoid, only with in-game logic nodes replacing the Lua scripting.<br><br>[The Codex of Alchemical Engineering](http<colon>//www.kongregate.com/games/krispykrem/the-codex-of-alchemical-engineering) - A Zachtronics Flash game that uses very simple state machine instructions to drive mechanical arms that perform alchemy.  Sort of a proto-SpaceChem.<br><br>[The Codex of Alchemical Engineering - Magnum Opus Challenge](http<colon>//www.kongregate.com/games/krispykrem/the-codex-of-alchemical-engineering-magnum-opus-challenge) - Additional levels for the previous game.</p>", 
                "question": "A GitHub repo listing programming/logic games I<sq>ve seen most recommended in the past year"
            }, 
            "id": "d6srwc4"
        }, 
        {
            "body": {
                "answer": "<p>Have you heard of scrapy? If yes, what made you choose the requests+beautiful soup route instead? <br><br>I<sq>ve never written a Web scraper so this is just out of interest. Good job with the crawler!</p>", 
                "question": "[Python]Want to learn to build a web crawler that does something cool? I built one that takes movie titles from amazon.com and gets the Rotten Tomatoes rating for them(details in post)."
            }, 
            "id": "d15zdr2"
        }, 
        {
            "body": {
                "answer": "<p>`while page <= 1<colon>` seems pointless, why is it there?</p>", 
                "question": "[Python]Want to learn to build a web crawler that does something cool? I built one that takes movie titles from amazon.com and gets the Rotten Tomatoes rating for them(details in post)."
            }, 
            "id": "d166t1a"
        }, 
        {
            "body": {
                "answer": "<p>This sounds interesting!</p>", 
                "question": "[Python]Want to learn to build a web crawler that does something cool? I built one that takes movie titles from amazon.com and gets the Rotten Tomatoes rating for them(details in post)."
            }, 
            "id": "d16bdxr"
        }, 
        {
            "body": {
                "answer": "<p>IMDB has a API for movies. You can get a lot of stuff from it.</p>", 
                "question": "[Python]Want to learn to build a web crawler that does something cool? I built one that takes movie titles from amazon.com and gets the Rotten Tomatoes rating for them(details in post)."
            }, 
            "id": "d16d4gb"
        }, 
        {
            "body": {
                "answer": "<p>A dog, a spider, and a human can all walk at a rate of speed.  Everyone knows this.  But, when talking about the specifics of *how* they walk, each implementation is different.  A spider has 8 legs and will <sq>scurry<sq> around very quickly ( relative ).  A dog has 4 legs and will leap and jump and run around.  A human has 2 legs and will place one in front of the other, enabling them to walk.<br><br>Well, if you were in control of a group of misfits, namely a group of spiders, dogs and humans, and you were their leader, you expect them to be competent and think for themselves.  So, when you command them to, <dq>Walk<dq> you don<sq>t want to look at spiders and yell, <dq>Alright, scurry and move all 8 legs!<dq> and then look at dogs and yell, <dq>Alright, leap using your 4 legs!<dq> and then finally look at the human and yell, <dq>Alright, and you use 2 legs, go!<dq><br><br>You simply want to look at your group of misfits, no matter what they might be, and say, <dq>Walk.<dq>  They know how to handle themselves from there.<br><br>Implementing Polymorphism is a lot like this, in my opinion.  Your main driver program, or whatever happens to be using a variety of objects at the moment, does not want to do the guess work of figuring out what object it is dealing with and their specific implementation of something as basic as walking.  <br><br>So, we use things like inheritance which guarantees things that have something similar / in common will have similar properties.  Dogs, humans, and spiders will all have walk methods.  So, no matter what object we are currently working with, we do not care.  We tell that object to walk, and it will handle the <sq>How<sq> based on its implementation.<br><br>That is basically polymorphism for me.  <br><br>Disclaimer<colon>  I<sq>m a first year student so that<sq>s just my interpretation, if this makes no sense, I<sq>m sorry.  I<sq>m learning too.</p>", 
                "question": "[OOP]Explain Polymorphism like you were explaining it to your grandmother."
            }, 
            "id": "cqq83j4"
        }, 
        {
            "body": {
                "answer": "<p>Fruits come in many different shapes, colour and sizes. But when I tell you to peel a fruit, you should be able to do it regardless of which fruit you pick up.</p>", 
                "question": "[OOP]Explain Polymorphism like you were explaining it to your grandmother."
            }, 
            "id": "cqq9l11"
        }, 
        {
            "body": {
                "answer": "<p>My first thought<colon> Dang, after having so many things explained to her, mom is to good of a programmer. we now need to explain things to grandma.</p>", 
                "question": "[OOP]Explain Polymorphism like you were explaining it to your grandmother."
            }, 
            "id": "cqqbpq7"
        }, 
        {
            "body": {
                "answer": "<p>Grandma, it is like giving different weapons to different people and ordering them to kill using the said weapon. Kill(axe), Kill(gun), Kill(knife)</p>", 
                "question": "[OOP]Explain Polymorphism like you were explaining it to your grandmother."
            }, 
            "id": "cqqclar"
        }, 
        {
            "body": {
                "answer": "<p>Also nope. After 15 years on development and personally managing teams that have built successful products I still look things up. The trick is to keep a personal repository of code to look through, if its not there google and add periodically I<sq>ll google to see if there is a better way then amend my samples . There is no way to remember every single function call or class name for a framework. Anyone that says they have memorized 100<percent> of a language<sq>s frameworks or libraries is lying.</p>", 
                "question": "Do you ever truly grow out of the <dq>Google your problems and find your answers<dq> phase?"
            }, 
            "id": "cg7exvo"
        }, 
        {
            "body": {
                "answer": "<p>**tl;dr**/Short answer<colon> No. I<sq>ve only got a couple years of professional employment under my belt but my colleagues have 15+. We all still Google fairly frequently. Things are always changing and Googling is the best way to stay up to date.<br><br>Longer answer<colon> Now in terms of just writing you<sq>re own program or playing with code, you<sq>ll go through various stages.<br><br>Newbie<colon> Constant Googling, <dq>how to<dq>s on common things (basic data types, string manipulation, arrays, etc), common errors, common examples.<br><br>Amateur<colon> Advanced features of Language/Platform, strange errors that aren<sq>t easy to debug yourself. Still Googling for common solutions to various tasks.<br><br>Comfortable<colon> You Google examples but are able to follow them through, you understand them and feel less guilty about using it in your own code. It<sq>s no longer  a scary black box of code magic, so you use them to save yourself some stress. You start to learn more advanced things at this stage, from the wizards of the internet.<br><br>Ego mode<colon> Rarely Googles, you can figure out how to do most things yourself, your programs become more about data structures and design than they do technicalities, this way, Google doesn<sq>t really have your answers as much as it does suggestions. I call it ego mode because you<sq>ll come across a Stack Overflow answer and think, <dq>HAH, I can do better than that<dq> as your confidence is riding high, then write your own. Sometimes your results are great, sometimes you have to swallow your pride and actually listen to that Stack Overflow answer you found.<br><br>Wise Mode<colon> Barely Googling at all now, as you<sq>re most likely years deep in your own Project, Google<sq>s not gonna have a single answer as your code base is too huge/unique. However when it comes to adding new features you<sq>re able to spot good sections/answers online to <sq>borrow<sq> code to save time. Packages and external modules are welcomed and the most you<sq>ll write for them is a wrapper to interface with your software. I call this wise mode, as you accept that an external package will probably be better than anything you can write in your given time frame, it saves time, effort and potentially budget.<br><br><br>At any stage, a higher level can drop to any level below them, based on the territory they are entering. New language will always put most people back to Newbie. Changing technologies, e.g. you<sq>re a wizard at game development in C# but as a result you never used it to interface with Databases, so you<sq>ll probably drop to Comfortable. <br><br>I think everyone Googles the basics every now and then though, especially if you use PHP and none of the built in functions name are consistent.</p>", 
                "question": "Do you ever truly grow out of the <dq>Google your problems and find your answers<dq> phase?"
            }, 
            "id": "cg7hopl"
        }, 
        {
            "body": {
                "answer": "<p>Nope.   I<sq>ve been at this for a long time and there<sq>s still things I never remember how to do.   <br><br>I find Java particularly annoying for this.   TextInputStreamReader?   TextInputStreamReaderIOFactory?<br><br>I can never remember the names of all their classes... </p>", 
                "question": "Do you ever truly grow out of the <dq>Google your problems and find your answers<dq> phase?"
            }, 
            "id": "cg7es9a"
        }, 
        {
            "body": {
                "answer": "<p>You can look at the documentation for a language or framework rather than Googling the solution. <br><br>There is nothing wrong with using Google to find a solution though providing you take the time to understand what the code does that you<sq>re using and properly rewrite or adapt it to meet your needs.<br><br>The thing to remember is that almost all of the time someone has already done what you<sq>re trying to do in some way so why make things hard for yourself. Sometimes it can be a lot more educational to see a working example than reading the docs. </p>", 
                "question": "Do you ever truly grow out of the <dq>Google your problems and find your answers<dq> phase?"
            }, 
            "id": "cg7exhg"
        }, 
        {
            "body": {
                "answer": "<p>I have found that Code Academy is a good site to learn basics of Javascript and some basic programming techniques (loops, conditionals etc.). It can get a bit long-winded and repetitive after you learn the basics.<br><br>A lot of great new self-learning resources have been popping up in the last few months. Other than Code Academy, which is worth checking out, I<sq>d highly recommend<colon><br><br>CS 101 class from new online university Udacity<colon><br>http<colon>//www.udacity.com/<br><br>Coursera (Courses on various topics currently running an algorithms course from Stanford)<colon><br>https<colon>//www.coursera.org/landing/hub.php<br><br>Harvard CS50 at<colon><br>http<colon>//cs50.tv/2011/fall/<br><br>Brand new online version of MIT 6.00 Into to CS (i did the 2008 version, so I can<sq>t vouch specifically for this class, but the prof is good and its MIT so...)<colon><br>http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/<br></p>", 
                "question": "I<sq>m a programmer with 20 years in and I just found this site for learning basic programming and I think it<sq>s great"
            }, 
            "id": "c43r305"
        }, 
        {
            "body": {
                "answer": "<p>www.rubymonk.com follows a similar in-browser-editing style of teaching code, and I<sq>d imagine some people might benefit from it until codecademy gets some Ruby and Python tutorials.<br><br>Edit<colon> Whoever downvoted, please say why. I<sq>d like to know if I<sq>m learning from the wrong sources, if that<sq>s the case.</p>", 
                "question": "I<sq>m a programmer with 20 years in and I just found this site for learning basic programming and I think it<sq>s great"
            }, 
            "id": "c43t3kw"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I<sq>m a programmer with 20 years in and I just found this site for learning basic programming and I think it<sq>s great"
            }, 
            "id": "c43rqpp"
        }, 
        {
            "body": {
                "answer": "<p>They<sq>re working on their pooping lessons too!<br><br>http<colon>//www.codecademy.com/languages/pooping</p>", 
                "question": "I<sq>m a programmer with 20 years in and I just found this site for learning basic programming and I think it<sq>s great"
            }, 
            "id": "c440h0a"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s easy to grasp and widely used, which is why it becomes too widely used in many places where it<sq>s entirely the wrong tool. <br><br>I think not teaching it at all is probably shortsighted, but it should be taught with the caveat that it should be rarely used, and only in cases where you are genuinely directing flow control, not using it as a crutch for state management. <br><br>Not teaching it does deprive students of a powerful tool *when it is the right tool*, but it also forces them to use and think about other tools in situations where `if` is easy, lazy and wrong. <br><br>It may also be that if the teacher <dq>implicitly<dq> told them not to use anything not taught, he may be <dq>implicitly<dq> assuming that everyone knows `if` anyway. There<sq>s only one person who explicitly knows. The sensible thing here, as always, is to ask the teacher whether `if` is acceptable, and if not, why not. <br><br>Edit<colon> Note that this is especially true in OOP - the entire purpose of polymorphism is to eliminate the branching that stems from `if`.</p>", 
                "question": "My brother<sq>s java teacher has a weird way of teaching students how to write code"
            }, 
            "id": "d8uwlnx"
        }, 
        {
            "body": {
                "answer": "<p>Completely normal for an introductory class. Some students struggle with the basics, so such topics are introduced incrementally.</p>", 
                "question": "My brother<sq>s java teacher has a weird way of teaching students how to write code"
            }, 
            "id": "d8uzpdu"
        }, 
        {
            "body": {
                "answer": "<p>As weird as making students implement their own sorting algorithms when there<sq>s a built-in library function to do that.  That is, it<sq>s actually instructive.<br><br>I can<sq>t guess as to the wisdom of not using if<sq>s, but maybe the professor knows what he<sq>s doing.  Or your brother missed a lecture.  That said, `for(int i = 0; i < 1 && condition; i++) {...}` is a nice backdoor if statement.</p>", 
                "question": "My brother<sq>s java teacher has a weird way of teaching students how to write code"
            }, 
            "id": "d8vbgkw"
        }, 
        {
            "body": {
                "answer": "<p>The world graces us with another high quality Java developer.</p>", 
                "question": "My brother<sq>s java teacher has a weird way of teaching students how to write code"
            }, 
            "id": "d8vcbss"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know that one, but I do have something similar that happened to me.<br><br>My first development job was about 10 years ago working as a Jr Java Developer for a health insurance provider. Shortly after converting from an intern to a full fledged Jr Developer, our VP of IS left the company and our new VP decided to reorg the IS division. I got moved from the web division to the legacy apps division. The guy I replaced was promoted to the Architecture team as one of the Sr Architects. He had been with the company for 15 years or something like that, and was one of those <dq>I only code in Vi, IDEs are crutches for bad developers<dq> type developers.<br><br>Anyhow, I was assigned a project called ASOFirst. Piece of software that this guy wrote in Java 1.2. He had been working on migrating it from 1.2 to 1.4 for something like 2 years. He claimed there was at least another 2 years of code changes that needed to occur to bring it forward to 1.4, and that it would probably never work on 1.5 (which had just been released).<br><br>So after about the 3rd day on the team, after settling in and getting the low down from him on what the software was, etc. I pulled the source onto my desktop and opened it in RAD (IBM<sq>s bastardized Eclipse). After about 2 hours of using the refactoring tools I managed to get it compiling against Java 1.5. My assumption was that maybe he had gotten that far before and ran into other issues, I wasn<sq>t sure, so I went and pulled the dev instance down, shut down all the services, deployed the newly compiled code and restarted everything up. Sent a couple emails to have the adjusters go and test on the dev instance so I could see what kind of issues I was going to run up against to see what I was going to be fighting with for the next 2 years.<br><br>Anyhow, after about 2 days, the adjuster team came back to me and said the dev instance was working perfectly and they couldn<sq>t find any bugs. I flipped my shit. Went to my manager and explained everything. I had just completed my entire workload for the next 2 years in 2 hours. It made quite the splash.<br><br>I spent about 2 weeks upgrading the production servers from Windows Server 2000 and Java 1.2, to Windows Server 2003 R2 with Java 1.5, and deploying the new code to them. After that I spent 3 months basically poking around on the internet as they didn<sq>t have anything else for me to do. I was the only Java developer on the Legacy team, and ASOFirst was the only Java app. <br><br>After about 3 months of twiddling my thumbs I got moved to the new <dq>Web Office<dq> team which was an experimental team that was tasked with rebuilding the public member website using new modern web standards and new development practices and processes.<br><br>TL;DR<colon> Took over project from <dq>vi<dq> coder, used an IDE to do what was thought to be a 2 yr project in 2 hours. Got promoted after 3 months of surfing the web afterwards.</p>", 
                "question": "Talking to a friend about automation. What<sq>s that (true) story about a programmer/redditor who created a <dq>nifty<dq> automation script that reduced some other guy<sq>s entire day down to two minutes?"
            }, 
            "id": "d1ufomb"
        }, 
        {
            "body": {
                "answer": "<p>Not sure if this is the story you<sq>re on about but there was that story where there was an entire department of people who<sq>s jobs were at risk when one employee wrote a script that did his entire 6 hour shift in a few minutes. Then he got into some legal trouble since he wrote the shift on company time, locked away the script, then sold the script to the company in return for ensuring the safety of his and his coworkers (specifically the ones he liked) jobs.</p>", 
                "question": "Talking to a friend about automation. What<sq>s that (true) story about a programmer/redditor who created a <dq>nifty<dq> automation script that reduced some other guy<sq>s entire day down to two minutes?"
            }, 
            "id": "d1ua8r9"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//thedailywtf.com/Articles/Classic-WTF-The-Indexer.aspx<br><br>Here ya go. </p>", 
                "question": "Talking to a friend about automation. What<sq>s that (true) story about a programmer/redditor who created a <dq>nifty<dq> automation script that reduced some other guy<sq>s entire day down to two minutes?"
            }, 
            "id": "d1uf9s7"
        }, 
        {
            "body": {
                "answer": "<p>In my first IT job I created a simple tool that saved hours if not weeks of people. Here<sq>s what it did<colon> It pressed enter.<br><br>The company I worked for had a software program. Every client got updates. Now, these updates came automatically (from the local server), but they all required you to push enter for it to actually install. I think this was sort of policy, so people could see on an update, what would be updated. <br><br>The problem was when a new client would be installed, it would have to go through all the updates. At some stage in time the product had 129 updates to install per new client. That means pressing enter, waiting for the update to finish, and then pressing enter again, repeat 129 times.<br><br>I used VB6 to write a small program that would look for a new window handle with the right title. Give it focus, press enter and wait for the next one. All of our engineers and most of our costumers were using it in no time. I left long, long ago and assume the company is dead, but I don<sq>t doubt that tool was used for years after I was gone.<br><br>tl;dr<colon> Tons of time saved by an app that presses enter.</p>", 
                "question": "Talking to a friend about automation. What<sq>s that (true) story about a programmer/redditor who created a <dq>nifty<dq> automation script that reduced some other guy<sq>s entire day down to two minutes?"
            }, 
            "id": "d1udw7a"
        }, 
        {
            "body": {
                "answer": "<p>I copied and pasted everything you had written, but it didn<sq>t run after I compiled it.  Halp?</p>", 
                "question": "I was thinking of a fun way to expose my daughter to data structures and algorithms when she<sq>s a bit older and started writing a story. Here<sq>s the first of three parts. I thought r/learnprogramming might enjoy it. (x-post from r/programming)"
            }, 
            "id": "cpgqm3r"
        }, 
        {
            "body": {
                "answer": "<p>OHHHH! You<sq>re not American. <br><br>I was having SUCH a hard time parsing this story and was beginning to question my sanity. <br><br>That being said, I LOVE the idea, and I<sq>m sure if I had a better understanding of European writing styles i<sq>d appreciate this a lot more. However, as it stands, I was left lost and confused several times. This might be a combination of not being familiar with the colloquialisms and also the silly/random nature of the story itself. <br><br>When you said his eyes were <dq>blood-soaked<dq> I thought Jesus Christ this is getting dark \u00f4_\u00d5... </p>", 
                "question": "I was thinking of a fun way to expose my daughter to data structures and algorithms when she<sq>s a bit older and started writing a story. Here<sq>s the first of three parts. I thought r/learnprogramming might enjoy it. (x-post from r/programming)"
            }, 
            "id": "cpgyns9"
        }, 
        {
            "body": {
                "answer": "<p>>  A promiscuous breeze shook the leaves in front of him, before fraternizing with another bunch of leaves farther away.<br><br>A childrens<sq> book? Pull the other one!</p>", 
                "question": "I was thinking of a fun way to expose my daughter to data structures and algorithms when she<sq>s a bit older and started writing a story. Here<sq>s the first of three parts. I thought r/learnprogramming might enjoy it. (x-post from r/programming)"
            }, 
            "id": "cph3euo"
        }, 
        {
            "body": {
                "answer": "<p>if you like this, check out computational fairytales by jeremy kubica, similar idea, explains ideas of computer science through an adventure story, suited to young readers as well as old I suppose.<br></p>", 
                "question": "I was thinking of a fun way to expose my daughter to data structures and algorithms when she<sq>s a bit older and started writing a story. Here<sq>s the first of three parts. I thought r/learnprogramming might enjoy it. (x-post from r/programming)"
            }, 
            "id": "cpgslsb"
        }, 
        {
            "body": {
                "answer": "<p>This is valuable advice, for two reasons<colon><br><br>1. The true end goal is not learning tool X or language Y, it<sq>s the *creation of software*.  Having something you want to build, and learning what you need to do so, is keeping the end in mind and keeps you motivated.<br><br>2. In the context of trivial test code, many programming concepts simply don<sq>t make sense (e.g. <dq>why encapsulate state?<dq>). You have to write something where the complexity begins to overwhelm you (that it always will may come as a surprise to new programmers) before you really get it<colon> programming is the art of managing complexity, and various programming methodologies and the languages that support them exist for that reason.</p>", 
                "question": "A message to all you newcomers<colon>"
            }, 
            "id": "c6qsv9b"
        }, 
        {
            "body": {
                "answer": "<p>For some reason though, I can never bring myself to actually code the <dq>Hello World<dq> exercises as they intended.</p>", 
                "question": "A message to all you newcomers<colon>"
            }, 
            "id": "c6qthcz"
        }, 
        {
            "body": {
                "answer": "<p>Truth.  Having a goal is always a great motivation.  I have a friend who has been dabbling in programming a bunch over the past year and having trouble actually getting in to it.  He recently started getting motivated to learn simply because he has a project he wants to do.  The hard part in the beginning is finding something doable.</p>", 
                "question": "A message to all you newcomers<colon>"
            }, 
            "id": "c6qrm1z"
        }, 
        {
            "body": {
                "answer": "<p>been learning java/c++ and various other programming topics for about a year now.  I have always wondered about when it going <dq>click.<dq><br><br>For example right now I still cant write code <dq>freehand<dq>. I can begin a new project but soon after that, i still need reference. <br> <br>i have or (believe I have) a really good idea that I hope will move from the paper to the computer.  At first I wanted to do everything at once and now I have forced myself to concentrate on one thing and than move on </p>", 
                "question": "A message to all you newcomers<colon>"
            }, 
            "id": "c6qtbsj"
        }, 
        {
            "body": {
                "answer": "<p>Remember this feeling for when you<sq>re tearing your hair out over an elusive bug. You<sq>re going to hit bumps and get frustrated, be prepared to never give up.</p>", 
                "question": "So I started learning programming and it feels amazing"
            }, 
            "id": "cyqm7oa"
        }, 
        {
            "body": {
                "answer": "<p>My first computer was a c64 and it booted into BASIC and came with a programming manual. My second came with MS-BASIC. I think something crucial has been lost as they<sq>ve become machines for consumption.<br><br>Programming is a mental treat, because it shows unambiguous understanding. If you can break a problem down to where a machine can execute it, and it works properly, you have clear proof that you correctly solved the problem. It<sq>s an amazing feeling.</p>", 
                "question": "So I started learning programming and it feels amazing"
            }, 
            "id": "cyqpfa1"
        }, 
        {
            "body": {
                "answer": "<p>Welcome to the best drug that you can get paid to use. The first time I made a program that actually did something and that I had come up with, I felt like I was walking on clouds for days. Harness this feeling. Learn some css and javascript and start making a web project.</p>", 
                "question": "So I started learning programming and it feels amazing"
            }, 
            "id": "cyqpz5b"
        }, 
        {
            "body": {
                "answer": "<p>Check out freecodecamp. And keep going! </p>", 
                "question": "So I started learning programming and it feels amazing"
            }, 
            "id": "cyql2zr"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s also free to current college students for those who are not aware!</p>", 
                "question": "Lynda.com for free! Depending on your public library."
            }, 
            "id": "d4jt2qh"
        }, 
        {
            "body": {
                "answer": "<p>free if you live in new york, since anyone in the state can get a free Brooklyn Library pass. I don<sq>t even live near NYC <br><br>http<colon>//www.bklynlibrary.org/lynda</p>", 
                "question": "Lynda.com for free! Depending on your public library."
            }, 
            "id": "d4jsar0"
        }, 
        {
            "body": {
                "answer": "<p>SF Public Library is covered as well (they also have treehouse.com and a couple of cool looking tech ebook subscription services as well). <br><br>Thanks for letting us know, I had no idea this was a thing (saves me some $$$)<br><br> </p>", 
                "question": "Lynda.com for free! Depending on your public library."
            }, 
            "id": "d4jxpsp"
        }, 
        {
            "body": {
                "answer": "<p>If you have a library card for pretty much any library in Minnesota, you can get Lynda.com access through the Hennepin County library website.</p>", 
                "question": "Lynda.com for free! Depending on your public library."
            }, 
            "id": "d4jz48k"
        }, 
        {
            "body": {
                "answer": "<p>While not software, [The Game Boy, a hardware autopsy](https<colon>//www.youtube.com/watch?v=RZUDEaLa5Nw) is really interesting, and teaches how a CPU and memory works and how a programmer uses them with assembly. They just released an new episode yesterday, and I<sq>m looking forward to the next <colon>D</p>", 
                "question": "Any good YouTube channels that explain how different games services and programs work?"
            }, 
            "id": "d3j3w9d"
        }, 
        {
            "body": {
                "answer": "<p>[Computerphile is for you](https<colon>//www.youtube.com/user/Computerphile)</p>", 
                "question": "Any good YouTube channels that explain how different games services and programs work?"
            }, 
            "id": "d3j300f"
        }, 
        {
            "body": {
                "answer": "<p>I am working on a series of videos that follows the development of my game, Potions<colon> A Curious Tale. The first 12 videos step through the process as I learn and develop a solid demo for my game, while the most recent ones are each focused on a specific topic. <br><br>It<sq>s covers the code, design choices, biz dev, and emotions of working on a game.<br><br>Making Potions<colon> A Tale of Game Development<colon> http<colon>//www.youtube.com/playlist?list=PLr9JS0ZptvLpP7uwDLG9w8OQEiHr71A5n</p>", 
                "question": "Any good YouTube channels that explain how different games services and programs work?"
            }, 
            "id": "d3jaupa"
        }, 
        {
            "body": {
                "answer": "<p>If you are interested in how emulators works, and how old games works, Bisqwit<sq>s channel has many excellent videos<colon><br>https<colon>//www.youtube.com/user/Bisqwit/videos<br><br>Although you need to be at a quite advanced level before you can understand EVERYTHING that he does. But here is a very good and informative video by him<colon><br>https<colon>//www.youtube.com/watch?v=HQYsFshbkYw</p>", 
                "question": "Any good YouTube channels that explain how different games services and programs work?"
            }, 
            "id": "d3jahh1"
        }, 
        {
            "body": {
                "answer": "<p>>The rest is just knowing how to use Python to download an image.<br><br>Would you mind doing a similar post on this? I really like your style, and I think it<sq>d be awesome to know how to use python to save files after running a scraping program such as this. Thanks!</p>", 
                "question": "This is how I scrape a website"
            }, 
            "id": "cqypxdk"
        }, 
        {
            "body": {
                "answer": "<p>Back in my PHP days, I was working for a company where we had to go to a few web pages, and download like 50 pdfs per page, one at a time, then compare them with the copies we had on file and if they had changed, update them.<br><br>Yea, that shit wasn<sq>t happening when I got the task. Wrote a php script based on their html because it was repetitive enough to sift through, and figured out a way to get all the pdf links on the page.<br><br>Then, I used curl to download all those said pdfs. I then used PHP to compare the file names to output anything that didn<sq>t exist or match. Took a 4 hour a day job and turned it into 15 minutes once a week, just checking over any mismatches or updated names, etc. </p>", 
                "question": "This is how I scrape a website"
            }, 
            "id": "cqz1iu5"
        }, 
        {
            "body": {
                "answer": "<p>Nice tutorial, but http<colon>//forums.xkcd.com/viewtopic.php?f=11&t=3095 explains an API that xkcd has for this purpose.</p>", 
                "question": "This is how I scrape a website"
            }, 
            "id": "cqyw12o"
        }, 
        {
            "body": {
                "answer": "<p>You used textfiles.com in your Scraping Images with Python post.  You...I like you.</p>", 
                "question": "This is how I scrape a website"
            }, 
            "id": "cqz1ata"
        }, 
        {
            "body": {
                "answer": "<p>Start with this<colon>  https<colon>//automatetheboringstuff.com/  </p>", 
                "question": "[Python] Started Codecademy 4 days ago. I don<sq>t feel confident in my ability to code anymore."
            }, 
            "id": "daaolbv"
        }, 
        {
            "body": {
                "answer": "<p>Completely and totally normal! Keep going to those forums and search for help and you<sq>ll find that things get easier. <br><br>Programming, to me, it very similar to learning a new math concept  (like division) at first you have to keep looking up the steps and getting help even though you are only dividing 67 by 3, but eventually you can do it without struggling after plenty of practice</p>", 
                "question": "[Python] Started Codecademy 4 days ago. I don<sq>t feel confident in my ability to code anymore."
            }, 
            "id": "daam8qo"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re not going to learn all of Python, or really even the basics,  in a week with no prior experience. Take your time. A lot of the concepts in programming are very abstract and may take a while to grasp before it finally <dq>clicks.<dq> <br><br>As for looking things up in the Q&A, you<sq>re going to be doing this you<sq>re entire career. Polish up your Google-fu, because you<sq>re going to need it throughout university and into a professional career. </p>", 
                "question": "[Python] Started Codecademy 4 days ago. I don<sq>t feel confident in my ability to code anymore."
            }, 
            "id": "daamhgt"
        }, 
        {
            "body": {
                "answer": "<p>Bro, this is why you are on code academy. So you can have the hard, struggling, <dq>I don<sq>t know what the fuck this does, I am idiot for choosing this major because I will never be this smart<dq> time when it doesn<sq>t mean anything. Better now than when you have an assignment due.<br><br>And why would you think you could just <sq>pick it up<sq>? Did Jordan discover one day he was good at baskrtball? Did Phelps make the Olympic team by accident? Did Eminem just luck his way into a rap career?  Nope, they spent years working on those skills before they got to where they wanted to be.<br><br>Anything worth doing well takes considerable amounts of practice.<br></p>", 
                "question": "[Python] Started Codecademy 4 days ago. I don<sq>t feel confident in my ability to code anymore."
            }, 
            "id": "daap8g7"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s actually [linked in our wiki/FAQ](http<colon>//www.reddit.com/r/learnprogramming/wiki/books), but 90<percent> of posters don<sq>t read that, so another post never hurts.</p>", 
                "question": "List of free programming books (x-post /r/coding)"
            }, 
            "id": "cbv593k"
        }, 
        {
            "body": {
                "answer": "<p>So, this list is humongous. Does anyone have any recommendations?</p>", 
                "question": "List of free programming books (x-post /r/coding)"
            }, 
            "id": "cbv7b71"
        }, 
        {
            "body": {
                "answer": "<p>My god this list covers so much, cheers.</p>", 
                "question": "List of free programming books (x-post /r/coding)"
            }, 
            "id": "cbv6q20"
        }, 
        {
            "body": {
                "answer": "<p>Thank you! I suck at coding, but love it! </p>", 
                "question": "List of free programming books (x-post /r/coding)"
            }, 
            "id": "cbv5rrl"
        }, 
        {
            "body": {
                "answer": "<p>Let<sq>s say you have a classroom of 2 students and you want to keep track of their names and grades. You could do<colon><br><br>    string Student1Name = <dq>Joy<dq>;<br>    string Student2Name = <dq>Adam<dq>;<br>    int Student1Grade = 2;<br>    int Student2Grade = 5;<br><br>Student1Name and Student1Grade aren<sq>t really linked in anyway so its hard to do things that need both. Now imagine we had a lot more students. How would this work for a million students? Imagine now that Students had more information such as classes, past grades, who their councilor is and so on. Would you have to go and hardcode a new student every time?<br><br>The idea with classes is to make the template of a real life thing. I can make a Student class like this<colon><br><br>    class Student<br>    {<br>    string Name;<br>    int Grade;<br>    }<br><br>I haven<sq>t set any values here. I<sq>m just saying that things of type Student have a Name and Grade property. When I want to make an actual student with values, I am creating an INSTANCE of the CLASS Student. For example<colon><br><br>    Student JoyStudent = new Student();<br>    JoyStudent.Name = <dq>Joy<dq><br>    JoyStudent.Grade = 5;<br><br>Now, wherever I come across a object of type student in my code, I can write the name I gave it (in this case JoyStudent) followed by a period to access its properties. Name and Grade will show up in the list of things I can access.<br><br>>How do you conceptualize in your head what parts of your program become objects, classes, functions, etc.?<br><br>It<sq>s pretty easy! The class is the template of the thing we are trying to represent. Properties are the types of information each instance of my class has. Functions are chunks of code that do something that we are going to do frequently.<br><br>So we covered properties above, let<sq>s talk about functions. Let<sq>s say I need to figure out how many letters are in a Student<sq>s Name. If I only needed it once, I could do<colon><br>    int LengthOfName = JoyStudent.Name.Length;<br>That works for that one time. I<sq>ll need to type the same thing for the next student too. But what if I needed the code to do more? If I need it to get the length of the name, then do something based on the length and then save it somewhere? Oh, and I<sq>ll need to do it for every student! I<sq>m not going to rewrite all this code each time so I<sq>m going to create a function in my class so it looks like this<colon><br><br>      class Student<br>    {<br>    string Name;<br>    int Grade;<br><br>    int GetNameLengthAndDoStuff()<br>    {<br>    // do a lot of stuff here<br>    }<br>    }<br><br>Now, I can just say Student.GetNameLengthAndDoStuff() for each of my students instead of rewriting the code everywhere!<br><br>You<sq>re right, most people aren<sq>t writing code for bikes. But our web app will have a User class that has our Email, Name, Age and so on as properties. Or we might have a product class with the name, serial number, product number and so on of the product. So conceptualizing our Classes isn<sq>t really hard once you understand that properties will represent information about the class and functions hold actions that the class can perform.<br><br>This allows us to re-use the same code in all the instances of our class and have them behave the same way with their functions.</p>", 
                "question": "Trying to understand object-oriented programming a bit more conceptually"
            }, 
            "id": "da7euop"
        }, 
        {
            "body": {
                "answer": "<p>Well an object is just a representation of a class and a function/method is just a process the object can do.   <br><br>Maybe like in a game, you have enemies EnemyNPC class and you instianiate EnemyNPC objects in your game. You are creating the objects in your game through the abstraction of the EnemyNPC class. Then like the EnemyNPC has methods to check if it still has full health or to attack or getters and setters to set values inside the object (like it<sq>s enemy name maybe, speed, etc).   <br><br>You<sq>re not like making classes for every single enemy NPC you spawn, like EnemyNPC1, EnemyNPC2, etc...you just make one and instantiate that a bunch. Then taking it even further with polymorphism, making an NPC class then having EnemyNPC and AllyNPC extend it and instantiate it based off the NPC class, because they do most the same things (have health, can attack, can move) but are slightly different in like allies help you and have a different appearance and enemies don<sq>t. <br><br>Idk it is kind of a weird thing to wrap your head around at first, and also to explain haha. Why my go to is real world objects to understand it, put it into context with something I know.</p>", 
                "question": "Trying to understand object-oriented programming a bit more conceptually"
            }, 
            "id": "da797uo"
        }, 
        {
            "body": {
                "answer": "<p>First step is [noun-verb analysis](http<colon>//uml-tutorials.trireme.com/uml_tutorial_4.htm) which produces an initial [domain model](https<colon>//en.wikipedia.org/wiki/Domain_model) that you can refactor. Those classes would be the <dq>bicycles<dq> in your example.<br><br>At that point, the analogy breaks down. How do you model external systems? How do you refactor out common behavior or the parts of the behavior that change? Those classes (and interfaces) do not necessarily map to things and concepts in the real world nor your domain model.<br><br>This is where ([design](https<colon>//sourcemaking.com/design_patterns)/[architectural](https<colon>//en.wikipedia.org/wiki/Architectural_pattern)) patterns come in. They introduce *new* abstractions that enable greater flexibility at the cost of more *upfront* complexity.<br><br>For example, database access could be modeled by a [table](http<colon>//martinfowler.com/eaaCatalog/tableDataGateway.html) [gateway](http<colon>//martinfowler.com/eaaCatalog/gateway.html) to the database, embedded in the domain model objects via [active record](http<colon>//martinfowler.com/eaaCatalog/activeRecord.html), or [not decoupled at all](http<colon>//martinfowler.com/eaaCatalog/transactionScript.html). In two of the above cases, you introduce non-real-world and non-domain classes and interfaces into your program.<br><br>Generally, when you<sq>re planning out your classes, you<sq>ll come across a problem and it<sq>ll map to a specific pattern or combination of patterns.</p>", 
                "question": "Trying to understand object-oriented programming a bit more conceptually"
            }, 
            "id": "da7a2f0"
        }, 
        {
            "body": {
                "answer": "<p>> Basically when someone tries to describe OOP for the first time, they use an example with real-world objects, like a bicycle (object) with properties like size or color and functions like changing gears.<br><br>I<sq>ve always found that to be an incredibly asinine comparison. I get that it tells you why it<sq>s called an object, but I think it<sq>s done far more to confuse people than help people.<br><br>Here<sq>s what an object is<colon> a collection of variables and functions. That<sq>s basically it.<br><br>Suppose you<sq>re writing a video game and you have an enemy type called <dq>goomba.<dq> Let<sq>s define a goomba class.<br><br>Python<br><br>    class Goomba<colon><br>        def spawn(self)<colon><br>            [create goomba]<br>    <br>        def die(self)<colon><br>            [destroy goomba]<br><br>C#<br><br>    public class Goomba {<br>        public void Spawn() {<br>            [spawn goomba]<br>        }<br>    <br>        public void Die() {<br>            [destroy goomba]<br>        }<br>    }<br><br>Then we can spawn 2 goombas when we load a level.<br><br>Python<br><br>    goomba1 = Goomba()<br>    goomba2 = Goomba()<br>    goomba1.spawn()<br>    goomba2.spawn()<br><br>C#<br><br>    Gooma goomba1 = new Goomba();<br>    Gooma goomba2 = new Goomba();<br>    goomba1.Spawn();<br>    goomba2.Spawn();<br><br>Suppose when we spawn a goomba it wanders around for a bit and we want to know where it<sq>s x position is. It will be different for each goomba because we happened to have programmed them to never spawn directly on top of another goomba.<br><br>    print(goomba1.x)<br><br>As for vocabulary, the part where we define which variables and functions a goomba will have is called the <dq>class<dq> or <dq>class definition<dq>. Any variables that are inside a goomba are called <dq>attributes<dq>. In this example it was the variable <dq>x<dq>. The functions for our goomba such as Spawn and Die are called methods. But these are all just words. They don<sq>t differ from functions or variables except that to reference x you need to know which goomba<sq>s x you<sq>re looking for. And calling the method on one goomba won<sq>t do anything to another goomba.<br><br>I use classes mainly for two reasons<colon> encapsulation and don<sq>t-repeat-yourself. If I<sq>m writing a webscraper, I might make a class for Webpage. This way I can scrape multiple pages by just passing it the url, but also it means I don<sq>t have to worry about keeping track of which variables belong to what Webpage outside of that class. So I can do something like<colon><br><br>    reddit = Webpage(<dq>reddit.com<dq>)<br>    hackernews = Webpage(<dq>hackernews.com<dq>)<br>    reddit_url = reddit.get_url_for_top_post()<br>    hn_url = hackernews.get_url_for_top_post()<br>    if hn_url != saved_url<colon><br>        hackernews.save_website(save_folder=<dq>/home/cereal/saved_websites/hackernews<dq>)</p>", 
                "question": "Trying to understand object-oriented programming a bit more conceptually"
            }, 
            "id": "da7gs8x"
        }, 
        {
            "body": {
                "answer": "<p>Im upvoting and commenting as I feel this is one place code academy is really lacking. The transition from general coding in the lessons to real life application.  Id also like to hear how others have progressed from one to the other.</p>", 
                "question": "So i just completed (100<percent>) the Ruby course on codecademy. How do i start using this knowledge to create something outside of the codecademy labs? How does Ruby IDE work? Thanks in advance."
            }, 
            "id": "c8rfmck"
        }, 
        {
            "body": {
                "answer": "<p>This seems to be a common question with people who use CA. They don<sq>t seem to teach you what to do with the knowledge you<sq>ve gained. Sort of like learning the vocabulary of a foreign language, but not how to actually speak it. <br><br>Edit<colon> spelling</p>", 
                "question": "So i just completed (100<percent>) the Ruby course on codecademy. How do i start using this knowledge to create something outside of the codecademy labs? How does Ruby IDE work? Thanks in advance."
            }, 
            "id": "c8rkvk0"
        }, 
        {
            "body": {
                "answer": "<p>Alright, This is going to vary depending on what operating system you<sq>re on, but lets assume windows for now.<br><br>Firstly, there isn<sq>t really a single <sq>Ruby<sq> IDE (No SCITE, you don<sq>t count). A lot of People tend to use their favorite fully featured text applications like VIM,  NP++, Textmate. Which is certainly fine for most development. There are also more feature rich IDE<sq>s out there like Eclipse, RubyMine, RedCar and others.<br><br>If you<sq>re doing simple things I<sq>d suggest sticking with a text editor for now. If you<sq>re embarking on a large project learning Eclipse certainly wouldn<sq>t do you wrong.<br><br>For now let<sq>s say you want to use a text editor to make a ruby program to run locally. <br><br>Assuming you<sq>ve installed [Ruby](http<colon>//rubyinstaller.org/downloads/)<br><br>all you need to do is make a new file named <dq>program.rb<dq> somewhere on your hard drive. Let<sq>s say we make the new file in the C<colon>\\ directory.<br><br>Open that file up in a text editor, write whatever ruby code you want in there, for example<br><br><br>    puts <dq>Hello world.<dq><br><br>You can now open up a command prompt (win+r, cmd, enter)<br>use the <sq>cd<sq> command to navigate to where your file is saved. You can now run the command <dq>ruby program.rb<dq> and you will receive any output as your file runs, in this case <dq>Hello world.<dq></p>", 
                "question": "So i just completed (100<percent>) the Ruby course on codecademy. How do i start using this knowledge to create something outside of the codecademy labs? How does Ruby IDE work? Thanks in advance."
            }, 
            "id": "c8rfufm"
        }, 
        {
            "body": {
                "answer": "<p>The important thing is to have a project and then start working on it. Pick an ambitious one. One that will force you to learn new things to build it properly and then work on that. I<sq>d even say you should have a project in mind even before you start learning so it<sq>ll give you some drive.<br><br>So ask yourself, what<sq>s a neat personal problem you figure some coding will solve? Now try solving it by writing a program in Ruby. Pick something modestly big and then work on it piece by piece. The only true way to learn how to code, is to acutally code.<br><br>Once you<sq>re done with your personal mini-project, find or start an open-source project and contribute to it. That will teach you the second most important lesson of coding. How to code well and collaborate with others. Pretty much every major piece of code out there is a collaborative work between an open or closed team. You can<sq>t be a good coder without understanding how to work with others and code with others to meet a goal.</p>", 
                "question": "So i just completed (100<percent>) the Ruby course on codecademy. How do i start using this knowledge to create something outside of the codecademy labs? How does Ruby IDE work? Thanks in advance."
            }, 
            "id": "c8rhmv6"
        }, 
        {
            "body": {
                "answer": "<p>**Treehouse**<colon> Good variety of content, however I have found it rather shallow and slow. Great for beginners, but for experienced programmers, can be tedious. Their learning tracks are a good way to break into a new discipline as they are very regimented.<br><br>**Pluralsight**<colon> Good variety, good depth, poor quality control. Some courses are much better than others, as they are all taught by different professionals. A rating system helps filter through the bad courses. Typically I<sq>ve found the content on Pluralsight to be pretty solid, but there were definitely quite a few times that a course fell short. Good for experienced and beginning programmers, if you know what you want to study.<br><br>**Codeschool**<colon> Poor variety, good depth. I<sq>ve found Codeschool courses to among the best content-wise, but they do not have much variety. For example, they lack anything related to Windows development. Tailored towards beginning programmers, with a few extra courses thrown in for more intermediate devs.<br><br>**Codecademy**<colon> Good variety, questionable content. I owe Codecademy for my first foray into programming, but I would not pay for their service. In my experience, they provide you with superficial syntax knowledge, without delving far enough into programming concepts. The exercise-based lessons can be great for practicing, however.<br><br>**Lynda**<colon> I don<sq>t have much experience with this site, but when I first looked into it about a year ago, it seemed tailored more towards designers than programmers. I found the programming content to be lacking, but the photoshop/illustrator/photography content to be excellent.<br><br>Hope this helps.</p>", 
                "question": "What is the best paid programming option? Code school Code academy Lynda.com?"
            }, 
            "id": "d4907d0"
        }, 
        {
            "body": {
                "answer": "<p>PSA<colon> you can use Lynda.com for free with a library card</p>", 
                "question": "What is the best paid programming option? Code school Code academy Lynda.com?"
            }, 
            "id": "d49a9ap"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//frontendmasters.com and https<colon>//egghead.io/ but they are more geared towards intermediate people, although there are introductory courses.</p>", 
                "question": "What is the best paid programming option? Code school Code academy Lynda.com?"
            }, 
            "id": "d490z3c"
        }, 
        {
            "body": {
                "answer": "<p>I finished the front-end track on treehouse (actually, the full-stack javascript). I recommend Treehouse to get your feet wet. Once you<sq>re familiar with that, probably purchasing a specific course via Udemy for Angular or Node (or whatever you<sq>re interested in).</p>", 
                "question": "What is the best paid programming option? Code school Code academy Lynda.com?"
            }, 
            "id": "d48zmal"
        }, 
        {
            "body": {
                "answer": "<p>Can you /u/kamranahmed_se or someone make a roadmap for software developer ? would be really cool. thanks</p>", 
                "question": "Roadmap to becoming a developer in 2017"
            }, 
            "id": "dez51zo"
        }, 
        {
            "body": {
                "answer": "<p>I find your lack of faith in Java disturbing.</p>", 
                "question": "Roadmap to becoming a developer in 2017"
            }, 
            "id": "dez6gyk"
        }, 
        {
            "body": {
                "answer": "<p>It concerns me that this is encouraging people to choose a framework before they actually know the language. Bad idea. </p>", 
                "question": "Roadmap to becoming a developer in 2017"
            }, 
            "id": "dez7b2i"
        }, 
        {
            "body": {
                "answer": "<p>This is intimidating, but cool.</p>", 
                "question": "Roadmap to becoming a developer in 2017"
            }, 
            "id": "deypbiw"
        }, 
        {
            "body": {
                "answer": "<p>I would have them do comment outlines beforehand. Basically talk through a problem, break it down into steps, then list those steps as comments. <br><br>For example, a program that adds 2 numbers from the user together is easy for a beginner to mistakenly consider a one step problem. <br><br>In reality, having them comment out each step will help them break problems down into subproblems, which imo is the big step for a beginner. <br><br>    //prompt user for first number<br><br>    //store response for num1<br><br>    //prompt user for second number<br><br>    //store response for num2<br><br>    //calculate sum<br><br>    //print sum to screen<br><br>That probably seems massively tedious to anyone with more than a few weeks of programming experience, but it<sq>s a needed skill for larger projects. You have to be able to recognize the trees and not just see the forest. </p>", 
                "question": "What is the process you use to plan before you begin coding and what are the steps many amateurs miss in planning?"
            }, 
            "id": "dbsskfg"
        }, 
        {
            "body": {
                "answer": "<p>Flow charts are cool, but pseudo code is where it<sq>s at. Once your students can explain what is happening in a program using common language then they<sq>re ready to learn the specifics.</p>", 
                "question": "What is the process you use to plan before you begin coding and what are the steps many amateurs miss in planning?"
            }, 
            "id": "dbspc1u"
        }, 
        {
            "body": {
                "answer": "<p>I know you<sq>re not really asking about this, but in a professional situation the first thing I do is research what<sq>s already available to solve the problem, if anything. I<sq>m not going to spend n hours/days/weeks/months/years rewriting something that<sq>s already available for free or a license.  Probably 20<percent> of code written these days is done because people don<sq>t know they don<sq>t need to. Or they just want to do it for the leaning experience (on their employer<sq>s dime) or think they can do it better (and probably won<sq>t). I<sq>m only mentioning this because to be truly professional this is an important consideration.</p>", 
                "question": "What is the process you use to plan before you begin coding and what are the steps many amateurs miss in planning?"
            }, 
            "id": "dbsvo04"
        }, 
        {
            "body": {
                "answer": "<p>This is my personal process for larger applications I write. I<sq>m mostly writing software for design automation or analytics in hardware design.<br><br>1. Develop concept of what the tool will do, and how I<sq>d call it<br>2. Rough out a flowchart or text diagram highlighting the execution flow internally<br>3. Write pseudo code to implement the execution<br>4. As you write pseudo code, look for what to create functions from and where to reuse functions<br>5. Build outwards. Start on the simplest functions and build those before their parent functions get implemented. This way I can ensure the small steps work, and I can define their parameters before the parent us written. Then work on the procedures that call those children, and upwards until you reach the main execution function.<br><br>Also, I have these habits as well<colon><br><br>1. Document your functions with header comments that spell out the function and the parameters and what they are. And if possible, try documenting each block of code if it<sq>s not obvious what it does. This is less for someone else reading your code, and more for yourself. Coming back to your code after 6 months and trying to re-learn your code is a pain.<br>2. Personally, I like naming variables with something to define their type as well. Like d_moose as a dictionary, l_moose for a list, a_moose for an array, etc. That way I know what datatype I<sq>m passing from function returns, etc.</p>", 
                "question": "What is the process you use to plan before you begin coding and what are the steps many amateurs miss in planning?"
            }, 
            "id": "dbt0rjo"
        }, 
        {
            "body": {
                "answer": "<p>3.72GB should be correct because of marketing deception.<br><br>While normal, sane people consider a Gigabyte to equal 2^32 bytes, the storage industry lobbied to use this system of prefixes to refer to powers of 10 instead of 2. So when they say <dq>4GB,<dq> they don<sq>t mean 4,294,967,296 (2^32 ) bytes, they mean 4,000,000,000 (4x10^9 ) bytes.<br><br>4,000,000,000 bytes / 1024 = 3,906,250 KB<br><br>3,906,250 KB / 1024 \u2248 3814.7 MB<br><br>3814.7 MB / 1024 \u2248 3.725 GB</p>", 
                "question": "I have a badly infected USB stick that I<sq>d like to investigate and reverse-engineer. What tools do I need?"
            }, 
            "id": "d9o6z2p"
        }, 
        {
            "body": {
                "answer": "<p>The easiest way to go (although the setup would take a bit of time) would be starting up a vritual machine (VM) with relevant drivers, which can in this case be either USB2 or USB3 adapter drivers, and unacking it on there. That way, you will have created a vacuum chamber so to speak, in which even if the drive totally infects your OS, you can just delete it and start over.</p>", 
                "question": "I have a badly infected USB stick that I<sq>d like to investigate and reverse-engineer. What tools do I need?"
            }, 
            "id": "d9o7ygm"
        }, 
        {
            "body": {
                "answer": "<p>Lots of good answers here<colon> http<colon>//security.stackexchange.com/questions/103088/is-there-any-way-to-safely-examine-the-contents-of-a-usb-memory-stick</p>", 
                "question": "I have a badly infected USB stick that I<sq>d like to investigate and reverse-engineer. What tools do I need?"
            }, 
            "id": "d9o6rke"
        }, 
        {
            "body": {
                "answer": "<p>As others have mentioned, you need to set up a virtual machine (easy-easy, tons of guides on the net). Once unpacked into the vm environment you can run commands like netstat -nao or -nab to see the connections.<br><br>Look for processes that aren<sq>t quite right such as expiorer.exe in task manager or pstree on Linux. <br><br>You can run wireshark to view the packets trying to leave the machine (lots of guides online for this). <br><br>There are lots of ways to see what this .eye is trying to do. To RE the malware though I<sq>m not so sure. Potentially run it on the vm and then run malwarebytes afterward to see what it picks up. </p>", 
                "question": "I have a badly infected USB stick that I<sq>d like to investigate and reverse-engineer. What tools do I need?"
            }, 
            "id": "d9ob40l"
        }, 
        {
            "body": {
                "answer": "<p>Well...<br><br>fml... Can<sq>t access it from germany <colon>D</p>", 
                "question": "Watch me live code a (small) search engine in 5 hours (at 20<colon>00 UTC)"
            }, 
            "id": "cn6mrm8"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for helping people learn how to do this, brother. I<sq>m grateful, and will use these new powers to the benefit of all, heh heh. But seriously, you rock. I<sq>m all about freely sharing information for the sake of progress, not profit, and I appreciate that you share the sentiment. </p>", 
                "question": "Watch me live code a (small) search engine in 5 hours (at 20<colon>00 UTC)"
            }, 
            "id": "cn6pza4"
        }, 
        {
            "body": {
                "answer": "<p>Will there be a vod of it? I<sq>ll be busy during that time frame. <colon>/</p>", 
                "question": "Watch me live code a (small) search engine in 5 hours (at 20<colon>00 UTC)"
            }, 
            "id": "cn6numb"
        }, 
        {
            "body": {
                "answer": "<p>I will watch you.</p>", 
                "question": "Watch me live code a (small) search engine in 5 hours (at 20<colon>00 UTC)"
            }, 
            "id": "cn6qwv5"
        }, 
        {
            "body": {
                "answer": "<p>I love things like this from people who claim that they aren<sq>t shit hot at programming but can still build something really useful.  As a person who feels like a scrub at programming, it<sq>s very inspiring.</p>", 
                "question": "[Python] By popular demand<colon> How I wrote my first web scraper"
            }, 
            "id": "cmzjf4q"
        }, 
        {
            "body": {
                "answer": "<p>Your grammar is not bad.</p>", 
                "question": "[Python] By popular demand<colon> How I wrote my first web scraper"
            }, 
            "id": "cmzim5c"
        }, 
        {
            "body": {
                "answer": "<p>Awesome post. I barely skimmed thru it but I will definitely look at the whole thing later. I had learned some of the basics of python, but this data manipulation/mining projects have really intrigued my interest in it. Thanks for sharing. </p>", 
                "question": "[Python] By popular demand<colon> How I wrote my first web scraper"
            }, 
            "id": "cmz8ks3"
        }, 
        {
            "body": {
                "answer": "<p>interesting. I have a web scraping project idea so I will save this for later use. I<sq>m trying to make mine in php, but eventually I would want to know how to do it in Python(seems like the popular choice around these parts). <br><br>thanks for the thoughtful post!<br><br>and your English is very good!!</p>", 
                "question": "[Python] By popular demand<colon> How I wrote my first web scraper"
            }, 
            "id": "cmz9jvs"
        }, 
        {
            "body": {
                "answer": "<p>[Coursera.](https<colon>//www.coursera.org/)</p>", 
                "question": "Hey guys Harvard and MIT have teamed up to offer a few FREE intro computer science courses."
            }, 
            "id": "c615bzf"
        }, 
        {
            "body": {
                "answer": "<p>to anyone interested, the course material for the [Harvard cs50](http<colon>//cs50.tv/) and the [MIT 6.00](http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/) courses are both available online</p>", 
                "question": "Hey guys Harvard and MIT have teamed up to offer a few FREE intro computer science courses."
            }, 
            "id": "c61fqjl"
        }, 
        {
            "body": {
                "answer": "<p>Looks very interesting; I signed up. It<sq>s a shame it doesn<sq>t start for a while though. <colon>(</p>", 
                "question": "Hey guys Harvard and MIT have teamed up to offer a few FREE intro computer science courses."
            }, 
            "id": "c6156n4"
        }, 
        {
            "body": {
                "answer": "<p>Signed up for both. Thanks for the links.</p>", 
                "question": "Hey guys Harvard and MIT have teamed up to offer a few FREE intro computer science courses."
            }, 
            "id": "c615eam"
        }, 
        {
            "body": {
                "answer": "<p>> My code is always terrible compared to everyone else<sq>s<br><br>I had the same problems you are having and I was able to overcome it with a simple solution<colon> I just went out and bought a sketchbook and some colored pens.<br><br>I think you should sit down before writing any code and do some basic planning. For the most part you don<sq>t need to get down into pseudocode level, but it should be detailed enough to see obvious design flaws.<br><br>There are no hard rules for how you document your problems and solutions when planning out your program. You *can* use UML, but I would just keep this a 1<colon>1 mapping of what<sq>s in your mind so you don<sq>t get bogged down in details. Save the standards for official documentation.<br><br>Here are the steps that I would take when attempting to solve an example problem. Write down the following in the sketchbook<colon><br><br>* The end goal of what you are trying to accomplish for a specific problem. Breadth of the goal doesn<sq>t matter at this point. This can just a simple statement like <dq>I want to find all enemies within X units from the player<dq>.<br>* Your first idea on how to solve the problem. Like the above, a statement can suffice (and is usually easier to work with)<colon> <dq>Iterate through all enemies and measure the distance to the player<dq><br>* List out the minimum pieces of information you will need in order to implement your solution. This is the part where we are getting closer to an API. Things we need<colon> <dq>Enemy positions<dq>, <dq>Player position<dq>, <dq>Distance from enemy to player<dq>.<br>* Make sure the information we listed out is generalized<colon> <dq>Distance from enemy to player<dq> can be changed to <dq>Distance from point A to point B<dq>. (Depending on our overall architecture, we can also generalize player and enemy positions to just <dq>Entity position<dq>).<br>* Now that we know what information we need to implement our solution, we can write down what functions we need and how to call them. **This is the critical step**<colon> it will reveal whether your overall design is correct! This is highly specific to how your engine is implemented, but here are some toy examples<colon> distance(pointA, pointB), get_player(), get_all_enemies(), get_position(entity).<br><br>If you go through these steps then you should be able to more easily spot problems with your idea. Since you aren<sq>t being bogged down by the finer details (like memory, syntax, pointer arithmetic, etc), you will be able to get a bird<sq>s-eye view of your implementation and be able to more easily determine if it will actually *work*.<br><br>Also, don<sq>t limit yourself to just writing down words. I specifically got a sketchbook so I could get down and dirty if needed and draw out anything from individual memory addresses to a graph of an entire system.<br><br>> Maybe take a break? Maybe learn a new programming language?<br><br>This actually isn<sq>t a bad idea. Game engines are one of the most complicated things to make. You have<colon> audio, graphics, physics, networking, input, and scripting that all needs to run in real time. Any one of those is complicated enough on its own, but a game engine requires ALL of it be mashed together with optimization hacks mandatory. <br><br>> maybe text editors, other applications like that. Again, same problem, how the heck am I supposed to even learn how to do that?! <br><br>Follow the steps above. You have already tried to create a text editor. Let<sq>s break it down<colon><br><br>* Edit and view text -> text needs to be drawn on screen<br>* Be able to position a cursor in any arbitrary position on the screen<br>* Cursor position, screen buffer<br>* Above looks good<br>* get_cursor(), set_cursor(row, col), draw_cursor(row, col), draw_screen(screen_buf)<br><br>To implement draw_screen(screen_buf) we need to go through all the steps again<colon><br><br>* View text<br>* Be able to refresh the screen when text is updated<br>* Screen buffer, update event<br>* Above looks good<br>* get_screen_buffer(), draw_screen(screen_buf), event_loop()<br><br>I<sq>m sure you see where this is going. Don<sq>t be afraid to draw out a diagram with arrows pointing everywhere. This is how to get rid of the spaghetti before you commit yourself to spending hours coding. <br><br>If you don<sq>t expose yourself to different types of programs then you won<sq>t learn how to implement them. I know this post is long but I hope it helps out a bit. Good luck!<br></p>", 
                "question": "How do I really *really* get better at programming? (LONG IN-DEPTH POST)"
            }, 
            "id": "dcg7cw7"
        }, 
        {
            "body": {
                "answer": "<p>It sounds like your biggest issues are not using c++ how its meant to be used, and bad project management. Never copy and paste, especially when you don<sq>t understand what you are pasting does. You<sq>ll never learn by doing that. Maybe sharing some of your code with other experienced programmers can help you? They can give you tips on what you are doing wrong and how you should do it.</p>", 
                "question": "How do I really *really* get better at programming? (LONG IN-DEPTH POST)"
            }, 
            "id": "dcfw8d2"
        }, 
        {
            "body": {
                "answer": "<p>> I cannot, or at least almost never, understand 97<percent> of anyone else<sq>s code, even examples in my most fluent languages.<br><br>This indicates to me you don<sq>t actually have a good understand the languages you<sq>re using.<br><br>When you come across code you don<sq>t understand, you have to take the time to figure out exactly what that code is doing, otherwise you will not progress.<br><br>That<sq>s exactly how you get better at programming, by continually learning more about your programming language of choice.<br><br>> I treat C++ mostly as C with classes avoiding stl for various reasons<br><br>This is why you are finding it so hard to read other peoples C++ code.<br><br>Modern C++ code is **all STL based** so in your case, without STL you<sq>re not actually programming what most would consider C++.<br></p>", 
                "question": "How do I really *really* get better at programming? (LONG IN-DEPTH POST)"
            }, 
            "id": "dcgahid"
        }, 
        {
            "body": {
                "answer": "<p>Two things completely changed my relationship with programming. I hope this helps for you<colon> <br><br>Read Structure and Interpretation of Computer Programs. This is a book about complexity. Use it to help you think about types of abstraction and how to implement them in your code. This book blew my mind and made me completely rethink my process, goals and even relationship with code. Right now you<sq>re focused on code but after this book you<sq>ll be trying to write code that reads, manipulates, and  writes code. As well as abstracting every little concept out that you can. The tips and tricks that you learn in here are the same the library/language builders use. It also makes coding way more fun.<br><br>The other direction you can go is to formally study algorithms, data structures and patterns. For instance try to implement a suffix tree and then look at someone else<sq>s code and try to revise your version until you get it perfect. Do this in such a way that you are looking at the data, looking at memory, looking at speed and trying to optimise for one or more of them. Look at hashmaps and treemaps. When would you use one and when would you use the other? Which is more efficient overall? Re-implement the standard library<sq>s heap  for integers. Your version will be faster, but why? I did this at University with a very strong teacher, so my syllabus was fixed, but if you want more ideas along this path don<sq>t hesitate to ask.<br><br>Obviously you are provided with proper implementations of all of these structures, algorithms and so on but it isn<sq>t until you start looking under the hood that you begin to grow. You could say a similar thing about the concepts in Structures, why bother learning them? Knowing about these ideas and practising them will make you grow. There are definitely other paths which people will recommend to you and I<sq>m sure they will all lead you forward too, however this is what worked for me.</p>", 
                "question": "How do I really *really* get better at programming? (LONG IN-DEPTH POST)"
            }, 
            "id": "dcgbae6"
        }, 
        {
            "body": {
                "answer": "<p>Advice<colon> don<sq>t go full throttle 60 minutes a day for 5 days. You risk burning out hard in a few weeks. Start slow, and plan as many details as possible beforehand. Take 50 Post-Its, put them on your bedroom wall or somewhere, and take one down every day you go through Free Code Camp. Also, if you<sq>re serious about learning to code, don<sq>t wait until New Year<sq>s. Start now.</p>", 
                "question": "Are you serious about learning to Program?"
            }, 
            "id": "cy4yfq9"
        }, 
        {
            "body": {
                "answer": "<p>Your first assignment<colon> make a website where you can all communicate at <colon>p</p>", 
                "question": "Are you serious about learning to Program?"
            }, 
            "id": "cy4xm9p"
        }, 
        {
            "body": {
                "answer": "<p>What about an IRC channel where you can chat in real time?  Some people might not be comfortable sharing their FB with everyone.</p>", 
                "question": "Are you serious about learning to Program?"
            }, 
            "id": "cy51ccd"
        }, 
        {
            "body": {
                "answer": "<p>How about a Discord group?</p>", 
                "question": "Are you serious about learning to Program?"
            }, 
            "id": "cy4w629"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a real fan of [this guy](http<colon>//cube-drone.com/comics/c/version-sacrifice)<sq>s programming comics and videos and such. <br><br><br><br>^^^i ^^^am ^^^this ^^^guy</p>", 
                "question": "What are some developer blogs that are worth following?"
            }, 
            "id": "ctqd79i"
        }, 
        {
            "body": {
                "answer": "<p>Some I<sq>ve followed on and off<colon><br><br>http<colon>//blog.codinghorror.com/<br><br>http<colon>//www.joelonsoftware.com/<br><br>http<colon>//thedailywtf.com/</p>", 
                "question": "What are some developer blogs that are worth following?"
            }, 
            "id": "ctq86pv"
        }, 
        {
            "body": {
                "answer": "<p>The Old New Thing<colon>  http<colon>//blogs.msdn.com/b/oldnewthing/<br></p>", 
                "question": "What are some developer blogs that are worth following?"
            }, 
            "id": "ctqcr3j"
        }, 
        {
            "body": {
                "answer": "<p>Big fan of Scott Hansleman<sq>s, [hanselman.com](http<colon>//www.hanselman.com/).</p>", 
                "question": "What are some developer blogs that are worth following?"
            }, 
            "id": "ctqdgax"
        }, 
        {
            "body": {
                "answer": "<p>for the lazy https<colon>//codecombat.com/</p>", 
                "question": "[CodeCombat] Really enjoyable game/programming tutorial that is free."
            }, 
            "id": "d3c5abm"
        }, 
        {
            "body": {
                "answer": "<p>As fun as this was I didn<sq>t know how to really write any code after I finished it. Good for syntax but you could learn that way faster than playing 70 levels of this game.</p>", 
                "question": "[CodeCombat] Really enjoyable game/programming tutorial that is free."
            }, 
            "id": "d3bwsoo"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s not entirely free. I believe the first 30-40 excerices are free, but that<sq>s about it.</p>", 
                "question": "[CodeCombat] Really enjoyable game/programming tutorial that is free."
            }, 
            "id": "d3bugp3"
        }, 
        {
            "body": {
                "answer": "<p>Played through all levels that time. Have to check out the new ones. It was my start into JS. It<sq>s really awesome addicting and fun. Which is in the beginning with a high evidence(f.e mastery, the talent lie) most important to longtime development in a skill.<br><br>Needless to say the 10 bucks are one of the 10 best spent bucks in your life</p>", 
                "question": "[CodeCombat] Really enjoyable game/programming tutorial that is free."
            }, 
            "id": "d3bqqw3"
        }, 
        {
            "body": {
                "answer": "<p>I would like this. But also I would like to put a few recommendations down.<br><br>1. Mix up the projects and implementations. I basically don<sq>t want to see how it works one way, I would like to see this done in different formats, projects, syntax, etc.<br><br>2. I personally like the videos short. Basically take the first few minutes to discuss the topic. Spend another couple showing it in code. And then another couple simplifying it (ELI5).<br><br>3. Interact with your viewers. Perhaps create a website for your series and allow us to post. Or take recommendations for things to cover.<br><br>4. Please go <dq>deep<dq>. I look at most tutorials now, mainly video ones, and a large majority of them stop when things get too <dq>tough<dq>.<br><br>5. Don<sq>t be shy to over explain. And also don<sq>t be too over confident that your user base knows what you<sq>re talking about.<br><br><br>Thanks for listening to my rant. I look forward to seeing your stuff.</p>", 
                "question": "Would anyone be interested if I made a full-fledged Python video tutorial series and maybe some Django?"
            }, 
            "id": "cr766fc"
        }, 
        {
            "body": {
                "answer": "<p>Please, Please, Please.<br>We would be very grateful for your time and effort.<br><br></p>", 
                "question": "Would anyone be interested if I made a full-fledged Python video tutorial series and maybe some Django?"
            }, 
            "id": "cr7annd"
        }, 
        {
            "body": {
                "answer": "<p>I would love this. I have been thinking about learning Python for a few weeks now. Can you start from the very beginning, as in, downloading the software, etc?</p>", 
                "question": "Would anyone be interested if I made a full-fledged Python video tutorial series and maybe some Django?"
            }, 
            "id": "cr7de79"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m definitely interested in learning python, shoot away.</p>", 
                "question": "Would anyone be interested if I made a full-fledged Python video tutorial series and maybe some Django?"
            }, 
            "id": "cr7bhmh"
        }, 
        {
            "body": {
                "answer": "<p>[By his own word](http<colon>//notch.tumblr.com/post/15782716917/coding-skill-and-the-decline-of-stagnation) Notch have may not be the best programming role model. Just so you<sq>re all aware. Still a great ideas guy of course. </p>", 
                "question": "Watch Notch(creator of minecraft) program a game in 48 hours"
            }, 
            "id": "ce1kukv"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m sorry of this sounds noobish, but what programming language is he using, or is he using multiple?</p>", 
                "question": "Watch Notch(creator of minecraft) program a game in 48 hours"
            }, 
            "id": "ce1kdyw"
        }, 
        {
            "body": {
                "answer": "<p>shit just got real, he scrapped his game mid - progress and started from scratch... awesome</p>", 
                "question": "Watch Notch(creator of minecraft) program a game in 48 hours"
            }, 
            "id": "ce1k21r"
        }, 
        {
            "body": {
                "answer": "<p>Is it bad that I feel dumb and have no idea what the code does? It looks like magic to me.</p>", 
                "question": "Watch Notch(creator of minecraft) program a game in 48 hours"
            }, 
            "id": "ce1jmgj"
        }, 
        {
            "body": {
                "answer": "<p>Web development is one big frustration. In a sentence<colon> modern web development is making dynamic stateful applications over a static stateless protocol for text. HTTP was never intended to provide dynamic content, and it was never meant to maintain state between requests. It wasn<sq>t designed to do either. Javascript is a hack. Cookies are a hack. Everything but static HTML pages are pretty much a hack. Furthermore, if backend web development wasn<sq>t a headache already, frontend web development is 10 times worse. HTML, CSS, and Javascript were all poorly designed and their implementations vary across different browsers, so whenever you make a change to anything on your site it may seem to work on one browser but then it may break something in another. Finding the right balance may be impossible, and then you<sq>re stuck writing conditional code like, <dq>If it<sq>s IE6 then do this, if it<sq>s IE7 then do this, etc<dq>. There are soooo many edge cases and gotchas. Frontend web development is dirty work, and it<sq>s only a little more dignified than nose picking.</p>", 
                "question": "Professional progammers<colon> What is the worst aspect of the programming job? What are some things newbies would not expect?"
            }, 
            "id": "cmct54x"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s probably pretty much what you<sq>d expect. Nothing crazy that happens that you don<sq>t hear about. Sometimes there<sq>s crunch times and you have to work late to meet a deadline.<br><br>No one understands why something takes so long.<br><br>Someone ALWAYS finds a way to use your program in a way you didn<sq>t think they would.<br><br>Some companies, the testers are really out to get you. They get credited for the number of bugs they find, and you get penalized for each bug they find. This can be really frustrating, because it begins to feel like a war and becomes less about working together and just producing good software in the end.</p>", 
                "question": "Professional progammers<colon> What is the worst aspect of the programming job? What are some things newbies would not expect?"
            }, 
            "id": "cmcrphy"
        }, 
        {
            "body": {
                "answer": "<p>The amount of time that will be spent on having nothing to do with writing code </p>", 
                "question": "Professional progammers<colon> What is the worst aspect of the programming job? What are some things newbies would not expect?"
            }, 
            "id": "cmctkce"
        }, 
        {
            "body": {
                "answer": "<p>Dealing with other people<sq>s code. You might not expect it, but almost everybody codes worse than you do. Wading through the mess other people made can be a constant <dq>WTF why would you make this sadistic code?<dq> experience. It gets worse when maintaining legacy code.<br><br>I<sq>m just joking ;). But in all seriousness, get used to the fact that other people do things different than you do. If you put 3 programmers on a project, you<sq>ll have<colon><br><br> * three different solutions<br><br> * three different things will be completely obvious and don<sq>t need any comments or documentation<br><br> * three different priorities of where to begin.</p>", 
                "question": "Professional progammers<colon> What is the worst aspect of the programming job? What are some things newbies would not expect?"
            }, 
            "id": "cmcuxp6"
        }, 
        {
            "body": {
                "answer": "<p>While the site looks nice, it isn<sq>t your work. What exactly are you asking to have looked at? Currently, from what I can tell you simply replaced the content in the HTML tags and put it up on a github.io page. Looking through the source, the IDs are still the same, and no extra styling has been done(text could be justified and not having sentences split into separate paragraphs), and there is still code for the maps left in the JS that came with the template. <br><br>I think it is great that you are wanting to get into Web Dev, however, build something of your own and ask to have it judged instead of copying a template from the internet, filling in the blanks and calling it your work. It takes time and effort to build a foundation and isn<sq>t something that will happen overnight. Anyone here would be happy to look into your personal projects that you want looked at and provide constructive criticism regarding your actual work. <br><br>Hopefully the backlash that seems to have happened on this page doesn<sq>t deter you and instead gives you the resolve to spend time learning solid foundations and then being able to create your own pages without using a theme. <br><br>Best of luck!</p>", 
                "question": "4 Days ago i asked here how to make a personal page. This is the result and how i did it."
            }, 
            "id": "cjoja12"
        }, 
        {
            "body": {
                "answer": "<p>Awesome site! Check some of your spelling and grammar on some of the pages though <colon>)</p>", 
                "question": "4 Days ago i asked here how to make a personal page. This is the result and how i did it."
            }, 
            "id": "cjo53wv"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re a <dq>front end developer<dq>?<br><br>I mean, you really just created a website saying that you are a developer that you were effectively just told how to do? This is just a straight up lie.<br><br>Your opening view is just terrible. Going to your site, the first thing I see is a bit of text saying your name with 0 other information. I mean, <dq>Welcome<dq> web pages back in the <sq>90s were bad, but this is worse. To be a front end developer and to include what is effectively a <dq>welcome page<dq> has instantly removed you from anyones running for a position.<br><br>The links don<sq>t actually work. So that<sq>s a problem.<br><br>You admitted to not having any single bit of markup that you actually wrote yourself, but want to be hired to do this. Hate to break it to ya, but that is not how it works.<br><br>There<sq>s just so much wrong here that it<sq>s hard to figure out where. The blatant lie may be the worst.</p>", 
                "question": "4 Days ago i asked here how to make a personal page. This is the result and how i did it."
            }, 
            "id": "cjojdst"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re a front end developer that had to use bootstrap and code academy?????</p>", 
                "question": "4 Days ago i asked here how to make a personal page. This is the result and how i did it."
            }, 
            "id": "cjodqaa"
        }, 
        {
            "body": {
                "answer": "<p>This is pretty cool! Thanks for putting time into making this. </p>", 
                "question": "Tutorial on creating a platformer in Python"
            }, 
            "id": "cg2gudf"
        }, 
        {
            "body": {
                "answer": "<p>Nice. I<sq>m taking the edx MIT 6.00.1x right now (Intro to programming with Python). I<sq>ll check out your tutorials when I<sq>m done. I would definitely like to know more about making games in python. </p>", 
                "question": "Tutorial on creating a platformer in Python"
            }, 
            "id": "cg2kaut"
        }, 
        {
            "body": {
                "answer": "<p>Thanks! Learning C# right now but this should come in handy.</p>", 
                "question": "Tutorial on creating a platformer in Python"
            }, 
            "id": "cg2kggi"
        }, 
        {
            "body": {
                "answer": "<p>Great work, thanks for doing this! </p>", 
                "question": "Tutorial on creating a platformer in Python"
            }, 
            "id": "cg2hpik"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re reading this then it means you<sq>re trying to learn on your own, which is awesome. Don<sq>t be afraid to not know something, everyone starts from nothing. Be proud of anything you make. </p>", 
                "question": "New? READ ME FIRST!"
            }, 
            "id": "dfg2ldl"
        }, 
        {
            "body": {
                "answer": "<p>I thought this sub is more about dealing with your existential crises, telling your life stories, and giving motivational speeches</p>", 
                "question": "New? READ ME FIRST!"
            }, 
            "id": "dfgibav"
        }, 
        {
            "body": {
                "answer": "<p>How about if there<sq>s input or output, give an example of what you think should be happening VS what is happening.<br><br>I suppose that can be part of the error message if applicable. </p>", 
                "question": "New? READ ME FIRST!"
            }, 
            "id": "dfg3nuo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not sure exactly how reddit works but if it has post templates then a part of this would definitely be useful as a post template</p>", 
                "question": "New? READ ME FIRST!"
            }, 
            "id": "dfgbyo2"
        }, 
        {
            "body": {
                "answer": "<p>1. Unconscious incompetence<colon> you dont know how much you dont know<br><br>2. Conscious incompetence<colon> you know how far behind the curve you are<br><br>3. Conscious competence<colon> you know how much you know and exactly where you stand<br><br>4. Unconscious competence<colon> its now 2nd nature, you forget that other dont have the same abilities</p>", 
                "question": "What is considered beginner intermediate & expert"
            }, 
            "id": "d9fulf0"
        }, 
        {
            "body": {
                "answer": "<p>Try [this article](http<colon>//sijinjoseph.com/programmer-competency-matrix/). Don<sq>t take it too seriously, but it seems like a good first-order approximation to me.</p>", 
                "question": "What is considered beginner intermediate & expert"
            }, 
            "id": "d9fmi7n"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s two big things, raw knowledge/ability, and a second implementation or understanding of your ability.<br><br>Raw ability is really just your ability to regurgitate and remember things, or the ability to know how to access the information when you need it. How do I create an overload for this constructor? if I use the code block<colon><br><br>    catch(Exception e){}<br>what happens to the exception that was initially thrown, and is it the same as <sq>e<sq>?<br><br>Now, that<sq>s all fine and dandy, but your actually skill is much more than just your raw knowledge and your ability to recall information. It<sq>s also about how you apply information, knowing what information that you know and what information that you don<sq>t know, understanding what questions to ask, and understanding how to simplify a task into its basic components and tackle it one at a time.<br><br>This is how I break it down based on my experience. I consider myself an intermediate programmer at best, but even with a few years experience, and now teaching beginners, I feel like a beginner sometimes.<br><br>**Beginner**<br><br>A beginner likely doesn<sq>t know what they don<sq>t know. They have limited raw knowledge, and can apply it to basic tasks, but would struggle to implement things because they<colon> <br><br>* Don<sq>t know what question to ask<br><br>* Don<sq>t know where to find the answer to that question<br><br>* Don<sq>t know how to break down a big question into smaller questions they can answer one at a time<br><br>* Have no idea of what could go wrong, and generally don<sq>t plan around those mistakes<br><br>* May not know how to solve their mistakes<br><br>* Know they have to learn more and are often under-confident in what they can achieve.<br><br>**Intermediate**<br><br>Intermediate programmer knows most what they know, but may not realize they have the knowledge to approach a task. Basically, they may have all the pieces to do the task and not know how to combine those pieces together. They should know some of what they don<sq>t know. If you ask them to do something, they can generally tell you if it<sq>s something they can do. If it<sq>s something they can<sq>t do, they may struggle to tell you if they could learn it quickly enough and may struggle finding the answers, but generally they should <colon><br><br>* Know what questions to ask<br><br>* Know how to break a task down into simple enough steps to approach the task<br><br>* May struggle with where to find the answers at times and rely on someone else<sq>s experience<br><br>* Know where most common mistakes happen and can fix those mistakes quickly<br><br>* Have some specialized knowledge in an area or two of a language/framework/practice/etc.<br><br>* Tend to be a little overconfident in what they can do, and will spend hours trying to implement a solution that is close, but is missing a piece here and there because of not being able to put all their knowledge into a cohesive solution.<br><br>* May be reluctant to learn more because they feel overwhelmed or overconfident in their ability<br><br>**Expert**<br><br>I know maybe two people that I would consider experts, but they wouldn<sq>t consider themselves to be experts. These are people that know what they know, and they know it very well, they know what they don<sq>t know. They can also put pieces of knowledge together to <sq>know<sq> a more sophisticated process. An <sq>expert<sq> can tell you immediately if they can<sq>t solve a problem, and can tell you how they can learn to solve it in a given time frame. They<colon><br><br><br>* Know where to ask questions and find answers because they..<br><br>* Know how to ask questions, and break down complicated questions into their small and approachable parts<br><br>* Have enough raw knowledge to solve most any task at hand, even if it<sq>s not always the <sq>best<sq> solution right away, they will find a good solution as they approach the task<br><br>* Still make common mistakes, we all make a typo here and there, and can identify and fix them quickly<br><br>* Know uncommon mistakes and both fixes and work arounds to those problems<br><br>* Have specialized knowledge in many areas of a language through their experience<br><br>* Most importantly, they know they still have a lot to learn and are open to learning more.<br><br><br>If you<sq>re interested in knowing your level of <sq>raw<sq> knowledge of a language, and you have access to Pluralsight (free for a month  I think, at least for students), their new paths tool will test your raw knowledge and suggest courses to help you improve. I was bumped from mid-proficient to just barely <sq>expert<sq> because of this, but I am by no means an expert simply because this test said I was.</p>", 
                "question": "What is considered beginner intermediate & expert"
            }, 
            "id": "d9g1xpj"
        }, 
        {
            "body": {
                "answer": "<p>1. Simple and wrong<br>2. Complicated and wrong<br>3. Complicated and right<br>4. Simple and right</p>", 
                "question": "What is considered beginner intermediate & expert"
            }, 
            "id": "d9g3llj"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s called a <dq>Ke$ha character,<dq> where of course the third letter is pronounced <dq>Ke$ha character,<dq> where of course the third letter is pronounced <dq>Ke$ha character,<dq> and so on until you exceed the maximum recursion depth.</p>", 
                "question": "Pronouncing $ in code"
            }, 
            "id": "ctv1xiw"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t forget splat *      <br><br>[ASCII pronunciation rules for programmers](http<colon>//blog.codinghorror.com/ascii-pronunciation-rules-for-programmers/)</p>", 
                "question": "Pronouncing $ in code"
            }, 
            "id": "ctuv9sc"
        }, 
        {
            "body": {
                "answer": "<p>$ = money  <br>$$ = mo<sq>money</p>", 
                "question": "Pronouncing $ in code"
            }, 
            "id": "ctv1m3w"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve never heard anything other than <dq>dollar<dq> myself, but I don<sq>t live in an English-speaking country so my experience is skewed.<br></p>", 
                "question": "Pronouncing $ in code"
            }, 
            "id": "ctuvrcf"
        }, 
        {
            "body": {
                "answer": "<p>Ah, Django. The #D is silent. </p>", 
                "question": "I wrote a book teaching beginner Python/Django web app development (Hello Web App)"
            }, 
            "id": "cq5von0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I wrote a book teaching beginner Python/Django web app development (Hello Web App)"
            }, 
            "id": "cq68uju"
        }, 
        {
            "body": {
                "answer": "<p>You should cross post this to /learnpython.<br><br>Good work!</p>", 
                "question": "I wrote a book teaching beginner Python/Django web app development (Hello Web App)"
            }, 
            "id": "cq60kgc"
        }, 
        {
            "body": {
                "answer": "<p>I love the idea of a <dq>collection of things,<dq> since I feel like one of the hardest parts of teaching programming is getting students invested in the idea of making a project for themselves. Your approach leaves a lot of room for the student<sq>s imagination. </p>", 
                "question": "I wrote a book teaching beginner Python/Django web app development (Hello Web App)"
            }, 
            "id": "cq5onog"
        }, 
        {
            "body": {
                "answer": "<p>I was less job-ready than i was job-desperate. I<sq>ve learned webdev as a necessity for ideas and projects I wanted to make, I never thought I<sq>d end up working professionally or making it into a career. It was just a creative outlet. <br><br>Then I quit my job (non-developing role, although I learned VBA for Excel in it), and I thought I could step into another job of equal pay. Nope. A year later and I<sq>m desperate. Out of desperation I created a simple portfolio and modified my LinkedIn to make it look like I<sq>m a developer. I<sq>m in my second week now as a full stack software developer. <br><br>The hilarious thing? I didn<sq>t at all consider myself job ready, I still don<sq>t even consider myself a developer really. I thought I<sq>d be way out of my depth. But you have to remember that most people have trouble finding the task manager on windows. What we do might as well be magic to them, and it<sq>s worth paying us for that skill and intelligence. I<sq>m in my second week and I<sq>m already looking to the future for more advanced/prestigious roles. <br><br>My portfolio that landed me the job<colon> http<colon>//chippd.github.io <br><br>And I<sq>ve another side project almost done that I<sq>ll be adding soon, should beef it up a little more<br><br>But I bet I could be earning 100k in a few years and I still won<sq>t consider myself job ready. It<sq>s imposter syndrome and it seems rampant amongst us devs. Just seems to come with the territory apparently. </p>", 
                "question": "Self taught front end devs... When did you know that you were <dq>Job ready<dq>?"
            }, 
            "id": "d9aj925"
        }, 
        {
            "body": {
                "answer": "<p>First of all, I<sq>m no expert in front-end web development. This is just from what I<sq>ve witnessed.<br><br>That being said, I think it<sq>s important for you to define <dq>job-ready<dq>. My friend and I both took the Front-End Web Development Nanodegree at Udacity. The courses trained us in HTML, CSS, and some JS. They taught us just enough to understand documentation and be self-proficient in learning more on our own. The Nanodegree itself took us less than two months to complete.<br><br>At the end of the Nanodegree, my friend determined that he was <dq>job-ready<dq> and started applying. As Vancouver is a city of a billion start-ups right now, he got a job in less than 6 months with only the projects he did in the Nanodegree as part of his portfolio. <br><br>I, on the other hand, decided that I wasn<sq>t job-ready. I wanted to pick up PHP, Node.js, and several other frameworks/languages before I put myself on the market. <br><br>I think it<sq>s important to determine what job you want. My friend wanted to start working right away so he is now a Junior Front-End Web Developer. I do want to enter the market with more experience and expertise, however, so I<sq>m just doing freelance work for the time being while I develop more skills. I hope this helps.</p>", 
                "question": "Self taught front end devs... When did you know that you were <dq>Job ready<dq>?"
            }, 
            "id": "d9ab85k"
        }, 
        {
            "body": {
                "answer": "<p>Professional dev here (self taught)... I still don<sq>t know if I<sq>m ready.</p>", 
                "question": "Self taught front end devs... When did you know that you were <dq>Job ready<dq>?"
            }, 
            "id": "d9ajjwe"
        }, 
        {
            "body": {
                "answer": "<p>About 2 years after I started. </p>", 
                "question": "Self taught front end devs... When did you know that you were <dq>Job ready<dq>?"
            }, 
            "id": "d9a8umb"
        }, 
        {
            "body": {
                "answer": "<p>In this order<colon><br><br>1. Internships (on employers<sq> premises)<br><br>2. Paid Freelance Projects for clients (can be done from home with occasional meetings with clients)<br><br>3. Your own projects that you can publish on Sourceforce/Github/Web<br><br>4. [MOOCs]  (https<colon>//www.reddit.com/r/learnprogramming/comments/3n3tdz/heres_a_list_of_155_free_online_programmingcs/)</p>", 
                "question": "3rd Yr Comp Sci student - What should I be doing in my spare time to ensure the best job opportunities upon graduation?"
            }, 
            "id": "cvy0ntn"
        }, 
        {
            "body": {
                "answer": "<p>Network. Not programming related but knowing people helps!</p>", 
                "question": "3rd Yr Comp Sci student - What should I be doing in my spare time to ensure the best job opportunities upon graduation?"
            }, 
            "id": "cvy1538"
        }, 
        {
            "body": {
                "answer": "<p>I completely agree with what /u/sentdex typed, both points are crucial. Having hired many people in the past, those two points will make you stand out. <br><br>Go **today** to your department office and ask who to talk to about internships. There will probably be a few good ones left. I used to make my students do an assignment where they did that task the first or second class. And, whatever you do, don<sq>t just use those internship hours as a lark or break. Google how to benefit from internships or make the most of internships. We have had so many people waste those golden hours. Look at any you find<colon> not just for CS. Look again at what /u/LambentLight typed. Passion about applying your skills to help a company meet a goal will make you stand out. This is completely different than passion about how much one likes to work with computers/programming. Closet geeks are the later. Good employees are the former.<br><br>A portfolio is priceless. We see huge stacks of paper when we are going through a hiring task. For me, the number one thing that makes a cover letter and resume stand out from all the noise is a line announcing <dq>I have a portfolio available<dq>. This phrase will get you in the <sq>interesting<sq> stack, <dq>extensive portfolio available<dq>. From today until you graduate, start making things and collect them. <br><br>Side point, since this is for programming, and this task is to show others who know the topic what you can do, your documentation and comments are very, very important! Make certain to learn how to do this effectively and efficiently. <br><br>Next, almost every big campus has a Toastmasters club, if not, almost every large city or town around the world has one. Go to a number of meetings. Then get brave and join for a while. I sometimes hate hiring young console jockeys because they have focused too much on their skill and forgot how to speak professionally. Toastmasters is all about leadership and being able to speak clearly and confidently to people. Even programmers have to meet and do team work and present their work or projects<colon> among themselves, with clients, with vendors, with people in completely different specialties. Look at [this good overview](http<colon>//sixminutes.dlugan.com/toastmasters-speech-0-competent-communicator/) of one of the beginner workbooks where you go through 10 types of speeches.<br><br>Lastly, if your writing is an issue, take a Business English class your last semester so your writing will be crisp and your cover letters and correspondence will be top notch. Business English is not Liberal Arts English. You will prolly want to do this at a community college or online or during the summer if you have a full load Fall and Spring. When going through a BIG stack of applications, I pull the ones that have the crucial phrases for the first selection. Then those with internships, appropriate extracurricular accomplishments or experience are added.  Then, from those that are selected, I go through and pretty much 86 anything that has bad writing. So many applicants forget that good writing is essential for a business environment.<br><br>That<sq>s what was done to me. That<sq>s what my favorite bosses did. That<sq>s what the leadership seminars taught me. That<sq>s what worked for me. Your mileage may vary.  <br><br>Shucks. One more thing. Go to your department and find out where you talk to the people that can help you get placed after you graduate. Find out where the graduates from your school are ending up. You will find trends there. Figure out what the trends need; learn about and play around these needs<colon> SalesForce, SAP, Python, whatever, et al.<br><br>*Wow. Just wrote another book. I hate when I type so much. More coffee stat.* </p>", 
                "question": "3rd Yr Comp Sci student - What should I be doing in my spare time to ensure the best job opportunities upon graduation?"
            }, 
            "id": "cvy3s5p"
        }, 
        {
            "body": {
                "answer": "<p>I am really glad graduates in wait are thinking like this. Small heads up, saying you program in Java is like saying you wear pants. Learn something that makes you indispensable , off the top of my head<br><br>1.  off the the top of my head learn some weird and powerful language like haskell or Ocaml<br>2. Learn version control like Git or Mercurial<br>3. Be very proficient in a cool and powerful scripting language like Ruby or Python. { sure bash, lisp, and perl are okay too, but bash isn<sq>t really in the same league}<br>4. Have a working knowledge of something like LAMP, Rails or Django , even Android framework devs sometimes need to make stuff like internal websites</p>", 
                "question": "3rd Yr Comp Sci student - What should I be doing in my spare time to ensure the best job opportunities upon graduation?"
            }, 
            "id": "cvy17n4"
        }, 
        {
            "body": {
                "answer": "<p>TutorialsPoint is passable if all you want are syntax examples and a vague dumbed down version of the MSDN reference, but I wouldn<sq>t call it a good first stop.<br> <br>As a raw beginner, I would suggest learning Java before you learn C# - not because the language is better (it isn<sq>t) but because the learning materials are LIGHT YEARS ahead in terms of availability and quality. Once you are competent with Java you can pick up C# in less than a week.<br> <br>As for learning Java? [I would recommend this](http<colon>//www.bluej.org/). IDE is free, textbook is paid, if you really wanted to there are pirated versions out there. When it lands you a job you should really go back and pay for it though.</p>", 
                "question": "A *very* recommended guide to C# learners!"
            }, 
            "id": "ctfmqt8"
        }, 
        {
            "body": {
                "answer": "<p>And this is good<br><br>http<colon>//www.csharp-station.com/Tutorial/CSharp/SmartConsoleSetup.aspx</p>", 
                "question": "A *very* recommended guide to C# learners!"
            }, 
            "id": "ctfkpcz"
        }, 
        {
            "body": {
                "answer": "<p>Just a heads up, I found the best book to use when learning C# is the Yellow Book by Rob Miles, super easy to understand, lots of simple things to follow and covers a fair amount of the language.</p>", 
                "question": "A *very* recommended guide to C# learners!"
            }, 
            "id": "ctfohvc"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s quite good but the English is off quite often and that really puts me off a resource personally. </p>", 
                "question": "A *very* recommended guide to C# learners!"
            }, 
            "id": "ctfigvr"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say learn version control, ie git.<br> <br>It<sq>s the one thing that every professional environment is going to require you know inside and out, but that is often glossed over in school because you<sq>re usually doing your own course work, alone.</p>", 
                "question": "I have 6 months of free time.What should I be learning in that time so that after 6 months I can work as a freelancer part time?"
            }, 
            "id": "db9qc6d"
        }, 
        {
            "body": {
                "answer": "<p>Do you want to be a freelance app developer? Spend the next 6 months and make 2 apps. They could be simple puzzle games or whatever.<br><br>Want to be a freelance web developer? Spend the next 6 months and make 2 websites. These could be something you even do for free maybe your parents have a business and you can make their basic 5 page website. Or maybe you belong to a club or a guild in a game and you could make a website for that.<br><br>Having something out there that you can point someone too is huge.</p>", 
                "question": "I have 6 months of free time.What should I be learning in that time so that after 6 months I can work as a freelancer part time?"
            }, 
            "id": "dba2esy"
        }, 
        {
            "body": {
                "answer": "<p>Think about what you like the most. Jobs are plentiful, so you might as well enjoy the work.  <br><br>Do you like analyzing data? Learn SQL and R.  <br><br>Do you like mobile apps? Learn Java or Swift.  <br><br>Do you like web apps? Learn Javascript.  <br><br>Do you want to work on desktop apps? Learn Java or C#.  <br><br>Do you like games? Learn Unity.  <br><br>They all have their own ecosystem and are different rabbit holes. I chose the web apps one.</p>", 
                "question": "I have 6 months of free time.What should I be learning in that time so that after 6 months I can work as a freelancer part time?"
            }, 
            "id": "dba05d0"
        }, 
        {
            "body": {
                "answer": "<p>Earn money vs. live project. Those are, likely, contradictory in your circumstances. <br><br>From a school and business perspective, I<sq>d choose something that you could do easily, repeatedly, that fits some market. I wouldn<sq>t have that many spare brain cycles due to school. I<sq>m guessing any number of non-money opportunities would pop-up around school-related <dq>live projects<dq>. (I<sq>d hookup with people wanting to do a startup based on all those techs you<sq>re learning; no immediate money, but far more worthwhile.) <br><br>Now, to actually make money, do you live in the SF Bay area? No? Great. Read some articles about how 95<percent> of the population can barely do email on computers, and become a Squarespace consultant for small businesses. Don<sq>t plan to do any fancy extra code. Don<sq>t work for free, <dq>to learn<dq>. Start cranking out <sq>easy for you<sq> projects on a platform that will take a few hours, but will be hugely valuable to a certain market (thinking it took you weeks). Earn $ (not $$$$, but $ money to help with school, beer, fun, life). </p>", 
                "question": "I have 6 months of free time.What should I be learning in that time so that after 6 months I can work as a freelancer part time?"
            }, 
            "id": "dba7nl9"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a very comprehensive list of what an in-depth CS curriculum will cover<colon> http<colon>//matt.might.net/articles/what-cs-majors-should-know/<br><br>A lot of the material is probably going to be challenging for you to tackle right now, but it should give you a decent roadmap of what sorts of things you might want to work towards over the course of the next 5 to 6 years.<br><br>In particular, for you, I would suggest you **first start by just writing a lot of programs**. If you<sq>re interested in games, for example, try going out and making a bunch of games. Start with basic 2d ones (pong? space invaders?) and work your way up. If you<sq>re interested in mobile development, try making a mobile app, etc. The FAQ [links to some project ideas](https<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) if you need some inspiration.<br><br>Programming is the sort of thing that **you need to be constantly practicing** in order to get better, and working on progressively more challenging projects is the best way to become fluent with coding in general. In particular, learning computer science will be much easier if you<sq>re a fluent coder/don<sq>t need as much help with the actual mechanics of programming something new and solving problems.<br><br>Along the way, I would recommend studying **data structures and algorithms**, which is the stepping stone and foundation of computer science.<br><br>Here are some resources (some free, some not) on data structures and algorithms. I can<sq>t say I<sq>ve vetted them all very thoroughly, and some of them assume a decent amount of mathematical maturity and so might be a challenging read at present time. I<sq>ve ordered them very roughly in terms of accessibility (except for the Big-O cheatsheet, which is more of a standalone supplemental resource).<br><br>- http<colon>//interactivepython.org/runestone/static/pythonds/index.html<br>- https<colon>//www.amazon.com/dp/059651624X<br>- http<colon>//www3.cs.stonybrook.edu/~algorith/video-lectures/<br>- https<colon>//www.amazon.com/dp/1848000693<br>- https<colon>//www.amazon.com/Introduction-Algorithms-Thomas-H-Cormen/dp/0262033844<br>- http<colon>//bigocheatsheet.com/<br><br>**Just googling things is also pretty effective**. If there<sq>s a specific CS topic you<sq>d like to learn more about, googling that topic can often yield useful results. Like seriously, that<sq>s how I got started with programming and computer science. I didn<sq>t really take classes or read books so much as just work on a bunch of programs/spend a lot of time googling and reading when I encountered a new concept, and I learned a tremendous amount this way.<br><br>I would also encourage you to **pay attention to your math, science, and English classes in school**. Math and science are both very useful tools when you<sq>re trying to solve interesting problems, and computer science, to a certain degree, is an applied math degree. <br><br>Take machine learning, for example -- it<sq>s a field of study which involves teaching a computer to teach itself, and is used to power things like Google<sq>s search engine, self-driving cars, AIs, and so forth. If you<sq>re interested in working in this field, you<sq>d need a solid understanding of statistics, which in turn requires a solid understanding of math...<br><br>(I do want to also mention that the kind of math you do in computer science is unlikely to be directly related to the kind of math you<sq>re going to do now through high school -- in computer science, you learn things like writing proofs, logic, number theory, statistics, and so forth. Before college, most schools will focus on things like algebra, trig, geometry, and calculus. Those things are all very useful, don<sq>t get me wrong, but they do feel <dq>different<dq>.)<br><br>English is also useful in general -- being able to communicate effectively and persuade others is a very useful skill. Somewhat more pragmatically, people will, for better or for worse, often not take you as seriously or will discount what you have to say if you<sq>re not an effective writer, which isn<sq>t the greatest feeling in the world. <br><br>Also see [FAQ - How to improve](https<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_to_improve) for more general advice on becoming better at programming and computer science.<br></p>", 
                "question": "I am a kid and want to expand my knowledge on CS"
            }, 
            "id": "d6q2q9f"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t answer your question but as a 24 year old that<sq>s trying to get into CS now, you have no idea how badly I wish I could go back and start at your age. Keep at it and you<sq>ll be a total boss down the road!</p>", 
                "question": "I am a kid and want to expand my knowledge on CS"
            }, 
            "id": "d6q2xao"
        }, 
        {
            "body": {
                "answer": "<p>Very good advices have been given here, but let me remind you something<colon> if you want to work as a developer in a nice company, be surrounded by clever people, get promoted, and basically make the most out of your knowledge... Don<sq>t be a dick. <br><br>I know sometimes you may think superior to others in your class or in your group of friends. You have clear ideas when your friends don<sq>t. You are 3 years ahead in math compared to others. All that is good. But understand that<sq>s a privilege you have a not a defect of others. Learn to respect and appreciate others. <br><br>I started programming at 10 and I<sq>m now 26. I work in a nice company, have a respected position and I<sq>m happy. Most of it didn<sq>t came to me because I was a geek. It came to me because I learnt how to socialize and understand other people, share the things I know and learn from others you may consider has nothing to teach you. <br><br>Keep the good work. You are doing great, but remember success is a mix of different things. Do not forget the human part. </p>", 
                "question": "I am a kid and want to expand my knowledge on CS"
            }, 
            "id": "d6qek2u"
        }, 
        {
            "body": {
                "answer": "<p>Plenty of good advice is being given.<br><br>Also, remember to have fun in high school, make good grades, and get a scholarship(s) for a university you want to attend.  <br><br>You do not want to skip university, it is extremely fun and eye opening.  </p>", 
                "question": "I am a kid and want to expand my knowledge on CS"
            }, 
            "id": "d6q3kgr"
        }, 
        {
            "body": {
                "answer": "<p>In theory<colon><br><br>**Computer Science<colon>** <br><br>Focuses a bit more on theory and the core concepts behind making a computer _do_ something. The emphasis tends to be on understanding data structures, algorithms, programming languages, etc. Graphics, robotics, compiler design, video games, etc are all fields of study that might fall under <dq>computer science<dq>.<br><br>One interesting thing to note is that computer science doesn<sq>t necessarily have anything to do with _computers_, and in fact was a field of study before computers even really existed! Computer science, to a certain point, can be thought of as a degree in applied mathematics -- the emphasis is on _computation_, not _computers_. <br><br>**Software Engineering<colon>**<br><br>The focus is more on developing software in a professional environment. It<sq>ll typically combine a mixture of soft skills such as project management, talking to clients, and gathering/articulating requirements, and will also emphasize learning best practices in the industry such as architecting and testing software, effective build and deployment, etc.<br><br>The emphasis here is less on theory, but more on learning skills that<sq>ll help you build something robustly and effectively.<br><br>**Computer Engineering<colon>**<br><br>Computer engineering is similar to Computer Science, but is focused a bit more on hardware and low-level system details -- you can think of computer engineering as a mixture of electrical engineering and computer science. Things like operating systems, embedded devices, hardware and drivers, robotics, etc. are fields of study that might fall under <dq>computer engineering<dq>.<br><br>-----<br><br>In practice<colon><br><br>In practice, the differences between these three things will vary greatly from school to school and person to person. For example, in my university, the requirements and coursework for graduating with a computer science and computer engineering degree are almost identical, and so many people end up dual majoring in them. We also don<sq>t have a software engineering degree -- the expectation is that students learn about software engineering through their normal coursework + through internships.<br><br>On the other hand, other schools/other people place a huge distinction between the three (though I don<sq>t know enough about this to go into too much detail).<br><br>The boundary between the three of these things is always going to be a little hazy, so the exact difference and distinction isn<sq>t necessarily clear-cut. They<sq>re also not mutually exclusive -- you<sq>ll find that all three fields will have a fair amount of overlap, especially for any foundational material, and that having a firm grasp on all three disciplines will be very useful, no matter what you<sq>re doing.</p>", 
                "question": "ELI5<colon> Computer Science vs Software Engineering vs Computer Engineering"
            }, 
            "id": "cli0zlz"
        }, 
        {
            "body": {
                "answer": "<p>Computer Science<colon> studying how to compute  <br>Software Engineering<colon> designing and building computer software  <br>Computer Engineering<colon> designing and building computer hardware<br><br>Computer Engineering might be the most varied of the three, and overlaps significantly with Software Engineering.  Computer Engineering involves significant amounts of programming, but tends to be lower level (drivers, embedded programming, compilers, operating systems, etc) while Software Engineering usually involves software users interact with.<br><br>Both Software and Computer Engineering apply the principles of Computer Science, so sometimes it<sq>s hard to distinguish between them.  If you<sq>re working on a compiler, are you doing Computer Science, Software Engineering, or Computer Engineering?  Actually a little bit of all three, and it all depends on what your goals are.  If your goal is to create a product for someone to use, it<sq>s probably Software Engineering.  If you<sq>re trying to find algorithms that make compilers more efficient, it<sq>s probably Computer Science.  But if you<sq>re modifying the backend to work with a new CPU architecture, it<sq>s probably Computer Engineering.</p>", 
                "question": "ELI5<colon> Computer Science vs Software Engineering vs Computer Engineering"
            }, 
            "id": "cli18ky"
        }, 
        {
            "body": {
                "answer": "<p>Great post, TIL I didn<sq>t really know the difference between a computer scientist and a software engineer!</p>", 
                "question": "ELI5<colon> Computer Science vs Software Engineering vs Computer Engineering"
            }, 
            "id": "cli6b5z"
        }, 
        {
            "body": {
                "answer": "<p>The posts here pretty much explain it all.<br>Funny that this comes up, as I just today inquired about switching majors from CS to IT w/ Software Development track.<br>If I hadn<sq>t been chatting up a classmate about majors and found out about this, I wouldn<sq>t have known. Make sure you check out your universities Engineering or Computer Information Sciences department, and actually look at each flowchart for each major or plan of study. The types of classes you<sq>ll be taking really give you the idea of what you<sq>ll be learning (and I<sq>m sure school<sq>s differ in the classes for each major).<br>Just realized you didn<sq>t ask this related to college majors specifically, but if it hopefully some of this helps.<br>I wanted to get into programming and wanted to learn about the computer in general. Some time in CS made me realize it can get very theoretical and the math is VERY present. Suddenly I find IT w/ software development, all the classes I<sq>ve taken still apply, and there is no math past the Data Structures course I<sq>m taking now. (and I think the majority of the math is being forced down our throat as this professor is the only one I<sq>ve found so focused on solving massive recurrence relations.)<br>On that note, make sure you look up the professors if you have a choice. Your grades and education are being paid by someone, treat it like the huge purchase it is. The research into what you should be doing and whats available falls on YOU, not your parents, friends, or advisor. Boy, can your advisers can really fail you.<br>Hope this helps someone.</p>", 
                "question": "ELI5<colon> Computer Science vs Software Engineering vs Computer Engineering"
            }, 
            "id": "cli52bd"
        }, 
        {
            "body": {
                "answer": "<p>It would be great if you streamed it. Post date, time and link to the stream. </p>", 
                "question": "I want to teach you C++."
            }, 
            "id": "caatv4l"
        }, 
        {
            "body": {
                "answer": "<p>Not to be too negative, but there are a lot of bad C++ tutorials and teachers out there. Be careful trying to teach people unless you really, *really* know what you<sq>re doing.</p>", 
                "question": "I want to teach you C++."
            }, 
            "id": "caarp96"
        }, 
        {
            "body": {
                "answer": "<p>You might wanna check out a subreddit that was recently started. It<sq>s all about connecting those looking for groups on projects, looking to learn, and looking to mentor. Doesn<sq>t have quite the <sq>klout<sq> of here, but it<sq>d be great to have another person helping out.<br><br>That<sq>ll be here<colon> /r/CollaborateCode.</p>", 
                "question": "I want to teach you C++."
            }, 
            "id": "caau5wt"
        }, 
        {
            "body": {
                "answer": "<p>Wouldn<sq>t it be also a good idea to write tutorials?</p>", 
                "question": "I want to teach you C++."
            }, 
            "id": "caaupvl"
        }, 
        {
            "body": {
                "answer": "<p>See this is why I gave up on Code Academy, because I need to understand what I am writing, and what everything actually is.<br><br>And you aren<sq>t alone, that is a very common complaint about Code Academy, it just depends on what kind of learner you are.<br><br>Since it<sq>s not working out for you, I<sq>d suggest getting a nice book. </p>", 
                "question": "Is CodeAcademy actually good for beginners?"
            }, 
            "id": "d20lr5w"
        }, 
        {
            "body": {
                "answer": "<p>No, IMO. <br><br>Just read reddit or ask around here and you<sq>ll find better resources to learn anything. I<sq>m learning JavaScript, and I<sq>ve found much better resources than Codecademy for everything (yes, I<sq>ve done a few Codecademy courses). </p>", 
                "question": "Is CodeAcademy actually good for beginners?"
            }, 
            "id": "d20mszn"
        }, 
        {
            "body": {
                "answer": "<p>I think CodeCademy is OK for practicing basic programming concepts. However, it gives no information about tools, good coding practices, packages, files, compilers, and other essential concepts to creating a program.<br><br>For Java, I am using the free tutorials on caveofprogramming.com and loving it.</p>", 
                "question": "Is CodeAcademy actually good for beginners?"
            }, 
            "id": "d20mhyb"
        }, 
        {
            "body": {
                "answer": "<p>If your looking for something to practice Java with once you have a better handle on things, then I would recommend BlueJ. You can download it at www.bluej.org and it is basically a sandbox for java</p>", 
                "question": "Is CodeAcademy actually good for beginners?"
            }, 
            "id": "d20nmwr"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t recommend this site enough, I have learned so much, not only about java, but about programming in general, and I<sq>m only on week 4, http<colon>//mooc.fi/english.html .</p>", 
                "question": "REALLY GOOD java learning resource for beginners."
            }, 
            "id": "cwf7z8e"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//see.stanford.edu/\r\rCS106A is an intro course to programming using java.</p>", 
                "question": "REALLY GOOD java learning resource for beginners."
            }, 
            "id": "cwfh430"
        }, 
        {
            "body": {
                "answer": "<p>One of the <dq>fun<dq> things about programming is that it keeps you humble. The compiler, it does not care whether you think you<sq>ve got the right idea or not. It simply lets you know whether you<sq>re technically correct.</p>", 
                "question": "REALLY GOOD java learning resource for beginners."
            }, 
            "id": "cwf8a9g"
        }, 
        {
            "body": {
                "answer": "<p>Currently reading headfirst Java and it<sq>s pretty good for beginning to intermediate java developers</p>", 
                "question": "REALLY GOOD java learning resource for beginners."
            }, 
            "id": "cwflfke"
        }, 
        {
            "body": {
                "answer": "<p>1) An SSD. My IDE loads very quickly.\r\r2) Pycharm Pro. While the community version is great, the pro version has support for MySQL, SQLite, and many other databases. It also has a feature for .ignore files which can be generated automatically as well as support for HTML, JavaScript, and CSS.\r\r3) Dual monitors. In fact dual monitors are so great that I now have 3 monitors. Code in one panel, debugger and SQL views in another, and a webpage on the third. \r\r4) A proper chair. When you code 8-10 hours a day, your back will thank you.\r\r5) A whiteboard. Flow charts, database design, ideas, todo list... The usefulness of a whiteboard is limitless.\r\r6) donuts for the office every week. It keeps your boss happy so that they<sq>re willing to expense all of the above out for you. <colon>p</p>", 
                "question": "Which big or small investment has benefitted you the most as a programmer?"
            }, 
            "id": "csoajg4"
        }, 
        {
            "body": {
                "answer": "<p>Dual monitors with a high resolution are a must for me now. My workflow is significantly slower the few times I<sq>m forced onto a single monitor.<br><br> <br>ATM I run 2x Korean 27<dq> 1440p monitors and I<sq>m sure once 4k monitors come down in price I<sq>ll switch to those.</p>", 
                "question": "Which big or small investment has benefitted you the most as a programmer?"
            }, 
            "id": "cso3ah5"
        }, 
        {
            "body": {
                "answer": "<p>* **Learning git** (thanks /u/Race4TheGalaxy for the inspiration!)<br>* **Learning SQL** (including normalization and basic internal database mechanics)<br>* **Switching from** a dynamic + OOP language (**Perl**) to a statically typed + functional one (**Scala**)<br><br>The last one isn<sq>t meant to incite a flamewar (maybe) but from both a career perspective and just the overall craft/learning about programming, it has been transformative.<br><br>Like night and day. Changed my life and the way I think about programming.</p>", 
                "question": "Which big or small investment has benefitted you the most as a programmer?"
            }, 
            "id": "cso2g00"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve used Linux exclusively for about 10 years, and familiarity with Linux makes a bunch of things much easier when it comes to programming. I don<sq>t know if that<sq>s an investment per se, but I once paid extra to get a PC without Windows, so maybe that counts.</p>", 
                "question": "Which big or small investment has benefitted you the most as a programmer?"
            }, 
            "id": "cso2u21"
        }, 
        {
            "body": {
                "answer": "<p>- Takes far too long(13 hrs in the python course) to teach very basic concepts.<br>- Not exciting to learn with, it basically tells you copy that and this will appear, and if you try to somehow modify the instruction given, you<sq>re gonna have a bad time.<br>- covers mostly basic stuff(great if you want some introductory material, but there are far better options)<br>Hope it helps</p>", 
                "question": "What<sq>s wrong with Code-academy?"
            }, 
            "id": "cmry1zp"
        }, 
        {
            "body": {
                "answer": "<p>I disagree.  I think Codecademy is an excellent starting point.  Asking a newbie to do things like set up an IDE or download an interpreter or figure out library management is just begging for them to quit before they get hooked.  Codecademy (and, in fairness, other websites as well) abstracts all of this away and puts it into a format people have experience with, ie browser forms.  It teaches a pretty standard introduction at a reasonable pace.  If I remember correctly, on the Python course you go from nothing to being able to utilize a web service API in about a day<sq>s worth of work.  Not too shabby if you ask me.<br><br>I might be biased though.  I started Codecademy about two years ago and now I make my living with programming.</p>", 
                "question": "What<sq>s wrong with Code-academy?"
            }, 
            "id": "cmrzn02"
        }, 
        {
            "body": {
                "answer": "<p>It ignores a lot of basics.  <br><br>My wife went through the entire HTML course and didn<sq>t know she could edit a HTML file from a text editor.  After I told her this, she created her own page, but saved it as a text file and couldn<sq>t understand how to get it to work in her browser.<br><br>One would think, after completing a course in HTML you could build a rudimentary webpage without help.  <br><br>Also, a <sq>full in the blanks<sq> style of learning just causes you to regurgitate the current lesson.</p>", 
                "question": "What<sq>s wrong with Code-academy?"
            }, 
            "id": "cms2ndt"
        }, 
        {
            "body": {
                "answer": "<p>Nothing is wrong with Codecademy if you remember a few things<colon><br><br>* It<sq>s a very basic starting point, not a be-all-end-all course.<br><br>* If you don<sq>t understand something, Google it right then.<br><br>* Don<sq>t think that just because you finished the CA track, you<sq>re ready to program.<br><br>You<sq>ll still have a lot of learning left to do when you finish, but I used Codecademy to reinforce my HTML & CSS (and play catch up on the new stuff) while also deciding to learn Ruby instead of the oft-recommended Python.</p>", 
                "question": "What<sq>s wrong with Code-academy?"
            }, 
            "id": "cms3pjy"
        }, 
        {
            "body": {
                "answer": "<p>Stop changing languages. The grass isn<sq>t greener.</p>", 
                "question": "Programmers of reddit what do you wish somebody would have told you when you where learning how to code?"
            }, 
            "id": "clqzkbn"
        }, 
        {
            "body": {
                "answer": "<p>That step 1 isn<sq>t firing up your IDE of choice. That<sq>s step > 1.<br><br>Step 1 is fully understanding your problem.<br><br>Step 2 is fully understanding what qualifies as a solution.<br><br>Step 3 is fully understanding your target.<br><br>Step 4 is fully understanding the constraints from steps 1-3.<br><br>Step 5 is devising your solution.<br><br>Step 6 is *implementing* your solution that you<sq>ve *already devised*. This is when you actually start coding.</p>", 
                "question": "Programmers of reddit what do you wish somebody would have told you when you where learning how to code?"
            }, 
            "id": "clr1clh"
        }, 
        {
            "body": {
                "answer": "<p>These are all things I wish someone had spelled out for me on like day one<colon><br><br>Focus on Software Infrastructure<br>--------------------------------<br><br>Writing software is not about writing code, it<sq>s about building an infrastructure with code you write. It<sq>s not about simply solving function level problems, it<sq>s about designing, or following a design, in order to determine what function level solutions should look like.<br><br>Programming can take many forms; from the simple one off scripts to quickly solve small problems, to the full scale commercial software product, and everything in between. These have very different design goals and requirements.<br><br>Applying Coding Skills<br>---------------------<br><br>Learn to code logic and you can code in any language. Specialize in languages you use, not in languages you want to use. This means learning to select which languages are most appropriate for your project goals and selecting among the best choices. This skill may represent many hours of labwork and study, but discussions with peers and colleagues can help any novice select wisely.<br><br>You can always find a project which uses a language you wish to specialize in, but the projects and technologies that pay your bills should be priority.<br><br>If you are good enough with a given language, it may become trivial to switch to a role in which you spend most of your time using it. This is not necessarily guaranteed to be the case.<br><br>Libraries and API Docs<br>----------------------<br><br>Most of the code you rely on will not be written by you. It is vital to understand libraries and how to use them in your code. While you will be using libraries early on, included standard libs and third party libs can be very different in terms of installation and usage depending on factors such as language used, lib distribution format/channels, build target format, etc.<br><br>Learn how to read the API documentation for the libraries you are using. This includes the API docs for native, standard, and built-in libraries when available. Tinker with the code as you read the API docs, this is particularly important when the docs are sparse or unclear, as they often may be. These docs will save you a lot of time when they are available.<br><br><br>Licensing<br>---------<br><br>It is vital to understand the available licenses. You must comply with the licenses applied to any libraries you use. You should learn how to choose or write a license suitable for any software project you intend to release.<br><br>Environments and Tools<br>-----------------------<br><br>Your code does not run in a vacuum. The software infrastructure you are building lives in a software infrastructure other people already built. Understand the environment you are building in and how it affects your project.<br><br>Understand build systems. Take the time to look into how your code is built. Learn to implement your own build systems using languages such as GNU Make and Apache Ant. This is not entirely applicable to all languages, though some have analogous tools that should be explored and understood.<br><br>Understand the tools used to interact with code. Whether it<sq>s a version control system, an IDE, a dependency management system, or any other tool used to interact with software and software packages for a given development environment or language. <br><br>This includes tools such as rvm,rbenv, gem, pip, mvn, cmake... you name it. If it<sq>s a common standard in projects written in the languages you intend to work with, familiarize yourself with their use.<br><br>VERSION CONTROL!!!<br>--------------------<br><br>Always use it. Do not ever write code you aren<sq>t going to immediately throw away without using it. I don<sq>t care what you use, but learn to use at least one version control system well. I recommend that everyone learn git since has become such a strong standard.<br><br>This is part of a wider codebase management discussion. Be aware that for even basic codebase management, a version control system is considered a minimal requirement.<br><br>Teamwork<br>----------<br><br>No one gets through life alone. Contribute to the collective and they will lift you to greater heights of accomplishment. Resistance is futile.<br><br>Quote /u/robotsatan13<colon><br><br>>>Compromise<colon> You do not build software alone. If you are able to, congratulations, most folks don<sq>t.<br><br>>As someone who started out building stuff alone, working alone isn<sq>t the better option. Being on a team exposes you to a lot of stuff you may never have come across on your own. You learn from better programmers and have the chance to get help from people who are working on the same codebase as you are. So while compromise IS an important skill, working on a team with other developers who are better than you is an amazing boost to your skills. If you have the choice between working alone and working with a team, go with the team. <br><br>Excellent addition. You will indeed be enriched by the experience of your colleagues and peers. Your team members are your most important assets and you should strive to become an asset to your team.<br><br>Challenges<br>----------<br><br>Be prepared to land outside your comfort zone. This will be challenging, rewarding, and highly educational. Face unfamiliar challenges with a can do attitude and you will succeed. Again, your team members are your most valuable assets when it comes to overcoming daunting challenges.<br><br>Compromise<br>------------<br><br>You do not build software alone. If you are able to, congratulations, most folks don<sq>t. You will not get the design you want, you will not get the features you want, It is not uncommon to come into a project after these things have been decided upon. It is important to learn to accept the state of things on projects that may not necessarily meet your standards, but which a team relies on you to contribute to, because chances are that no one is completely satisfied with the implementation.<br></p>", 
                "question": "Programmers of reddit what do you wish somebody would have told you when you where learning how to code?"
            }, 
            "id": "clr01cc"
        }, 
        {
            "body": {
                "answer": "<p>close your brackets as soon as you open them.</p>", 
                "question": "Programmers of reddit what do you wish somebody would have told you when you where learning how to code?"
            }, 
            "id": "clrirbr"
        }, 
        {
            "body": {
                "answer": "<p>IOS = Cisco Switch/Router Operating System<br><br>iOS = Apple <br><br></p>", 
                "question": "Want to learn IOS programming? I<sq>ll teach you all for free over video-conference! (for beginners)"
            }, 
            "id": "der0gqz"
        }, 
        {
            "body": {
                "answer": "<p>i would definitely sub your Youtube channel. I am a beginner, but I do want to learn IOS development.</p>", 
                "question": "Want to learn IOS programming? I<sq>ll teach you all for free over video-conference! (for beginners)"
            }, 
            "id": "deqqchf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d be interested.  I<sq>m a college CS student and think I would benefit greatly from learning Swift. I think this is a great idea and generous of you to share your knowledge.</p>", 
                "question": "Want to learn IOS programming? I<sq>ll teach you all for free over video-conference! (for beginners)"
            }, 
            "id": "deqp1j8"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m currently studying Web Development thru FCC, Odin Project and some outside curriculum, but I<sq>d be interested in learning iOS programming-I admit I haven<sq>t ever really checked it out. But I would like to learn it. <br><br>-What times would the video conferences be (would they be archived somewhere to watch if we missed the live feed?)<br></p>", 
                "question": "Want to learn IOS programming? I<sq>ll teach you all for free over video-conference! (for beginners)"
            }, 
            "id": "deqonhd"
        }, 
        {
            "body": {
                "answer": "<p>review for interviews - https<colon>//docs.google.com/document/d/1VNoEUzBtyCw0fDw0X_bvuhmCwz1qhNjETPJc5VRZqm8/mobilebasic<br><br>interview cheat sheet - https<colon>//gist.github.com/TSiege/cbb0507082bb18ff7e4b<br><br>visualization - https<colon>//visualgo.net/<br><br>big o cheat sheet - http<colon>//bigocheatsheet.com/</p>", 
                "question": "Looking for amazing data structure and algorithm review site that some guy built to prepare for his interviews."
            }, 
            "id": "dcz1kjk"
        }, 
        {
            "body": {
                "answer": "<p>Not sure if this is it, but this is my favorite resource for reviewing this stuff<colon> http<colon>//www.geeksforgeeks.org/</p>", 
                "question": "Looking for amazing data structure and algorithm review site that some guy built to prepare for his interviews."
            }, 
            "id": "dcz90ic"
        }, 
        {
            "body": {
                "answer": "<p>Interviewcake?</p>", 
                "question": "Looking for amazing data structure and algorithm review site that some guy built to prepare for his interviews."
            }, 
            "id": "dczd87z"
        }, 
        {
            "body": {
                "answer": "<p>You can also search through your own browser history. In Firefox, it<sq>s ctrl+shift+h, there<sq>s an input bar where you can write a keyword then sort the results by <dq>most recent<dq> by clicking on that column. Look at the websites you visited 8 months ago. This, of course, is assuming you visited it on the same computer/os/browser as the ones you use right now and that you haven<sq>t deleted your browser history at some point.</p>", 
                "question": "Looking for amazing data structure and algorithm review site that some guy built to prepare for his interviews."
            }, 
            "id": "dcz8omq"
        }, 
        {
            "body": {
                "answer": "<p> Got any screenshots?</p>", 
                "question": "I made an proof of concept version of a tiny Netflix viewer."
            }, 
            "id": "d0seqzs"
        }, 
        {
            "body": {
                "answer": "<p>Would be way more interested if it didn<sq>t require Internet Explorer. <colon>\\</p>", 
                "question": "I made an proof of concept version of a tiny Netflix viewer."
            }, 
            "id": "d0sf6rk"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s super neat! How long did it take you to create it? </p>", 
                "question": "I made an proof of concept version of a tiny Netflix viewer."
            }, 
            "id": "d0s92tr"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a bookmarklet to do basically the same thing<colon><br><br>    javascript<colon>window.open(<dq>http<colon>//netflix.com<dq>, <dq><dq>, <dq>width=500,height=281<dq>)</p>", 
                "question": "I made an proof of concept version of a tiny Netflix viewer."
            }, 
            "id": "d0spr5h"
        }, 
        {
            "body": {
                "answer": "<p>I like this. This is good. Watch this. </p>", 
                "question": "Smart Coding in Java<colon> An In-Progress YouTube Series for Complete Beginners"
            }, 
            "id": "czbm7do"
        }, 
        {
            "body": {
                "answer": "<p>Cool, thank you. I<sq>ll start watching them. I need to learn Java for next semester. <br><br>What kind of credentials do you have? Did you have a formal education? Where have you worked? How long have you been writing Java? Has your primary language always been Java? <br><br>Thank you in advance for answering. I<sq>ll check the video right now. <br><br>EDIT<colon> okay, just watched the zeroeth episode. I can already tell you<sq>re different from most of the other tutorials I have followed. I will subscribe to your channel. Thank you for taking the time to make this series. </p>", 
                "question": "Smart Coding in Java<colon> An In-Progress YouTube Series for Complete Beginners"
            }, 
            "id": "czbmy33"
        }, 
        {
            "body": {
                "answer": "<p>I like your introduction.  As an instructor, not sure how you<sq>re going to bootstrap people to understand public static void main(String[] args) before they encounter a lot of programming, but good luck ;)</p>", 
                "question": "Smart Coding in Java<colon> An In-Progress YouTube Series for Complete Beginners"
            }, 
            "id": "czbw0ty"
        }, 
        {
            "body": {
                "answer": "<p>Great videos! Will you be going into android dev?</p>", 
                "question": "Smart Coding in Java<colon> An In-Progress YouTube Series for Complete Beginners"
            }, 
            "id": "czbxod4"
        }, 
        {
            "body": {
                "answer": "<p>This reminds me of when i was in music school<colon><br><br>there were so many guys who thought if they go to music school it will make them a great musician.  You can read countless posts from people about how they have a degree in music blah blah.. it doesn<sq>t really mean anything.  You learned a lot about music theory, and playing etc, but a good portion of music school just hand out degrees if you make the grades in your core classes.  If you play an instrument, especially in the jazz department, your teachers are very laid back and are really just trying to help you become a better player.... they also aren<sq>t going to fail you because you aren<sq>t a good enough player, because they already realize you won<sq>t be able to get a job playing unless you actually have skills anyways.. so the degree never mattered to getting gigs.<br><br>BUT...<br><br>they can<sq>t do it for you.  You have to put in the hours when you aren<sq>t in class.  When you are done studying the music from your lesson, you have to have the drive to want to work on your own stuff too.  <br><br>It<sq>s a skill, and it wont just materialize on its own.  -- and in the same idea, you can be a succesful musician without going to music school, and you can get a job in programming without going to college.  its about applying yourself.<br><br>i think CS is one of the few fields where if you focus on some languages, you<sq>ll have actual skills when you graduate.  Most majors won<sq>t have an immediately applicable skill.  Economics or Finance majors won<sq>t immediately know all the tools needed to work on financial markets until they<sq>ve gotten some real experience.<br><br>thankfully you can practice coding and learning CS anytime and you can see direct results and actually make something with it</p>", 
                "question": "Here<sq>s something that I realized halfway through my computer science program and wished I had realized earlier"
            }, 
            "id": "crppa2q"
        }, 
        {
            "body": {
                "answer": "<p>The University<sq>s objective is to build a well rounded student. Companies want specialists and portfolios, and they also want you to be a fresh grad. There should be some sort of conflict of interest in there.</p>", 
                "question": "Here<sq>s something that I realized halfway through my computer science program and wished I had realized earlier"
            }, 
            "id": "crposkf"
        }, 
        {
            "body": {
                "answer": "<p>I liken it to getting a degree in physics and a job building bridges.  Sure, you have all the theoretical underpinning, but the transition to practical application ... takes a bit of effort.<br><br>That said, once you make the transition, an SE with a CS degree (a proper one with lots of theory) makes for a really solid SE.</p>", 
                "question": "Here<sq>s something that I realized halfway through my computer science program and wished I had realized earlier"
            }, 
            "id": "crprmcx"
        }, 
        {
            "body": {
                "answer": "<p>Just gonna give my 5 cents on studying computer science! (I am currently studying!)<br><br>The most fun and challenging courses I<sq>ve had as of yet are the ones where the course is teaching some theory like OOP or Algorithms where the intent is to teach how to structure and think when working with computers. What works well? What is terrible coding?<br><br>Ofcourse there is going to be that boring course that you have to get through at some point (VHDL nobody likes you), but in the end I can already pick up a language quite fast and apply almost all of the things I<sq>ve learnt since they arent language specific. <br><br>At the start of a course I always thought <dq>I will never use this<dq> and after I<sq>m done with it my thought is <dq>how can I use this in the future<dq>. <br><br>Hopefully I<sq>ll have use for all of the courses I<sq>ve taken, since we can never know what will happen in the future! <colon>D</p>", 
                "question": "Here<sq>s something that I realized halfway through my computer science program and wished I had realized earlier"
            }, 
            "id": "crpsbyq"
        }, 
        {
            "body": {
                "answer": "<p>Since OP didn<sq>t really explain<colon><br><br>* 173 * 256^3 = 2902458368<br>* 194 * 256^2 = 12713984<br>* 44 * 256^1 = 11264<br>* 130 * 256^0 = 130<br><br>Sum = 2915183746<br></p>", 
                "question": "TIL that most apps/tools accept a single integer as an IP address"
            }, 
            "id": "clceerh"
        }, 
        {
            "body": {
                "answer": "<p>I remember learning that about fifteen years ago and saying <dq>oh, neat<dq>. It<sq>s never once come in handy to know this, but still neat, I guess.</p>", 
                "question": "TIL that most apps/tools accept a single integer as an IP address"
            }, 
            "id": "clcf0xw"
        }, 
        {
            "body": {
                "answer": "<p>I was disappointed that http<colon>//8008135 didn<sq>t work </p>", 
                "question": "TIL that most apps/tools accept a single integer as an IP address"
            }, 
            "id": "clckb5d"
        }, 
        {
            "body": {
                "answer": "<p>Doesn<sq>t seem to work for me with IPv6. http<colon>//[2607<colon>f8b0<colon>4001<colon>c05<colon><colon>69] works, but http<colon>//[50552053919383161403550150978862841961] doesn<sq>t <colon>(</p>", 
                "question": "TIL that most apps/tools accept a single integer as an IP address"
            }, 
            "id": "clcdble"
        }, 
        {
            "body": {
                "answer": "<p>This is a common thing that happens not only in programming, but in all creative arts. The basic premise is <dq>The more you know, the more you realize how much you don<sq>t know.<dq> I went through it when I finally landed a job in the industry (not gaming). I<sq>m self taught and after around 6+ months I was finally presented at work with <dq>real<dq> programming problems and I was overwhelmed. I honestly considered to just quit because I can<sq>t really compete with those guys. But I persevered and eventually overcame that state of mind you are in. <br><br>EDIT<colon>  <br>It<sq>s not that there are <dq>real<dq> programming problems that are waiting for you. It<sq>s more like <dq>Now help us solve this shit we are in<dq> as a team.<br><br>EDIT<colon> as /u/Carefree4  said. Congrats you are now consciously incompetent. <br><br></p>", 
                "question": "I feel like I<sq>m getting worse instead of better at programming"
            }, 
            "id": "d5q5gio"
        }, 
        {
            "body": {
                "answer": "<p>You have just graduated to [Conscious incompetence](https<colon>//en.m.wikipedia.org/wiki/Four_stages_of_competence)</p>", 
                "question": "I feel like I<sq>m getting worse instead of better at programming"
            }, 
            "id": "d5qaagi"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s easy to solve problems you<sq>ve already solved.  The longer you do this, the more experience you<sq>ll have built up to guide you to a solution.       <br><br>Don<sq>t be intimidated by the It<sq>s a Unix System Guys^tm rolling their face on the keyboard and producing enterprise ready programs in a few minutes like you see on TV.   That<sq>s just not the way it works.</p>", 
                "question": "I feel like I<sq>m getting worse instead of better at programming"
            }, 
            "id": "d5q0340"
        }, 
        {
            "body": {
                "answer": "<p>I know exactly how you feel.  I finished an intro programming course (using c++) with a very good grade.  I learned about classes, functions, and arrays towards the end of the course and felt pretty comfortable using them.<br><br>Then I decided I was going to do some intermediate programming homework (that a friend provided). I feel like a retard again.  <colon>|<br><br>Hope it<sq>s not just me and that<sq>s the normal curve to learning how to program.  A constant struggle of feeling inadequate.  I know that while I<sq>m solving these problems I<sq>m doing it in a terribly inefficient way.  I<sq>m having difficulty condensing things, simplifying, and making sure my code is in manageable chunks that can be changed easily.</p>", 
                "question": "I feel like I<sq>m getting worse instead of better at programming"
            }, 
            "id": "d5q3g1q"
        }, 
        {
            "body": {
                "answer": "<p>>Obviously, what I need to do is teach my club members how to code.<br><br>Negative. Recruit someone else.<br><br>There are many people willing to donate time to teach others. Most accessible would probably be on the internet. Use coding webpages from the sidebar. Work on things as a group. Make lists of questions you have that no one can seem to figure out and ask in places like this sub reddit.<br><br>There are lots of reasons why an amateur should not teach but this is the most valid<colon><br><br>* The full quote is not practice makes perfect but that perfect practice makes perfect.<br><br>If you have a misunderstanding or make mistakes it propagates through. Think of it as a race with a leader who not only runs faster than everyone else but picks the path s they go. If you have to lead but stumble (and are not that far head of others) they run into you and it is a big cluster fuck. If  professor or knowledgeable person stumbles they are so far ahead that most don<sq>t notice if it is 30 feet or 35 feet. Nor do the people following behind who are focused on the ground directly in front of them see all the effort and work that goes into picking the correct path for that group. They just follow the path the leader picks. But he has to do the hard work in picking the correct path among hundreds of various choices.</p>", 
                "question": "What to do if my coding club has no experienced programmers at all?"
            }, 
            "id": "d78bpj2"
        }, 
        {
            "body": {
                "answer": "<p>Well, I don<sq>t have any personal experience teaching coding for a club, so take my advice with a grain of salt, but first I would check to see which members are actually *serious* about learning how to code.<br><br>When I joined a short-lived <dq>programming club<dq> (started by a new teacher) in high school, most of the people who attended the first session said they wanted to <dq>code games<dq>. In reality, all they actually wanted to do was *play* games. By the third or fourth session, there were only maybe 1-2 people left. <br><br>Second, I<sq>d like to ask<colon> what was the purpose/mission statement/ultimate goal of your club? What is it that you intended the club to be about, or to do? Would members work on their individual projects? Would you all work together on a team project? Was teaching people how to code part of those goals? Knowing this should help steer you into the right direction in terms of where and what you want your club to be.<br><br>Third, do you already have a project in mind? As a member, I would expect the leader to have a plan. It doesn<sq>t necessarily need to be very specific (especially if you want to ask the club members what *they* want to do as well), but if the club leader just says, <dq>What do you guys want, <sq>cause I have no idea<dq>, well, that doesn<sq>t really motivate me to stick around.<br><br>Fourth, if you or your club members have decided to work on a project together, but your members don<sq>t know how to code, then it<sq>s not your responsibility to teach them. In fact, if you yourself are not already an advanced programmer, you should *not* be teaching beginners. <br><br>You could offer small tutorials, perhaps, or provide advice/help if someone needs it, but teaching them how to code would essentially turn your club into an extra class, and most high school students wouldn<sq>t be too thrilled about that. Instead, hand them resources for whatever it is you have in mind. If you<sq>ve decided on an Android app, first give them resources for Java, and then resources for Android. The trick is to not overwhelm them with too much material, or expect too much from them after only a couple weeks. Because, again, only those who take the club seriously will actually spend the time to go through them and actually be able to contribute.</p>", 
                "question": "What to do if my coding club has no experienced programmers at all?"
            }, 
            "id": "d78c1oe"
        }, 
        {
            "body": {
                "answer": "<p>As a beginning coder myself, I can tell you that in high school, what I would have gotten most out of coding is the community of people around me doing the same thing. I can teach myself, but it<sq>s hard when there is no one sharing your hobby/passion/frustration.<br><br>Speaking not as someone who knows shit about programming, only putting myself in my own shoes when I was in high school if my school had had a programming club...<br><br>I would have benefitted from simple assignments that I had to research myself and complete. When we got to the point where we can do useful tasks, then I would have benefited from working on a subroutine with other coders. Eg, <dq>your task is to create a function that takes a name and return the initials<dq> while somebody else might have <dq>your job is to make a subroutine that stores sets of initials as a list<dq> and <dq>your job is to alphabetize this list and print it.<dq> Etc. That<sq>s maybe not the best example, as it<sq>s a little boring, but it would be fun to write a piece of code that would work with someone else<sq>s code for output. When working on code, I would come to you, the experienced guy, when I can<sq>t get something to work and the internet doesn<sq>t return an easy fix.<br><br>I<sq>d do recommended reading too-- some boring reference stuff and some novels. Honestly, with the internet, anyone can learn to code-- the problem is the focus/motivation/environment that distracts/discourages you. Having a team of peers I got together with regularly would be an awesome experience even if no one was there specifically teaching me things.</p>", 
                "question": "What to do if my coding club has no experienced programmers at all?"
            }, 
            "id": "d78e0nm"
        }, 
        {
            "body": {
                "answer": "<p>just learn together.</p>", 
                "question": "What to do if my coding club has no experienced programmers at all?"
            }, 
            "id": "d78ima1"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//devdocs.io<br><br>Thank me later</p>", 
                "question": "How is W3Schools now?"
            }, 
            "id": "cw10yot"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s better.  They cleaned up a lot of their tutorials and examples due to massive criticism.  However, they still sell their worthless certifications for a hundred bucks a piece.<br><br>Honestly, the only thing that keeps them afloat is that they demonstrate the most basic, simple thing you need to know about a subject right off the bat.  That<sq>s what makes it so appealing for people.<br><br>Mozilla<sq>s developer network has better quality materials, but you are blasted with a firehose of information before you can sift through what you need to know to get something done.  <br><br>If Mozilla reorganized their data to give you simple, straightforward examples of topics, and after that proceeded to turn on the firehose when you needed more info, then nobody would ever even look twice at w3schools.</p>", 
                "question": "How is W3Schools now?"
            }, 
            "id": "cw0t9im"
        }, 
        {
            "body": {
                "answer": "<p>I haven<sq>t bought anything from them (never knew you could..?)  but I visit them almost daily when looking up HTML or XML stuff. I find their examples to be really simple, straight forward, and easy to understand. I mostly reference them for simple or basic stuff though, so I<sq>m not sure how they explain more complex syntax/workings. <br><br>Errm as a frame of reference of my skill/<dq>expertise<dq>, I work in Dev and QA, but it is also an internship, so make of it what you will.<br></p>", 
                "question": "How is W3Schools now?"
            }, 
            "id": "cw0svxj"
        }, 
        {
            "body": {
                "answer": "<p>I learnt basic HTML and JavaScript there when I was about 11-12. Served me well through school. Teacher was sat next to me while doing a website project thing and said <dq>Make that header bigger.<dq><br><br>So I opened it up in notepad and changed <h4> to <h2> while she saw going <dq>John! John! He<sq>s editing the HTML!<dq> to another teacher.</p>", 
                "question": "How is W3Schools now?"
            }, 
            "id": "cw0vxe6"
        }, 
        {
            "body": {
                "answer": "<p>You know if you<sq>re using Python there<sq>s a framework called Kivy for making apps. Just a tought. Good story and congrats! </p>", 
                "question": "Zero programming knowledge to publishing first my first app!"
            }, 
            "id": "cm9cx3p"
        }, 
        {
            "body": {
                "answer": "<p>Downloaded it for shits and giggles. If I came into new numbers often I can see how it would be helpful. Didn<sq>t name a word for my area code (850) and the drop down menu for computer type didn<sq>t seem to work. Otherwise it was pretty cool. Impressed you were able to get all that starting from scratch. </p>", 
                "question": "Zero programming knowledge to publishing first my first app!"
            }, 
            "id": "cm97sod"
        }, 
        {
            "body": {
                "answer": "<p>Inspiring stuff.  Thanks for sharing and your app is a really great idea</p>", 
                "question": "Zero programming knowledge to publishing first my first app!"
            }, 
            "id": "cm97n7y"
        }, 
        {
            "body": {
                "answer": "<p>I find this story to be particularly arousing.</p>", 
                "question": "Zero programming knowledge to publishing first my first app!"
            }, 
            "id": "cm9kh4x"
        }, 
        {
            "body": {
                "answer": "<p>Man, that guy is a great lecturer. He has as much enthusiasm as my 4 year<sq>s worth of professors combined.</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course has started get involved!"
            }, 
            "id": "cc1ohgz"
        }, 
        {
            "body": {
                "answer": "<p>Also check out /r/cs50! The course staff will be watching it!</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course has started get involved!"
            }, 
            "id": "cc1s8b8"
        }, 
        {
            "body": {
                "answer": "<p>do i have to sign up or anything? cant find any register button or anything<br><br>Edit<colon> found this https<colon>//manual.cs50.net/</p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course has started get involved!"
            }, 
            "id": "cc1pvdm"
        }, 
        {
            "body": {
                "answer": "<p>I tried watching this, but Livestream kept resetting the video back to the beginning. I<sq>d make it a few minutes, then right back to 0<colon>00. Very annoying. Gave up eventually.<br><br>I<sq>m in Chrome, no extensions (used incognito). </p>", 
                "question": "Harvard<sq>s (free) CS50 2013 intro course has started get involved!"
            }, 
            "id": "cc1z5p5"
        }, 
        {
            "body": {
                "answer": "<p>Will there be a documented version of the live streams for those of us that cannot stand/use video tutorials?</p>", 
                "question": "Learn to make your first computer game"
            }, 
            "id": "c94405a"
        }, 
        {
            "body": {
                "answer": "<p>Will be doing this this weekend. Seem to keep hitting a wall with C++ and sdl <colon>( </p>", 
                "question": "Learn to make your first computer game"
            }, 
            "id": "c94298h"
        }, 
        {
            "body": {
                "answer": "<p>cool, will check this out when I have time later</p>", 
                "question": "Learn to make your first computer game"
            }, 
            "id": "c9427ha"
        }, 
        {
            "body": {
                "answer": "<p>Looks like Construct 2 is Windows only.  Is anyone aware of an alternative to this?</p>", 
                "question": "Learn to make your first computer game"
            }, 
            "id": "c947nkr"
        }, 
        {
            "body": {
                "answer": "<p>> should i carry on learning from this book in my free time?<br><br>Yes!<br><br>> should i attend evening classes?<br><br>Maybe! Most people don<sq>t do this, and a lot of programmers have no format education whatsoever, so you needn<sq>t feel any pressure to attend classes.<br><br>I think the most important piece of advice would be to just start writing stuff. You could either invent your own random projects or contribute to existing open-source software. It doesn<sq>t have to be useful, just something you can learn from and find enjoyable. A portfolio of side projects and contributions will demonstrate your skill and a genuine interest, which will help overcome a lack of formal education and professional experience.<br><br>[GitHub](https<colon>//github.com) is the place to showcase that. There are good alternatives but a lot of companies will specifically ask for a GitHub URL when you apply, and being able to point them to an active profile will earn you brownie points.<br><br>You could also consider blogging (which you can also do via GitHub). Writing about all the cool techniques you<sq>ve learnt and problems you<sq>ve encountered will not only help those things stick in your mind but again showcase a real interest and willingness to learn. You don<sq>t have to be an expert to start a programming blog, although it<sq>s not everyone<sq>s cup of tea.</p>", 
                "question": "I want a career in programming"
            }, 
            "id": "d86ou4d"
        }, 
        {
            "body": {
                "answer": "<p>Glad you found out you like programming so much! I have a similar story where I found out I enjoyed programming right after graduating from college, go figure. But anyways, the good thing about a career in programming is that strong applicable skills can take the place of a formal degree. <br><br>Python is so easy to learn because a lot of the more difficult aspects of programming are hidden behind the scenes. For example, data types, pointers, memory allocation, etc. If you want a career in programming, you<sq>ll need to understand to fundamentals of computer science and I think other languages are better for doing so (C/C++ or Java).<br><br>An active GitHub with multiple projects will be crucial for you because all you have to show employers is your work, not a degree. Take your best work, clean it up, and throw it on GitHub. <br><br></p>", 
                "question": "I want a career in programming"
            }, 
            "id": "d86srvy"
        }, 
        {
            "body": {
                "answer": "<p>Greetings!  You and I are a lot alike, and it<sq>s cool as shit that you are learning Python.  <br><br>I too work at a printing and mailing house but on the sales side.  I<sq>m 42 years old and come from a business management degree and only 5 years ago did I start teaching myself html, css, and python as a beginner, starting with the same learn python the hard way tutorial as you.  <br><br>I think it<sq>s ok, but there are other resources that I would start with if I were you.  I can<sq>t recommend more https<colon>//automatetheboringstuff.com as a way to learn some basics pretty quickly, and even start writing scripts that can make YOUR JOB easier as I have where I work.  The free book is VERY WELL WRITTEN and you<sq>ll find the example programs you write might even be applicable to your job (and make your life easier!).  <br><br>I<sq>ve written a few easy scripts to determine the number up an image will fit on our press sheet sizes, for estimation purposes and some other scripts that are useful to me.  This also makes me the guy who can do things I wasn<sq>t even hired to do, and thus more valuable to the company.   If you<sq>re interested I can share some code with you.<br><br>My 2 cents though about your interest in a programming career.  For me, I wanted to learn how to program so that I could create a scalable business with a website (using Django and python as the backend) and that is still my goal today, though I haven<sq>t gotten that far, yet.  <br><br>I too thought I would enjoy programming as a career change mid life.  I currently make about 65 - 70k now.  In my case, switching would probably require a decrease in pay and I would be playing catchup, yet coding something FOR SOMEONE ELSE.  That, in my opinion, would not be as fun as creating things I WANT to create.  I don<sq>t want to do sales the rest of my life and don<sq>t find it something I look forward to each day, but I imagine I would feel the same way if I were working for someone else as a programmer (unless it was a startup I was passionate about).  <br><br>Feel free to message me and we can chat over phone.  Would love to hear about the business you work for and chat about ideas.<br><br><br><br>  </p>", 
                "question": "I want a career in programming"
            }, 
            "id": "d870sn7"
        }, 
        {
            "body": {
                "answer": "<p><dq>...i can<sq>t wait to get home from work today and learn some more.<dq>, dude I think this sentence says everything. just keep doing what you enjoy and take it a step further. find a small project to do by yourself.<br>you are only 21. you have all the time in the world to experiment things. you are on the right track!</p>", 
                "question": "I want a career in programming"
            }, 
            "id": "d870lqd"
        }, 
        {
            "body": {
                "answer": "<p>Maybe. For instance, I know a couple people who aren<sq>t in any way interested in programming, so they<sq>re probably not meant to be programmers.<br><br>You joined a <dq>bootcamp.<dq> One of the main definitions of a boot camp is to make recruits feel overwhelmed and inadequate while simultaneously getting them to continue. <br><br>You<sq>re not the first person to despair at their own performance in a task they chose. You won<sq>t be the last. And many of those who came before you and despaired perservered and achieved what they set out to achieve. Many didn<sq>t.<br><br>So if the question you really want to ask is <dq>am I meant for this?<dq> then the only answer I have for you is<colon>  I dunno. Are you?</p>", 
                "question": "Part of the way through a coding bootcamp and feeling completely overwhelmed and inadequate. Are there people who just aren<sq>t meant to be programmers?"
            }, 
            "id": "d57j5sw"
        }, 
        {
            "body": {
                "answer": "<p>I just went through a coding bootcamp, around week 3-4, I was completely overwhelmed and thought about dropping out but just kept pushing forward. I graduated last week. Youll realize in a week or 2 how easy the stuff youre stuck on is. Just keep moving forward broski.</p>", 
                "question": "Part of the way through a coding bootcamp and feeling completely overwhelmed and inadequate. Are there people who just aren<sq>t meant to be programmers?"
            }, 
            "id": "d57ja1y"
        }, 
        {
            "body": {
                "answer": "<p>A lot of good stuff has already been said - maybe this too, I only skimmed, but I<sq>m gonna say it anyway...<br><br>One thing that might help that I<sq>ve realized in my own learning is that 99<percent> of people who can do a thing well that involves somewhat difficult concepts CANNOT explain/teach it from the perspective of that time before they understood it. It<sq>s a VERY rare gift to find in a teacher. So I don<sq>t just mean fellow classmates... I mean your professors, long time devs you ask online, experts who write books, all the giant egos on stackoverflow, etc.<br><br>So sometimes it<sq>s just a matter of finally finding that one book/blog/teacher/colleague who explains the concept in a particular way and it FINALLY makes sense and it suddenly seem incredibly simple. In the meantime before you find those, you just keep grinding through, doing the best you can with the stuff you don<sq>t feel competent at, and eventually your brain just <dq>gets it<dq> after enough practice either way. <br><br>No matter how complex a concept looks with coding, it<sq>s always just moving tiny simple pieces of data around and doing simple things to them. If you have to keep breaking each thing down into smaller pieces than most people, then do that - you<sq>ll probably gain a deeper understanding than some of them in the long run anyway... but who cares? Everybody learns differently. If you can work a smartphone, or arrange a household schedule, or organize a closet, you can learn to code. Just keep breaking it down into the smallest parts(and keep looking for that one explanation that makes a thing finally click).   </p>", 
                "question": "Part of the way through a coding bootcamp and feeling completely overwhelmed and inadequate. Are there people who just aren<sq>t meant to be programmers?"
            }, 
            "id": "d57lan9"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m horrible at anything resembling math, barely graduated high school, and have attention deficit disorder. if i can do it so can you, stick with it brotha! nothing worth having comes easy \u2015 Theodore Roosevelt</p>", 
                "question": "Part of the way through a coding bootcamp and feeling completely overwhelmed and inadequate. Are there people who just aren<sq>t meant to be programmers?"
            }, 
            "id": "d57klrh"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "So I finished codecademy HTML & CSS course now what? I feel like I learned absolutely nothing"
            }, 
            "id": "d34n9l6"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t give up! In my experience, here is what being a web/software developer is like<colon> <br><br>- Work on project <br>- Get stumped by a problem <br>- Figure out problem, usually by googling<br>- Repeat for the rest of your career <br><br>Of course things will come easier as you do them repeatedly, but learning is the best part of the job in my opinion. If you<sq>re always challenging yourself (which I think any good developer does) then you<sq>ll never lose that feeling of accomplishment when you finally <dq>get it<dq> after hours of learning a new technology. If you don<sq>t enjoy that process, then maybe software development isn<sq>t for you. In my experience that<sq>s what it<sq>s all about. </p>", 
                "question": "So I finished codecademy HTML & CSS course now what? I feel like I learned absolutely nothing"
            }, 
            "id": "d34t9fh"
        }, 
        {
            "body": {
                "answer": "<p>Have you heard of freecodecamp? Try them out. I hear their JS section is pretty good.</p>", 
                "question": "So I finished codecademy HTML & CSS course now what? I feel like I learned absolutely nothing"
            }, 
            "id": "d34swcb"
        }, 
        {
            "body": {
                "answer": "<p>I honestly think that Codecademy should be a discouraged resource.</p>", 
                "question": "So I finished codecademy HTML & CSS course now what? I feel like I learned absolutely nothing"
            }, 
            "id": "d34vb1w"
        }, 
        {
            "body": {
                "answer": "<p>I really like the idea and I subscribed but I believe that should be 1 and no more challenge per day. Like /r/dailyprogrammer.  <br>But it<sq>s a cool idea. I am all in.</p>", 
                "question": "A new subreddit for coding challenges with strong geeky themes"
            }, 
            "id": "cxyt83k"
        }, 
        {
            "body": {
                "answer": "<p>subscribing rn. Should be fun.</p>", 
                "question": "A new subreddit for coding challenges with strong geeky themes"
            }, 
            "id": "cxyp9ch"
        }, 
        {
            "body": {
                "answer": "<p>Subscribed!<br><br>Wish you a good start!</p>", 
                "question": "A new subreddit for coding challenges with strong geeky themes"
            }, 
            "id": "cxytode"
        }, 
        {
            "body": {
                "answer": "<p>Subscribed. Good luck to us </p>", 
                "question": "A new subreddit for coding challenges with strong geeky themes"
            }, 
            "id": "cxytof1"
        }, 
        {
            "body": {
                "answer": "<p>This is an excellent resource. I learned a ton when I went through it. </p>", 
                "question": "[Python] Learn programming with Python and Pygame"
            }, 
            "id": "cu7l69u"
        }, 
        {
            "body": {
                "answer": "<p>Is it just me or is moderate usage of Pygame a massive leap from Python? I remember going through a load of tutorials covering Python, and then I read a book on using Pygame and the first page instantly assumed I was some kind of expert already.<br><br>This is the main reason I dropped Python ages ago, I know little of it now.</p>", 
                "question": "[Python] Learn programming with Python and Pygame"
            }, 
            "id": "cu7o85r"
        }, 
        {
            "body": {
                "answer": "<p>Very good tutorial, I went from basically zero experience to this in an hour<colon><br><br>    country = input(<dq>Enter the name of your country<colon> <dq>)<br>    money = int(input(<dq>Enter the amount of money your country has<colon> <dq>))<br>    debt = int(input(<dq>Enter the amount of debt your country has<colon> <dq>))<br><br>    if money < debt<colon><br>\tprint(country, <dq> is fucked<dq>)<br><br>    if money > debt<colon><br>\tprint(country, <dq> is alright<dq>)<br><br>    if money == debt<colon><br>\tprint(<dq>Pay that debt,asshole<dq>)<br><br>Lol.</p>", 
                "question": "[Python] Learn programming with Python and Pygame"
            }, 
            "id": "cu8crsk"
        }, 
        {
            "body": {
                "answer": "<p>Is this in the FAQ here?</p>", 
                "question": "[Python] Learn programming with Python and Pygame"
            }, 
            "id": "cu7lu9p"
        }, 
        {
            "body": {
                "answer": "<p>There are many types of AI and many methods of completing this.<br><br>For example, my favorite AI to build is based off of Neural Networks. Basically you train the NN by playing it (or programming it to play thousands and thousands of games) and it gets better over time. <br><br>I got a NN to play games like Tic Tac Toe (very simple) and even a tank target shooter game I made based of image recognition (not as simple). <br><br>Personally, I would program in python, use Google<sq>s Tensorflow library, and start learning it. I can link you a very simple NN creator that I made if you would like. Just install TF and then use my code to get started. </p>", 
                "question": "How to start building my own AI?"
            }, 
            "id": "ddeayyg"
        }, 
        {
            "body": {
                "answer": "<p>Start simple. Let<sq>s say you are making a very dumb zombie. The AI for the very dumb zombie (walks into walls, etc.) may be something like this<colon><br><br>    void Upate()<br>    {<br>        if (ICanTouchBrains())<br>        {<br>            EatBrains();<br>        } else {<br>            TurnTowardsBrains();<br>            MoveForward();<br>        }<br>    }<br><br>For poker, maybe you have an array of cards, the AI might be something such as<colon><br><br>    // This function would figure out if we had a full house, or 4 of a kind, and output 2 lists (stuff we want to keep and what we want to get rid of)<br>    FigureOutWhatIHave(cardArray, out goodstuff, out badstuff);<br>    GetRidOf(badstuff);<br>    PickupCards(badstuff.count);<br>  <br>  </p>", 
                "question": "How to start building my own AI?"
            }, 
            "id": "ddeph9u"
        }, 
        {
            "body": {
                "answer": "<p>I got my start in AI by studying path planning.  It<sq>s a way for a computer (an AI) to determine the most optimal path between two points.  It might not be <dq>thinking<dq> in the same way a neural network is, but it does require the AI to do some backtracking and checking, not unlike a human who might want to figure out the quickest way between two places.<br><br>I recommend the [A* Algorithm](http<colon>//theory.stanford.edu/~amitp/GameProgramming/AStarComparison.html) to start with.  It<sq>s easy to implement and widely used.</p>", 
                "question": "How to start building my own AI?"
            }, 
            "id": "ddel413"
        }, 
        {
            "body": {
                "answer": "<p>You could start by studying some algorithms like [minimax](https<colon>//en.wikipedia.org/wiki/Minimax).</p>", 
                "question": "How to start building my own AI?"
            }, 
            "id": "ddecuyd"
        }, 
        {
            "body": {
                "answer": "<p>I love seeing these success stories, it<sq>s really great.<br><br>But it makes me wonder, do eve half of these people come back, answer questions, guide others who are at the experience level they were once at, help beginners pick up tips & tricks, give knowledge that help others lead themselves to a career, etc etc.<br><br>Trust me, I<sq>m so glad you Got The Job (TM). But GIVE BACK!!!!!</p>", 
                "question": "Thank you r/learnprogramming. Finally got a job."
            }, 
            "id": "d37ycq0"
        }, 
        {
            "body": {
                "answer": "<p>Nice try, Interview Cake!</p>", 
                "question": "Thank you r/learnprogramming. Finally got a job."
            }, 
            "id": "d38cly1"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations!</p>", 
                "question": "Thank you r/learnprogramming. Finally got a job."
            }, 
            "id": "d37uz1k"
        }, 
        {
            "body": {
                "answer": "<p>How long were you on the job hunt and do you have a formal degree?<br></p>", 
                "question": "Thank you r/learnprogramming. Finally got a job."
            }, 
            "id": "d37zcai"
        }, 
        {
            "body": {
                "answer": "<p>Graduating from Stanford is a good start.</p>", 
                "question": "What would it take/what would you have to learn to be a coder at Google from no programming experience in one year?"
            }, 
            "id": "cegdgj9"
        }, 
        {
            "body": {
                "answer": "<p></p>", 
                "question": "What would it take/what would you have to learn to be a coder at Google from no programming experience in one year?"
            }, 
            "id": "cegd3xp"
        }, 
        {
            "body": {
                "answer": "<p>I think people are confusing the question here. The OP said she<sq>s a coder and has Google friends. She is merely posing the question as a thought experiment to which he will add his own thoughts.<br><br>The question isn<sq>t for her, but what the perception is.</p>", 
                "question": "What would it take/what would you have to learn to be a coder at Google from no programming experience in one year?"
            }, 
            "id": "cegedkn"
        }, 
        {
            "body": {
                "answer": "<p>[this](http<colon>//i.livescience.com/images/i/000/049/760/original/matrix-learning-pic.jpg)</p>", 
                "question": "What would it take/what would you have to learn to be a coder at Google from no programming experience in one year?"
            }, 
            "id": "cegcxwd"
        }, 
        {
            "body": {
                "answer": "<p>Udemy is killing their long-term prospects with their constant deep discounts. Students are becoming trained not to ever pay full price and eventually the best instructors will abandon the platform. </p>", 
                "question": "PSA<colon> All udemy courses only $10 until January 11th"
            }, 
            "id": "cyium4n"
        }, 
        {
            "body": {
                "answer": "<p>I get all my classes for free. I check this site daily<colon> http<colon>//www.retailmenot.com/view/udemy.com?c=7516600</p>", 
                "question": "PSA<colon> All udemy courses only $10 until January 11th"
            }, 
            "id": "cyiwz3f"
        }, 
        {
            "body": {
                "answer": "<p>Any worthwhile courses that I should take? What are the Cr\u00e8me de la cr\u00e8me?<br> </p>", 
                "question": "PSA<colon> All udemy courses only $10 until January 11th"
            }, 
            "id": "cyiu48k"
        }, 
        {
            "body": {
                "answer": "<p>I thought Udemy is 99<percent> crap. Is there any good stuff there?</p>", 
                "question": "PSA<colon> All udemy courses only $10 until January 11th"
            }, 
            "id": "cyivjk7"
        }, 
        {
            "body": {
                "answer": "<p>[NEED MORE RAM](http<colon>//www.downloadmoreram.com/). (I<sq>ve requested more, please don<sq>t kill my app D<colon> ) </p>", 
                "question": "My first webapp redditAnalysis visualizes your reddit data such as your top words and subreddit activity. Just search a redditor wait for the data to scan and have fun! Link inside."
            }, 
            "id": "cjqgmbc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "My first webapp redditAnalysis visualizes your reddit data such as your top words and subreddit activity. Just search a redditor wait for the data to scan and have fun! Link inside."
            }, 
            "id": "cjqs3oe"
        }, 
        {
            "body": {
                "answer": "<p>very NICE (my top word ;-)) app! The design is outstanding! I just wanted to ask what technology you used to make the charts but i found out myself in the meanwhile<colon> [Highcharts 4.0.3] (http<colon>//www.highcharts.com/) for all that are interested....</p>", 
                "question": "My first webapp redditAnalysis visualizes your reddit data such as your top words and subreddit activity. Just search a redditor wait for the data to scan and have fun! Link inside."
            }, 
            "id": "cjqe033"
        }, 
        {
            "body": {
                "answer": "<p>Some feedback<colon> <br><br>You shouldn<sq>t be committing files ending with a `~`, these are backup files made by vi. Add them to a [gitignore](http<colon>//git-scm.com/docs/gitignore) (just `*~` should suffice). <br><br>Also, the Reddit API seems to limit the max number of comments per request to 100 meaning that the PRAW API is (internally) making multiple requests to the api in order to get all of the comments (requesting 1-100, than 101-200, ...). I suspect this is what is slowing down the program since each request likely takes somewhere in the order of 100s of milliseconds to seconds. You can speed up this process using multithreading. Think about it like this<colon> You and your friend go to a restaurant; now would you rather place an order for first yourself, wait for that order to be completed, and than place an order for your friend or would you rather place both the orders at once? Which one is likely to get your food first? It is likely that the second way will get all the food faster. It is the same thing with the Reddit API, if you place all your requests at once, you are likely to get them back faster. <br><br>Now PRAW<sq>s API internally doesn<sq>t do this for you. If you look [here](https<colon>//github.com/praw-dev/praw/blob/master/praw/__init__.py#L473) it is doing a standard loop to sequentially grab the data (It isn;t even requesting the max of 100 meaning it has to make 1000 / 25 (25 is the default comment limit) = 40 requests). It might be more work but you should investigate python<sq>s [threading modules](https<colon>//docs.python.org/2/library/threading.html) to speed up getting the data. <br><br>Feel free to ask any questions, and congratulations on your first web app! <colon>)</p>", 
                "question": "My first webapp redditAnalysis visualizes your reddit data such as your top words and subreddit activity. Just search a redditor wait for the data to scan and have fun! Link inside."
            }, 
            "id": "cjql6dl"
        }, 
        {
            "body": {
                "answer": "<p>successful people in life are a product of hard work, not unobtainable talent.</p>", 
                "question": "Are programmers who work at Google Facebook etc... <dq>geniuses<dq> or can i be as good as them?"
            }, 
            "id": "cb2yl6k"
        }, 
        {
            "body": {
                "answer": "<p>>The thing is, i kinda feel there is some <dq>magical<dq> gap between me and those ppl, that i will never close.<br><br>I have friends that work at Google and Facebook and they are not geniuses (I say that in a loving friend way, they are incredible people that I care about very much). <br><br>Something that I hear often from people I know to be great programmers is that they don<sq>t believe in <sq>being smart<sq>. They believe in something called a growth mindset. Basically, if you start a challenge with the mindset that you can solve it, you will. <br><br>I was attracted to programming because <sq>how good you are at it<sq> is directly related to how much time you spend doing it. <br><br>Warning- that magical gap feeling never closes. I<sq>m still newish to programming and I constantly feel like a beginner, there<sq>s always more to learn. I<sq>m pretty active in local tech meetups and everyone I<sq>ve talked to, including senior devs at giant companies, says that the more to learn feeling never goes away.<br><br>A few articles related to growth mindset<colon><br>http<colon>//michaelgr.com/2007/04/15/fixed-mindset-vs-growth-mindset-which-one-are-you/<br><br>http<colon>//www.slate.com/articles/health_and_science/science/2013/04/math_teacher_explains_math_anxiety_and_defensiveness_it_hurts_to_feel_stupid.html<br><br>http<colon>//nymag.com/news/features/27840/index1.html</p>", 
                "question": "Are programmers who work at Google Facebook etc... <dq>geniuses<dq> or can i be as good as them?"
            }, 
            "id": "cb2ytlu"
        }, 
        {
            "body": {
                "answer": "<p>They are not geniuses.  They simply put effort into learning.<br><br>> I just finished my first year of college and year ago i knew nothing about programming. <br><br>Here is the secret.  They did not rely on college to teach them what they know.  Use college as the stepping stone.  When you graduate, you should have done more than graduate and your homework.<br><br>Oh dear god, do more than your homework.  If I ask you what you<sq>ve done, and you tell me about homework you<sq>ve done, I<sq>m going to know because I<sq>ve spoken to several other students in your class that did the same thing.</p>", 
                "question": "Are programmers who work at Google Facebook etc... <dq>geniuses<dq> or can i be as good as them?"
            }, 
            "id": "cb32oj6"
        }, 
        {
            "body": {
                "answer": "<p>Have you been to YouTube lately? No geniuses worked on that.</p>", 
                "question": "Are programmers who work at Google Facebook etc... <dq>geniuses<dq> or can i be as good as them?"
            }, 
            "id": "cb33wz7"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.1314 <br> > [What is this?](https<colon>//pastebin.com/64GuVi2F/77976)</p>", 
                "question": "Following the r/learnprogramming using 1 hour/day from [Day 1] of 30."
            }, 
            "id": "cn5zufo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m going to join you.</p>", 
                "question": "Following the r/learnprogramming using 1 hour/day from [Day 1] of 30."
            }, 
            "id": "cn5x9lj"
        }, 
        {
            "body": {
                "answer": "<p>Can we start  a subreddit and/ Google hangout or something? I want to join you. </p>", 
                "question": "Following the r/learnprogramming using 1 hour/day from [Day 1] of 30."
            }, 
            "id": "cn619b5"
        }, 
        {
            "body": {
                "answer": "<p>Please continue doing this!<br><br>I teach programming, and so I<sq>m always fascinated by posts similar to yours where people describe their learning and thought processes. <br><br>It<sq>s really helpful to see how programming looks like from the perspective of a beginner/discover roadblocks that we might have overlooked.</p>", 
                "question": "Following the r/learnprogramming using 1 hour/day from [Day 1] of 30."
            }, 
            "id": "cn5wyqu"
        }, 
        {
            "body": {
                "answer": "<p>Give either of these two a shot, they are pretty comprehensive<colon><br><br>https<colon>//github.com/open-source-society/computer-science<br>https<colon>//docs.google.com/spreadsheets/d/1BD8BJJUNaX63m2QmySWMGDp71nx4W4MyyiIBlfMoN3Q/htmlview?sle=true#</p>", 
                "question": "How if at all would you recommend I go about learning the things a CS undergrad would learn? (x-post /r/cscareerquestions)"
            }, 
            "id": "d1345j9"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m sort of in the same boat as you, except with an aero and physics background rather than EE. My approach has been pretty similar to yours--I found the textbooks used by my alma mater, compared to texts recommended by MIT OCW and some other universities, looked at a few lists of recommended texts, and looked through similar questions on Reddit. I found most areas have multiple good texts, and also spent some time deciding which ones looked more applicable to me. That said, I<sq>m admittedly someone who rather enjoys and learns well from textbooks compared to lectures, and that<sq>s not the case for everyone.<br><br>Here<sq>s what I gathered. If any more knowledgeable CS guys have suggestions/corrections, please let me know.<br><br>* Intro-ish<colon> [Structure and Interpretation of Computer Programs by Abelson & Sussman](https<colon>//github.com/sarabander/sicp-pdf/raw/master/sicp.pdf)<br>* Math<colon> [Mathematics for Computer Science by Lehman et al.](http<colon>//www.seas.harvard.edu/courses/cs20/MIT6_042Notes.pdf)<br>* Computer Architecture<colon> [Computer Systems A Programmer<sq>s Perspective by Bryant & O<sq>Hallaron](http<colon>//www.amazon.com/gp/product/013409266X)<br>* Algorithms<colon> [Introduction to Algorithms by Cormen et al.](http<colon>//www.amazon.com/gp/product/0262033844)<br>* Programming Languages<colon> [Programming Language Pragmatics by Scott](http<colon>//www.amazon.com/gp/product/0124104096)<br>* Computational Theory<colon> [Introduction to the Theory of Computation by Sipser](http<colon>//www.amazon.com/gp/product/113318779X)<br>* Operating Systems<colon> [Modern Operating Systems by Tanenbaum & Bos](http<colon>//www.amazon.com/gp/product/013359162X)<br>* Networks<colon> [Computer Networks by Tanenbaum](http<colon>//www.amazon.com/gp/product/0132126958)<br>* Compilers<colon> [Compilers by Aho et al.](http<colon>//www.amazon.com/gp/product/0321486811)<br>* Security<colon> [Security Engineering by Anderson](http<colon>//www.amazon.com/gp/product/0470068523)<br>* Type Theory<colon> [Types and Programming Languages by Pierce](http<colon>//www.amazon.com/gp/product/0262162091)<br>* AI<colon> [Artificial Intelligence<colon> A Modern Approach by Russell & Norvig](http<colon>//www.amazon.com/gp/product/0136042597)<br><br>Full disclosure<colon> I haven<sq>t actually read more than the preface of any of those books. Software engineering topics are more directly applicable to me than CS topics right now, so here are some that I<sq>ve actually started reading<colon><br><br>* [The Pragmatic Programmer by Hunt & Thomas](http<colon>//www.amazon.com/gp/product/020161622X)<br>* [Clean Code by Martin](http<colon>//www.amazon.com/gp/product/0132350882)<br>* [Code Complete by McConnell](http<colon>//www.amazon.com/gp/product/0735619670)<br>* [Design Patterns by Gamma et al.](http<colon>//www.amazon.com/gp/product/0201633612)</p>", 
                "question": "How if at all would you recommend I go about learning the things a CS undergrad would learn? (x-post /r/cscareerquestions)"
            }, 
            "id": "d13dohp"
        }, 
        {
            "body": {
                "answer": "<p>First of all, you don<sq>t need everything a CS student learns in a four year course, because that is very broad. Your EE degree should have taught you quite a few things that are very similar. I guess algorithms and stuff like that could be useful. <br><br>I would start looking at places like MIT OpenCourseWare, Coursera, edX,..There are plenty of courses that teach stuff pretty well.<br><br>May I ask for your motivation to come <dq>as close as possible to getting a BS in CS<dq>?</p>", 
                "question": "How if at all would you recommend I go about learning the things a CS undergrad would learn? (x-post /r/cscareerquestions)"
            }, 
            "id": "d133v65"
        }, 
        {
            "body": {
                "answer": "<p>Learn an assembly language. After that, you<sq>ll have a much better fundamental understanding of how most higher level languages work. Asm is pretty difficult but if you want to get proficient fast, that<sq>s the way to go dude. You<sq>ll learn the underlying mechanics of how languages like Python, Java, etc work. A lot of people avoid the low level languages and stick to high level languages/scripts, but if you ever want to be a serious programmer it<sq>s essential</p>", 
                "question": "How if at all would you recommend I go about learning the things a CS undergrad would learn? (x-post /r/cscareerquestions)"
            }, 
            "id": "d1378h7"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "18 Videos/Episodes in to my Game Programming Series on How to Make Realm of the Mad God From Scratch"
            }, 
            "id": "c6zq339"
        }, 
        {
            "body": {
                "answer": "<p>Anyone who<sq>s starting out with these videos as a gateway into the world of game development be warned<colon> So far (18 episodes) seem to have no gameplay related programming. This is still very much on the level of building a game-engine.<br><br>So if you wish to know how to program graphics and the likes then these videos are made for you. But if you wish to develop games then I<sq>d suggest you start out with picking a game engine or a framework.</p>", 
                "question": "18 Videos/Episodes in to my Game Programming Series on How to Make Realm of the Mad God From Scratch"
            }, 
            "id": "c6ztk6a"
        }, 
        {
            "body": {
                "answer": "<p>Dude I really appreciate what you<sq>re doing I<sq>ve learned a ton, but I have found that sometimes you start commenting that you dont<sq> have time to do the episodes, and it feels like you<sq>re doing just to put something out. I think you should only do episodes when you have time to do them, I think this will improve the content of your vids (not to say your content isn<sq>t great). Anyways keep up the good work mate.</p>", 
                "question": "18 Videos/Episodes in to my Game Programming Series on How to Make Realm of the Mad God From Scratch"
            }, 
            "id": "c6zyxt8"
        }, 
        {
            "body": {
                "answer": "<p>Saved, this is amazing.</p>", 
                "question": "18 Videos/Episodes in to my Game Programming Series on How to Make Realm of the Mad God From Scratch"
            }, 
            "id": "c6zo3mz"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s what I wish I understood when I started programming, in 10 sentences<colon><br><br>1. A computer receives, stores, and manipulates information.<br>2. Programmers refer to information as <sq>data<sq>.<br>3. Data can be structured to represent concrete things - a song, a picture, a street address, an entire telephone book.<br>4. Data can also represent abstract things, such as the relationships between you and all of your friends. <br>5. Computers can only store data that can be represented as a collection of numbers.<br>6. This is where all those Zeroes and Ones come from - they are how the computer stores numbers.<br>7. Programmers write code, which is itself a kind of data, to tell a computer how to manipulate data.<br>8. Programmers break data manipulations into small, understandable steps, and then compose the steps together.<br>9. Programmers create abstractions by finding patterns in code and giving those patterns or ideas a name (and often a theoretical background).<br>10. Programmers gain productivity by layering abstractions, at the cost of not understanding or controlling the entire system.<br><br>This really helps me think about coding as the process of writing data transformers. If I can represent something as data, then I can manipulate, transmit, and store a representation of that thing. I can allow users to control how the data is manipulated through a user interface.<br><br>It also helps me gain clarity around my next steps. What data do I need to accomplish the task? Where does that data live, and where does it need to be? How can I get the data that I need from the data that I have, or from the people who interact with my code.<br><br>Perhaps most importantly, it helps me grapple with leaking abstractions - and it helps me understand that there is always some cost paid for the abstraction, whether it<sq>s a lack of control over a program<sq>s runtime environment (with garbage collection, for example) or merely a more complex compiler or interpreter.<br><br>It<sq>s never necessary to understand EVERYTHING that a computer is doing, but when something unexpected happens, it is important to be able to peel back the abstraction onion and figure out where ones mental model of a computational task diverges from reality.</p>", 
                "question": "For experienced/employed programmers if you could go back and tell yourself anything while you were learning programming what would it be?"
            }, 
            "id": "crz6iu3"
        }, 
        {
            "body": {
                "answer": "<p>Mine bitcoin from day one and hoard it.<br><br>Honestly, though, nothing; there<sq>s nothing I<sq>d be able to learn from having simply been told that really mattered. I made a lot of mistakes, but if I went back and made myself somehow not commit them I would have ultimately learned less for it.</p>", 
                "question": "For experienced/employed programmers if you could go back and tell yourself anything while you were learning programming what would it be?"
            }, 
            "id": "crz28qn"
        }, 
        {
            "body": {
                "answer": "<p>Learn C. Seriously learn C. Then go on to C++. Don<sq>t gaze longingly at Java<sq>s <dq>write once, run anywhere<dq> schtick cause it<sq>s going to bite you in the ass as soon as they update anything.<br><br>Someday I will take this advice.<br><br>[Edit]<colon> Wow didn<sq>t expect this to spark discussion. I<sq>ve loved working through the NAND2Tetris book, and in general learn best by understanding the bare metal and working up the layers of abstraction. You can try to learn C via C++, but you<sq>re getting features and designs that aren<sq>t so simple in pure C, so you<sq>re really just learning C++, and going to C will seem like <dq>omg why can<sq>t I just do *x*<dq>. On the flip side, start with C, reinventing the wheel all over, and then when exposed to C++ you can go <dq>oh yeah instead of reinventing *x* I can just use *y*<dq>.<br><br>But that<sq>s just me. /u/rymdsylt<sq>s analogy to learning JS before JQuery is pretty good too. Learn the lower level logic before piling libraries and sugar on top, and you have a better understanding of what the libraries and sugar are doing for you.<br><br>And full disclosure I don<sq>t speak C/++ or JS/Query, not yet anyway. Most my stuff I do in Java, or PHP. ^^^Sorry ^^^not ^^^sorry</p>", 
                "question": "For experienced/employed programmers if you could go back and tell yourself anything while you were learning programming what would it be?"
            }, 
            "id": "crz54q3"
        }, 
        {
            "body": {
                "answer": "<p>KISS. Keep it simple stupid. Oh you are being clever with your silly inheritance and reflection and clever things to make it easier for you to code. But nobody can read your code so nobody cares.</p>", 
                "question": "For experienced/employed programmers if you could go back and tell yourself anything while you were learning programming what would it be?"
            }, 
            "id": "crz5uug"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Just a happy story about an old guy who turned his life around by learning programming."
            }, 
            "id": "cffsftk"
        }, 
        {
            "body": {
                "answer": "<p>An old guy.  I thought I was getting some sixty year old.  You<sq>re 36.  Boy are you gunna get depressed in  15 years.<br><br>I really don<sq>t know where the idea that computing/programming is a young person<sq>s game comes from - Larry Wall (creator of Perl) is 59. Tim Berners-Lee is 58.  So is Bill Gates.  It<sq>s not like you can<sq>t learn new stuff either (as everybody in IT has to learn new stuff all the time to keep up).<br><br>  It<sq>s great you changed careers, but I don<sq>t want anybody to get the idea that it is a highly unusual thing to do.  It just takes time and effort.</p>", 
                "question": "Just a happy story about an old guy who turned his life around by learning programming."
            }, 
            "id": "cffw08n"
        }, 
        {
            "body": {
                "answer": "<p>You completely rewire your brain at the age of 40 . dude.<br>That<sq>s awesome!<br><br>You<sq>re a living proof that age doesn<sq>t play any role into achieving something you want , even if that means going back to School. You gave me inspiration , as a university dropout who is studying online and wants to go back to school to study computer science. Thanks and take care.</p>", 
                "question": "Just a happy story about an old guy who turned his life around by learning programming."
            }, 
            "id": "cfftm0j"
        }, 
        {
            "body": {
                "answer": "<p>>In 2011 I decided to quit at go back to school for 2\u00bd years and get an AP in computer science. I was 36 years old at the time.<br><br>And here I am feeling insecure about my want to learn how to program because I<sq>m 31. *hides*<br><br>What an awesome story, OP! Thank you for the inspiration! I have to get *doing*.</p>", 
                "question": "Just a happy story about an old guy who turned his life around by learning programming."
            }, 
            "id": "cffvlqa"
        }, 
        {
            "body": {
                "answer": "<p>As a beginner, I would be very interested in the answers.</p>", 
                "question": "Had a technical phone interview today for an Entry Level Software Engineering position and nailed it.  Here are the questions they asked<colon>"
            }, 
            "id": "c5q5ton"
        }, 
        {
            "body": {
                "answer": "<p>>1. What kind of data structure would you use to hold an arbitrary amount of objects in which retrieval is not an issue?<br><br>/dev/null</p>", 
                "question": "Had a technical phone interview today for an Entry Level Software Engineering position and nailed it.  Here are the questions they asked<colon>"
            }, 
            "id": "c5qbaza"
        }, 
        {
            "body": {
                "answer": "<p>My main takeaway<colon> I<sq>ve got a long way to go.</p>", 
                "question": "Had a technical phone interview today for an Entry Level Software Engineering position and nailed it.  Here are the questions they asked<colon>"
            }, 
            "id": "c5q78l8"
        }, 
        {
            "body": {
                "answer": "<p>By the way, if you find this kind of stuff interesting (what companies ask during interviews), there<sq>s a website calls [glassdoor](http<colon>//www.glassdoor.com/index.htm) where people anonymously post what they were asked during their interview. If you<sq>re *really* lucky, you can see in advanced what a particular company is going to ask you.</p>", 
                "question": "Had a technical phone interview today for an Entry Level Software Engineering position and nailed it.  Here are the questions they asked<colon>"
            }, 
            "id": "c5q7osi"
        }, 
        {
            "body": {
                "answer": "<p>Will like it , please don<sq>t post before 1 hour of the stream. Post one day before you are going live</p>", 
                "question": "Would people here be interested in a livestream of an experienced programmer giving advice/helping fix bugs/answer questions/etc? [Python C++]"
            }, 
            "id": "cpl0pd6"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not that interested in streams than I am in YouTube videos. I realize that there is a lot of interaction between streamer and audience but the lack of rewinding and skipping ahead is just taking the appeal away from me.</p>", 
                "question": "Would people here be interested in a livestream of an experienced programmer giving advice/helping fix bugs/answer questions/etc? [Python C++]"
            }, 
            "id": "cpkz34u"
        }, 
        {
            "body": {
                "answer": "<p>Maybe you can show us an example how to make a small GUI in C++? I<sq>ve been learning C++ and currently taking Data Structures. My other question is maybe you can explain how trees/binary trees work? <br><br>Also, another question<colon> What data structures do you commonly find yourself using?<br><br><br>I<sq>ll be watching the stream! Cant wait!</p>", 
                "question": "Would people here be interested in a livestream of an experienced programmer giving advice/helping fix bugs/answer questions/etc? [Python C++]"
            }, 
            "id": "cplange"
        }, 
        {
            "body": {
                "answer": "<p>There is currently a pretty decent sized following on Twitch.tv under the Game Development heading where people basically sit and watch dudes code for hours. <br><br>There is a market for this. </p>", 
                "question": "Would people here be interested in a livestream of an experienced programmer giving advice/helping fix bugs/answer questions/etc? [Python C++]"
            }, 
            "id": "cplm5yd"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s this thing I programmed so you guys can download everything you need to learn to program. Sick.</p>", 
                "question": "Script for downloading all Coursera content (including quizzes/assignments)"
            }, 
            "id": "d4exc4i"
        }, 
        {
            "body": {
                "answer": "<p>This is fantastic! I<sq>d been using coursera-dl to retrieve all the videos, but was a bit disappointed it didn<sq>t go through the other materials.<br><br>Question<colon> will there be future support for other sections of a course? Some courses, for example, have a separate section for further exercises or video errata or solutions. I imagine it would probably be more difficult to do such a thing, though.</p>", 
                "question": "Script for downloading all Coursera content (including quizzes/assignments)"
            }, 
            "id": "d4egy3d"
        }, 
        {
            "body": {
                "answer": "<p>Naming my firstborn after the person that makes this work on Udemy.</p>", 
                "question": "Script for downloading all Coursera content (including quizzes/assignments)"
            }, 
            "id": "d4em1za"
        }, 
        {
            "body": {
                "answer": "<p>Using windows 10 python 35-32 I<sq>m getting this error<colon><br><br>    >py dl_all.py -u <username> -p <password> -q -v -a<br>    Namespace(a=True, download_type=None, headless=False, p=<sq><password><sq>, path=None, q=True, u=<sq><username><sq>, v=True)<br>    Traceback (most recent call last)<colon><br>      File <dq>dl_all.py<dq>, line 228, in <module><br>        mkdir_safe(class_slug)<br>      File <dq>dl_all.py<dq>, line 20, in mkdir_safe<br>        os.makedirs(path)<br>      File <dq>C<colon>\\Users\\V\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\os.py<dq>, line 231, in makedirs<br>        makedirs(head, mode, exist_ok)<br>      File <dq>C<colon>\\Users\\V\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\os.py<dq>, line 231, in makedirs<br>        makedirs(head, mode, exist_ok)<br>      File <dq>C<colon>\\Users\\V\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\os.py<dq>, line 231, in makedirs<br>        makedirs(head, mode, exist_ok)<br>      File <dq>C<colon>\\Users\\V\\AppData\\Local\\Programs\\Python\\Python35-32\\lib\\os.py<dq>, line 241, in makedirs<br>        mkdir(name, mode)<br>    OSError<colon> [WinError 123] The filename, directory name, or volume label syntax is incorrect<colon> <sq>https<colon><sq> <br><br>Am i doing something wrong?<br><br>       </p>", 
                "question": "Script for downloading all Coursera content (including quizzes/assignments)"
            }, 
            "id": "d4ey0q4"
        }, 
        {
            "body": {
                "answer": "<p>Some answers are here<colon> http<colon>//security.stackexchange.com/questions/6095/xkcd-936-short-complex-password-or-long-dictionary-passphrase<br><br>> And what<sq>s up with having a maximum limit on passwords?<br><br>There<sq>s really no good excuse for this<br></p>", 
                "question": "Why don<sq>t websites promote the use of sentences for passwords? (Instead of passwords like pA$$w0rD$)"
            }, 
            "id": "d1w9t2f"
        }, 
        {
            "body": {
                "answer": "<p>The reason for this is simply because there<sq>s tons and tons of people making these kinds of decisions who really shouldn<sq>t. That<sq>s all. I<sq>ve worked in a lot of projects (external consultant) and you would not believe the general level of I-don<sq>t-know-what-the-heck-I<sq>m-talking-about.</p>", 
                "question": "Why don<sq>t websites promote the use of sentences for passwords? (Instead of passwords like pA$$w0rD$)"
            }, 
            "id": "d1wa8zc"
        }, 
        {
            "body": {
                "answer": "<p>half related, but virgin media in the uk give you the choice of only 8-10 character passwords.<br><br>8, 9 or 10 letter words only. My gast was well and truly flabber<sq>d<br></p>", 
                "question": "Why don<sq>t websites promote the use of sentences for passwords? (Instead of passwords like pA$$w0rD$)"
            }, 
            "id": "d1wfom2"
        }, 
        {
            "body": {
                "answer": "<p>People get locked out often enough when mistyping a regular password.</p>", 
                "question": "Why don<sq>t websites promote the use of sentences for passwords? (Instead of passwords like pA$$w0rD$)"
            }, 
            "id": "d1wbb6d"
        }, 
        {
            "body": {
                "answer": "<p>I have no idea what this is about, can anyone explain it to me?</p>", 
                "question": "Learning Python for Data Science<colon> IPython Notebooks for Python essentials PySpark Python Hadoop MapReduce Kaggle scikit-learn matplotlib pandas NumPy AWS etc"
            }, 
            "id": "cs7js8m"
        }, 
        {
            "body": {
                "answer": "<p>Yes this is perfect for my internship! Thank you<br><br>edit- wait, this doesn<sq>t explain them though in an introductory way. does anyone have recommendations for where to do that? </p>", 
                "question": "Learning Python for Data Science<colon> IPython Notebooks for Python essentials PySpark Python Hadoop MapReduce Kaggle scikit-learn matplotlib pandas NumPy AWS etc"
            }, 
            "id": "cs7lpkh"
        }, 
        {
            "body": {
                "answer": "<p>good work</p>", 
                "question": "Learning Python for Data Science<colon> IPython Notebooks for Python essentials PySpark Python Hadoop MapReduce Kaggle scikit-learn matplotlib pandas NumPy AWS etc"
            }, 
            "id": "cs77jmm"
        }, 
        {
            "body": {
                "answer": "<p>You are awesome, I hope you know this </p>", 
                "question": "Learning Python for Data Science<colon> IPython Notebooks for Python essentials PySpark Python Hadoop MapReduce Kaggle scikit-learn matplotlib pandas NumPy AWS etc"
            }, 
            "id": "cs7flzu"
        }, 
        {
            "body": {
                "answer": "<p>Learning Python through public data hacking<colon> http<colon>//www.youtube.com/watch?v=RrPZza_vZ3w</p>", 
                "question": "Anyone know of any good videos of programmers creating something and commentating as they go along?"
            }, 
            "id": "ci16o16"
        }, 
        {
            "body": {
                "answer": "<p>I know Notch has done some live streams of him making games.<br><br>Here is one I found.<br>http<colon>//www.twitch.tv/notch/b/487318324<br>3 more hours of the same game in development<br>http<colon>//www.twitch.tv/notch/b/487389402<br><br>Bunch of stuff in his past broadcasts to look at too.<br>http<colon>//www.twitch.tv/notch/profile/pastBroadcasts</p>", 
                "question": "Anyone know of any good videos of programmers creating something and commentating as they go along?"
            }, 
            "id": "ci12bg7"
        }, 
        {
            "body": {
                "answer": "<p>quill18 has a separate channel called [quill18creates](https<colon>//www.youtube.com/user/quill18creates) where he does game programming tutorials. He focuses on Unity and has tutorials for both a 2D Flappy Bird type game and a <br>3D multiplayer FPS, with more to come.</p>", 
                "question": "Anyone know of any good videos of programmers creating something and commentating as they go along?"
            }, 
            "id": "ci16puv"
        }, 
        {
            "body": {
                "answer": "<p>I like this channel. He uses Java. I especially enjoy the game development playlist, which is already 110 episodes long <colon>)<br>https<colon>//www.youtube.com/channel/UCQ-W1KE9EYfdxhL6S4twUNw <br><br>For web development I enjoy PhpAcademy<br>https<colon>//www.youtube.com/channel/UCpOIUW62tnJTtpWFABxWZ8g<br><br>This guy, Jesse Warden, is by far the most entertaining tutorial guy I<sq>ve found. I really hope he<sq>ll make more videos. At the moment he only has a couple of playlists for programming. Especially good if you<sq>re just getting into Javascript or are interested in Dart.<br>https<colon>//www.youtube.com/channel/UCzBDmYcmynHX7mELvD0sWEA</p>", 
                "question": "Anyone know of any good videos of programmers creating something and commentating as they go along?"
            }, 
            "id": "ci12xur"
        }, 
        {
            "body": {
                "answer": "<p>Can I bring my druid<br></p>", 
                "question": "On behalves of many beginner and experienced programmers we have created a discord server."
            }, 
            "id": "d4te9xr"
        }, 
        {
            "body": {
                "answer": "<p>Hasn<sq>t this already been done with Skype, IRC, some guy attempting it with Snapchat, and a few other services?<br><br>There may be a mass join, then everyone slowly leaves. I don<sq>t see much a point to it.</p>", 
                "question": "On behalves of many beginner and experienced programmers we have created a discord server."
            }, 
            "id": "d4tab68"
        }, 
        {
            "body": {
                "answer": "<p>Heyo! If possible I<sq>d like a C/lowlevel category. Or is that included in CS50 or hacking?</p>", 
                "question": "On behalves of many beginner and experienced programmers we have created a discord server."
            }, 
            "id": "d4t4hpw"
        }, 
        {
            "body": {
                "answer": "<p>I suggest adding a #request-channels channel on the chatroom to make managing suggestions easier <colon>)</p>", 
                "question": "On behalves of many beginner and experienced programmers we have created a discord server."
            }, 
            "id": "d4tcenj"
        }, 
        {
            "body": {
                "answer": "<p>As someone who has interviewed dozens of programmers, some of whom came out of those code bootcamps, you are in for a real challenge if you<sq>re going from 0 to hireable in 6 months.  I<sq>m not saying it<sq>s impossible, it absolutely is possible and I have hired such people, but the vast majority of candidates with that much experience are nowhere near hirable.<br><br>A lot of what makes a good programmer is just plain old experience.  You need to write a *lot* of code so that when you<sq>re presented with a new problem, you immediately have a gut instinct of how to solve it.  This is where I<sq>ve seen most self-taught programmers fail.  They can solve problems that are almost exactly like ones they<sq>ve already done, but give them something new and they<sq>re like a deer in headlights. <br><br>Read up about coding interviews and particularly the Fizz-buzz problem.  You will be asked things like that in programming interviews.  You need to get to a point where you can solve problems like that in your sleep.<br><br>So my advice is to write as much code as you possibly can!  Don<sq>t watch online videos without a text editor open, don<sq>t read books cover to cover, just tackle as many problems as you can and only consult books etc. when you<sq>re stuck on something specific.</p>", 
                "question": "I will be taking the next 6 months off work and dedicating 40 hours a week to learn coding. Any advice is appreciated."
            }, 
            "id": "crpzmxh"
        }, 
        {
            "body": {
                "answer": "<p>Start using source control immediately.  </p>", 
                "question": "I will be taking the next 6 months off work and dedicating 40 hours a week to learn coding. Any advice is appreciated."
            }, 
            "id": "crpvkqo"
        }, 
        {
            "body": {
                "answer": "<p>My advice is to not take 6 months off. You could take 2.5 - 3 hours each day while working and get roughly the same amount of hours in just over a year. Ambitious goals tend to promote procrastination. If you do it in a more piece-meal fashion then you can consume the knowledge easier. Plus if it doesn<sq>t work out, you<sq>ll still have a job.</p>", 
                "question": "I will be taking the next 6 months off work and dedicating 40 hours a week to learn coding. Any advice is appreciated."
            }, 
            "id": "crq1d3s"
        }, 
        {
            "body": {
                "answer": "<p>With 6 months at 40 hours a week, you could definitely become employable. <br><br>First, I would pick a stack to start with. Look at jobs in your area on Dice, Stack Overflow Careers, Angel List, and Github Jobs. See what the biggest number of jobs use, language-wise-- if you live in a huge tech hub like SF, NYC, Austin, Seattle, etc then you could be seeing a lot of Ruby, Node.js, and Python... otherwise you<sq>re likely to see mostly ASP.NET, PHP, and Java. If you<sq>re willing to relocate, that basically allows you to choose your stack yourself, but I<sq>m assuming you<sq>re not willing to uproot your family. Pick the language/stack that has the most jobs in your area, and start with that.<br><br>One of the things I often times see new programmers that want to develop websites lack in knowledge is an understanding of how the internet works. I would recommend learning that sooner rather than later-- just something as simple as, you type google.com into your web browser, what exactly is happening behind the scenes? Doesn<sq>t have to be the first thing you learn, but it makes everything make a whole lot more sense as you learn.<br><br>Also, learn DB technologies. It<sq>s pretty simple, don<sq>t be intimidated by it. Almost every back end web dev job will use it.</p>", 
                "question": "I will be taking the next 6 months off work and dedicating 40 hours a week to learn coding. Any advice is appreciated."
            }, 
            "id": "crpv3hv"
        }, 
        {
            "body": {
                "answer": "<p>I would disagree and propose that experience is the best and only real way to learn how to code. But looking at other peoples code can sure be quite helpful, if the code is documented appropriately.<br><br>Of course that is only my take on it. Be that as it may, I am very thankful for you linking that subreddit. I will dive right in and look for an interesting project <colon>)<br><br>Thanks! <colon>)</p>", 
                "question": "The best way to learn how to code is to look at other peoples code! - /r/coolgithubprojects/"
            }, 
            "id": "ch1h7xi"
        }, 
        {
            "body": {
                "answer": "<p>The best way to learn how to code is to FIX someone else<sq>s code. <br><br>FTFY</p>", 
                "question": "The best way to learn how to code is to look at other peoples code! - /r/coolgithubprojects/"
            }, 
            "id": "ch1klxb"
        }, 
        {
            "body": {
                "answer": "<p>I teach every semester, your assumption is incorrect. The only way to learn how to code is to code. It is a practiced skill. I can read someone<sq>s code and easily recreate their algorithm because I can code in many languages and I see the nuances between them; I know the relationships between the functions and can identify the purpose in the code, but for a learner to do that, well...it just doesn<sq>t work for 90<percent> or more of my students. They have to practice it, they have to break something to learn the correct way to execute a plan. Just looking at someone<sq>s code isn<sq>t going to teach them anything because most code isn<sq>t thoroughly commented or documented enough for a learner to understand what is happening at any moment. Really, you might as well hand them a book in Spanish or French...they might understand a few words here and there, but really they have no idea what is going on in the story. Now, with proper documentation and teaching by example, then the student replicating the code examples, they can learn the intricacies and begin to understand more and more. But github projects? No...that is a recipe for disaster for the majority of students...they will become frustrated and soon give up because they have little context and no relationship to the code. It is much better to learn code and new techniques by following a tutorial available for free online, in documentation, or through education than jumping into an existing project.</p>", 
                "question": "The best way to learn how to code is to look at other peoples code! - /r/coolgithubprojects/"
            }, 
            "id": "ch1m6as"
        }, 
        {
            "body": {
                "answer": "<p>It seems that through history the glib, incomplete words of <dq>advice<dq> continue to get press.<br><br>If practice was all that mattered, then books - in fact *literacy* - would be unnecessary for propagation of knowledge.  Practice is necessary, but not *sufficient*, same for reading the work of others.</p>", 
                "question": "The best way to learn how to code is to look at other peoples code! - /r/coolgithubprojects/"
            }, 
            "id": "ch1nkat"
        }, 
        {
            "body": {
                "answer": "<p>What you<sq>re referring to is called a version control system or version control software. It provides many different features and solves several problems related to writing and maintaining software, especially when there is a team of developers involved rather than just one.<br><br>The repository can be thought of as storage. It<sq>s where you put your project. The first main feature that version control software provides is that it allows you to easily *share* your project with other people. Give them a link to your repository and they can obtain a copy for themselves. This operation is usually called *cloning* the repository, or *checking it out*. This has obvious advantages for software that is worked on by several developers, especially when the developers are distributed geographically.<br><br>Now suppose you make some changes to your source code that you<sq>re happy with. You obviously want to save them, so you do that by *committing* your changes with a commit message that explains what the changes you made are for. Your changes are now saved in the repository and other people with access to your repository will be able to see them. The interesting thing about version control software is that it stores a history of every commit ever made, so you can always go back to *any* previous version of a file, and you can also compare any two versions of a file. For example, suppose you know that a bug was introduced after some point in time. You can go back to that point in time and compare the source then with the source as it is now, and you<sq>ll be able to see all of the changes that have been made since. Furthermore, you can look back through each change individually and look at the commit messages to see what each change was for, who made the change, when it was made, what changed etc.<br><br>Commits are also atomic, which allows several developers to make changes to the same source code at the same time. I can make changes to main.cpp at the same time as you, and we can each have our own copies saved to our own computers. Now suppose you finish editing your code and commit your changes. Later on, I finish my changes and also try to commit them. The version control software will tell me that the file I<sq>m trying to commit has been changed, and will then give me the opportunity to *merge* my changes with the ones you<sq>ve already committed. Most version control systems have very clever tools which can automatically and intelligently merge changes together, or at least provide an easy way to manually merge changes.<br><br>Another useful feature provided by most version control systems is branching. A branch is a set of changes which are isolated from other branches containing other sets of changes. This allows developers to independently work on the same source, even committing many changes, without interfering with each other. I can commit all of my changes to main.cpp in my own branch while you commit all of your changes to main.cpp in *your* own branch, and there<sq>s no problem. I won<sq>t see your changes and you won<sq>t see mine. Later, once we<sq>ve both independently completed our features, we can *merge* the branches together. Once again, the merge tool will be able to intelligently merge our changes together.<br><br>That<sq>s a very brief overview of version control systems. I would encourage you to do some more research on your own.<br><br>[git](http<colon>//git-scm.com/) is a commonly used version control system. In fact, it<sq>s a *distributed* version control system, which means that it doesn<sq>t need any central location on which to store the repository - every developer can have their own copy of the repository and they can *push* their changes or *pull* changes from each other (or a central location, if they really want). Another popular one is [Mercurial](http<colon>//mercurial.selenic.com/). A non-distributed VCS that<sq>s still frequently used is [Subversion](http<colon>//subversion.apache.org/) (though distributed VCS is more common these days).<br><br>[github](https<colon>//github.com/) is a central location for you to host your git repositories, and provides other project management features. Another example is [bitbucket](https<colon>//bitbucket.org/).</p>", 
                "question": "Git Github repositories etc... Can someone ELI5?"
            }, 
            "id": "cfhjmn5"
        }, 
        {
            "body": {
                "answer": "<p>This is a good way to start <colon> [try github] (http<colon>//try.github.io/levels/1/challenges/1)<br><br>It helped me when i first started using github.<br><br></p>", 
                "question": "Git Github repositories etc... Can someone ELI5?"
            }, 
            "id": "cfhnnex"
        }, 
        {
            "body": {
                "answer": "<p>Git<colon> It<sq>s a program that will remember how your work looks and used to look for you. It can also compare it to other people<sq>s work if you<sq>re more people doing the same work.<br><br>Github<colon> A website that uses Git to let you share your work and find people to work with and stuff to work on.<br><br>Repository<colon> A folder where you have work that Git is remembering for you.<br><br>Was that too LI5 and too little E?</p>", 
                "question": "Git Github repositories etc... Can someone ELI5?"
            }, 
            "id": "cfhph2f"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//twitter.com/tabqwerty/status/45611899953491968</p>", 
                "question": "Git Github repositories etc... Can someone ELI5?"
            }, 
            "id": "cfhnxwj"
        }, 
        {
            "body": {
                "answer": "<p>you.Thank();!</p>", 
                "question": "Happy Programmers Day everyone"
            }, 
            "id": "cc7jsno"
        }, 
        {
            "body": {
                "answer": "<p>Neat, wrote my first code on programmer<sq>s day; Made a circle bounce around the screen, took forever.</p>", 
                "question": "Happy Programmers Day everyone"
            }, 
            "id": "cc7lihj"
        }, 
        {
            "body": {
                "answer": "<p>For a second I wondered if I would get double XP.</p>", 
                "question": "Happy Programmers Day everyone"
            }, 
            "id": "cc7k9xh"
        }, 
        {
            "body": {
                "answer": "<p>Happy Programmers Day to you too! <colon>)</p>", 
                "question": "Happy Programmers Day everyone"
            }, 
            "id": "cc7gvzo"
        }, 
        {
            "body": {
                "answer": "<p>A lot! Junior developers tend to constantly reinvent the wheel (badly) because<colon><br><br>1 - They don<sq>t know there<sq>s a known optimal solution to the problem<br><br>2 - They don<sq>t know what to call it, so they can<sq>t search<br><br>Building vocabulary plays a huge part in improving as a developer.</p>", 
                "question": "How much of learning to code is knowing how to ask or search for the right quest and answers?"
            }, 
            "id": "d1fa04v"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s like 80<percent> of programming right there. It<sq>s why learning new languages is a lot easier than learning the first one. Once you know c++ for example, everything is just <dq>How to do C++ thing in language x...<dq></p>", 
                "question": "How much of learning to code is knowing how to ask or search for the right quest and answers?"
            }, 
            "id": "d1f6jvj"
        }, 
        {
            "body": {
                "answer": "<p>When i posted my first question on stack overflow<colon>   <br>*<dq>GO AWAY AND NEVER COME BACK<dq>*<br><br>When i post a question on stack overflow now<colon>  <br>*<dq>Oh, just use this library.<dq>*</p>", 
                "question": "How much of learning to code is knowing how to ask or search for the right quest and answers?"
            }, 
            "id": "d1f7up4"
        }, 
        {
            "body": {
                "answer": "<p>Actually very little.  The most important part of coding is learning to think algorithmically.  When you really know *what* you<sq>re wanting to do, figuring out *how* to do it is just a matter of googling.  Beginners usually have a vague idea what they are trying to do, but don<sq>t know how to break it down into the tiny steps they need, and don<sq>t know how to convert those tiny steps into code.<br><br>Almost every beginner I<sq>ve encountered thinks they<sq>re struggling with syntax, but that<sq>s almost never really true.  Usually when they can get the algorithm detailed enough, the syntax is easy.</p>", 
                "question": "How much of learning to code is knowing how to ask or search for the right quest and answers?"
            }, 
            "id": "d1f723x"
        }, 
        {
            "body": {
                "answer": "<p>I did spent a [year on programming](https<colon>//www.reddit.com/r/learnprogramming/comments/1s347g/how_i_learned_to_develop_android_apps_in_less/) and started my programming career that way. That was 2 years ago. Now I<sq>m working as a freelancer doing Android development as well as PHP/Javascript. Got steady clients and I even got a few awards and nominations for my work.<br><br>*What would I do differently?*<br><br>I would get a mentor/programming group. I spent the first couple of months locked in a room learning. I spent ages thinking about stuff that a mentor could explain faster, easier and better. <br><br>A mentor will speed up your learning process tenfold.<br><br>*Which programming language?*<br><br>Doesn<sq>t matter. If you master one language, learning another is not that hard. Pick a language that feels good to you and enables you to do the work you want to do (either web development, Android, iOS etc.)<br><br>*How can you maximize my <dq>hire-ability<dq>?*<br><br>I don<sq>t care if you know a quadrillion programming languages and  frameworks. Nobody actually cares, because programming languages and frameworks can be picked up pretty easily. <br><br>Focus on projects. Show me that you have created something useful. Show me the code. When I ask you about it, tell me what you did wrong and what is good about your project. Show passion and responsibility for your code. <br><br></p>", 
                "question": "[Beginner question] If you had 1 year to do nothing but learn programming to start a new career..."
            }, 
            "id": "cvtixi9"
        }, 
        {
            "body": {
                "answer": "<p>I cannot stress enough /u/poopMachinist comment on getting a mentor. Whenever I work with a new guy, I always stress, if you have a question, just ask me. Chances are, I<sq>ve already spent the 2 days researching the two lines of code you need for some obscure problem, and you won<sq>t learn much more by redoing the research. You<sq>ll learn the same amount by me just explaining it to you.<br><br>That being said, feel free to PM me with any questions you have. I was a tutor in college and have been told many times I<sq>m a good teacher when it comes to programming. I<sq>d of went into teaching, if the pay was better. I really enjoy it.</p>", 
                "question": "[Beginner question] If you had 1 year to do nothing but learn programming to start a new career..."
            }, 
            "id": "cvto8k6"
        }, 
        {
            "body": {
                "answer": "<p>One year is good time to learn programming. Here are few suggestions from my side.<br><br>If you chose to become a web developer or Front-end developer learn the below stuff.<br>HTML & CSS, JavaScript, jQuery (At least on js framework like Angular Js)<br><br>Resources<colon> http<colon>//www.snoopcode.com<br><br>If you chose to become a backend software developer learn these<br>Ruby or Python or PHP or Java<br><br>http<colon>//www.codecademy.com or http<colon>//www.tutorialspoint.com<br><br>Good Luck<br></p>", 
                "question": "[Beginner question] If you had 1 year to do nothing but learn programming to start a new career..."
            }, 
            "id": "cvtiu4g"
        }, 
        {
            "body": {
                "answer": "<p>If you want to get into Web Development, learning C# and the MVC model would be a good idea. A lot of companies are on Windows on this setup, and it<sq>s also a good one for learning.<br><br>This also means there<sq>s a good amount of help available on the internet and lots of friendly people willing to help you out. Also a good amount of contract jobs available, and that job market is likely to be around for a long time.<br><br>But like other people say, once you really learn one language well, it<sq>s not hard to learn another. Code Academy has a pretty good course on Javascript that<sq>s a great intro in general to programming.</p>", 
                "question": "[Beginner question] If you had 1 year to do nothing but learn programming to start a new career..."
            }, 
            "id": "cvtkwfc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Codeschool.com is garbage"
            }, 
            "id": "cg6d1t1"
        }, 
        {
            "body": {
                "answer": "<p>Damn, I felt the same exact way when I signed up a couple months ago. It<sq>s like they went 99<percent> percent of the way towards making something awesome and then just shit all over it with easily solvable bugs in their ui and the coding problems. Made me mad as hell. </p>", 
                "question": "Codeschool.com is garbage"
            }, 
            "id": "cg69gn0"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Codeschool.com is garbage"
            }, 
            "id": "cg6e0km"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Codeschool.com is garbage"
            }, 
            "id": "cg6e9g9"
        }, 
        {
            "body": {
                "answer": "<p>WTB Android version.</p>", 
                "question": "[iOS] No experience to app in 2 months"
            }, 
            "id": "cb19yg6"
        }, 
        {
            "body": {
                "answer": "<p>How much time did you spend on learning iOS development each week?<br><br>It seems like you covered significant ground each week.</p>", 
                "question": "[iOS] No experience to app in 2 months"
            }, 
            "id": "cb1d9oh"
        }, 
        {
            "body": {
                "answer": "<p>This is great. I have less experience than you did, but hopefully I<sq>ll understand enough of these beginner courses to get started.</p>", 
                "question": "[iOS] No experience to app in 2 months"
            }, 
            "id": "cb1a9q4"
        }, 
        {
            "body": {
                "answer": "<p>Lynda.com has a [youtube site](http<colon>//www.youtube.com/user/lyndapodcast/search?query=ios) as well. Not sure if all the videos you posted are there, but I see a few. </p>", 
                "question": "[iOS] No experience to app in 2 months"
            }, 
            "id": "cb1evv2"
        }, 
        {
            "body": {
                "answer": "<p>A c# would be usefull. I found a brilliant course but in my language. Good luck <colon>)</p>", 
                "question": "A good reference site for those who wish to learn programming"
            }, 
            "id": "d55nl7w"
        }, 
        {
            "body": {
                "answer": "<p>Great! Any C or x86 assembly?</p>", 
                "question": "A good reference site for those who wish to learn programming"
            }, 
            "id": "d55xjht"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing!<br><br>You are very helpful <colon>)</p>", 
                "question": "A good reference site for those who wish to learn programming"
            }, 
            "id": "d55skv9"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s awesome! Thank you for taking the time to make this compendium! Did it take you long? </p>", 
                "question": "A good reference site for those who wish to learn programming"
            }, 
            "id": "d55stzs"
        }, 
        {
            "body": {
                "answer": "<p>Money. I work on something until I get tired of it. If I<sq>m being paid to do it, I keep working on it.</p>", 
                "question": "How do you motivate yourself to finish a project after you<sq>ve grown bored of it?"
            }, 
            "id": "d3d7yta"
        }, 
        {
            "body": {
                "answer": "<p>Depends. <br><br>Seems like you like the programing and mechanics design more than the level design. Either get someone in to help with level design, do a few levels by yourself so you can show off the game (as a programming demo, a longer game isn<sq>t necessarily better) or find a way ti motivate yourself. <br><br>Maybe show off the project? Maybe start a new one. These things work for some people. </p>", 
                "question": "How do you motivate yourself to finish a project after you<sq>ve grown bored of it?"
            }, 
            "id": "d3d3tw4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve found that the hardest part is sitting down and *starting*... once I<sq>m engaged in solving a problem or implementation, I usually am able to keep at it for awhile.<br><br>Try to focus on the satisfaction of having a completed product. Sometimes this means lowering your expectations/requirements (especially if it is a personal venture that you are not getting paid for). It<sq>s easy to be overambitious, *especially* with a game.<br><br>Try shifting your focus to a different issue. If you are bored generating content (i.e. monsters and such), try fixing a few bugs, for example.<br><br>Try becoming involved in a community. Join a slack channel, IRC channel, forums, etc. Talk with other developers, possibly get your content out there, and generally just become involved-in and excited-for what you are doing. Even if your game or program seems small and insignificant, you can still be a contributor to the community as a whole.<br><br>In the end, it is normal and even healthy to get bored with your projects. You shouldn<sq>t spend too much time on any small-scale personal project anyway, unless you have some long-term vision or goal for your project.</p>", 
                "question": "How do you motivate yourself to finish a project after you<sq>ve grown bored of it?"
            }, 
            "id": "d3d841q"
        }, 
        {
            "body": {
                "answer": "<p>This happens to me often. <br><br>What i do is have 2 or 3 projects going at once. When i feel bored about one project, i move to the next one and come back to it when i feel more relaxed to take it on again.</p>", 
                "question": "How do you motivate yourself to finish a project after you<sq>ve grown bored of it?"
            }, 
            "id": "d3d99z3"
        }, 
        {
            "body": {
                "answer": "<p>I chose a good time to be a cs major</p>", 
                "question": "Youtube has a whole computer science section with college lectures"
            }, 
            "id": "c6io1w7"
        }, 
        {
            "body": {
                "answer": "<p>looking through these videos makes me realize that I have a lot to learn. sigh</p>", 
                "question": "Youtube has a whole computer science section with college lectures"
            }, 
            "id": "c6io6ce"
        }, 
        {
            "body": {
                "answer": "<p>Good link, thanks.</p>", 
                "question": "Youtube has a whole computer science section with college lectures"
            }, 
            "id": "c6imw0l"
        }, 
        {
            "body": {
                "answer": "<p>iTunes U has quite a bit of CS stuff as well.</p>", 
                "question": "Youtube has a whole computer science section with college lectures"
            }, 
            "id": "c6isvrf"
        }, 
        {
            "body": {
                "answer": "<p>Basically<colon> A lot of <dq>inspiration<dq> from other things. Take a look at something that is well designed, and try to copy elements of it. I<sq>m also very bad at design and I must say that we are lucky to be here at a time where very simplistic designs are in style. At least for web design. But you can probably take examples from web design even for desktop applications. <br><br>There was a thread here a couple of days ago about collections of nice html/css designs which I bookmarked, so you can literally go through those and take example. <br><br>http<colon>//htmlinspiration.com/the-most-loved/<br><br>https<colon>//onepagelove.com/<br><br>http<colon>//csszengarden.com/<br><br>And for color schemes, yeah, I haven<sq>t used Paletton but Adobe Kuler helps as well. It also has a nice gallery  where people submit and vote on preset color schemes, so you can even use those</p>", 
                "question": "As a developer without artistic talent how do you create a nice GUI ?"
            }, 
            "id": "cnjij9n"
        }, 
        {
            "body": {
                "answer": "<p>There are a few resources I<sq>ve found useful<colon><br><br>+ [7 Rules For Creating a Gorgeous UI, Pt 1](https<colon>//medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-1-559d4e805cda)<br>+ [7 Rules For Creating a Gorgeous UI, Pt 2](https<colon>//medium.com/@erikdkennedy/7-rules-for-creating-gorgeous-ui-part-2-430de537ba96)<br>+ David Kadavy<sq>s [Design for Hackers](http<colon>//designforhackers.com/)<br><br>I<sq>m not a very good designer, but I find also that it sometimes helps to sketch out my ideas (I use a really thick felt-tip pen because wobbly thick lines don<sq>t look as terrible to me as wobbly thin lines) in a frame that mostly resembles the frame I<sq>m looking at.</p>", 
                "question": "As a developer without artistic talent how do you create a nice GUI ?"
            }, 
            "id": "cnjqt4s"
        }, 
        {
            "body": {
                "answer": "<p>Hey, designer here.<br><br>I agree with a lot of what people are saying. Take examples from places and merge them into your own. Here are a few great places for mobile inspiration<colon><br><br>- http<colon>//patterntap.com/<br>- http<colon>//www.pttrns.com/<br>- http<colon>//niice.co/search/app<br>- http<colon>//dribbble.com<br><br>In addition, http<colon>//www.colourlovers.com/ is a great place to find color palettes.<br><br>Here<sq>s some things that I recommend doing, and are usually apart of my flow for designing things<colon><br><br>1. Research. Dissect your app and find out how other people implement those features. Natural flows are going to be the make it or break it part.<br>2. Sketch the layout, find a natural place for things. (don<sq>t focus on type/color at this point). A great way to do this is remove things, and if it doesn<sq>t work without it, re-add it back in.<br>3. Use a font everyone else is using, don<sq>t strive for anything <dq>different<sq>. Type is the second most important feature IMO. Bad or unreadable type is the worst. Plus, Roboto is gorgeous and works incredibly well.<br>4. If you<sq>re struggling with color, nothing beats a blue palette. Color should be using sparingly, to highlight important details of the page. To go for good looks quick, pick a blue and use a white or gray background.<br>5. Don<sq>t ever use black. By black, I mean #000000. [Here<sq>s a great article about that](http<colon>//ianstormtaylor.com/design-tip-never-use-black/).<br><br>That should get you pretty close to having a great looking app with minimal work. Feel free to message me if you need some help or are looking for more advice. I<sq>d be happy to help critique some things as well.<br><br>Edit<colon> Searching for styleguides is a great way to get components of an app (which is how I recommend thinking of design). Here is a page with a few<colon> https<colon>//dribbble.com/search?q=styleguide </p>", 
                "question": "As a developer without artistic talent how do you create a nice GUI ?"
            }, 
            "id": "cnjs9sb"
        }, 
        {
            "body": {
                "answer": "<p>Hire a designer</p>", 
                "question": "As a developer without artistic talent how do you create a nice GUI ?"
            }, 
            "id": "cnk0vux"
        }, 
        {
            "body": {
                "answer": "<p>Are these going to be recorded for later availability? I prefer recorded videos rather than a stream...<br><br>Looking forward to it anyways!</p>", 
                "question": "Game Programming Stream For Beginners Goes Live in 1 Hour!"
            }, 
            "id": "cmh1pbd"
        }, 
        {
            "body": {
                "answer": "<p>Awesome!! Turned my bigger screen in landscape mode and going to order pizza!</p>", 
                "question": "Game Programming Stream For Beginners Goes Live in 1 Hour!"
            }, 
            "id": "cmh28zd"
        }, 
        {
            "body": {
                "answer": "<p>>submitted 5 hours ago<br><br>darn</p>", 
                "question": "Game Programming Stream For Beginners Goes Live in 1 Hour!"
            }, 
            "id": "cmhawpd"
        }, 
        {
            "body": {
                "answer": "<p>best of luck on the first stream!  i<sq>ll have to catch recording later.</p>", 
                "question": "Game Programming Stream For Beginners Goes Live in 1 Hour!"
            }, 
            "id": "cmh2643"
        }, 
        {
            "body": {
                "answer": "<p>No no no. <br><br>Use es6 modules and compile with Babel. <br><br>Stop introducing one unnecessary library after another into your JavaScript projects and actually learn how do very important things like structuring your applications. </p>", 
                "question": "Super cool tool I use for JS development that saves literally hours every day"
            }, 
            "id": "dei4hnn"
        }, 
        {
            "body": {
                "answer": "<p>> I also don<sq>t want to spend extra hours needlessly trying to remember how to properly make a JS module.<br><br>ES6+ modules aren<sq>t that complicated.</p>", 
                "question": "Super cool tool I use for JS development that saves literally hours every day"
            }, 
            "id": "dehy5w9"
        }, 
        {
            "body": {
                "answer": "<p>Ah yes, the classic another library will solve that. It<sq>s not like you need to learn how to do it before you automate it.</p>", 
                "question": "Super cool tool I use for JS development that saves literally hours every day"
            }, 
            "id": "dei0xt1"
        }, 
        {
            "body": {
                "answer": "<p>Skimmed over the documentation and it looks legit, i<sq>ll give it a shot tonight! Thanks mate<br></p>", 
                "question": "Super cool tool I use for JS development that saves literally hours every day"
            }, 
            "id": "dehku58"
        }, 
        {
            "body": {
                "answer": "<p>honestly, at your age, go over a multitude of languages for the sake of getting exposed to code. C++ is in the middle group between high and low level language, so i think it<sq>s a great place to start. I learned C++ as my first language back my senior year of high school, and i turned out OK ;-) <br><br>word of advise - when learning a new language, don<sq>t just pick up on the syntax. try to understand the more <dq>computer science<dq> part of it, focusing on what one language has to offer over another. there<sq>s no point in learning how to write for loops in 5 different languages, but learning the CS concepts such as data structures/algorithms will get you much further in your cs career.<br><br>good luck!</p>", 
                "question": "Is C++ still worth learning in 2014?"
            }, 
            "id": "cn4u3z4"
        }, 
        {
            "body": {
                "answer": "<p>Why are y<sq>all downvoting this kid?  He genuinely wants to learn, and came here to be pointed in the right direction.  He<sq>s 15.  Of course his point of view is a tad naive.  But asking here is a great first step.<br><br>C++ is a great jumping off point, but likely isn<sq>t going to be what you would be using in a real-world environment, depending on what sort of coding you end up interested in.  That said, the skills you will learn by teaching yourself C++ will absolutely apply in whatever direction you take, and a number of other languages will employ similar enough syntax for you to feel at home and help you produce better, smarter code.  So go for it.  There<sq>s a multitude of resources out there, regardless what you choose.  It ultimately doesn<sq>t matter a whole lot, because as others have noted, you will become familiar with a number of different languages, each suited to different tasks, and as you hone in on what problems exactly you<sq>re looking to solve, you<sq>ll start to focus.</p>", 
                "question": "Is C++ still worth learning in 2014?"
            }, 
            "id": "cn4wdh7"
        }, 
        {
            "body": {
                "answer": "<p>To be honest, at your age, the only thing that should drive you should be your curiosity and not its value in today<sq>s world. When i was a kid, i played a lot of flash games online and decided to create some myself. I spent days learning how to create animations, simple games etc using flash and ActionScript. The work i do today is in no way connected to that. But I<sq>m grateful i started there because it got me into programming and gave me the initial excitement and motivation to make things work.<br><br>You can start with C++ if you like. After learning some basics, think of a small project to do. It could be as simple as a calculator program or a pong game. Finish your first few projects and you<sq>ll get the idea.</p>", 
                "question": "Is C++ still worth learning in 2014?"
            }, 
            "id": "cn4unai"
        }, 
        {
            "body": {
                "answer": "<p>I shall admit that I have over 20 years of experience with C++, so I may be biased. Still FWIW<colon><br><br>1. You *can* write cross-platform stuff in C++. Admittedly, it is more difficult than in Java (mostly because of vendor lock-in traps which are often sprinkled all over APIs), but is still perfectly feasible. Just one recent example I<sq>ve seen is a client with 10M+ installs, updated once a month, running under Win (from Win2000), MacOS X, iOS, and Android - 95<percent> of code is C++, 90<percent> is common across the platforms. NB<colon> Android port was a tricky one, with only UI being Java, and rest being common C++ codebase recompiled for NDK, but it works pretty much perfectly. <br><br>2. Still, for most of server-side business-related projects (this doesn<sq>t include infrastructure- or middleware-related stuff), I<sq>d not use C++. Java or  Python would probably be more productive (and that<sq>s why they<sq>re used quite a lot).<br><br>3. What to learn first, is a separate question altogether. If you know neither C++ nor Java, I<sq>d say starting with Java will be most likely simpler, and realizing C++ tricks on top of Java would be probably easier than frontal assault on C++. <br><br>Just IMHO though (as I<sq>ve said, I can be biased).</p>", 
                "question": "Is C++ still worth learning in 2014?"
            }, 
            "id": "cn4wh95"
        }, 
        {
            "body": {
                "answer": "<p>Wow, you<sq>re quite the archivist! Thanks for putting in the time, effort, and sharing it with the world. I look forward to digging through it!</p>", 
                "question": "My Programming Notes (275 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets. [ Javascript / Node / Angular 1 & 2 / React / Elm / C# / PHP / SQL / Git ]"
            }, 
            "id": "dcl1pgn"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome. I have been learning programming on my own for the past five months. Lately, I have been feeling kinda lost and confused on how to progress from here or whether I made the right choice to try and make a career in developing. Now I can compare my notes with yours and see if I am on the right track. Thanks man.</p>", 
                "question": "My Programming Notes (275 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets. [ Javascript / Node / Angular 1 & 2 / React / Elm / C# / PHP / SQL / Git ]"
            }, 
            "id": "dcl6bc4"
        }, 
        {
            "body": {
                "answer": "<p>> SVN<colon> Git<br><br>SVN is another version control system, as Git is. I think you mean <dq>version control<dq> instead of <dq>SVN<dq>.<br><br>Also, in your C# notes, you write <dq>child class<dq>. The proper term is <dq>derived class<dq> or <dq>subclass<dq>.<br><br>I hesitated to post this because people might think I am nit-picking, but since you are self-taught you probably do not have anybody else to correct you on these.<br><br>Otherwise, great work!</p>", 
                "question": "My Programming Notes (275 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets. [ Javascript / Node / Angular 1 & 2 / React / Elm / C# / PHP / SQL / Git ]"
            }, 
            "id": "dclrjid"
        }, 
        {
            "body": {
                "answer": "<p>This looks awesome. Thanks a ton for sharing <colon>)</p>", 
                "question": "My Programming Notes (275 pages) - Summaries of numerous tutorials with pictures and code + Cheat Sheets. [ Javascript / Node / Angular 1 & 2 / React / Elm / C# / PHP / SQL / Git ]"
            }, 
            "id": "dcl3lbb"
        }, 
        {
            "body": {
                "answer": "<p>Ask for code reviews on your pull requests so that whoever<sq>s reviewing can comment their thoughts on your code and you can make the changes they suggest rather than them just rewriting the whole thing. It can be as simple as just @mentioning their account in the pull request<sq>s description.<br><br>Tell them you<sq>re there to learn and you want to be able to code at the same standard (or better) than all their engineers by the end of the internship if they ask why.<br><br>Don<sq>t feel too disheartened by it, each company has it<sq>s own coding standard and even then usually each team has it<sq>s own niches with code and that feeling of holding the team back is fine, you<sq>ve only been there a week! Just keep working hard in the internship and asking meaningful questions and you<sq>ll be flying in no time.</p>", 
                "question": "Currently an webdev intern working on a web-app and almost all my code has been commented out."
            }, 
            "id": "d7ks2lg"
        }, 
        {
            "body": {
                "answer": "<p>Commenting out code and committing it back to the repo is a sin.</p>", 
                "question": "Currently an webdev intern working on a web-app and almost all my code has been commented out."
            }, 
            "id": "d7kujwj"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s extremely weird that they<sq>d comment out your code and rewrite it. Usually code reviews are used to tell you what needs to be improved or just worked on a little more. At my job if a pull request gets declined a few times we schedule a meeting to discuss it in depth, but it<sq>s still the original developer<sq>s job to fix it. Whoever is doing that to you doesn<sq>t understand how code reviews work. </p>", 
                "question": "Currently an webdev intern working on a web-app and almost all my code has been commented out."
            }, 
            "id": "d7ktv2u"
        }, 
        {
            "body": {
                "answer": "<p>We don<sq>t allow people to actually even commit commented code, there is no point with version control.  Leave a comment with the commit ID if you think the old code is that important.<br><br>But, to answer the question, code is constantly being replaced, refactored, changed all the time.  You can<sq>t take it personally, but if you don<sq>t see any tangible benefits of the new code then just ask so you can learn.<br><br>I refactor my bosses code all the time because he isn<sq>t a great java coder and left to his own devices everything would be N^2.  Its tragic what he does sometimes in the name of <dq>I just needed it quick<dq>, which usually means spending hours writing hundreds of lines of code for something Java has built in.  </p>", 
                "question": "Currently an webdev intern working on a web-app and almost all my code has been commented out."
            }, 
            "id": "d7kuja1"
        }, 
        {
            "body": {
                "answer": "<p>It depends on your learning style. For a kinetic learner like myself I need to jump in and encounter a problem, then solve it and so forth. Abstract learning will only get you so far</p>", 
                "question": "Most common knowledge gaps as a result of learning JS frameworks too soon without knowing JS well enough"
            }, 
            "id": "d79736o"
        }, 
        {
            "body": {
                "answer": "<p>How bind, apply and call work.</p>", 
                "question": "Most common knowledge gaps as a result of learning JS frameworks too soon without knowing JS well enough"
            }, 
            "id": "d79a458"
        }, 
        {
            "body": {
                "answer": "<p>I think the biggest problem we encounter in situations like this is the <sq>magic<sq> problem. If you find yourself using a framework and understand the tooling well enough to build, but not well enough to fully grok, you end up with these pieces that are <sq>magic<sq>. Which is fine some of the time... But once something goes wrong and you dont understand the underlying pieces of how/why the framework is doing what it<sq>s doing you could be in trouble. Understanding vanilla is important. But I also try and follow the <sq>understand enough principal<sq>. Basically my mantra is that nothing should be magic to me. I want to understand the pieces of my tooling that I need, so that I can jump in and test and tinker. </p>", 
                "question": "Most common knowledge gaps as a result of learning JS frameworks too soon without knowing JS well enough"
            }, 
            "id": "d79bce5"
        }, 
        {
            "body": {
                "answer": "<p>I think the concept of prototypal inheritance is totally lost when using frameworks but it is what defines javascript on a fundamental level. If, as a developer, you ever needed to do non trivial work in javascript, you need a good understanding of how prototypal inheritance works and how it differs from a more classical inheritance model found in C++ etc.<br><br>For me that<sq>s the biggest one. There are other smaller gaps that will crop up now and then like block vs lexical scoping. Closures. etc</p>", 
                "question": "Most common knowledge gaps as a result of learning JS frameworks too soon without knowing JS well enough"
            }, 
            "id": "d79fqwv"
        }, 
        {
            "body": {
                "answer": "<p>People might toss some <sq>look, no maths!<sq> books at you - the no maths bit is a gimmick to make sales. AI is computer science more than it is general programming, and you flat out *must* have the maths background if you want to do anything more than copy & paste.<br> <br>The good bit is most of the maths required is rather specific, and is quite uncommon to find in the maths you do at 17 in school. The vast, vast majority of calculus (which for some reason tends to take up most of the 16-18 portion of most high school curricula) you can just ignore completely.<br> <br>The important parts are called discrete mathematics - see if your school library has a maths book with that in the title. You may find if you like programming that discrete maths resonates a little more with you than continuous maths (i.e. calculus).</p>", 
                "question": "Getting into AI"
            }, 
            "id": "cv165wt"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d recommend Peter Norvig<sq>s AI book - it<sq>s a really good introduction to programming, and doesn<sq>t assume much math knowledge IIRC. A clever guy / girl like yourself could probably look up any unfamiliar math concepts on Wikipedia </p>", 
                "question": "Getting into AI"
            }, 
            "id": "cv175m5"
        }, 
        {
            "body": {
                "answer": "<p><dq>like achieving consciousness and stuff<dq><br>That<sq>s a **huge** undertaking. No-one has achieved anything near that, yet.</p>", 
                "question": "Getting into AI"
            }, 
            "id": "cv1co0a"
        }, 
        {
            "body": {
                "answer": "<p>Machine learning is very important in the field of A.I even in robotics. AI is very math heavy. So I would start developing a love of math if I were you. It<sq>s an amazing topic in CS though it<sq>s challenging, but can be very invigorating. </p>", 
                "question": "Getting into AI"
            }, 
            "id": "cv1coe9"
        }, 
        {
            "body": {
                "answer": "<p>no java sadly, but a very good resources.  the C# series worked great.</p>", 
                "question": "Exercism.io \u2013 become a better programmer"
            }, 
            "id": "cpzl6z9"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d love to see something like this for deployment diagrams where people can critique each other<sq>s software architecture. </p>", 
                "question": "Exercism.io \u2013 become a better programmer"
            }, 
            "id": "cpzz49m"
        }, 
        {
            "body": {
                "answer": "<p>If I can<sq>t even install the client, does that mean I<sq>m too dumb to learn this stuff? </p>", 
                "question": "Exercism.io \u2013 become a better programmer"
            }, 
            "id": "cpzrgxs"
        }, 
        {
            "body": {
                "answer": "<p>I practically learned Swift by doing the first available exercises. (12 or so) when I ran out of exercises I started to implement new ones by taking the test cases from the ruby track (most similar to Apple<sq>s XCTest). Check out the available tracks http<colon>//synopsis.exercism.io/ Next I am exited about practicing Rust!</p>", 
                "question": "Exercism.io \u2013 become a better programmer"
            }, 
            "id": "cpzfyt8"
        }, 
        {
            "body": {
                "answer": "<p>An intern my employer has built a few administration pages for our service. This includes communicating with a backend, building React components - which she had not used before - adding tests with Jasmine, and coordinating with other developers.</p>", 
                "question": "What are some good examples of real world problems an entry-level programmer using javascript would be expected to be able to handle?"
            }, 
            "id": "d69vcyp"
        }, 
        {
            "body": {
                "answer": "<p>Figuring out someone else<sq>s code and fixing legacy issues. That<sq>s what I do most days.</p>", 
                "question": "What are some good examples of real world problems an entry-level programmer using javascript would be expected to be able to handle?"
            }, 
            "id": "d69yb2f"
        }, 
        {
            "body": {
                "answer": "<p>Problems I have done dealt with in my entry level (web programming) position include<colon> parsing and validating input from forms, asynchronous programming (i.e handling ajax calls), dealing with different browsers specs, some client side rendering, using/modifying open source libraries to fit a certain project, but lots of times it<sq>s just writing little snippets to make the UX more interactive. That<sq>s all I can think of that is specific to front end java-script development.</p>", 
                "question": "What are some good examples of real world problems an entry-level programmer using javascript would be expected to be able to handle?"
            }, 
            "id": "d69vlbl"
        }, 
        {
            "body": {
                "answer": "<p>I did an internship this Summer at one of the bigger healthcare software companies and the most important thing that was expected of me was extensively unit-testing the code that I wrote.</p>", 
                "question": "What are some good examples of real world problems an entry-level programmer using javascript would be expected to be able to handle?"
            }, 
            "id": "d6a01s4"
        }, 
        {
            "body": {
                "answer": "<p>Another list of tutorials<colon> http<colon>//programming-motherfucker.com/become.html  <br>Python related<colon>  <br>  <br>* [Learn Python The Hard Way](http<colon>//learnpythonthehardway.org/)  <br>* [Dive Into Python](http<colon>//www.diveintopython.net/index.html)  <br>* [Python Bibliotheca](http<colon>//www.openbookproject.net/pybiblio/)  </p>", 
                "question": "The best websites to learn coding easily."
            }, 
            "id": "cafswqh"
        }, 
        {
            "body": {
                "answer": "<p>A Python based course<colon><br><br>http<colon>//ProgramArcadeGames.com</p>", 
                "question": "The best websites to learn coding easily."
            }, 
            "id": "cafvi91"
        }, 
        {
            "body": {
                "answer": "<p>I really like code-academy. Is there any similar site where I can learn C-programming?</p>", 
                "question": "The best websites to learn coding easily."
            }, 
            "id": "caftn4u"
        }, 
        {
            "body": {
                "answer": "<p>is there any for c#? <br></p>", 
                "question": "The best websites to learn coding easily."
            }, 
            "id": "cafwgdf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m so glad to hear your story. I<sq>m about 2/5 of the way on my CS degree at 24 years old. At times I feel depressed/disappointed knowing that at my age I should have had my bachelors already, but reading posts like yours motivate me to keep going.<br><br>Hechale ganas y que siga bien el trabajo!<br></p>", 
                "question": "My 1 year experience from internship to full time job."
            }, 
            "id": "c7xiocv"
        }, 
        {
            "body": {
                "answer": "<p>And that, kids, is how it<sq>s done.  Well done!</p>", 
                "question": "My 1 year experience from internship to full time job."
            }, 
            "id": "c7xh70q"
        }, 
        {
            "body": {
                "answer": "<p>Paid internship... You were living the dream.</p>", 
                "question": "My 1 year experience from internship to full time job."
            }, 
            "id": "c7xklli"
        }, 
        {
            "body": {
                "answer": "<p>Living the American drea....wait a sec...<br><br>P.S. Congrats!!</p>", 
                "question": "My 1 year experience from internship to full time job."
            }, 
            "id": "c7xmpa6"
        }, 
        {
            "body": {
                "answer": "<p>Lots of different techniques can be used. It really depends on how well-understood the problem is that you<sq>re trying to solve, and the culture of the team involved. <br><br>Formal corporate companies tend to use use _lots_ of ui design/mock ups, text description of requirements, use cases and test plans (I once got a 70-page spec for a login screen, not exaggerating). These will usually be converted into class/ER diagrams, system sequence diagrams etc by systems analysts, maybe using Visio or Gliffy, or more formal UML tools, which are then passed to engineers to implement. This structure encourages more accountability on each person in the process, and standardisation of code style & technique. <br><br>Companies in a more <dq>agile<dq> workflow, typically where something innovative is being worked on, will deliberately not specify the details of a lot of this stuff. Instead they deal in higher level user stories, interaction flows and sketches that focus on <dq>user value<dq> (mad buzzwords, sorry) e.g. <dq>As an account holder I want to see what<sq>s left in my account so I know when I need to top it up<dq>. The technical details will be specified by developers as automated test cases (e.g selenium, cucumber), and the shape/ style of the code to get the feature working is up to their discretion. This style lends itself to fast feedback & rapid generation of ideas and improvements.<br><br>There are benefits and drawbacks to either style, and it certainly doesn<sq>t have to be strictly one or the other.<br></p>", 
                "question": "How are programs planned out before they are coded?"
            }, 
            "id": "dcpd6qj"
        }, 
        {
            "body": {
                "answer": "<p>The Agile way, which is increasing in popularity, is often based around the idea of a <dq>minimum viable product<dq>, or MVP.  Figure out what the core of your application is and start by making the simplest possible thing that does that.  Get people using it (internally only at first) to start learning what the priority of features should be, and build the application out deliberately.<br><br>I<sq>ve never known a company to do logic diagrams, UML, or the like.  This seems to be a mostly academic exercise.  Maybe huge-ass companies do this because they have lots of management types that feel like they need to do something concrete.  Software is so pliable and easy to change (especially before you<sq>ve released) that it<sq>s usually better to just build the damn thing and get feedback on it, rather than trying to hash everything out in a bunch of meetings.</p>", 
                "question": "How are programs planned out before they are coded?"
            }, 
            "id": "dcpgg8e"
        }, 
        {
            "body": {
                "answer": "<p>Basic flow we were taught in software engineering<colon><br><br>(1) Requirements Analysis<br><br>List all the things you want the user to be able to do with the program. Basically a list of features.<br><br>(2) Using your requirements,  think of what classes you need to fulfill them. For instance, if you want a program to store addresses you might want a class called Address.<br><br>(3) Flesh out your classes with attributes and operations you think they might need to have. <br><br>(4) Create a UML diagram to plan out your program<sq>s structure.<br><br>(5) Start coding. <br><br>At any point you might go back to earlier steps as things change.</p>", 
                "question": "How are programs planned out before they are coded?"
            }, 
            "id": "dcpc2k0"
        }, 
        {
            "body": {
                "answer": "<p>For starters make list of all the features you want. Then make a list of the features you can do, then for each feature make a list of the todo items you<sq>ll need to make it happen.</p>", 
                "question": "How are programs planned out before they are coded?"
            }, 
            "id": "dcpc108"
        }, 
        {
            "body": {
                "answer": "<p>This comment has been overwritten by a script as I have abandoned my Reddit account and moved to [voat.co](https<colon>//voat.co). <br><br>   If you would like to do the same, install [TamperMonkey](https<colon>//chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo) for Chrome, or [GreaseMonkey](https<colon>//addons.mozilla.org/en-us/firefox/addon/greasemonkey/) for Firefox, and install [this script](https<colon>//greasyfork.org/en/scripts/10380-reddit-overwrite).  If you are using Internet Explorer, you should probably stay here on Reddit where it is safe.  <br><br> Then simply click on your username at the top right of Reddit, click on comments, and hit the new OVERWRITE button at the top of the page.  You may need to scroll down to multiple comment pages if you have commented a lot.</p>", 
                "question": "Programming feels like 90<percent> documentation."
            }, 
            "id": "ckdf52f"
        }, 
        {
            "body": {
                "answer": "<p>Engineering is usually the same, 90<percent> of the time spent looking over documentation, researching the different options, and then drawing up a plan/proposal.  The last 10<percent> is when you<sq>re actually designing or building something.</p>", 
                "question": "Programming feels like 90<percent> documentation."
            }, 
            "id": "ckd9qh7"
        }, 
        {
            "body": {
                "answer": "<p>All wizards need to consult their spell books. </p>", 
                "question": "Programming feels like 90<percent> documentation."
            }, 
            "id": "ckdj3t6"
        }, 
        {
            "body": {
                "answer": "<p>Definitely true.</p>", 
                "question": "Programming feels like 90<percent> documentation."
            }, 
            "id": "ckd8u6z"
        }, 
        {
            "body": {
                "answer": "<p>Is this for beginners? I am interested but I<sq>m also a total noob</p>", 
                "question": "We<sq>re doing a free Python programming course"
            }, 
            "id": "cre4erx"
        }, 
        {
            "body": {
                "answer": "<p>What kind of background should one have to benefit from this? I have one semester of Java under my belt, for example (I know all the basic functionalities of programming save for data structures). Thanks for any info!</p>", 
                "question": "We<sq>re doing a free Python programming course"
            }, 
            "id": "cre7ohl"
        }, 
        {
            "body": {
                "answer": "<p>I was unsuccessful last time but hope to get through this time for the third batch.  <br><br></p>", 
                "question": "We<sq>re doing a free Python programming course"
            }, 
            "id": "cre4upa"
        }, 
        {
            "body": {
                "answer": "<p>I took this course in January and I just want to say it was an awesome experience. A little backstory<colon> I started learning to program on my own in November. I had just finished Udacity<sq>s CS101 course and was kind of unsure where to go from there, when I saw the post in r/learnprogramming.  I got accepted, and I<sq>m not exaggerating when I say that their python class probably accelerated my learning by a year or so. <br><br>Frankly, I think I was doing pretty well learning on my own, but having real people who really know python to give instant feedback on your code as well as provide a path/curriculum is really unbeatable. The guys who teach the class (Santiago and Martin) were super supportive and always available. The class has been over for a few months now and I still talk to them actually.<br><br>Also I cant emphasize the significance of meeting other people who are working towards the same goal as you and building a little community. I met people in the class who I<sq>ve since become friends with and still talk to regularly, and we<sq>ve built awesome projects together. Basically, working with other people will elevate your game, and you<sq>ll learn stuff you might not have discovered otherwise. <br><br>I<sq>ll stop there cause this is getting a little long. I wrote this completely unprompted, but I figured if anybody is coming from the same place I was and is on the fence, maybe my experience might be helpful. If anyone wants to ask me any questions i<sq>m happy to answer. <br><br><br><br></p>", 
                "question": "We<sq>re doing a free Python programming course"
            }, 
            "id": "cremxd6"
        }, 
        {
            "body": {
                "answer": "<p>Everything I learnt to troubleshoot and fix was possible thanks to Google. </p>", 
                "question": "Learning to code but feeling lost? Interviews with real developers"
            }, 
            "id": "cjikqj9"
        }, 
        {
            "body": {
                "answer": "<p>This is beautiful. </p>", 
                "question": "Learning to code but feeling lost? Interviews with real developers"
            }, 
            "id": "cjifips"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Learning to code but feeling lost? Interviews with real developers"
            }, 
            "id": "cjiz127"
        }, 
        {
            "body": {
                "answer": "<p>Thanks! Did you conduct the interviews? I just signed up for the eloquent JavaScript study group mentioned in the interviewers bio.</p>", 
                "question": "Learning to code but feeling lost? Interviews with real developers"
            }, 
            "id": "cjiiflu"
        }, 
        {
            "body": {
                "answer": "<p>A wife asks her husband, a software engineer, \u201dCould you please go shopping for me and buy one carton of milk, and if they have eggs, get 6!\u201d A short time later the husband comes back with 6 cartons of milk. The wife asks him, \u201cWhy the hell did you buy 6 cartons of milk?\u201d He replied, \u201cThey had eggs.\u201d</p>", 
                "question": "This is why order of operations is so important"
            }, 
            "id": "c3c5lq5"
        }, 
        {
            "body": {
                "answer": "<p>Which pandemic are they bringing? Smallpox? SARS? Malaria?</p>", 
                "question": "This is why order of operations is so important"
            }, 
            "id": "c3c6mwg"
        }, 
        {
            "body": {
                "answer": "<p>Logic doesn<sq>t have an order of operations.  There is no rule telling you to interpret the <dq>and<dq> first or the <dq>or<dq></p>", 
                "question": "This is why order of operations is so important"
            }, 
            "id": "c3c63kt"
        }, 
        {
            "body": {
                "answer": "<p>This sort of thing makes my friends and family communicate to me in a very specific manner. One friend pointed out that it sounds like they are talking to someone with a mental deficiency.</p>", 
                "question": "This is why order of operations is so important"
            }, 
            "id": "c3c7jcq"
        }, 
        {
            "body": {
                "answer": "<p>Thanks a ton. This would come in handy.<br><br>For folks who are having issues using this.<br><br>* Click the above link by OP<br>* Click <sq>Join now<sq>. Mine took me directly to final page as browser had my MS info saved.<br>* 1st panel had Pluralsight subscription info, which will have **Get Code**. Click that. So that you get  link to **Activate**.<br>* Once you click that there<sq>s another link in green above it to click which takes you to Pluralsight website.<br>* Fill in your information and enjoy the benefits for next 6 months.<br><br>Now, what are some awesome courses that one would suggest?</p>", 
                "question": "Free Pluralsight Membership for 6 Months!"
            }, 
            "id": "cy3i96t"
        }, 
        {
            "body": {
                "answer": "<p>Heads up, this also seems to work with already existing Pluralsight accounts. You do not have to create a new one to use it. Also, the Visual Studio Developer Essentials website seems to have plenty of cool perks with it anyway. I might recommend checking it out for all its resources.</p>", 
                "question": "Free Pluralsight Membership for 6 Months!"
            }, 
            "id": "cy3qtpo"
        }, 
        {
            "body": {
                "answer": "<p>It worked for me. Thanks a lot.</p>", 
                "question": "Free Pluralsight Membership for 6 Months!"
            }, 
            "id": "cy3fqvu"
        }, 
        {
            "body": {
                "answer": "<p>first question.... any cost associated with the MS deal in order to get the Pluralsight deal?</p>", 
                "question": "Free Pluralsight Membership for 6 Months!"
            }, 
            "id": "cy3poxi"
        }, 
        {
            "body": {
                "answer": "<p>very nice</p>", 
                "question": "Visually learning Algorithms"
            }, 
            "id": "crkv983"
        }, 
        {
            "body": {
                "answer": "<p>Dang, I thought this was visualisations of learning algorithms from the title</p>", 
                "question": "Visually learning Algorithms"
            }, 
            "id": "crl6wix"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s also the Youtube channel Algorhythmics https<colon>//www.youtube.com/user/AlgoRythmics</p>", 
                "question": "Visually learning Algorithms"
            }, 
            "id": "crl7ggg"
        }, 
        {
            "body": {
                "answer": "<p>great link. I<sq>m an engineer and always hear people talking about various algorithms. Makes them a lot less intimidating when you see it in action.</p>", 
                "question": "Visually learning Algorithms"
            }, 
            "id": "crkxm3y"
        }, 
        {
            "body": {
                "answer": "<p>Hey! A little while back I wrote and posted a [basic tutorial to getting started with Scrapy](http<colon>//hexfox.com/web-scraping/scrape-your-cinemas-listings-to-get-a-daily-email-of-films-with-a-high-imdb-rating/) - the Python web scraping framework \\[[reddit thread](https<colon>//www.reddit.com/r/learnprogramming/comments/4ozafg/tutorial_anyone_interested_in_web_scraping_i/)\\]. It might be of use to you as it offers a little bit of background on the web that you should be able to take with you to any programming language or scraping software.<br><br>Also I<sq>m free here to answer any questions you might have, about the article or further into that world. Just ping me here.</p>", 
                "question": "Want to start learning more about data mining/scraping using Python anyone interested in joining me and learning together?"
            }, 
            "id": "d6d9jfk"
        }, 
        {
            "body": {
                "answer": "<p>I work with statistics and know a bit of python. I made a program to scrape data from PDFs I generate daily and run comparisons to older files as part of my job. You should check out <dq>[Automate the Boring Stuff with Python](https<colon>//automatetheboringstuff.com/)<dq>. It<sq>s free to read online, but I have the book. It takes you through basic python programming and into web scraping, among other tasks. </p>", 
                "question": "Want to start learning more about data mining/scraping using Python anyone interested in joining me and learning together?"
            }, 
            "id": "d6d7y1n"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s a scraping tutorial in the famous [Automate the Boring Stuff with Python](https<colon>//automatetheboringstuff.com/).<br><br>Here<sq>s the specific chapter<colon> [Chapter 11<colon> Web Scraping](https<colon>//automatetheboringstuff.com/chapter11/)<br><br>Are you only interested in scraping, or would you also like to learn about data sets available via API/web services etc?</p>", 
                "question": "Want to start learning more about data mining/scraping using Python anyone interested in joining me and learning together?"
            }, 
            "id": "d6dgvtz"
        }, 
        {
            "body": {
                "answer": "<p>Check out the book Web Scraping with Python by Ryan Mitchell. </p>", 
                "question": "Want to start learning more about data mining/scraping using Python anyone interested in joining me and learning together?"
            }, 
            "id": "d6d84bn"
        }, 
        {
            "body": {
                "answer": "<p>As long as you ask your question <dq>well<dq>, then this sub is the perfect place to ask.<br><br>By <dq>well<dq> I mean<colon><br><br>- You should have done some basic Googling/Stack Overflow searching, as well as searched the sub first.<br>- Phrase your question clearly and make sure we know what language/frameworks etc. you<sq>re dealing with.<br>- Make it clear what you *expect* should happen, and what *is actually* happening (and also preferably what you<sq>ve already tried to rectify this).<br>- If possible, include a snippet of the code that isn<sq>t working correctly.</p>", 
                "question": "(general) Is there a place to ask beginner coding questions without getting downvoted?"
            }, 
            "id": "cvls2wl"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s what this place is for.<br><br>You should never get downvoted for asking a stupid question, but you *will* get downvoted for asking a question stupidly. [It<sq>s different](http<colon>//www.catb.org/esr/faqs/smart-questions.html).</p>", 
                "question": "(general) Is there a place to ask beginner coding questions without getting downvoted?"
            }, 
            "id": "cvlx69q"
        }, 
        {
            "body": {
                "answer": "<p>Right here.  As long as you have searched your question on Google first.</p>", 
                "question": "(general) Is there a place to ask beginner coding questions without getting downvoted?"
            }, 
            "id": "cvlnyfk"
        }, 
        {
            "body": {
                "answer": "<p>Here. <br><br>It should be Stackoverflow but that place is full of cunts desperate to accrue more imaginary internet points than the last guy.</p>", 
                "question": "(general) Is there a place to ask beginner coding questions without getting downvoted?"
            }, 
            "id": "cvlxjsx"
        }, 
        {
            "body": {
                "answer": "<p>A collection of 51 books seems like overkill. Which one is the best resource?</p>", 
                "question": "Collection Of 51 Free eBooks On Python Programming"
            }, 
            "id": "ck0vhtf"
        }, 
        {
            "body": {
                "answer": "<p>I like number 52<colon> http<colon>//programarcadegames.com<br><br>...but that might be because I wrote it.</p>", 
                "question": "Collection Of 51 Free eBooks On Python Programming"
            }, 
            "id": "ck13s2w"
        }, 
        {
            "body": {
                "answer": "<p>Isn<sq>t this the same page (guy?) that keeps highjacking links and putting them on electronicsforu.com?<br><br>Weren<sq>t we mad about this? <dq>rabble! rabble rabble!<dq></p>", 
                "question": "Collection Of 51 Free eBooks On Python Programming"
            }, 
            "id": "ck0yi9g"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t get the point of these posts anymore.  Finding cheap/free materials isn<sq>t hard.  The hard part is actually doing them and pushing through and getting unstuck.  Being resourceful, tenacious, and creative.</p>", 
                "question": "Collection Of 51 Free eBooks On Python Programming"
            }, 
            "id": "ck17mid"
        }, 
        {
            "body": {
                "answer": "<p>I also find the auto-completion feature (i.e. Google Instant) super useful in coming up with the right search inquiry. Perhaps this is because I am a junior dev for now, but essentially whatever problem I<sq>ve had, someone else had had it, too.<br><br>Except for ffmpeg. Nobody really knows how to solve problems in ffmpeg. The day I can comfortably work in ffmpeg, is the day that I<sq>d be an awesome programmer.</p>", 
                "question": "How to use Google Efficiently and Effectively"
            }, 
            "id": "csxpa0i"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How to use Google Efficiently and Effectively"
            }, 
            "id": "csxs8cm"
        }, 
        {
            "body": {
                "answer": "<p>nice thanks!</p>", 
                "question": "How to use Google Efficiently and Effectively"
            }, 
            "id": "csxngoo"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "How to use Google Efficiently and Effectively"
            }, 
            "id": "csxxk9w"
        }, 
        {
            "body": {
                "answer": "<p>Python is a general-purpose language, and thus can be used for pretty much anything you want. This is in contrast to niche languages like bash or matlab, which are typically used primarily for one thing and one thing only.<br><br>That said, Python is commonly used in the following fields<colon><br><br>- Scientific and mathematical computing<br>- Big data (machine learning, data mining, etc...)<br>- Finance (stock markets, etc)<br>- Computer graphics<br>- System automation and administration<br>- Security and penetration testing<br>- Web development<br>- Scripting (general and application-specific)<colon> Python is generally included by default in most Linux installations, and is also embedded into many popular 3rd party programs such as FreeCAD, 3ds Max, Blender, Cinema 4D, Maya, Gimp, Inkscape, etc.<br>- Education (Python is the number 1 most commonly taught language in universities ([source](http<colon>//cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext)))<br>- Mapping and geography<colon> Python is commonly used by many GIS software<br><br>While Python _could_ in theory be used for the following things, it tends _not_ to be, either due to limitations of the interpreters available today, or due to historical happenstance<colon><br><br>- Writing operating systems (Python isn<sq>t low-level enough)<br>- Mobile (The major players in mobile did not adopt Python, though there are people working very hard to bring Python to mobile -- see Kivy)<br>- Anything having to do with massive concurrency (current implementations of Python are unfortunately not so fantastic with concurrency, though there are people working to change that)<br>- Intensive games or other programs that require speed (Python currently has too much overhead and would be too slow)<br>- Anything requiring absolutely safety such as heart monitors and software for spaceships (developers tend to use more strict languages when lives are literally on the line (such as Ada))<br><br>**Edit<colon>** <br><br>Regarding Python and games -- yes, Python is used in some games (most notably Eve Online), has pretty good support for making 2d via libraries like Pygame, is often a part of games to add a layer of scripting, etc., etc -- my point was that Python will never be used as a part of the core graphics/rendering/physics engine of any games requiring a high degree of computation, such as in modern first person shooters.</p>", 
                "question": "What python used for?"
            }, 
            "id": "cpsjoqr"
        }, 
        {
            "body": {
                "answer": "<p>Reddit is written in Python </p>", 
                "question": "What python used for?"
            }, 
            "id": "cpshs9w"
        }, 
        {
            "body": {
                "answer": "<p>You know that website you<sq>re using to ask this question. [Yeah this one](https<colon>//github.com/reddit/reddit). Also YouTube, Yelp, Pinterest, and a ton of other websites. Also [some games](https<colon>//www.eveonline.com/). And because of some of the [third party tools](http<colon>//www.scipy.org/about.html), it<sq>s very popular in data science- you<sq>re very likely to be using either Python, R, or Matlab if you go into that field. Pretty much everything except low-level operating system work.</p>", 
                "question": "What python used for?"
            }, 
            "id": "cpsj9xq"
        }, 
        {
            "body": {
                "answer": "<p>Take a look at<colon> https<colon>//www.paypal-engineering.com/2014/12/10/10-myths-of-enterprise-python/<br><br>Python is used quite extensively in the industry and, from my perspective, seems to be gaining more traction.<br><br>I personally use it whenever I need to do some data analysis that does not require extreme performance. For example, Python has some great libraries for doing natural language processing. </p>", 
                "question": "What python used for?"
            }, 
            "id": "cpsim2e"
        }, 
        {
            "body": {
                "answer": "<p>Well, it is good, but 180 days are enough to learn quite many things, not necessarily javascript of several kinds - one only needs to work hard enough.<br><br>My colleague bet with his friend that he can teach him Java to the level adequate to be hired as junior dev in exactly 6 months. Surprisingly they both succeeded <colon>)</p>", 
                "question": "How Jennifer Dewalt Learned to Program by Building 180 Websites in 180 Days"
            }, 
            "id": "cm3db8j"
        }, 
        {
            "body": {
                "answer": "<p>And this is exactly the way you become better at programming<colon><br><br>1) Work on actual projects.<br><br>2) Choose projects that are small and easy to complete, not giant ones that you get frustrated with after a month and give up on.</p>", 
                "question": "How Jennifer Dewalt Learned to Program by Building 180 Websites in 180 Days"
            }, 
            "id": "cm3li1n"
        }, 
        {
            "body": {
                "answer": "<p>This is cool and inspiring. This is the best way for me to learn something, just by doing it fucking up, trying to figure stuff out, and then finally getting it. Awesome!</p>", 
                "question": "How Jennifer Dewalt Learned to Program by Building 180 Websites in 180 Days"
            }, 
            "id": "cm3gnup"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a programmer. I don<sq>t think she learned extensive programming and software Architecture skills when building one website per day. Maybe html and css <dq>programming<dq>. But nothing serious. <br><br>Edit<colon> and rails setups</p>", 
                "question": "How Jennifer Dewalt Learned to Program by Building 180 Websites in 180 Days"
            }, 
            "id": "cm404ku"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!</p>", 
                "question": "Free Programming using Course C# Visual Studio 2012"
            }, 
            "id": "cdcmhcd"
        }, 
        {
            "body": {
                "answer": "<p>If my intro to programming class back 5 years ago started with GUI I would be lost very fast, and that is my personal thought.<br><br>My intro to programming actually started with javascript in a simple parser that the professor made. We first learned all about flow-control, data types, data structures, functions, methods, classes, search algorithms.  Only after all those we started looking at GUI, and that made so much easier for me I think.<br><br>But I like your videos, they must help your students a lot.  Congrats!</p>", 
                "question": "Free Programming using Course C# Visual Studio 2012"
            }, 
            "id": "cdcsahu"
        }, 
        {
            "body": {
                "answer": "<p>Thanks man. I am in my 2nd year of a 2 year programming course and I have taken quite a liking to C#. When my classes are done and I have some more time I will be taking a look at this.</p>", 
                "question": "Free Programming using Course C# Visual Studio 2012"
            }, 
            "id": "cdcwm6p"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m on my phone does this course assume you already understand programming logic? I<sq>m looking for some good reasources for C# syntax and structure. Is this what I<sq>m looking for? </p>", 
                "question": "Free Programming using Course C# Visual Studio 2012"
            }, 
            "id": "cdd1wyb"
        }, 
        {
            "body": {
                "answer": "<p>I took this last semester and learned a wealth of information that proved extremely useful to me.  At the end of the course I was reading through the boards and noticed a lot of comments from folks already in the industry who also valued this course.  If you are interested in programming and would like to learn a great deal about the subject, I highly recommend this course.  I have been a programming student for a couple years now and will be obtaining my associates degree this semester.  I still learned a lot more from this course than I have in the two years I<sq>ve been studying.</p>", 
                "question": "MITx<sq>s 6.00x <dq>Introduction to Computer Science and Programming<dq> starts on Monday!"
            }, 
            "id": "c8887wk"
        }, 
        {
            "body": {
                "answer": "<p>Are there any plans to produce more 600 classes (like 6.005 and 6.006) for edX? I really enjoyed taking 6.00x, and I like the idea of continuing my education on the <dq>600 track<dq>.</p>", 
                "question": "MITx<sq>s 6.00x <dq>Introduction to Computer Science and Programming<dq> starts on Monday!"
            }, 
            "id": "c887q7q"
        }, 
        {
            "body": {
                "answer": "<p>I wish they weren<sq>t so structured. I don<sq>t have time to these right now because of school, but they don<sq>t offer these in the summer, when I don<sq>t have anything to do.</p>", 
                "question": "MITx<sq>s 6.00x <dq>Introduction to Computer Science and Programming<dq> starts on Monday!"
            }, 
            "id": "c888vfw"
        }, 
        {
            "body": {
                "answer": "<p>I was signed up to that (last <dq>semester<dq>), and on https<colon>//www.openlearning.com/courses/unsw/computing1 at the same time, but I suddenly lost all interest in coding and learning. Maybe this is my second chance <colon>)<br><br>Just registered, and I got 0<percent> <colon>)<br><br>Funny bug; <dq>Course Started - Feb 04, 2013<dq></p>", 
                "question": "MITx<sq>s 6.00x <dq>Introduction to Computer Science and Programming<dq> starts on Monday!"
            }, 
            "id": "c887h6a"
        }, 
        {
            "body": {
                "answer": "<p>One of the reasons of the <sq>rise<sq> of FP is that, with massively parallel systems, it<sq>s easier to parallize tasks if you make sure that bits of data for example are immutable and behavious is side-effect free. This is one of the core principles of functional programming<colon> you<sq>re passing functions and it<sq>s parameters around and in this case it<sq>s pretty easy to give that bit (the function and it<sq>s parameters) to another machine and tell it to go to town on it.<br><br>Couple this with the availability of solid FP languages like Scala and Clojure available on the JVM (so they<sq>re pretty fast too) and it makes it very interesting in large parallel systems. </p>", 
                "question": "ELI5 why functional programming seems to be <dq>on the rise<dq> and how it differs from OOP"
            }, 
            "id": "crcozxo"
        }, 
        {
            "body": {
                "answer": "<p>**Object Oriented Programming**<br><br>* Program state is held by different (usually mutable) objects that communicate with each other.<br>* Encapsulation restricts how objects can modify each others<sq> states.<br>* This results in programs that are easier to reason about, because you can hopefully look at one or two objects at a time.<br><br><br>**Functional Programming**<br><br>* Program state is held by immutable data structures that are <dq>transformed<dq> rather than modified in place.<br>* Transformation happens with pure functions. These functions take an immutable input and return a new immutable output without affecting the input in any way.<br>* Pure functions depend only on arguments, and have no effects other than their return values.<br><br>**Functional Programming Cons**<br><br>* Creating new data structures rather than modifying in-place can have performance penalties.<br>* It can seem less intuitive to learn than imperative styles.<br>* Some tasks have side-effects by their very nature (like writing to a file buffer) and it<sq>s not immediately obvious to a beginner how this should be handled functionally.<br><br><br><br><br>**Functional Programming Pros**<br><br>* Since pure functions only depend on their arguments and have no side-effects, they do not depend on the context in which they are evaluated. Thus reasoning about a pure functions behaviour does not depend on the global state of a program.<br>* Immutable data structures can be shared without precautions (such as making a defensive copy).<br>* It is easier to write parallel programs in FP, in large part because of immutable state and pure functions.</p>", 
                "question": "ELI5 why functional programming seems to be <dq>on the rise<dq> and how it differs from OOP"
            }, 
            "id": "crcvp1v"
        }, 
        {
            "body": {
                "answer": "<p>I assume that despite using languages that are functional, you either haven<sq>t actually used functional programming or are unaware that you<sq>re using it.<br><br>Functional programming has a single core requirement<colon> functions are <dq>first class citizens<dq>. Usually this means that you can store functions in variables and pass them around just like any other variable. There<sq>ll usually be a special type for functions, possible with something as specific as  <dq>function that takes in an int and returns a string<dq> (in C#, this is `Func<int, string>` and in Scala it<sq>s `Int => String`).<br><br>This is very powerful because it allows for a variety of patterns. For example, if we have an asynchronous function (meaning that it will be executed in parallel, with return being handed back to the caller before the function finishes executing), then one way to do something after this function is done is by using a callback, which is a function that we pass in and the asynchronous function will call it. I<sq>m gonna provide an example using JavaScript and will try and comment the language specific parts<colon> http<colon>//jsfiddle.net/wbpvpfn5/<br><br>And in other languages, you can actually make functions that are truly asynchronous (JS is single threaded, so it<sq>s not possible in JS, but other languages can create a new thread and execute the function in that thread).<br><br>Now that was just a toy example. Here<sq>s some real world cases<colon><br><br>1. Execute some code when a part of the GUI is clicked. These are called events. The typical way to do this is to supply a function that has to be called. Non-functional languages usually pass in an object with a certain method that can be called (older versions of Java do this, such as with Swing). In a sense, that<sq>s basically like functional programming but with a lot of boilerplate. This is called the command pattern. Other non-functional languages might just generate the code hooking up functions to events on the fly (eg, by searching for a function with a certain name) or by having you override certain methods. IMO, it<sq>s a lot cleaner to just pass in a single function.<br><br>    Especially since many languages/frameworks will actually let you add a function to a list of event handlers, so that you can have multiple handlers that are executed in order. This is also possible with the command pattern, but messier with overriding methods in the caller.<br><br>2. There<sq>s a number of generic <dq>higher level functions<dq> (which are functions that take in other functions) that are very useful for a variety of tasks. The most common is probably `map`, which takes in some kind of collection and applies a function to each item in the collection, returning a new collection with the results. A simple example is if you have a list of integers, you could have a function that increments each integer (ie, `function(x) { return x + 1; }`) and then using this with `map` would get you the list with all integers incremented by one.<br><br>    Another example is the `filter` function, which also works on lists. It takes in a function that judges if an item should be in the resulting list. Thus, it lets you remove items that do not satisfy some predicate (a predicate is a function that returns boolean).<br><br>    Here<sq>s an example. Suppose we have a list of employees and we want to get the names of employees that earn more than $50,000 as a salary. Let<sq>s assume that employees are objects (stored in a collection called `employees`) and this object has fields for `name` and `salary`. Then our code to get the list of names would be<colon><br><br>        // This is Scala code<br>        employees<br>          .filter(employee => employee.salary > 50000)<br>          .map(employee => employee.name)<br><br>        // JS equivalent (note that the next version of JS will have syntax closer<br>        // to the above Scala code). I included this so it<sq>s obvious how the Scala<br>        // code is using functions when it isn<sq>t immediately obvious from the syntax.<br>        employees<br>          .filter(function(employee) { return employee.salary > 50000; })<br>          .map(function(employee) { return employee.name; });<br><br>3. Higher level functions can be used for a variety of business logic codes. This is really just an extension of above, where we had some very generic higher level functions. Similarly, you could create more specific higher level functions. For example, suppose we had a library that displays a calendar. We might want to have a callback that is called whenever a date in the calendar is rendered, and this would provide us with a `DateCell` object that we could provide styles to or similar (eg, we could use them to populate a list of what days are displayed).<br><br>Also worth mentioning is that many functional languages like to favour immutability. However, this is not a requirement for a language to be functional. Java, C++, C#, and JavaScript are all functional, yet do not require immutability at all (and in fact favour mutability). As you can probably tell from that list, this also means that functional languages can also be object oriented. Scala is a strong example of a language that combines functional programming with OO very well. In Scala, everything is an object, including functions and what Java calls primitives (so integers are objects). Scala actually favours immutability, preferring that you declare variables with `val`, which makes them immutable, but also letting you create mutable variables when you need them (with the `var` keyword).<br><br>All the same, some languages have gone away with mutability. Haskell is the best known example. In Haskell, everything is immutable. This, however, causes problems. How do you interact with the world when the real world is mutable? Writing to a file or changing a GUI requires immutability. Haskell gets around this by having an <dq>IO<dq> type that sort of encapsulates side effects, allowing the language to be immutable while the particular implementation of certain things (like this IO type) to not be immutable. I won<sq>t go into depth here because immutability is separate from functional programming, if commonly associated with it.<br><br>EDIT<colon> Oh, yeah, I forgot about currying. Currying lets you take a function that has multiple arguments and build it up by binding the first argument (or first few arguments). For example, suppose we had a function `add x y` (this is Haskell syntax). We could use currying to create a new function that adds 1 to a function<colon> `increment = add 1` and since `add` needs another argument, so does `increment`. We can then do `increment 5` to get `6`.<br><br>This raises an interesting point. In Haskell, the type signature of `add` would be `Int => Int => Int` (or similar -- I don<sq>t want to go into the type system in depth). This can be read as Int => (Int => Int), or <dq>takes an int and maps it to a function that takes an int and returns an int<dq>. So after we supply the first int, what we get back is another function with type `Int => Int`, which means it takes in an int and returns an int (which obviously is what `increment` does). <br><br>The usefulness of currying is that we can create new functions easily from existing ones. For example, suppose we wrote a general purpose quicksort function. It needs to be given a means of comparing two elements (since often times we sort complex types that don<sq>t have an obvious way of figuring out their order). So we need to supply a `lessThan` predicate that can be used to compare two elements (in Java, the `Comparable<T>` and `Comparator<T>` types are used for this).<br><br>Suppose that we want a variant of quicksort that can compare integers. We could use currying to provide such a function by using our existing general purpose `quicksort` and currying the `lessThan` predicate in. So if the general purpose `quicksort` has signature `quicksort lessThan list`, we might use `intQuickSort = quicksort someFunctionComparingIntegers`.<br><br>As an aside, it<sq>s common to treat operators as functions. So the less than operator is actually a function. In Haskell, we could use that like<colon> `intQuickSort = quicksort (<)`. The parenthesis are so that the function uses prefix notation instead of infix notation (infix notation would be `x < y` while prefix would be `< x y` -- as you can tell, functions in code usually use prefix).</p>", 
                "question": "ELI5 why functional programming seems to be <dq>on the rise<dq> and how it differs from OOP"
            }, 
            "id": "crcrbct"
        }, 
        {
            "body": {
                "answer": "<p>They key difference between imperative/oop and functional languages is that in the former you say *how* you want things to happen, whereas in the latter you say *what* you want to happen. This leads to a more declarative and less explicit programming style, which can make things shorter and clearer.<br><br>Functional languages also tend to include powerful abstraction mechanisms and encourage immutable data, both of which are typically considered good in all languages.</p>", 
                "question": "ELI5 why functional programming seems to be <dq>on the rise<dq> and how it differs from OOP"
            }, 
            "id": "crco3q8"
        }, 
        {
            "body": {
                "answer": "<p>Useful code. <br><br>* Build stuff that you need or want. <br><br>* Contribute to open source projects you use a lot. <br><br>* Over-engineer your projects to an extent. <br><br>A good place to start is to build yourself a blog from scratch. Yes, you<sq>re going to re-invent some wheels, but this is how you understand how wheels work in the first place. </p>", 
                "question": "Self-taught Python and C/C++<colon> What are some projects I can do to impress employers?"
            }, 
            "id": "cqnb6m2"
        }, 
        {
            "body": {
                "answer": "<p>The FAQ has a [whole section on project ideas.](http<colon>//www.reddit.com/r/learnprogramming/wiki/faq#wiki_where_can_i_find_practice_exercises_and_project_ideas.3F) That first link to Martyr2<sq>s list in particular has a ton of stuff.<br><br>See if there is anything there that works for you. </p>", 
                "question": "Self-taught Python and C/C++<colon> What are some projects I can do to impress employers?"
            }, 
            "id": "cqnb8rf"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//cryptopals.com/</p>", 
                "question": "Self-taught Python and C/C++<colon> What are some projects I can do to impress employers?"
            }, 
            "id": "cqnflin"
        }, 
        {
            "body": {
                "answer": "<p>Have you considered contributing to libre office. I believe they use python, c and c++</p>", 
                "question": "Self-taught Python and C/C++<colon> What are some projects I can do to impress employers?"
            }, 
            "id": "cqneos7"
        }, 
        {
            "body": {
                "answer": "<p>I just paid for pycharm a week ago <colon> /</p>", 
                "question": "PSA<colon> JetBrains tools are now free for students"
            }, 
            "id": "ckqfp0v"
        }, 
        {
            "body": {
                "answer": "<p>What a shame my university doesn<sq>t have .edu domain.</p>", 
                "question": "PSA<colon> JetBrains tools are now free for students"
            }, 
            "id": "ckqhguq"
        }, 
        {
            "body": {
                "answer": "<p>Neato, but with Brackets.io and Sublime Text it<sq>s so hard for me to switch <colon>\\</p>", 
                "question": "PSA<colon> JetBrains tools are now free for students"
            }, 
            "id": "ckqlyvc"
        }, 
        {
            "body": {
                "answer": "<p>IntelliJ IDEA is the greatest IDE I<sq>ve ever used. All my classes were taught in Eclipse, and I don<sq>t ever see myself going back to use it.</p>", 
                "question": "PSA<colon> JetBrains tools are now free for students"
            }, 
            "id": "ckqoeoq"
        }, 
        {
            "body": {
                "answer": "<p>A website of different sorting algorithms has been done, http<colon>//www.sorting-algorithms.com/ but on yours I like how you highlight which line of code is working, makes it easier to understand.</p>", 
                "question": "Hey reddit I<sq>m working on a tool for teaching algorithms through animating them. Has this been done before? Do you think it would be useful?"
            }, 
            "id": "cdrwhn2"
        }, 
        {
            "body": {
                "answer": "<p>Similar things have been done but don<sq>t let it deter you from working on this project, It could very well be useful.<br><br>Some suggestions for down the road<colon><br><br>* A slider to get to a specific spot in the animation<br><br>* A pause button to stop the animation to examine the code, take time to think about what<sq>s going to happen next - or just so you can come back to where you left off<br><br>* A way to adjust the speed at which the animation plays<br><br>I think what you<sq>re doing is very cool.</p>", 
                "question": "Hey reddit I<sq>m working on a tool for teaching algorithms through animating them. Has this been done before? Do you think it would be useful?"
            }, 
            "id": "cdrxgf2"
        }, 
        {
            "body": {
                "answer": "<p>Yours is original when it mixes the animations with the code. That is something I would have found very helpful when I was learning basic algorithms</p>", 
                "question": "Hey reddit I<sq>m working on a tool for teaching algorithms through animating them. Has this been done before? Do you think it would be useful?"
            }, 
            "id": "cdryp08"
        }, 
        {
            "body": {
                "answer": "<p>This is the closest I<sq>ve seen to what you are trying to do<colon><br><br>https<colon>//github.com/pgbovine/OnlinePythonTutor/</p>", 
                "question": "Hey reddit I<sq>m working on a tool for teaching algorithms through animating them. Has this been done before? Do you think it would be useful?"
            }, 
            "id": "cds12ka"
        }, 
        {
            "body": {
                "answer": "<p>The fact that I<sq>m answering this question means I need a new method.</p>", 
                "question": "How do you stop yourself from getting distracted while programming?"
            }, 
            "id": "cdgiq1z"
        }, 
        {
            "body": {
                "answer": "<p>Try this site<colon> http<colon>//www.noisli.com I<sq>ve started using it recently, it helps me when my open space office room gets too loud.</p>", 
                "question": "How do you stop yourself from getting distracted while programming?"
            }, 
            "id": "cdgkcgg"
        }, 
        {
            "body": {
                "answer": "<p>get coffee, boot to linux, maybe light some incense, crack my fingers, open 5 vim windows, google around a bit on how to further optimize my vimrc, close the web-browser when I realize I<sq>ve been optimizing for 30 minutes without coding anything, start coding.</p>", 
                "question": "How do you stop yourself from getting distracted while programming?"
            }, 
            "id": "cdgguxs"
        }, 
        {
            "body": {
                "answer": "<p>I put on a CS lecture on my second monitor and while I code I just tune out the lecture. If I put on music I get distracted but with a lecture on for some reason I can just pay way more attention to my code haha.</p>", 
                "question": "How do you stop yourself from getting distracted while programming?"
            }, 
            "id": "cdgkmkd"
        }, 
        {
            "body": {
                "answer": "<p>Some important FAQs here<colon><br><br>http<colon>//www.omscs.gatech.edu/faq/<br><br>Particularly<colon><br><br>>**How much does the degree program cost?**<br>We\u2019re not yet ready to announce a specific program cost, but the plan is to offer the Georgia Tech OMS CS for a total cost of under $7,000\u2014a fraction of the cost of Georgia Tech\u2019s on-campus program and even less than that of comparable private universities.<br><br>>**How long does it take to complete and receive a degree?**<br>We anticipate the typical time for students to complete the OMS CS will be about three years, though we will allow for longer enrollments\u2014 up to six years\u2014for those students who need greater flexibility.<br><br>>**How does the student workload compare to a residential degree? How many hours a week will students spend on it?**<br>The total workload is the same as the residential program; the weekly or hourly workload depends on how quickly students wish to complete the program.<br><br>>**Who can take courses?**<br>All OMS CS courses will be available free of charge for anyone, anywhere in the world. Degree-seeking students will be virtually separated from \u201copen\u201d students to ensure degree program rigor.<br><br>>**Who can apply to the degree program?**<br>Formal admission into the OMS CS program will require a Bachelor of Science degree in computer science from an accredited institution, or a related Bachelor of Science degree with a possible need to take and pass remedial courses. Formal admission will also require the selection through a graduate admission committee that will meet periodically.<br><br>>**When can people sign up for the courses?**<br>All courses will be open to the public as soon as they are available on the Udacity website. Timing is to be worked out, but course previews are expected to be available this summer for select courses. For more information, please see www.Udacity.com/GeorgiaTech<br><br>>**When can they apply to the degree program?**<br>We anticipate opening enrollment for matriculation during Fall 2014.</p>", 
                "question": "Udacity Have Announced An Online CS Masters Degree"
            }, 
            "id": "c9za72e"
        }, 
        {
            "body": {
                "answer": "<p>Everyone is so mad that you need a BS for matriculation. Boo hoo. Getting a BS in CS isn<sq>t just sitting in your room and coding little projects. It<sq>s a huge endeavor, touching on damn near every facet involved in software. Keeping the degree program traditional, i.e., you need a BS first, is in my opinion a good thing. It ensures the quality of what the degree represents. <br>I<sq>m sure everyone will cry about my opinions - everyone will cry because they haven<sq>t put in the effort of a BS, so somehow it<sq>s unfair for that to be a requirement for the MS. <br>I also think it will come as a sobering slap in the face for the whiners once they start taking some Master level courses and realize that the Computer Science field is far more involved than what they think.</p>", 
                "question": "Udacity Have Announced An Online CS Masters Degree"
            }, 
            "id": "c9zdvan"
        }, 
        {
            "body": {
                "answer": "<p>can you take the master for free and not getting a diploma ?</p>", 
                "question": "Udacity Have Announced An Online CS Masters Degree"
            }, 
            "id": "c9zaurw"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>d be awesome if they had a bachelor degree as well. The Open University is so fucking expensive... <colon>-/</p>", 
                "question": "Udacity Have Announced An Online CS Masters Degree"
            }, 
            "id": "c9zad7a"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re interested in working with a team and Java, you could try developing a Minecraft mod. I<sq>d be interested no matter what we did though, itd be a good experience. <br><br>PM me if you<sq>re interested</p>", 
                "question": "Anyone interested in forming a small team to make an open source project to learn how to code in a team?"
            }, 
            "id": "ddjpllx"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d love to collaborate on a project! Could we create a collaboration subreddit for people interested in learning this way? Maybe with a WIKI explaining everything required to set up and collaborate safely?<br><br>Edit<colon> enough interest for me! I guess since I<sq>m the one who suggested it, I<sq>ll take the responsibility of creating a subreddit. I<sq>ll message anyone who replied to my message when it<sq>s ready, but i have exams this week. How about we all take a day or two to brainstorm a good subreddit name? What do you think about<colon> open_programming/learn_programming_together/pace_yourself_programming_<br><br>After we pick a name we can create a subreddit and create a couple stickied posts to discuss how we want to organize and govern the subreddit? I<sq>ve never moderated a sub so I<sq>ll open it up to anyone who wants to help with the brainstorming stage.<br><br>Edit2<colon> r/collab_infotech<br><br>Edit3<colon> r/egg_it<br>R/eggit<br><br>Edit4<colon> I<sq>m leaning towards something having to do with eggs because I<sq>ve already started work on an education initiative revolving around eggs that i think is pretty fun BUT I also think using personal reasons for a project that is open to anyone could be selfish. That being said, I<sq>m leaning towards eggs because they are such an iconic symbol when discussing growth and learning, and there<sq>s a deceptive simplicity in the imagery of a generic egg finally hatching into anything else. I want this to be an incubator for open source development, with an emphasis on documenting the process so anyone can join in, catch up, and either take what they want or contribute to whatever projects we agree on <colon>D Anyone interested please feel free to chip in. I<sq>ll wait for at least 36 hours from this post before confirming the subreddit name for this project. </p>", 
                "question": "Anyone interested in forming a small team to make an open source project to learn how to code in a team?"
            }, 
            "id": "ddk3jjz"
        }, 
        {
            "body": {
                "answer": "<p>There is a subreddit for this btw, but it<sq>s pretty dead. <br><br>/r/learnteamprogramming/</p>", 
                "question": "Anyone interested in forming a small team to make an open source project to learn how to code in a team?"
            }, 
            "id": "ddk1cui"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a software developer by trade. I would be more than happy to help you guys with code reviews - I need to get better at that anyways.<br><br>Edit<colon> I<sq>m pretty well versed in Visual Basic, Java, C#, HTML, CSS, JavaScript, and AngularJS. Another thing that I<sq>d like to get some practice in is being a Scrum master, so I could take on that role too.</p>", 
                "question": "Anyone interested in forming a small team to make an open source project to learn how to code in a team?"
            }, 
            "id": "ddk3tt3"
        }, 
        {
            "body": {
                "answer": "<p>As someone looking to change careers and get into Android dev this couldn<sq>t have come at a better time for me! Thanks for taking the time to do this </p>", 
                "question": "For those who want to learn about Android Development I just posted a guide on how I published my first app in two months."
            }, 
            "id": "cjrs19h"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m in the same boat as you, just took my first year of comp Sci courses, although I picked my major really late. I<sq>m definitely giving this a look through as I<sq>ve been wanting to make an android app lately, this will give me a great place to start. Thanks so much!</p>", 
                "question": "For those who want to learn about Android Development I just posted a guide on how I published my first app in two months."
            }, 
            "id": "cjrte73"
        }, 
        {
            "body": {
                "answer": "<p>Most certainly will give this a look. </p>", 
                "question": "For those who want to learn about Android Development I just posted a guide on how I published my first app in two months."
            }, 
            "id": "cjrrips"
        }, 
        {
            "body": {
                "answer": "<p>Saving thanks! </p>", 
                "question": "For those who want to learn about Android Development I just posted a guide on how I published my first app in two months."
            }, 
            "id": "cjrs9ja"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s a really cool site. I use it often to learn Data structures. In addition to this, I find these sites useful too <br>https<colon>//sites.google.com/site/indy256/algo.  <br>http<colon>//www.cs.usfca.edu/~galles/visualization/Algorithms.html</p>", 
                "question": "I found a website for data structures and algorithms tutorial with python examples throughout which I found helpful so thought I would share."
            }, 
            "id": "ceiuhti"
        }, 
        {
            "body": {
                "answer": "<p>[This one<sq>s pretty good, too.](http<colon>//pythontutor.com/visualize.html#)</p>", 
                "question": "I found a website for data structures and algorithms tutorial with python examples throughout which I found helpful so thought I would share."
            }, 
            "id": "cej6vfx"
        }, 
        {
            "body": {
                "answer": "<p>We actually used this site for my data structures and algorithms class. It starts off really strong with videos and great explanations, and then all of a sudden, from the hashing or linked lists section, it doesn<sq>t do so well. I had a very difficult time learning graphs from that site alone.<br><br>It<sq>s a great, free site.</p>", 
                "question": "I found a website for data structures and algorithms tutorial with python examples throughout which I found helpful so thought I would share."
            }, 
            "id": "cej8da2"
        }, 
        {
            "body": {
                "answer": "<p>can you give me a little bit more detail on what this site is about/what it intends to teach? i sifted through it a bit, and it looks interesting, but i<sq>m a noob trying to get into programming/developing and was wondering if it<sq>s worth my time.</p>", 
                "question": "I found a website for data structures and algorithms tutorial with python examples throughout which I found helpful so thought I would share."
            }, 
            "id": "cejfy02"
        }, 
        {
            "body": {
                "answer": "<p>>How do I grow out of it?<br><br>It<sq>s simple, but complex. The easiest way to grow out of this is by choosing to. You have to choose to continue on, keep creating, and to keep practicing despite how you feel the process is going for you. In programming we are potentially faced with failure every time we compile a code. But the best programmers learn to deal with that failure and continue to compile their code again and again. They keep practicing and learning from their mistakes. After a while that learning leads to less failures and more successes; from there they start to shine. <br><br>But really, you know the one thing that could set you apart from others? Actually doing something; and that doesn<sq>t even take any prior programming skills which you are already way ahead of if you have a CS degree.<br><br>By the way, I do think the saying <dq>Rome wasn<sq>t built in a day<dq> fits well in your situation. You say you want to make something that can really make an impact. You should consider starting out smaller, making something that has a smaller impact, in someones life or even your own life. From there you make bigger impacts growing your skills and ability so you can create the impact you really want.</p>", 
                "question": "Feeling like a perpetual beginner unhappy with personal projects unsatisfied by my own programming and feeling like quitting forever and getting into something else. How do I grow out of it?"
            }, 
            "id": "d1gmlhf"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Feeling like a perpetual beginner unhappy with personal projects unsatisfied by my own programming and feeling like quitting forever and getting into something else. How do I grow out of it?"
            }, 
            "id": "d1gi6fj"
        }, 
        {
            "body": {
                "answer": "<p>Hey man, Junior Software Developer here, though I don<sq>t have a degree.<br><br>For personal projects, try to do something new to you, so at least then you know you<sq>re learning something new. It<sq>s not much, but that depends on the scope of your personal projects.<br><br>The best thing for me has been actually having a junior development job. I get to spend all day around more experienced programmers and I<sq>ve learned so much just from seeing their work, and contributing to the project. I feel the same way as you really, I don<sq>t think my contributions can really be worthwhile, and I<sq>m definitely a beginner, but the support from other developers and the experience really is helping me grow as a programmer and software developer.</p>", 
                "question": "Feeling like a perpetual beginner unhappy with personal projects unsatisfied by my own programming and feeling like quitting forever and getting into something else. How do I grow out of it?"
            }, 
            "id": "d1glpl4"
        }, 
        {
            "body": {
                "answer": "<p>> How do I grow out of it? How do I expand my limits as a beginner programmer and know what real programming feels like?<br><br>By writing above your head. Take on bigger projects, and do them. Will you know how to do them on Day One? No, of course not. But there<sq>s this thing called learning. You will learn, and struggle, and learn more, and master more. That<sq>s how it<sq>s done. You aren<sq>t just born knowing how to do this stuff.<br><br>I started in my late 30s knowing nothing, and, unlike you, having not gone to school for CS. The last time I had programmed (barely) was in the mid 1980s with BASIC! Little by little (and I was not planning for a career in it at all, just for the heck of it), I picked it up and have made some small side money and have been working on my own projects (10s of k LOC). I feel more confident than you, and yet I bet you have such a better foundation in CS than I will ever have.<br><br>The difference is, I dove in. You are standing on the sidelines.</p>", 
                "question": "Feeling like a perpetual beginner unhappy with personal projects unsatisfied by my own programming and feeling like quitting forever and getting into something else. How do I grow out of it?"
            }, 
            "id": "d1gmrvm"
        }, 
        {
            "body": {
                "answer": "<p>I learned to make games from MIT<sq>s [A Gentle Introduction to Python](http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2011/). The guided final project is Tetris. <br><br>Check out the [Python wiki](https<colon>//wiki.python.org/moin/GuiProgramming) on GUI Programming. There are a bunch of options, but [Tkinter](https<colon>//docs.python.org/2/library/tkinter.html) is the <sq>standard<sq> one. <br><br>Beyond that, come check out /r/MonthlyProgram. We may be doing a game of some sort for March. </p>", 
                "question": "[Python] Next steps after Codeacademy crash course and <dq>Learn Python the Hard Way<dq> book"
            }, 
            "id": "cz9zq08"
        }, 
        {
            "body": {
                "answer": "<p>[MIT 6.00.1x - Introduction to computer science](https<colon>//www.edx.org/course/introduction-computer-science-mitx-6-00-1x-6)  <br><br>Excellent, challenging course.</p>", 
                "question": "[Python] Next steps after Codeacademy crash course and <dq>Learn Python the Hard Way<dq> book"
            }, 
            "id": "cza0pbo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d say it<sq>s time to start working through some projects. Although, believe me I know, it<sq>s difficult to get started. Especially if you didn<sq>t start programing without any projects in mind. So, I<sq>d suggest a few books and links to help you get started.  <br><br>- [Exercises for Programmers](http<colon>//www.amazon.com/Exercises-Programmers-Challenges-Develop-Coding/dp/1680501224)<br>- [Python Playground](http<colon>//www.amazon.com/Python-Playground-Projects-Curious-Programmer/dp/1593276044/ref=sr_1_2?ie=UTF8&qid=1453654221&sr=8-2&keywords=python+projects)<br>- [Python Projects](http<colon>//www.amazon.com/Python-Projects-Laura-Cassell/dp/111890866X/ref=sr_1_1?ie=UTF8&qid=1453654221&sr=8-1&keywords=python+projects)<br>- [Projects](https<colon>//github.com/karan/Projects)<br>- r/beginnerprojects<br><br>After finishing [Exercises for Programers](http<colon>//www.amazon.com/Exercises-Programmers-Challenges-Develop-Coding/dp/1680501224) or [Python Playground](http<colon>//www.amazon.com/Python-Playground-Projects-Curious-Programmer/dp/1593276044/) you should be well equipped to start and finish your own projects.</p>", 
                "question": "[Python] Next steps after Codeacademy crash course and <dq>Learn Python the Hard Way<dq> book"
            }, 
            "id": "cza4exe"
        }, 
        {
            "body": {
                "answer": "<p>Look at the example code at http<colon>//programarcardegames.com and make your own game. Making your own project is a great experience. </p>", 
                "question": "[Python] Next steps after Codeacademy crash course and <dq>Learn Python the Hard Way<dq> book"
            }, 
            "id": "cza18pq"
        }, 
        {
            "body": {
                "answer": "<p>Simon Allardice is an amazing lecturer. I love his videos.</p>", 
                "question": "Lynda.com<sq>s Foundations of Programming<colon> Fundamentals course is currently free! I highly recommend this if you<sq>re just getting started."
            }, 
            "id": "co4h18j"
        }, 
        {
            "body": {
                "answer": "<p>Thank you. I really want to learn JavaScript. I feel comfortable with HTML and CSS but I want to start more programming. </p>", 
                "question": "Lynda.com<sq>s Foundations of Programming<colon> Fundamentals course is currently free! I highly recommend this if you<sq>re just getting started."
            }, 
            "id": "co4fxsh"
        }, 
        {
            "body": {
                "answer": "<p>Simon Allardice is a genius when it comes to teaching programming. I have done this course and I would recommended to anyone who has not programmed before.</p>", 
                "question": "Lynda.com<sq>s Foundations of Programming<colon> Fundamentals course is currently free! I highly recommend this if you<sq>re just getting started."
            }, 
            "id": "co4i6ff"
        }, 
        {
            "body": {
                "answer": "<p>This is the first programming course that hasn<sq>t put me to sleep.  Awesome resource, thanks for sharing.</p>", 
                "question": "Lynda.com<sq>s Foundations of Programming<colon> Fundamentals course is currently free! I highly recommend this if you<sq>re just getting started."
            }, 
            "id": "co4j0uf"
        }, 
        {
            "body": {
                "answer": "<p>All day long....  programmers don<sq>t have to have a degree to make it and not all employers are large and check everything about all employees.  Clean up and be a good programmer or you<sq>ll find yourself destitute.   That will get you in a jobless situation.</p>", 
                "question": "I<sq>m a 27 year old college drop out with a criminal record. Could i still be a programmer?"
            }, 
            "id": "cfd8p1l"
        }, 
        {
            "body": {
                "answer": "<p>You do not need a degree. Experience means a lot. Start doing some freelance work and build a portfolio to showcase your work. Not all employers do background check on their employees. </p>", 
                "question": "I<sq>m a 27 year old college drop out with a criminal record. Could i still be a programmer?"
            }, 
            "id": "cfd8su9"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t see any reason why not.  <br><br>You may have problems with some employers, certainly. Don<sq>t expect to be doing any government contracting, either, with a history like yours.  <br><br>Failing all else, with web programming, it is just too easy to go <dq>indie<dq> and do the freelance thing. It<sq>s not a traditional <dq>9 to 5<dq> kind of setup, but it **is** still  receiving money in exchange for services rendered .... that is kind of the definition of a <dq>job<dq>, is it not?  <br><br>Ya gotta think outside of the traditional mold sometimes.</p>", 
                "question": "I<sq>m a 27 year old college drop out with a criminal record. Could i still be a programmer?"
            }, 
            "id": "cfd9kl5"
        }, 
        {
            "body": {
                "answer": "<p>Freelance or go out on your own. There<sq>s a very low barrier to entry in that field.</p>", 
                "question": "I<sq>m a 27 year old college drop out with a criminal record. Could i still be a programmer?"
            }, 
            "id": "cfd8qhn"
        }, 
        {
            "body": {
                "answer": "<p>No questions. Just wanted to congratulate you on your accomplishment man. It<sq>s definitely motivating for someone like myself who shares similar aspirations.</p>", 
                "question": "I just put my first iPhone game on the App Store!"
            }, 
            "id": "dcq5ga9"
        }, 
        {
            "body": {
                "answer": "<p>Hey just FYI<br><br>I<sq>d put an <dq>explore<dq> option so you can play wo making a login</p>", 
                "question": "I just put my first iPhone game on the App Store!"
            }, 
            "id": "dcq770u"
        }, 
        {
            "body": {
                "answer": "<p>Congrats!</p>", 
                "question": "I just put my first iPhone game on the App Store!"
            }, 
            "id": "dcq5w5v"
        }, 
        {
            "body": {
                "answer": "<p>Can you throw in some of the techniques / libraries you used to connect the players? Congrats! It<sq>s really awesome you published it! </p>", 
                "question": "I just put my first iPhone game on the App Store!"
            }, 
            "id": "dcqzkg2"
        }, 
        {
            "body": {
                "answer": "<p>Subtle shot at people posting the same questions repeatedly </p>", 
                "question": "A Thank You to the Community"
            }, 
            "id": "d42pbm5"
        }, 
        {
            "body": {
                "answer": "<p>Awesome! Now you can make the <dq>Where do I go next<dq> post... just kidding. You<sq>ve done the most important step in learning how to program, which is learning how to learn, or learning how to teach yourself!!!</p>", 
                "question": "A Thank You to the Community"
            }, 
            "id": "d42l41q"
        }, 
        {
            "body": {
                "answer": "<p>Just wanted to pass by and say that this sub is pretty chill. I<sq>ve started playing around with Python and posted 2 or 3 times when I had errors/question and everyone was pretty cool and answered me and even proposed to help me in the future. So yeah, you guys are cool.</p>", 
                "question": "A Thank You to the Community"
            }, 
            "id": "d42s6qm"
        }, 
        {
            "body": {
                "answer": "<p>Word. Y<sq>all da real mvp </p>", 
                "question": "A Thank You to the Community"
            }, 
            "id": "d42vxdj"
        }, 
        {
            "body": {
                "answer": "<p>[This](http<colon>//www.kilobolt.com/introduction.html) might be useful. You make a flappy bird clone with libGDX.</p>", 
                "question": "I know basic Java (loops conditionals arrays etc.) however I can<sq>t do anything with graphics. How can I go about learning to use graphics?"
            }, 
            "id": "cpz4e7e"
        }, 
        {
            "body": {
                "answer": "<p>So with video games, you<sq>re going to want to go with [Libgdx](http<colon>//libgdx.badlogicgames.com/). Libgdx is a fantastic game library (and honestly the standard for Java game libraries at this point).<br><br>It uses [LWJGL](http<colon>//www.lwjgl.org/), which is an OpenGL wrapper for Java.<br><br>Both of which allow you to use OpenGL with Java, but Libgdx adds some extra functionality if you<sq>re looking to build things a little quicker.</p>", 
                "question": "I know basic Java (loops conditionals arrays etc.) however I can<sq>t do anything with graphics. How can I go about learning to use graphics?"
            }, 
            "id": "cpz6zuo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d suggest checking out [Processing](https<colon>//processing.org/). It is a free, Java-based language (shares syntax and libraries etc) that is geared towards teaching graphics and audio programming. It is a great way to sidestep a lot of the work you<sq>d have to do to get up and running with most engines/frameworks. After you experiment with working with shapes and colors, you can decide if you<sq>re still interested enough to try something more sophisticated (Unity, Unreal, etc). It would also be entirely possible to create a game in Processing.<br><br>I found graphics programming to be MUCH harder than I anticipated - as it requires a different kind of mental abstraction than working with text and data. It is also very satisfying to get some cool looking animations running.</p>", 
                "question": "I know basic Java (loops conditionals arrays etc.) however I can<sq>t do anything with graphics. How can I go about learning to use graphics?"
            }, 
            "id": "cpz5thk"
        }, 
        {
            "body": {
                "answer": "<p>Is there anything like libGDX for C++? </p>", 
                "question": "I know basic Java (loops conditionals arrays etc.) however I can<sq>t do anything with graphics. How can I go about learning to use graphics?"
            }, 
            "id": "cpzdtks"
        }, 
        {
            "body": {
                "answer": "<p>But...everyone learned to code from zero.</p>", 
                "question": "Stories of people that learned to code from zero and their teachings to new beginners. It<sq>s been helping me a lot."
            }, 
            "id": "chfvhdp"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Stories of people that learned to code from zero and their teachings to new beginners. It<sq>s been helping me a lot."
            }, 
            "id": "chfy9hf"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this. I have been tasked with learning C# and have watched all I can watch, and I have read a lot of material. With ALL of this I would hit <dq>the wall<dq> and basically just give up. I have basically forgotten all I have learned simply because I feel super overwhelmed. Everyone tells me to <dq>get your hands dirty<dq>, but I have no idea where to start. Even if I knew what I wanted to code, I still have no idea where to start. Visual Studio can be overwhelming and I<sq>m forever getting it wrong. Reading this gives me a little hope. Thanks.</p>", 
                "question": "Stories of people that learned to code from zero and their teachings to new beginners. It<sq>s been helping me a lot."
            }, 
            "id": "chfubdo"
        }, 
        {
            "body": {
                "answer": "<p>Graduated Political Science. USELESS. <br><br>Started learning R and predictive modeling early 2013. Just got a job last month as a data mining consultant. <br><br></p>", 
                "question": "Stories of people that learned to code from zero and their teachings to new beginners. It<sq>s been helping me a lot."
            }, 
            "id": "chfwsvp"
        }, 
        {
            "body": {
                "answer": "<p>Brainf*ck, Ook, and LolCat.</p>", 
                "question": "If you could be fluent in 3 and only 3 programming languages which 3 would you choose?"
            }, 
            "id": "csif9bm"
        }, 
        {
            "body": {
                "answer": "<p>python, C++, assembly</p>", 
                "question": "If you could be fluent in 3 and only 3 programming languages which 3 would you choose?"
            }, 
            "id": "csijxob"
        }, 
        {
            "body": {
                "answer": "<p> * C++          - speedy, and I prefer over Java. The low-level stuff is useful as well.<br> * Haskell       - Understanding the logic of one functional lagnguage means it<sq>s significantly easier to understand the other ones.<br> * JavaScript</p>", 
                "question": "If you could be fluent in 3 and only 3 programming languages which 3 would you choose?"
            }, 
            "id": "csidtky"
        }, 
        {
            "body": {
                "answer": "<p>SQL<colon> Basically irreplaceable for its domain<br><br>Javascript<colon> Basically irreplaceable for its domain<br><br>C++<colon> Does everything else</p>", 
                "question": "If you could be fluent in 3 and only 3 programming languages which 3 would you choose?"
            }, 
            "id": "csipwnj"
        }, 
        {
            "body": {
                "answer": "<p>Most people confuse the idea of abstraction with the idea of [information hiding](http<colon>//en.wikipedia.org/wiki/Information_hiding).  Abstraction does not mean <dq>putting all the details behind some interface.<dq>  Abstraction is the process of isolating and identifying patterns, giving those now-recognized patterns names, and thinking and acting in terms of those patterns _per se_ vs. instances of those patterns.<br><br>Numbers are an abstraction we deal with every day starting from a very young age.  Consider the number 5.  You can<sq>t point to the number 5.  You can<sq>t touch, smell, or taste the number 5.  You have never once encountered the number 5 walking around outside.<br><br>That said, the number 5 _is_ an abstraction of many concrete every day experiences.  You can<sq>t touch the number 5, but you can touch 5 apples.  You can<sq>t smell the number 5, but you can smell 5 cows (and how!).  You can draw me 5 smiley faces or 5 hearts.<br><br>What is 5 except something that all these groups-of-five have in common?  It<sq>s an abstraction that isolates some aspects of these groups-of-five that we find relevant and _only_ those aspects, discarding the particulars.  It<sq>s powerful because it encapsulates 5-ness _per se_ without needing to answer <dq>5 of _what_?<dq>  It<sq>s not 5 of anything \u2014 it<sq>s just 5.<br><br>Even that symbol, <dq>5<dq>, is still just a picture of the number 5.  5 is prime whether we write is as 5 (decimal) or 101 (binary) or V (roman numerals) or IIIII (tally marks) or \u4e94 (Japanese).  The number 5 is not an interface.  It is not <dq>hiding details.<dq>  It is a pure expression of a pattern we<sq>ve isolated and elevated to a thing-in-itself.<br><br>Did you know the first model of computation \u2014 the [lambda calculus](http<colon>//en.wikipedia.org/wiki/Lambda_calculus#Lambda_calculus_and_programming_languages) \u2014 was first written down in 1936, long before we had a computer that could ever possibly implement it?  What <dq>information<dq> or <dq>implementation details<dq> could this model have possibly been hiding?  The first fully programmable digital computer wouldn<sq>t even be invented for another decade!<br><br>Instead, the lambda calculus was an attempt to isolate and define what we meant by <dq>computation.<dq>  It allows us to think more clearly about computation _per se_.  It allowed us to start making statements about what computers could and could not do (even absent a working computer).<br><br>P.S., shameless plug.  If you dig yourself some technical learnin<sq>, check out [CodeUnion](http<colon>//codeunion.io), my latest project. This is the kind of thing we<sq>d cover in our _Topics in Computer Science_ workshop. <colon>)</p>", 
                "question": "Explain like I<sq>m 34 years old<colon> Abstraction."
            }, 
            "id": "cl5gmuv"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Explain like I<sq>m 34 years old<colon> Abstraction."
            }, 
            "id": "cl5aqzt"
        }, 
        {
            "body": {
                "answer": "<p>Like you<sq>re 34? Sure.<br><br>You potty train your kid. You ask them all the time if they need to go. You tell them to go. You tell them to sit down. You tell them how to go. You check to make sure they went. You tell them to flush.<br><br>Eventually you just say <dq>Go to the bathroom.<dq><br><br>You pick out their shoes, socks, bottoms, tops, hats and put them on. You teach them about shoes going on *after* pants. Eventually you just say <dq>Get dressed.<dq><br><br>Eventfully you just say <dq>Did you wash up and brush your teeth?<dq><br><br>Eventually, you just say <dq>Are you ready to go?<dq> Instead of <dq>Did you get dressed? Did you clean up? Did you go to the bathroom?<dq><br><br>Eventually you just say <dq>The family is going out for dinner at 7<colon>00.<dq><br><br>All the same stuff happens, you just don<sq>t direct it all, don<sq>t care how it happens, and presented with the end result you need from a simple high level statement.</p>", 
                "question": "Explain like I<sq>m 34 years old<colon> Abstraction."
            }, 
            "id": "cl5iown"
        }, 
        {
            "body": {
                "answer": "<p>Abstraction is the process of hiding complexity by providing a higher level interface.<br><br>Take for example, a car, the abstraction used by the everyday person is the steering wheel and gas pedal. We don<sq>t have to worry about how energy is created and how turning the wheel affects the axel and ultimately wheel position. We just accept that those parts are abstracted away and we deal with an interface that is made for us.<br><br>The same applies to software, operating systems are an abstraction and in code abstractions are there to keep complexity localized to specific parts while providing an easy way interact with the code.</p>", 
                "question": "Explain like I<sq>m 34 years old<colon> Abstraction."
            }, 
            "id": "cl5ast3"
        }, 
        {
            "body": {
                "answer": "<p>Although this is not super structured and I don<sq>t have experience with this personally, I have heard that having a github account and some contributions can go a long way.  I<sq>ve even heard of people landing entry-level jobs because they were the only person who applied that had a Github account.<br><br>So I would say frequently contributing to a few projects, especially if large/well-known/relevant, could go a long way. This is possibly more universilly recognizable than any online course I know of because it indicates you are capable of contributing useful, functioning code to a project.  And I think that<sq>s exactly what an employer typically wants out of a programmer.<br><br>So once you are somewhat capable, contributing to literally almost anything on github is, in my opinion, the best way to prove it without job experience.<br><br>Edit<colon> to clarify my personal experience with this, I haven<sq>t landed a job due to github experience, but you can bet your ass I put all of my personal projects (which are admittedly small and not all that impressive) on github and will attempt to make some contributions to other projects before looking for a different job.</p>", 
                "question": "Is there any kind of online degree/program/certificate that I can complete that employers will recognize?"
            }, 
            "id": "culcrvu"
        }, 
        {
            "body": {
                "answer": "<p>Udacity started working with companies to create [nanodegrees](https<colon>//www.udacity.com/nanodegree). </p>", 
                "question": "Is there any kind of online degree/program/certificate that I can complete that employers will recognize?"
            }, 
            "id": "culait1"
        }, 
        {
            "body": {
                "answer": "<p>Western Governor<sq>s University<br><br>/r/wgu<br><br>http<colon>//www.wgu.edu/online_it_degrees/software_development_degree</p>", 
                "question": "Is there any kind of online degree/program/certificate that I can complete that employers will recognize?"
            }, 
            "id": "culcg38"
        }, 
        {
            "body": {
                "answer": "<p>[The Open University](http<colon>//open.ac.uk) - UK based university that offers a full program of bachelors, masters and PhD courses through distance learning.</p>", 
                "question": "Is there any kind of online degree/program/certificate that I can complete that employers will recognize?"
            }, 
            "id": "culdij8"
        }, 
        {
            "body": {
                "answer": "<p>[https<colon>//zapier.com/learn/apis/](https<colon>//zapier.com/learn/apis/) </p>", 
                "question": "How do I becoming better at API<sq>s?"
            }, 
            "id": "dbdnnur"
        }, 
        {
            "body": {
                "answer": "<p>The best (and really only) place to start is always the API<sq>s documentation you want to use. A lot of APIs you<sq>ll find work along the same concept. It depends on what language you<sq>re working in but you also might be able to find a wrapper already built for the API (the company might even publish their own in a handful of languages). Search whatever package repository is available for your language or they might be referenced in the API documentation. </p>", 
                "question": "How do I becoming better at API<sq>s?"
            }, 
            "id": "dbdkjyh"
        }, 
        {
            "body": {
                "answer": "<p>[Building a Chatbot using Telegram and Python (Part 1)](https<colon>//www.codementor.io/garethdwyer/tutorials/building-a-telegram-bot-using-python-part-1-goi5fncay)<br><br>[Building a Chatbot using Telegram and Python (Part 2)<colon> Adding a SQLite Database Backend](https<colon>//www.codementor.io/garethdwyer/tutorials/building-a-chatbot-using-telegram-and-python-part-2-sqlite-databse-backend-m7o96jger)<br><br>[Heres the Final Code on Github](https<colon>//github.com/sixhobbits/python-telegram-tutorial)<br><br>I hope that helps. I haven<sq>t went through this myself but I remember it was posted a few weeks ago on learnpython or something. </p>", 
                "question": "How do I becoming better at API<sq>s?"
            }, 
            "id": "dbdv4f4"
        }, 
        {
            "body": {
                "answer": "<p>Telegram has a quite nice documentation. <dq>learn the API<dq> is just a question of reading it and finding methods that you need.<br><br>>API or even git<br><br>It<sq>s two completely separate things. I would recommend however to learn git or any VCS to that matter, it<sq>s quite handy.</p>", 
                "question": "How do I becoming better at API<sq>s?"
            }, 
            "id": "dbdknvf"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.ROBLOX.com/ is a fantastic way to get kids into programming. It<sq>s a watered down game engine (easier than Unity, Unreal, etc.) and uses Lua as a scripting language.<br><br>Lua is great because it abstracts away a lot of the technical details (like float vs int) and allows you to think algorithmically.<br><br>ROBLOX itself provides a robust API for making simple games and allows you to instantly show your friends what you<sq>ve made with servers that they host for free. It<sq>s a great starting point for anyone who wants to program.</p>", 
                "question": "My brother is 10 what fun ways are there to introduce him to coding?"
            }, 
            "id": "d7i9ab3"
        }, 
        {
            "body": {
                "answer": "<p>Scratch is a great way to start for kids<colon> https<colon>//scratch.mit.edu/</p>", 
                "question": "My brother is 10 what fun ways are there to introduce him to coding?"
            }, 
            "id": "d7i45ne"
        }, 
        {
            "body": {
                "answer": "<p>Check out a book called <dq>learning python with minecraft.<dq></p>", 
                "question": "My brother is 10 what fun ways are there to introduce him to coding?"
            }, 
            "id": "d7i4i68"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//codecombat.com/play<br><br>Pretty fun coding game </p>", 
                "question": "My brother is 10 what fun ways are there to introduce him to coding?"
            }, 
            "id": "d7ibi8q"
        }, 
        {
            "body": {
                "answer": "<p>Most likely it is using a scoring heuristic.  Say for example you have things you consider cool, such as kills, capturing objectives, etc and you assign point values to each of them.  Then you keep a rolling window of point scoring events, so at any given time you have say the last 30 seconds of events that score points.<br><br>This allows you to find for each player the window of time when they did the most cool things.  The play of the game would be the best such window among all players.</p>", 
                "question": "How would you program a computer to choose the <dq>Play of the Game<dq> for Blizzard<sq>s Overwatch?"
            }, 
            "id": "d3n19jb"
        }, 
        {
            "body": {
                "answer": "<p>They just select a random 10 seconds from someone who was playing Bastion. </p>", 
                "question": "How would you program a computer to choose the <dq>Play of the Game<dq> for Blizzard<sq>s Overwatch?"
            }, 
            "id": "d3n4q8h"
        }, 
        {
            "body": {
                "answer": "<p>Blizzard posted some info on it for one of their patches.<br><br>> Overall, the Play of the Game feature has been a lot of fun and well-received by the community. However, there are still a lot of improvements we\u2019d like to make so that the gameplay highlighted at the end of each match is more varied and interesting to watch. <br><br>>To that end, we will now be capturing different types of gameplay during a match\u2014based on four new categories\u2014and then comparing those moments against each other to find the best Play of the Game for that round of play. The new Play of the Game categories available in this patch are as follows<colon><br><br>>* **High Score**<colon> This category is intended to feature large multikills and quick killstreaks. The larger the multikill, the quicker the kill streak, and the closer one is to an objective will all increase a player\u2019s \u201cHigh Score\u201d score. (Note<colon> This is the category under which all existing Plays of the Game would fall.)<br><br><br>>* **Lifesaver**<colon> This category is intended to feature situations where one player is able to save another player (or players) from imminent death. For example<colon> If a Reinhardt has an enemy pinned, and that enemy\u2019s teammate stuns or kills the Reinhardt, the teammate would be awarded a large amount of \u201cLifesaver\u201d score.<br><br><br>>* **Sharpshooter**<colon> This category is intended to feature difficult or skillful kills. For this category, the game will be looking at factors like movement speed, the distance at which the attack occurred, whether or not the attack was a headshot, and if the victim of the attack was in the air at the time, etc. Each of these variables will increase a player\u2019s \u201cSharpshooter\u201d score.<br><br><br>>* **Shutdown**<colon> This category is intended to feature moments in which one player kills another player (or players) right as they were about to do something particularly impactful. An example of this would be if a Widowmaker snipes a L\u00facio in the middle casting Sound Barrier for his team. In this instance, the game will predict how impactful that Sound Barrier would have been and then award the Widowmaker player an appropriate \u201cShutdown\u201d score in return.<br><br><br>>The player who has the highest score in any one of these four categories at the end of the match will receive the Play of the Game. If the winning Play of the Game category is Lifesaver, Sharpshooter, or Shutdown then the category name will be called out during the highlight intro. If the winning category is High Score, however, no callout will be provided. <br><br><br>>With these additions, we\u2019ve also retuned some of the existing Play of the Game ratings to make it more viable for other abilities gain the spotlight\u2014like Mercy\u2019s Resurrect. <br><br><br>>*Developer comments<colon> This is just the start of what we want to achieve with Plays of the Game, but we wanted to get these initial changes into your hands as soon as possible so you can work with us to make the system even better. In the future, we\u2019ll be looking to add new features to the Play of the Game system, too\u2014such as dynamic cameras for playback, as well as more varied categories. So get out there and play and let us know what you think!*<br><br>[source](http<colon>//us.battle.net/forums/en/overwatch/topic/20742805135)</p>", 
                "question": "How would you program a computer to choose the <dq>Play of the Game<dq> for Blizzard<sq>s Overwatch?"
            }, 
            "id": "d3nkphz"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s mostly change in health. If there is a dramatic change in the total health pool of both teams, who is responsible for the biggest part of that > Play of the game. That covers healers and damage dealers and explains the awkward Torbjorn  plays that are him dead/dying while his turrets get a triple kill.</p>", 
                "question": "How would you program a computer to choose the <dq>Play of the Game<dq> for Blizzard<sq>s Overwatch?"
            }, 
            "id": "d3n1v54"
        }, 
        {
            "body": {
                "answer": "<p>I use [F.lux](https<colon>//justgetflux.com/). I<sq>d buy Gunnars but I use glasses so they aren<sq>t an option. F.lux is also free.<br><br>Also setting your constrast to low and putting up proper lighting helps. Also making sure all your IDEs have dark themes. There are add ons for browswers that turn background colors to dark etc.</p>", 
                "question": "How do you handle sitting in front of the computer for long periods of time without hurting your health?"
            }, 
            "id": "ctr4al8"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been sitting in front a computer daily for almost 20 years and I don<sq>t have any eye issues.  Back in the CRT days there would be some dryness but I haven<sq>t used a CRT monitor in more than 10 years.  Maybe she should get her eyes checked as she might need glasses?<br><br>The other health concerns are relevant for me, though.  My hands are always pretty sore from repetitive stress.  Not bad enough to really affect my life but enough that there is pain.  I<sq>ve tried different keyboards and mice and trackpads and seating positions and nothing really helps.  I wish I had an answer for this one.<br><br>But everyone does need to stand up regularly, take a walk, do some stretches, etc.  There is a lot of talk about working while standing up, or some even go to the extreme of having little treadmills to walk on while working.<br><br>But you really just have to incorporate exercise into your life.  You should try to walk (say, to work) as much as possible.  Take the stairs every time there<sq>s a chance.  Do some cardio that you enjoy like jogging, or biking, or rowing.  Maybe pick up an athletic hobby you enjoy and can play once a week (tennis, racquetball, basketball, ultimate, etc).  <br><br>And learn portion control.  Even with added exercise you<sq>re still going to be sedentary most of the day.  Learn to eat as much as you need to not be hungry and not need to feel full after every meal.  Drink lots of water (and very little of anything else) and eat lots of fresh fruits and nuts and vegetables.<br><br>Hope this helps!</p>", 
                "question": "How do you handle sitting in front of the computer for long periods of time without hurting your health?"
            }, 
            "id": "ctral84"
        }, 
        {
            "body": {
                "answer": "<p>As far as her eyes go I would look into a pair of glasses from [Gunnar](http<colon>//www.gunnars.com/) they help me tremendously. As far as her health I would strongly recommend a morning workout routine to help maintain good health and posture by maintaining her muscles. A good ergonomic setup, such as a chair from Hermann Miller or a similar reputable company can also go a long way.</p>", 
                "question": "How do you handle sitting in front of the computer for long periods of time without hurting your health?"
            }, 
            "id": "ctr3mw3"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve made mandatory excersize part of my daily routine.<br><br>* Bike to work (if feasible)<br>* get away from the desk every 2 hours <br>* Don<sq>t eat lunch at the desk, go to the break room or out with co-workers<br>* Eat healthy <br>* Walk a few miles at night<br><br>Been doing good for me so far been at it for several months.<br></p>", 
                "question": "How do you handle sitting in front of the computer for long periods of time without hurting your health?"
            }, 
            "id": "ctr95uq"
        }, 
        {
            "body": {
                "answer": "<p>> It has to read c and c++<br><br>Writing a C++ parser is pretty fiendishly difficult. Heck, writing a C parser is far from trivial.  But all is not lost - your best bet is to look at clang & LLVM which were designed to make their C++ parser accessible to third-party tools. See http<colon>//clang.llvm.org/docs/ExternalClangExamples.html and http<colon>//eli.thegreenplace.net/2011/07/03/parsing-c-in-python-with-clang/ for places to get started.<br><br>Bottom line - this project will be difficult, but it<sq>s not impossible, so long as you don<sq>t attempt to write your own parser.</p>", 
                "question": "[Please help] I<sq>m a software intern and my manager just told me to write a mini-compiler in 11 weeks. What the fuck do I do now?"
            }, 
            "id": "cimhr60"
        }, 
        {
            "body": {
                "answer": "<p>Management, especially to new interns, will often give impossibly hard tasks just to see how you handle it.  Make a best effort to figure out what needs to be done - some great advice from /u/zabzonk, then tell him it seems like to make this work, I need to do A, B & C.  And ask him, is that correct? Is that how I should address this task?  And let him guide you through it.  You learn the most from the hardest projects.  You should make a best effort to do what you<sq>ve been assigned, and just expect to fail in the end, but hopefully learn something about the technology.</p>", 
                "question": "[Please help] I<sq>m a software intern and my manager just told me to write a mini-compiler in 11 weeks. What the fuck do I do now?"
            }, 
            "id": "cimj1y1"
        }, 
        {
            "body": {
                "answer": "<p>Tell him to eat a dick.  That<sq>s not something you dump on a noob .. </p>", 
                "question": "[Please help] I<sq>m a software intern and my manager just told me to write a mini-compiler in 11 weeks. What the fuck do I do now?"
            }, 
            "id": "cimhkic"
        }, 
        {
            "body": {
                "answer": "<p>I want to emphatically push what zabzonk said<colon> parsing C++ is almost comically horrible, but you can probably not do that at all but instead use the LLVM/Clang toolchain.</p>", 
                "question": "[Please help] I<sq>m a software intern and my manager just told me to write a mini-compiler in 11 weeks. What the fuck do I do now?"
            }, 
            "id": "cimhvfq"
        }, 
        {
            "body": {
                "answer": "<p>Also, join us in /r/iosprogramming!</p>", 
                "question": "Stanford<sq>s iOS App Development course has been updated for iOS 7 and is now live on iTunes U (x-post r/Apple)"
            }, 
            "id": "cd1q9fq"
        }, 
        {
            "body": {
                "answer": "<p>I think even with Coursera and Edx this class is the by far the best online experience you can have. Every iteration is excellent. </p>", 
                "question": "Stanford<sq>s iOS App Development course has been updated for iOS 7 and is now live on iTunes U (x-post r/Apple)"
            }, 
            "id": "cd1vnka"
        }, 
        {
            "body": {
                "answer": "<p>I really what to take this course, but i don<sq>t have a lot of prior programming experience, What (online & free ) courses should i take before taking this course?<br></p>", 
                "question": "Stanford<sq>s iOS App Development course has been updated for iOS 7 and is now live on iTunes U (x-post r/Apple)"
            }, 
            "id": "cd24p8d"
        }, 
        {
            "body": {
                "answer": "<p>is there something like this for android?</p>", 
                "question": "Stanford<sq>s iOS App Development course has been updated for iOS 7 and is now live on iTunes U (x-post r/Apple)"
            }, 
            "id": "cd1naq4"
        }, 
        {
            "body": {
                "answer": "<p>1)<br><br>A lot of people seem to set goals without really thinking about the feasibility. Rarely, people create awesome things as a result. The rest of the time, you<sq>ll get bored struggling to achieve what you want and stick on the <dq>dead projects<dq> list. I would suggest going on IRC and discussing your project ideas with knowledgeable people. The #lpmc is a good place for this, or #learnprogramming.<br><br><br><br>3 & 4)<br><br>Programming is hard. It<sq>s complicated, and requires a clear thought process in order to get good results. Things like that only come with experience. Keep at it; you<sq>re allowed to make mistakes. If you get frustrated, take a break and come back to it. Keep coming back to it every day, so that it<sq>s fresh in your head, or even wipe the slate clean and try implementing it again. Some of the best solutions I<sq>ve had have come from waking up in the middle of the night having realized how to fix it or being on the train, commuting to work. What you don<sq>t want to do is to keep putting it off for longer and longer. <br><br><br>7)<br><br>Why find one when several will do? Head to IRC and get help from awesome people. They will be grumpy, they will make you work for your answer, they will argue between each other, but they will get you the best answer for the language you<sq>re working in. If you want to help them out, send them a link to a copy of your code and the error you are getting. Try not to waffle when asking a question.</p>", 
                "question": "I<sq>m a journalist who learnt to code in one year. Here<sq>s how I did it<colon> "
            }, 
            "id": "c87ge9t"
        }, 
        {
            "body": {
                "answer": "<p>You can learn to code in 20 minutes. You<sq>ll still be learning to code in 20 years. So the title doesn<sq>t tells us much. A much better metric is <dq>I went from zero to building [this piece of technology] in one year.<dq></p>", 
                "question": "I<sq>m a journalist who learnt to code in one year. Here<sq>s how I did it<colon> "
            }, 
            "id": "c87jhbj"
        }, 
        {
            "body": {
                "answer": "<p>Out of interest, how do you use your coding skills with journalism?</p>", 
                "question": "I<sq>m a journalist who learnt to code in one year. Here<sq>s how I did it<colon> "
            }, 
            "id": "c87havf"
        }, 
        {
            "body": {
                "answer": "<p>Before I even begin, I will say this<colon>   You made a program or two, which some might consider <dq>learning to code<dq> and others might consider a project that<sq>s easy.   That being said, I don<sq>t think that it<sq>s fair to say that you <dq>learned how<dq> to code, nor did you really get put into a situation where you actually had to code, so let me pick at things<colon><br><br>1. This is always a good idea, however if the goals aren<sq>t yours to set and it<sq>s project milestones, life is a little less shiny at the end of the day.<br><br>2. CA isn<sq>t bad, but it really depends on what you want to learn from it.<br><br>3.  The downside to this is that the <dq>euphoria<dq> isn<sq>t what keeps people going.   The people that are drawn to that euphoria are the ones that get burnt out when they realize that the task they<sq>ve been given borders on technical impossibility (OCR projects at my current position were a pretty decent example of this)<br><br>4.  Yeah, no, don<sq>t do this.    There is no gain from spending time away from your language, many people that do this will never return to programming and will have a negative connotation with it.<br><br>5. Why would this be an ironic statement?    Source control is great and I think it<sq>s wonderful, but at this point the person is still on their way to completing their first project.   I think that source / revision control as part of the software development life cycle is MAJORLY important, but I don<sq>t think it<sq>s something you need to cover before making a few projects, especially if it<sq>s only for your own use.   That said you should definitely practice source control / branching / tagging on your own before doing it as part of a team.<br><br>6. Creativity is a funny word.   I think that most programmers use deductive reasoning to arrive at a concrete answer for a problem, so in many cases, especially with business logic, 2+ 2 = 4, there is no other answer.    There are rarely times for excessive creativity in programming, much less beginner<sq>s programming.<br><br>7. This is the first piece of advice I think I totally agree with, this should be # 1 or 2.   The process of mentoring when it comes to programming is hugely important.<br><br>8. That depends a lot.   I think that a lot of people take on a project in a language that can<sq>t possibly reach their goals.   <dq>I want to write xyz in javascript<dq> and while it<sq>s technically feasible many people don<sq>t want to listen to how technically difficult the production of xyz would be, because ZYX person they met once is a master at Javascript and it<sq>s the best language ever.   Sometimes client side scripting is only good at that.<br><br>9-10. No comment, I<sq>m not a journalist</p>", 
                "question": "I<sq>m a journalist who learnt to code in one year. Here<sq>s how I did it<colon> "
            }, 
            "id": "c87kq4r"
        }, 
        {
            "body": {
                "answer": "<p>I really like Pluralsight for courses like these. Just search for something you want to know more about and watch the courses. A lot of them have homework and projects as well.</p>", 
                "question": "Online courses for <dq>advanced<dq> programmers"
            }, 
            "id": "d55npgf"
        }, 
        {
            "body": {
                "answer": "<p>There is a [list of courses that get posted here every month](https<colon>//www.reddit.com/r/learnprogramming/comments/4rimxf/heres_a_list_of_234_free_online_programmingcs/) that really should be stickied or on the sidebar or something. You should be able to find what you want there.</p>", 
                "question": "Online courses for <dq>advanced<dq> programmers"
            }, 
            "id": "d55o0l7"
        }, 
        {
            "body": {
                "answer": "<p>Berkeley has its Operating Systems and Systems Programming course recorded<colon> https<colon>//www.youtube.com/playlist?list=PL-XXv-cvA_iCrnl0625nXp4GimjT-cv_1.<br><br>I think this is the course website https<colon>//cs162.eecs.berkeley.edu/<br><br>Besides that one, they also have their <dq>machine structures<dq> available as well<colon> https<colon>//www.youtube.com/view_play_list?p=-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_<br><br>I think that is the course website<colon> http<colon>//inst.eecs.berkeley.edu/~cs61c/sp15/<br><br>Berkely has tons of interesting courses online (lectures recorded). You can see a list at http<colon>//webcast.berkeley.edu/series.html#c,d,Computer_Science.<br><br>MIT<sq>s Artificial Intelligence seems very interesting<colon> http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/<br><br>I don<sq>t know about your level of programming, but you can check SICP<colon> http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/ (note that the textbook is freely available online).<br><br>For interesting functional programming, check The Little Schemer - https<colon>//www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/<br><br>Consider also looking at some math courses. I think linear algebra is being used more and more computationally to solve real world problems. Maybe check that out. MIT<sq>s linear algebra course is very famous<colon> http<colon>//ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/</p>", 
                "question": "Online courses for <dq>advanced<dq> programmers"
            }, 
            "id": "d569z61"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//ossu.firebaseapp.com</p>", 
                "question": "Online courses for <dq>advanced<dq> programmers"
            }, 
            "id": "d55qoyf"
        }, 
        {
            "body": {
                "answer": "<p>I liked Code<colon> The Hidden Language of Hardware and Software</p>", 
                "question": "What are some good non-textbook type programming books?"
            }, 
            "id": "d52yfm8"
        }, 
        {
            "body": {
                "answer": "<p>The whole head first series is wonderful. </p>", 
                "question": "What are some good non-textbook type programming books?"
            }, 
            "id": "d52vk0f"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s about programmers rather than programming, but Masters of Doom is a pretty interesting account of the early days of id Software.</p>", 
                "question": "What are some good non-textbook type programming books?"
            }, 
            "id": "d53adnn"
        }, 
        {
            "body": {
                "answer": "<p>I really like The Linux Command Line and Core Java For The Impatient. Also, http<colon>//imgur.com/gallery/R1XDNLo</p>", 
                "question": "What are some good non-textbook type programming books?"
            }, 
            "id": "d52ymnj"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.zachtronics.com/<br><br>TIS-100 is basically programming, but it has a story too, really fun game.<br><br>Infinifactory is probably more in the lines of what you are looking for. I haven<sq>t played it yet though.</p>", 
                "question": "What are some problem solving games that scratch the programming itch?"
            }, 
            "id": "cxqjbkf"
        }, 
        {
            "body": {
                "answer": "<p>SpaceChem. You don<sq>t do any actual lines of code, you build a factory that manipulates individual atoms to build molecules - it<sq>s pretty much a GUI-based programming game. You have a small array of very simple commands you arrange along a line, and put them together to solve complex problems.<br><br>It<sq>s really good, and [you can get a free demo on Steam](http<colon>//store.steampowered.com/app/92800/) to try it out and see if you like it.</p>", 
                "question": "What are some problem solving games that scratch the programming itch?"
            }, 
            "id": "cxqmxqw"
        }, 
        {
            "body": {
                "answer": "<p>The people who did World of Goo and Little Inferno just recently came out with [Human Resource Machine](http<colon>//store.steampowered.com/app/375820/), where you program employees to carry out tasks</p>", 
                "question": "What are some problem solving games that scratch the programming itch?"
            }, 
            "id": "cxqr6xt"
        }, 
        {
            "body": {
                "answer": "<p>Factorio is excellent for this<colon> abstraction, interfaces, performance bottlenecks, bootstrapping etc.... I<sq>ve put so many hours into this game.</p>", 
                "question": "What are some problem solving games that scratch the programming itch?"
            }, 
            "id": "cxqvxrb"
        }, 
        {
            "body": {
                "answer": "<p>TO EVERYONE IN THIS THREAD<colon> This has nothing to do with gawker. They<sq>re just letting people know about a sale on a different site. The bundle is amazing, and so cheap. Right now all you have to pay is $15 for everything. Some of these courses are $200 each. Don<sq>t let the terribleness of gawker stop you from getting this great deal. If you don<sq>t want to give them page views many people have posted this direct link. </p>", 
                "question": "Lifehacker name your own price code bundle"
            }, 
            "id": "ckoi3ia"
        }, 
        {
            "body": {
                "answer": "<p>FOR THOSE OF YOU THAT HATE GAWKER AND DON<sq>T WANT TO GIVE THEM REFERRAL MONEYS<colon><br><br>https<colon>//stacksocial.com/sales/the-name-your-own-price-learn-to-code-bundle<br><br>Use that link to go directly to the deal.</p>", 
                "question": "Lifehacker name your own price code bundle"
            }, 
            "id": "ckop3b7"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d be interested in feedback on these courses.</p>", 
                "question": "Lifehacker name your own price code bundle"
            }, 
            "id": "ckof9jc"
        }, 
        {
            "body": {
                "answer": "<p>Can these courses be downloaded and completed offline?<br><br>Edit - Okay, so I found out you can<sq>t download the videos on PC and it appears that there isn<sq>t a course downloader plugin like there is for coursera courses. <br><br>However, you can download offline videos on mobile devices, then find them in the Android/data/com.udemy.android/files/udemy-final-downloads/ <br><br>There will be a bunch of numbered files with an unnamed video per file. You can transfer them to PC and sort through them renaming them to the correct name. This will give you an offline copy of the course on your computer. </p>", 
                "question": "Lifehacker name your own price code bundle"
            }, 
            "id": "ckojrfn"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Self taught Developers how did you do it?"
            }, 
            "id": "cdnaggh"
        }, 
        {
            "body": {
                "answer": "<p>Self taught here with a few years of work experience<colon><br><br>* How long did it take? <br><br>I never stopped. But I got my first job after a year and a half of poking at it myself. <br><br>* What would you have liked to know while you were still in your infancy of programming that you know now?<br><br>WTF I was doing. That hasn<sq>t really changed but starting without a clear goal is an insanely big waste if time. Also that your choice if language doesn<sq>t matter. Easier is better and everyone is just faking it.<br><br>* Do you feel like your skill is inferior because you are self taught?<br><br>No. Most are self taught. <br><br>* What languages do you know?<br><br>I work with HTML, CSS, JS, C#, Java, C and ObjC.<br><br>* Any advice on where to start and resources to use?<br>* Any general tips?<br><br>CodeCademy if you<sq>re not a self-starter. If you want to get a smooth way into it, go HTML/CSS then JavaScript then Ruby until you can set up a whole front and back without feeling you don<sq>t know what you<sq>re doing. It<sq>ll give you stupidly easy and forgiving languages while still teaching you the core concepts. <br><br>* I<sq>m guessing it wasn<sq>t easy, right?<br><br>The start is the worst. But as soon as you light that passion and code every day, there<sq>s nothing that can stop you. </p>", 
                "question": "Self taught Developers how did you do it?"
            }, 
            "id": "cdnahph"
        }, 
        {
            "body": {
                "answer": "<p>>What would you have liked to know while you were still in your infancy of programming that you know now?<br><br>I would have loved to know how easy it is to get started. Even though I was passionately interested in computers and technology as a kid I never thought that I was <dq>smart enough<dq> to learn programming. I really wish someone had shown me how easy it is to get started and make your first program. After the first program is done the sky opens up and there<sq>s no stopping, but it took me a decade to get over the fear of starting.</p>", 
                "question": "Self taught Developers how did you do it?"
            }, 
            "id": "cdnb118"
        }, 
        {
            "body": {
                "answer": "<p>I wouldn<sq>t go so far as to tell you I<sq>m a developer, but I<sq>m well on my way. Regardless, I<sq>m about to pass my 1 year mark from when I started programming, so here are a few tips.<br><br>1) **Use your resources.**<br><br>Computer Science is a massive, massive field spanning MILLIONS of people all over the world. From this, it is easy to conclude that there are a TON of resources for you to use. Stack Overflow questions, books, Youtube tutorials, subreddits, ANYTHING. Just Google your shit, there aren<sq>t many questions that you will ask that others haven<sq>t (at least at first).<br><br>2) **Don<sq>t just focus on one thing.**<br><br>This is vague, so I<sq>ll elaborate. Let<sq>s say you start programming because you want to make an iPhone app. So you immediately buy a developer<sq>s license and start learning to programming Objective-C to make apps. *No, no.* There are a LOT of stepping stones towards those kinds of goals, and while it doesn<sq>t prevent you from doing it, it definitely makes it harder (which is okay, in my opinion). Try new things. Don<sq>t get so focused on one thing that you<sq>re blotting out the rest of the things offered to you.<br><br>3) **My weirdest tip<colon> Find a place to chat.**<br><br>This is a weird one, and one I discovered about 6 months into learning how to code, but it is my most valuable tool. Find a place to chat with people, meaning some kind of chat room. I don<sq>t know where you<sq>ll find these. There are tons spanning the Stack Exchange sites, and I<sq>m sure you can find others sprinkled around the internet. But finding these is VALUABLE, and getting live help from professionals is a huge benefit. As long as you aren<sq>t whiny and are cooperative, most people will be happy to help. <br><br>Anyways, with the rest of your questions, I<sq>ll put down my stuff below for further context. <colon>)<br><br><br>*How long did it take?*<br><br>I<sq>m still a work-in-progress, but I<sq>ve been coding for about a year. I would still consider myself a beginner.<br><br>---------------------------------------------------------------------------------------------------------<br><br>*What would you have liked to know while you were still in your infancy of programming that you know now?*<br><br>There are going to be a lot of long nights, and it will get frustrating to the point where you are hitting things, but this is simply something you<sq>ll grow out of through knowledge and experience. **It is worth it.**<br><br>---------------------------------------------------------------------------------------------------------<br><br>*Do you feel like your skill is inferior because you are self taught?*<br><br>Nope. If anything, I feel better. I take a programming class at school, and I think I learned more on my own in 1 month than I did in 4 months at school. Self-teaching also will help you in other ways. *Trust me.*<br><br>---------------------------------------------------------------------------------------------------------<br><br>*What languages do you know?*<br><br>Java, C# (still learning), a bit of Python, and Visual Basic (for school).<br><br>---------------------------------------------------------------------------------------------------------<br><br>*Any advice on where to start and resources to use?*<br><br>Buy a book.<br><br>---------------------------------------------------------------------------------------------------------<br><br>*Any general tips?*<br><br>**You are always wrong.** This may seem harsh, but it has a meaning. Computers are dumb, very dumb. But they are obedient, extremely obedient. Meaning that if you do something wrong, it isn<sq>t the computer<sq>s fault that you<sq>re getting a NullPointerException. It<sq>s **yours**. You<sq>ll learn to deal with this over time, but it<sq>s a frustrating realization that must be learned.<br><br>---------------------------------------------------------------------------------------------------------<br><br>*I<sq>m guessing it wasn<sq>t easy, right?*<br><br>Fuck no. Programming, especially at first, evokes emotions in you that only a 13 year old girl would get. You<sq>ll go from hair-tearing-out frustrated to relaxed in a span of 5 minutes sometimes. To answer your question, no. It is not easy, but the rewards greatly outweigh the difficulty. <br><br>Edit<colon> Stuff on Reddit can be hard to read sometimes, added some blocks to separate things. <colon>)</p>", 
                "question": "Self taught Developers how did you do it?"
            }, 
            "id": "cdnbvu0"
        }, 
        {
            "body": {
                "answer": "<p>I am biased towards [A Primer on SQL](https<colon>//leanpub.com/aprimeronsql/read), which is free to read and share. <colon>-)<br><br>/shameless plug<br><br>Its short enough to be completed in a couple of days but doesn<sq>t contain practice problems I<sq>m afraid.</p>", 
                "question": "Great book that teaches SQL"
            }, 
            "id": "d5gt378"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//sqlzoo.net/<br><br>will teach you all of the syntax and usage, it<sq>s interactive. It<sq>s way better formatted than the codecademy one.<br><br>The problem with learning SQL is that the syntax is easy, the hard part is knowing your own data structure so well that you know exactly where to join and subquery against.</p>", 
                "question": "Great book that teaches SQL"
            }, 
            "id": "d5gvagj"
        }, 
        {
            "body": {
                "answer": "<p>Sams *Teach Yourself SQL in 10 Minutes* is a great book for learning SQL. Normally, I hate these <dq>10 Minutes<dq> or <dq>24 Hours<dq> gimmicks, but this book isn<sq>t a gimmick. It<sq>s actually a great reference book. Even better, it<sq>s a small, conveniently sized format. Give it a try.</p>", 
                "question": "Great book that teaches SQL"
            }, 
            "id": "d5gxhvc"
        }, 
        {
            "body": {
                "answer": "<p>Not a book, but I would check out Codeacademy. They have a free online intro course to SQL<colon><br><br>https<colon>//www.codecademy.com/learn/learn-sql</p>", 
                "question": "Great book that teaches SQL"
            }, 
            "id": "d5gsf7p"
        }, 
        {
            "body": {
                "answer": "<p>AI on edX. You<sq>re gonna have an easier time with Python or Lisp. The Berkeley class is a good intro.</p>", 
                "question": "Where i can learn AI programming online ?"
            }, 
            "id": "cxdpyrb"
        }, 
        {
            "body": {
                "answer": "<p>Start with `NLTK` (Natural Language Toolkit) library of Python. It is the closest thing to Jarvis you will find in the present time. It supports things like classifying and grouping words and grammatical tagging.</p>", 
                "question": "Where i can learn AI programming online ?"
            }, 
            "id": "cxds3f1"
        }, 
        {
            "body": {
                "answer": "<p>Obligatory [Russell and Norvig](http<colon>//aima.eecs.berkeley.edu/) plug</p>", 
                "question": "Where i can learn AI programming online ?"
            }, 
            "id": "cxdwtpz"
        }, 
        {
            "body": {
                "answer": "<p>Aisheep.com</p>", 
                "question": "Where i can learn AI programming online ?"
            }, 
            "id": "cxdrm8l"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for doing this OP <colon>).<br><br>Shout out to Odin Project. They have curated a bunch of helpful links to learn web development.<br><br>http<colon>//www.theodinproject.com/courses?ref=home</p>", 
                "question": "[html/css/JS/JQ]Beginner to Intermediate Web Development Track in 90 days"
            }, 
            "id": "cjlsezt"
        }, 
        {
            "body": {
                "answer": "<p>thanks man</p>", 
                "question": "[html/css/JS/JQ]Beginner to Intermediate Web Development Track in 90 days"
            }, 
            "id": "cjln3yi"
        }, 
        {
            "body": {
                "answer": "<p>Great resources, thanks. </p>", 
                "question": "[html/css/JS/JQ]Beginner to Intermediate Web Development Track in 90 days"
            }, 
            "id": "cjlna3e"
        }, 
        {
            "body": {
                "answer": "<p>Hey man, would you say that by doing only 90min a day i could still finish this program within 30 days?</p>", 
                "question": "[html/css/JS/JQ]Beginner to Intermediate Web Development Track in 90 days"
            }, 
            "id": "cjlpfnt"
        }, 
        {
            "body": {
                "answer": "<p>Just to warn OP (again) and anyone reading this<colon><br><br>This is against Southwest<sq>s Terms of Service. This is why CAPTCHA was invented. All you are going to do is get a c&d and force Southwest to implement CAPTCHA when they notice whats happening. <br><br>Don<sq>t do this. It<sq>s bad practices to violate ToS and you should just use tools already invented for this exact thing like Hopper + Google Flights anyway. Southwest is very specific about their flights *not* showing up on services like this for a reason.<br><br>edit* Lol downvoted for urging people not to break companies<sq> ToS with web scrapers. Keep it real /r/learnprogramming<br><br>edit2* I withdraw my bitching. </p>", 
                "question": "Finding the cheapest plane tickets!"
            }, 
            "id": "dc5pziw"
        }, 
        {
            "body": {
                "answer": "<p>Looks cool, but I have a quick question. Won<sq>t the website increase the prices (by using cookies or something) because you keep searching for flights? </p>", 
                "question": "Finding the cheapest plane tickets!"
            }, 
            "id": "dc5iazz"
        }, 
        {
            "body": {
                "answer": "<p>This is a nice project! Thanks for sharing</p>", 
                "question": "Finding the cheapest plane tickets!"
            }, 
            "id": "dc5f3vk"
        }, 
        {
            "body": {
                "answer": "<p>Would it be more beneficial to scrape a site like Trivago that already scrapes tons of other sites?<br><br>Not sure if SWA does deals outside their own site.</p>", 
                "question": "Finding the cheapest plane tickets!"
            }, 
            "id": "dc5s2ph"
        }, 
        {
            "body": {
                "answer": "<p>Why don<sq>t you do a video series instead so everyone on this sub can see it rather than a 1-1 skype call ?</p>", 
                "question": "I will teach you Arduino"
            }, 
            "id": "cxgjpvz"
        }, 
        {
            "body": {
                "answer": "<p>would you be able to offer some thoughts on generally how arduino works, and how to make the transition from someone who casually codes in very simple language online to a physical interaction with...things?</p>", 
                "question": "I will teach you Arduino"
            }, 
            "id": "cxga1to"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s awesome that you<sq>d be willing to do that. I<sq>ve just finished with a very beginner project (Uno and an 8x8 adafruit led panel), and I<sq>d love to get some ideas from you of some cool stuff to do now. Something that requires more than just an arduino uno. What are your thoughts?</p>", 
                "question": "I will teach you Arduino"
            }, 
            "id": "cxg93bh"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been working on a weird project trying to get 4 thermal printers to print simultaneously while they have a continuous piece of paper fed through them. Like a printapede. It<sq>s working and I<sq>ve built the physical part to hold the printers, but I<sq>m having trouble getting it to print smoothly. I would also like to use the thermal printer<sq>s print up-side-down function but it<sq>s not working and I think it my be an issue with the driver library or possibly a change in firmware since the library was written (https<colon>//github.com/adafruit/Adafruit-Thermal-Printer-Library). If you<sq>d be interested in helping I can put what I have so far up on github and explain the issues in a little more detail. I have a good amount of programming experience but this is my first project in arduino.</p>", 
                "question": "I will teach you Arduino"
            }, 
            "id": "cxgclnm"
        }, 
        {
            "body": {
                "answer": "<p>The very first and most important thing you should try and learn is the ability to _problem-solving_ and _write programs_. This means you should...<br><br>1. Understand the the syntax (the basic rules) for writing code in the language of your choice -- things like remembering where to put semicolons, where to put curly braces, what an if statement should look like...<br>2. Understand how to use basic control flow constructs (loops, branches) and basic organizational constructs (functions/methods).<br>3. Understand how to _decompose_ and break down a problem into smaller, simpler sub-problems.<br>4. Be proficient in Googling. A large portion of programming ends up boiling down into figuring out what the right question to ask is.<br>5. Be able to systematically debug. Start with a broken program, and be able to narrow down and figure out what exactly the problem is, and have the persistence/stubbornness to not give up + not accept confusion.<br><br>As you can see, being able to program is less of a knowledge thing, and more of a mindset thing. Once you start picking up the knack of how to problem-solve, it<sq>ll become much easier to learn programming + move forward from there.<br><br>After you understand how to problem-solve, there are several things you can do to move forward.<br><br>You can perhaps try **diving deeper in the language of your choice**, and learn more about the different features and capabilities they offer. It sounds like you<sq>re already doing this, so you<sq>re off to a good start.<br><br>You can perhaps start learning about **computer science**, and study data structures and algorithms. Having a firm understanding of data structures and algorithms will end up empowering you -- they<sq>ll equip you with more and more tools you can use + will expand the breadth of what sorts of programs you can work on and what you can express using code.<br><br>You can perhaps start learning **software engineering**, and learn about things like design patterns, architecture, and design (and learn how to write clean code in general). Learning about these sorts of things will teach you how to handle _complexity_ -- how to handle very large programs and codebases without having it collapse under its own weight.<br><br>You can perhaps start learning about the **tools professional developers use** -- things like version control, which will teach you how to collaborate with others, or the command line (sometimes, it<sq>s easier to just use a pre-written tool rather then re-inventing the wheel), or explore different editors or IDES (like Eclipse, IntelliJ, Vim, Emacs).<br><br>You can perhaps try learning a **new programming language**. Each programming language has their own unique philosophy or <dq>way<dq> of doing things, and each language you learn will teach you a new spin on how to problem solve. This is especially true if you try and learn a language that is part of a _paradigm_ that you are unfamiliar with. Java, for example, falls within the procedural and object-oriented paradigms, but you might find it interesting to try learning Lisp or Haskell, which falls under the functional paradigm. Each new paradigm represents a radically different <dq>approach<dq> to programming, and the more paradigms you know, the more problem-solving tactics you<sq>ll be aware of.<br><br>You can perhaps try learning about a specific **domain** -- something like game development, web development, mobile, embedded/robotics... After all, you write programs to _do_ things, and understanding a specific domain will help you understand how to go about writing actually useful programs within that domain. (It might also be useful to pick up the basics of multiple domains, to avoid being locked into one).<br><br>You can also try learning **math**. Many aspects of programming require little to no mathematics, but there are some that do -- things like cryptography, machine learning/AI, 3d games, and graphics. If you<sq>re interested in any of those fields, having a solid understanding of discrete mathematics and linear algebra will make it much easier to understand the underlying concepts.<br><br>And finally, you can try **joining and contributing to the tech community**. Start by reading posts on news aggregators like /r/programming or Hacker News. Answer questions here or on StackOverflow. Contribute to open-source projects (or perhaps start your own). You can learn a surprising amount of just random things this way, and get valuable exposure to what the tech community is up to.<br><br>---<br><br>This is a big list, and will take you a while (years?) to work through, but you should be pretty well-rounded by the end of it. I<sq>d also caution you against rushing through the list -- pick a pace that works well for you. <br><br>The other piece of advice I have is that you should never be content with just _reading_ about any of these things. Take a project-based approach, and write programs that use the concepts you<sq>ve learned so that you can prove to yourself that you<sq>ve really understood what was taught to you. (This also has the side benefit of helping build up your portfolio, which will be very valuable when you start looking for jobs).</p>", 
                "question": "What are the big things I should be learning as a novice programmer?"
            }, 
            "id": "ctx53nf"
        }, 
        {
            "body": {
                "answer": "<p>First and foremost you need to learn how to do programming. Loops, iterators, recursion, arrays, all that basic stuff. This is typically taught in the first year or two. Once you know how to write a program (i.e. the fundamentals), the most important computer science class by far is algorithms/data structures. Learn everything from it. Operating systems is a close second because it gives you an appreciation of how things work at a low level which will help you debug once you get into the real world. Discrete structures and linear algebra (especially set theory) are a close third.<br><br>In terms of practical knowledge, Code Complete and The Pragmatic Programmer are must reads for anyone working in the field. A book about software design patterns is another one. I like Head First Design Patterns. A novice mistake is to try to use all these design patterns everywhere all the time, so just be careful about that. Knowing when/where/how to use them comes with experience, but it will get you thinking about how your theoretical knowledge can be applied in the real world.<br><br>There is also an extensive list here<colon> http<colon>//stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read</p>", 
                "question": "What are the big things I should be learning as a novice programmer?"
            }, 
            "id": "ctx1xoj"
        }, 
        {
            "body": {
                "answer": "<p>Debugging, even if your code already works.</p>", 
                "question": "What are the big things I should be learning as a novice programmer?"
            }, 
            "id": "ctxi2ff"
        }, 
        {
            "body": {
                "answer": "<p>people posted some excellent comments here. Also, MIT and Stanford universities have their computer science classes on youtube, yes! .. the entire classes. You watched those videos too, they will help you a lot. Happy learning!!!</p>", 
                "question": "What are the big things I should be learning as a novice programmer?"
            }, 
            "id": "ctx9oku"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know how far along you are in your programming studies, but one of the best things I ever did in my Algorithms and Data Structures class was draw out examples of sorts step-by-step.  It really helped me understand how everything worked.  This can really be applied to any algorithm.  I<sq>ve used it for binary trees and weighted graphs as well.<br><br>[Here is a link with some common sorts] (http<colon>//www.sorting-algorithms.com/)</p>", 
                "question": "I want to learn programming while at work but I only have a cell phone with me. Can anybody recommend something to use so I can continue to learn while away from my PC?"
            }, 
            "id": "cix3hjh"
        }, 
        {
            "body": {
                "answer": "<p>there are these things called books....<br><br><colon>)</p>", 
                "question": "I want to learn programming while at work but I only have a cell phone with me. Can anybody recommend something to use so I can continue to learn while away from my PC?"
            }, 
            "id": "cix8iz9"
        }, 
        {
            "body": {
                "answer": "<p>Take a look at pythonanywhere.com where you can use a python shell (hosted in the cloud) from your phone. Free, but sign up required. <br><br>Bonus<colon> since it<sq>s hosted in the cloud, you can continue on your computer or any other internet connected device.</p>", 
                "question": "I want to learn programming while at work but I only have a cell phone with me. Can anybody recommend something to use so I can continue to learn while away from my PC?"
            }, 
            "id": "cix47o6"
        }, 
        {
            "body": {
                "answer": "<p>I use my phone for nearly 3 hours a day(commute) to get up-to date on the latest in the world of CS and programming.<br>Here are my most common type of videos<colon><br><br>1. Talks from the latest conferences from around the world(Google IO, PyCon etc)<br>2. Khan academy style videos to keep revising the basics every now and then(I am still a  student)<br>3. I bulk-download university course videos(MIT OCW types), and watch a couple of 1/1.5 hour lectures everyday.<br><br>As you can see, I try to avoid doing reading/programming videos/pdfs as it hurts my eye. Also its hard to concentrate during commute. In all of the above, even if there is programming aspects, *usually* they will explain it line-by-line, so its easy to follow. If you have a more peaceful atmosphere, you could look at programming videos/pdfs too, though they are more useful when  you have access to a PC.</p>", 
                "question": "I want to learn programming while at work but I only have a cell phone with me. Can anybody recommend something to use so I can continue to learn while away from my PC?"
            }, 
            "id": "cix9gy5"
        }, 
        {
            "body": {
                "answer": "<p>You should post a syllabus so that I know what I<sq>m getting myself into before I start. I already know some of this stuff, I<sq>d love to learn more, but I don<sq>t want to waste my time if there won<sq>t be anything new.</p>", 
                "question": "[For Newbies] I just launched a free 6-week web development boot camp"
            }, 
            "id": "chsxuxj"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this! I<sq>ve been looking for something to help get me started.</p>", 
                "question": "[For Newbies] I just launched a free 6-week web development boot camp"
            }, 
            "id": "chs8hq0"
        }, 
        {
            "body": {
                "answer": "<p>Count me inn..</p>", 
                "question": "[For Newbies] I just launched a free 6-week web development boot camp"
            }, 
            "id": "chs9osq"
        }, 
        {
            "body": {
                "answer": "<p>im workin on it right now, very intense stuff at the beginning haha, but its pushing me to learn html/css more intensely via codeacademy to keep up. A++</p>", 
                "question": "[For Newbies] I just launched a free 6-week web development boot camp"
            }, 
            "id": "chsarrb"
        }, 
        {
            "body": {
                "answer": "<p>I love sed.  It<sq>s still my go-to for quick file formatting, but it does have a little bit of a learning curve.  I<sq>m a fan of just diving in, so you might google <dq>sed examples.<dq>  One of the results is this<colon> http<colon>//www.computerhope.com/unix/used.htm (you<sq>ll need to click the <dq>examples<dq> link at the top).<br><br>I use sed mostly to replace terms.  The basic structure is this<colon><br><br>    sed <sq>s/string/replacement string/<sq><br><br>So if I have a text file that has, for example, double spaces that I want to replace with single space, I would do<colon><br><br>    cat file.txt | sed <sq>s/  / /<sq><br><br>That dumps the file <dq>file.txt<dq> into a <dq>pipe<dq> that then goes into sed.  This example will only replace the first instance of double spaces per line, so I will add the <dq>global<dq> feature thusly<colon><br><br>    cat file.txt | sed <sq>s/  / /g<sq><br><br>That will replace all double spaces with single spaces.  Of course it just dumps the output to my screen, so I would re-direct the output to another file (assuming I don<sq>t want to change the first)<colon><br><br>    cat file.txt | sed <sq>s/  / /g<sq> > file2.txt<br><br>Anyway, that<sq>s the most basic usage.  It<sq>s a powerful tool, as is awk.  Try googling also <dq>sed one-liners<dq> to get a sense of what can be done.  Good luck and have fun.</p>", 
                "question": "Nothing prepares the college student for how powerful awk and sed are in the real world. How can I learn these tools?"
            }, 
            "id": "ckysmo6"
        }, 
        {
            "body": {
                "answer": "<p>Try this [O<sq>Reilly sed & awk book](http<colon>//shop.oreilly.com/product/9781565922259.do), it<sq>s a gentle introduction with many examples and even though it<sq>s from 1997, it<sq>s still pretty relevant.</p>", 
                "question": "Nothing prepares the college student for how powerful awk and sed are in the real world. How can I learn these tools?"
            }, 
            "id": "ckyrwt2"
        }, 
        {
            "body": {
                "answer": "<p>The free Intro to Linux course at Edx has a small beginners guide to these commands. I can<sq>t vouch for how good they are as I skipped that section for the time being.</p>", 
                "question": "Nothing prepares the college student for how powerful awk and sed are in the real world. How can I learn these tools?"
            }, 
            "id": "ckyqafz"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t aspire to write  <dq>extremely convoluted looking sed statements<dq>. Aspire to write sed and awk statements that are so straightforward and simple that anybody can understand them.</p>", 
                "question": "Nothing prepares the college student for how powerful awk and sed are in the real world. How can I learn these tools?"
            }, 
            "id": "ckz1y6f"
        }, 
        {
            "body": {
                "answer": "<p>Does your company have developers?<br><br>Talk to them, and get to know them and their bosses.  It<sq>s a lot easier to transition internally than it is to get hired on somewhere else to perform a function you<sq>ve never done before.</p>", 
                "question": "I work in IT support. I am learning Python in my free time enjoy it a lot and would like to do this for a living one day. What do I need to know or learn in order to do programming and development as a career?"
            }, 
            "id": "cik8jbw"
        }, 
        {
            "body": {
                "answer": "<p>As a junior developer, I will give you some advice which I wish that I would have gotten earlier.<br><br>Once you think you have a fairly strong understanding of the technical bits of Python, and you have written some functional programs, start reading about Design Patterns, and learn how to implement them in Python. Once you start getting the hang of that, I also recommend learning how to write Unit Tests for your software.<br><br>When I got hired into a software development role, I was pretty confident in my ability to write code in a few different languages, but I quickly realized that I was really bad at actual Software Design. A good understanding of some common Design Patterns, and how to write good Unit Tests will really enforce good design decisions, and you will write much better code, which someone other than yourself will be able to understand.</p>", 
                "question": "I work in IT support. I am learning Python in my free time enjoy it a lot and would like to do this for a living one day. What do I need to know or learn in order to do programming and development as a career?"
            }, 
            "id": "cikat0u"
        }, 
        {
            "body": {
                "answer": "<p>Code every day. There<sq>s a book that you don<sq>t have to read called <sq>The Slight Edge<sq> which is mainly about how success happens. The short of it is that success isn<sq>t a Big Bang that comes out of nowhere - it<sq>s the cumulative effect of just a few minutes. A few minutes every day over a couple years will change your life.<br><br>I was in the same situation as you a couple years ago. Went to school for philosophy, somehow got a job with an insurance company doing software testing. Python piqued my interest and a couple years later I<dq>m now a junior web developer at a different company. Python was what started it all; just a few minutes a day.<br><br>I also can<sq>t stress the importance of networking enough. I hate the word, but the effects are astounding. Being a hard worker and a likable person will ingratiate you with others and people love doing things for people they like. That<sq>s how I got this dev job; I started automating my testing tasks and eventually made my interest in development known. I didn<sq>t even have to interview because my boss knew me, my skills, and my work ethic.</p>", 
                "question": "I work in IT support. I am learning Python in my free time enjoy it a lot and would like to do this for a living one day. What do I need to know or learn in order to do programming and development as a career?"
            }, 
            "id": "cikdvag"
        }, 
        {
            "body": {
                "answer": "<p>20 year veteran developer here.  Web and mobile application development is a GREAT career choice.  You<sq>re going to want to learn many different languages, frameworks, methodologies, and more.  .NET development is where the real money is.  Also, IOS and android development is a close second.  Learn object-oriented development, MVC, etc.  the obvious basics of HTML 5 and CSS 3.  Methodologies like agile development, waterfall, etc.  SQL and MySQL are the two major database systems/servers.  Gosh, I could write for hours on languages, frameworks, etc.  PHP is one of the most commonly used and easiest language to start out with, aside from Python.  In addition to development, you need to understand the server/systems and how it all works together.  If you want the money, go .NET.  It<sq>s ALWAYS in demand.  PHP developers are a dime a dozen.  Read, practice, and work with open source projects.  Get as much experience as you can.      Ah I can go on and on.<br>    <br>There<sq>s just so much to write and discuss, so rather than write 50 detailed paragraphs or a guide/infographic , feel free to ask me any and all questions you or anyone else may have.  I<sq>ll be happy to answer them all!    <br>       <br>NOTE<colon>  I have literally every programming book, training videos, etc that exists.  I<sq>d be happy to share any your interested in, so go make a wish list and I<sq>ll send them over to you, all in digital format of course.  I<sq>m always happy to help a fellow developer, especially those just starting out.  Information is the key to your success!  Good luck!</p>", 
                "question": "I work in IT support. I am learning Python in my free time enjoy it a lot and would like to do this for a living one day. What do I need to know or learn in order to do programming and development as a career?"
            }, 
            "id": "cikmkuf"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//codegolf.stackexchange.com/questions/22144/images-with-all-colors<br><br>This is one of my favorite programming challenges, and is in a similar vein. <br><br>You should give it a shot! I<sq>ve got my old attempt somewhere, lemme see if I can find it.<br><br>https<colon>//gist.github.com/bholzer/314b28eeea0f1037db48f0ac96e03d3c<br><br>EDIT<colon> Here<sq>s some of the images I was able to generate with different strategies and parameters. Some just straight up didn<sq>t work, and the ones that did range in quality. It was all a matter of trial and error. I really like the ones that look naturally colored, almost like abstract paintings<colon> http<colon>//imgur.com/a/8qOY6</p>", 
                "question": "[JAVA] Made a small program that I<sq>m actually kind of proud of!"
            }, 
            "id": "de6vmc8"
        }, 
        {
            "body": {
                "answer": "<p>Very cool. I remember my first useful project.  I was so happy.  Sadly no one at work was interested in improving their processes.  Soooooo i left QA for development. Still hoping that new career sticks</p>", 
                "question": "[JAVA] Made a small program that I<sq>m actually kind of proud of!"
            }, 
            "id": "de6u47b"
        }, 
        {
            "body": {
                "answer": "<p>You should use the other getRGB method, in your getPixels method.<br><br>I wouldn<sq>t pass in width and height since you can get that from the bufferedimage you pass in.<br><br>sortRow should use Arrays.copy instead of copying one element at a time.<br><br>sort also doesn<sq>t need to pass in the width and height separately, I don<sq>t think.<br><br>getNewFileName doesn<sq>t need to use a StringBuilder.<br></p>", 
                "question": "[JAVA] Made a small program that I<sq>m actually kind of proud of!"
            }, 
            "id": "de6slm0"
        }, 
        {
            "body": {
                "answer": "<p>Good and easy to read code. Great comments! I would suggest maybe coming up with your own way of sorting the array rather than using a built in function. Assuming you are using this program to learn, you can learn a lot from writing your own sorting algorithm. For example sorting all the different hues from the top left of the image to the bottom right to show a gradient, or even store the image in one long 1D array, sort that, and use different methods to arrange an output image. One way could be to use the modulo operator and the desired width of the output image. Happy coding!</p>", 
                "question": "[JAVA] Made a small program that I<sq>m actually kind of proud of!"
            }, 
            "id": "de6xyfz"
        }, 
        {
            "body": {
                "answer": "<p>2 reasons....<br><br>1. Stalled development, I forget whether it was 5 or 6, but there was a <dq>new version<dq> coming out that was perpetually not ready and coming out. Just never really came and wasn<sq>t super backwards compatible as far as I remember. This made the perl repositories of <dq>scripts for everything<dq> somewhat useless.<br><br>2. Perl was the ultimate swiss army knife, shortcuts for EVEYRTHING and you could churn out scripts like nobody<sq>s business that worked great, used some online libraries had a bunch or really cool shortcuts to make everything as tiny and fast as possible....<br><br>.....but you<sq>d NEVER be able to figure out what the hell it was doing ever again.... Look back at your last few perl scripts. Are they easy to read? The further you get into perl, the more likely you<sq>re using obscure shortcuts for wierd things that you<sq>ll NEVER be able to debug....<br><br>It<sq>s greatest feature, super-flexibility allowed people to do stupid things, and stupid things they did. I know because I did a ton of them.<br><br></p>", 
                "question": "Why did Perl<sq>s popularity suddenly drop so sharply in the early 2000s?"
            }, 
            "id": "d7nujof"
        }, 
        {
            "body": {
                "answer": "<p>Perl was popular in the late 1980s and throughout the 1990s.  I think the answer was two-fold.  First, there were a bunch more competitors.  Two, as you point out, Perl seemed to be more <dq>write only<dq>.  Easy to write, hard to read.<br><br>https<colon>//www.reddit.com/r/perl/comments/35ax2q/how_did_perl_gain_a_reputation_for_being_a/</p>", 
                "question": "Why did Perl<sq>s popularity suddenly drop so sharply in the early 2000s?"
            }, 
            "id": "d7nuj63"
        }, 
        {
            "body": {
                "answer": "<p>A lot of perl<sq>s popularity was centered around how easy it was to integrate it with Apache and get a dynamic webpage going.  Before then, c/c++ were pretty much the only way to do dynamic web pages in the most are awkward fashion imaginable.<br><br>Then PHP came along and it ate perl<sq>s lunch.  PHP was built for Apache integration and it had slightly nicer language semantics than Perl does.</p>", 
                "question": "Why did Perl<sq>s popularity suddenly drop so sharply in the early 2000s?"
            }, 
            "id": "d7nw1gk"
        }, 
        {
            "body": {
                "answer": "<p>In the 90s I was a huge perl fan. Python killed perl for me. One day in the early 2000s I looked around and my distro and everyone else were all using python. I took a look at it and loved how much easier to read it was. Code is written once but read many times. I<sq>ve had very good success with python for the last 13 years.</p>", 
                "question": "Why did Perl<sq>s popularity suddenly drop so sharply in the early 2000s?"
            }, 
            "id": "d7nx0pr"
        }, 
        {
            "body": {
                "answer": "<p>##Name<br>Joe Fredette (github<colon> jfredett, twitter<colon> jfredett)<br><br>##Experience<br><br>Started programming at 8, grew up with computers, professional web developer for 3 years, using languages like C# and Ruby. Studied Mathematics.<br><br>##Area of Expertise<br><br>### Languages<br><br>Ruby and it<sq>s ecosystem (including Rails, Sinatra, Celluloid, etc). Haskell and it<sq>s ecosystem. Shell script (I<sq>m locally known as a <dq>Bash Wizard<dq> -- I kid you not). <br><br>### OS<sq>s<br><br>Linux (Primarily Arch), OSX<br><br>### Other Technologies<br><br>Neo4j graph database, various NoSQL including Redis, Mongo, etc. Postgres. Heavy use of AWS. Heroku. I<sq>m also a big fan of Rubinius as a ruby implementation (I<sq>ve been working away on a buildpack for heroku to run rubinius apps on).<br><br>## Current projects<br><br>Presently, I split my free time between a number of personal projects, including Percival -- an IRC bot which I hope to run on rubinius on heroku. It presently uses the Cinch gem, which I think could be improved upon. I hope to use the Celluloid actor framework to build a distributed IRC bot infrastructure. If only so I can say that I can. <br><br>I<sq>m also working on Grafton, an erstwhile pure C (though now likely C++, due to some constraints from wanting to use Thrift to define the API) graph database. It<sq>s my first big C(++) project, having only hacked a little in the language before. <br><br>I make heavy use of AWS services at work, as well as other neat technologies. My [employer](http<colon>//vermonster.com) is a big user of open source technologies as well as AWS and Heroku, so I get to play with them regularly.<br></p>", 
                "question": "LearnProgramming on Github. A place for you to find projects to hack on and people to help you learn."
            }, 
            "id": "c4nisq9"
        }, 
        {
            "body": {
                "answer": "<p>The first thing you may want to do is to collect a <dq>Useful links<dq> or <dq>Getting started<dq> page and chuck it into the readme, near the top. Some things like how to get git running on windows and clone the repository are not trivial for people who are just getting started.<br><br>I really like this idea and I<sq>d love to contribute eventually. I don<sq>t really have any expertise that would be very sought after, I think. I know Python down to the C internals, I can write C well enough and I have rudimentary knowledge of C++. I<sq>m experienced with Java, although I don<sq>t think I<sq>d like to contribute to a project using it, as I already use it at work. I know enough Haskell, Erlang, Common Lisp and Scheme to help newbies, but not enough to make complex applications.<br><br>My area of expertise, if any, is artificial intelligence, with a focus on real time strategy games. I feel most at home on a unix command line, regardless of operating system (So long as emacs or vim is available). I feel fairly confident writing networking code.</p>", 
                "question": "LearnProgramming on Github. A place for you to find projects to hack on and people to help you learn."
            }, 
            "id": "c4nkp2q"
        }, 
        {
            "body": {
                "answer": "<p>**Name**<br><br>Zach Barnes<br><br>**Experience**<br><br>programming for about 6 years, currently majoring in Computer Science<br><br>**Areas of Expertise**<br><br>**Languages**<br>(in order of expertise)<br>Java, Android SDK, python, Javascript, HTML, CSS, currently learning UnrealScript<br><br>**OS<sq>s** <br><br>Windows<br><br>**Current projects**<br><br>Tutorials for UnrealScript, designing Android game in Unity, and creating a 2D game engine in Java/Javascript<br></p>", 
                "question": "LearnProgramming on Github. A place for you to find projects to hack on and people to help you learn."
            }, 
            "id": "c4njdvj"
        }, 
        {
            "body": {
                "answer": "<p>Well, you already know me Joe. <colon>P By the way, if we<sq>re all going to be doing this mentor thing, may I mention that we should probably add each other on gchat, skype, or something similar so we may discuss this idea and how we want to start it? I recommend we create some sort of subreddit as well so we may put updates in there so mentors and trainees alike know how the stuff is coming along. (We should still obviously post here, r/coding, and r/programming, of course).<br><br>Also, it<sq>s really nice to see how much this idea has gotten fleshed out from your post and my initial response! I do really think it<sq>s a great idea for noobies to be able to do something. However, I do have a slight difference of opinion on what this should be about. IMO, you are right in that we should form some projects for people to hack on and do things. However, I don<sq>t think this is quite there yet. That only works for intermediate programmers who are already comfortable enough to code their own mini-project (e.g., extend part of a current project) but just don<sq>t know design patterns. Where does that leave people who can<sq>t even do that? Or don<sq>t know certain things like graphics, networking, etc? Thus, I propose we do two things. One, we do what you do, where we provide projects for people to hack on. However, we also write tutorials to supplement the projects, so people, particularly newer programmers, can reconstruct how we made our project and what design challenges may be faced.<br><br>Anyways<colon><br><br>**Name**<br><br>Yash Ahuja (github<colon> yash3ahuja)<br><br>**Experience/Area of Expertise**<br><br>Not as much as I wish I could say, but 1.5 years of java, mostly self taught. Taken some university classes on Perl and Bash. However, I try my best to help around this subreddit even though I<sq>m very inexperienced compared to a lot of people on this subreddit. I can<sq>t even say I<sq>ve worked professionally until after summer -- but hey, I<sq>ll still try my best. ^_^<br><br>As for what I<sq>m experienced in, I<sq>ve worked on some games with friends, but mostly pet projects such as dungeon crawlers. However, I<sq>ll take it upon myself to learn OpenGL over summer.<br><br>**Current Projects**<br><br>Can<sq>t say I<sq>m doing anything right now. I<sq>ve been very busy with school. However, for summer I plan to start learning C, C++ and OpenGL.<br><br>As for past projects<colon><br><br>* Wrote the backend for an MMO with a friend.<br><br>* Created a java-based version of the asian game of Go. (Had to put it on hold)<br><br>* Many other games such as a roguelike, dungeon crawler, etc.</p>", 
                "question": "LearnProgramming on Github. A place for you to find projects to hack on and people to help you learn."
            }, 
            "id": "c4nmiau"
        }, 
        {
            "body": {
                "answer": "<p>You know, I do this for a living and it took me two hours yesterday to solve a simple problem I<sq>ve solved a dozen times before... If a big thing doesn<sq>t make sense to me I just go back to doing smaller things until it does.<br><br>In general, I tell people to start with logic they understand and use that to build other more complicated stuff. I think that<sq>s the only way anyone gets anything--by synthesizing an understanding of something more complex from something less complex.</p>", 
                "question": "Can not think like a programmer. How do I?"
            }, 
            "id": "czrv1wt"
        }, 
        {
            "body": {
                "answer": "<p>So, I learned programming in an early age and it just clicked on me.. and I think the reason is the book I started with has a very good approach. As I gain more and more experience I noticed people struggling to learning programming and the concept behind it and I always wondered why. <br><br>You seem to know the concept of programming but you simply lack practice and example and real-life programming, solving real problems.. <br><br>One of the mistakes of learning programming that I noticed watching people trying to learn programming is attempting to know every single keyword or function there is in a programming language without a purpose. That is what throws people off recently, there are a lot of programming languages and a lot of confusion to why most of the programming language exists in the first place. <br><br>When I learned programming, the book I learned from teaches how to write a Clock. I really enjoyed doing it. I felt that I was building something, he explained things as he go in his example. After finishing that example, I went and wrote my own calculator, then I wrote my first game, I remember it was car racing game. This is, I believe, the way to learn programming. I go to these new tutorials websites and I freak the fuck out, Hello world? seriously? How to perform loops? why would I care how to do loops? you have to explain loops within a context so I understand why would I need it! Experienced programmers benefit from this because we need to know how the syntax is for a new programming language that we are attempting to learn. However, this does not work with new blood.<br><br>So in your case your purpose was to write games, of course you will find it difficult at the beginning because you did not learn programming while solving a problem. You learned bits and pieces of a programming language (Python, C++). Actual problem solving is not about learning a programming language, it is about learning how to tackle a problem, solve it, then write a code for it, This is a skill you that acquire by practicing.. <br><br>Seeing that, it inspired me to start my own lessons on youtube to teach programming (we are about 9 episodes, each episode is an hour long) This is an example approach where you build a pizza ordering system. You don<sq>t have to know anything about programming to start.<br><br>We build the program slowly, inject new functionalities to the pizza ordering program with each epiosde, we introduce new stuff ONLY when we need it. For instance next episode is we introduce databases, how to save our pizza order to the database imagine? the first episode we were explaining what a variable is, and 9 episodes laters we connect to SQL Server. This is I believe how programming is suppose to be learned.<br><br>Moreover, I tried to explain things in a generic manner, so this will set you up to learn any programming languages there is.<br><br><br>This is the series if your or anyone is interested in watching it. I have a day job, so I only have time to record one episode a week so far. I don<sq>t have any ads on my videos. So I<sq>m not trying to promote my channel, I really genuinely want to share my knowledge that is all. <br><br>https<colon>//www.youtube.com/watch?v=3s-bgPg7IWc&list=PLQnljOFTspQX-XZChZg-b06MJ27nAJQS9&index=1<br><br>Hope that helps<br></p>", 
                "question": "Can not think like a programmer. How do I?"
            }, 
            "id": "czrwjti"
        }, 
        {
            "body": {
                "answer": "<p>Start getting in the habit of pseudocoding.  It will help you get started and make you break down the problem into smaller, easier to solve pieces.</p>", 
                "question": "Can not think like a programmer. How do I?"
            }, 
            "id": "czrv766"
        }, 
        {
            "body": {
                "answer": "<p>EAT A PROGRAMMER<sq>S HEART<br><br>*edit*<colon> NOT MINE</p>", 
                "question": "Can not think like a programmer. How do I?"
            }, 
            "id": "czry9hw"
        }, 
        {
            "body": {
                "answer": "<p>Harvard have made their Intro to Computer Science course [publicly available for anyone to watch](https<colon>//www.edx.org/course/introduction-computer-science-harvardx-cs50x). You watch all the lectures, download the assignments, and you can even submit them to be checked and graded. If you do all the work and pass it all, you can get a certificate stating that for US$90 (it<sq>s not a scam, it<sq>s to pay an employee who verifies your work). Yes, it<sq>s a university course, but it<sq>s a relatively short (~100 hours total with a deadline in December) introductory one. I think this is a good option because it covers a lot of foundational basics that are necessary for understanding coding concepts he<sq>ll come across later.<br><br>For a more immediate and interactive, child-friendly option, check out [Codecademy](http<colon>//www.codecademy.com/). This is a site that offers you a 1-page explanation of a concept, then presents you with a simple code window where you have to finish some code that<sq>s incomplete, fix a bug, etc. It starts out very forgiving and casual and slowly builds up to a medium pace. There are courses for lots of programming languages -- I would probably recommend Python or Ruby to start out with, as they<sq>re fairly accessible, well-designed, consistent languages that can easily be used for a wide variety of things. There<sq>s nothing wrong with starting on JavaScript if that<sq>s what he wants to do, but it wouldn<sq>t be my personal choice, because JavaScript has an unusual design, some frustrating quirks, was intended for the browser and isn<sq>t as applicable to general-purpose stuff, etc. There are plenty of books on writing simple videogames in Python, for example, which you don<sq>t really find for JavaScript. There are also lots of <dq>Intro to Programming<dq> courses in the world that use Python as their language but not many for JavaScript.<br><br>Tell your son about [Stack Overflow](http<colon>//stackoverflow.com). Stack Overflow is a Q&A website, where you post some question or other about programming and people submit answers, which get upvoted Reddit-style so (hopefully) the best ones land on top. If he runs into a concept or problem he can<sq>t understand or solve, have him search Stack Overflow for it thoroughly, and if he finds nothing, have him ask a question there. <br><br>You might want to look at [Lynda.com](http<colon>//www.lynda.com/default.aspx) as well. Lynda is a website that offers short (3-20 hour) training courses for thousands of different things, usually technology-related -- and a large percentage of their courses are on programming concepts or languages. What<sq>s nice about Lynda is that the videos aren<sq>t 80 minute university lectures; each course consists of dozens of 5-15 minute videos on a single concept, presented using diagrams and examples. I think it<sq>s a lot more accessible to kids than just about any other resource that isn<sq>t *explicitly* for kids. It<sq>s around $20/month (it<sq>s automatically adjusting prices to my locale so I can<sq>t tell you for sure) but there<sq>s a trial period and you can cancel whenever. Lynda<sq>s intro to programming course does use JavaScript (a rare choice) and they also have courses on stuff most programmers will want to know about, like databases.</p>", 
                "question": "I<sq>m a father with a 13-year old son who is obsessed with learning coding. Need some suggestions if you wouldn<sq>t mind...."
            }, 
            "id": "cpqdi84"
        }, 
        {
            "body": {
                "answer": "<p>Here are some ideas<colon><br><br>[Code Academy](http<colon>//www.codecademy.com/learn) - Completely free site to learn web developer skills<br><br>[Code School](https<colon>//www.codeschool.com/) - More development skills along with Javascript and Ruby training. 29 dollars a month<br><br>[Treehouse](http<colon>//teamtreehouse.com/) - python, ruby, php, android, ios, and java training, along with web development.<br><br>[Unreal Engine](https<colon>//www.unrealengine.com/) - A professional level video game engine that recently went completely free. Fairly complex, but tutorials exist for him to get started.<br><br>[Unity](http<colon>//unity3d.com/) - Another video game engine that recently went completely free. This one is slightly simpler than unreal.<br><br>[Auto Hot Key](http<colon>//www.autohotkey.com/) - A super simple language used to create simple .exe programs to complete tasks on a desktop computer. Very useful to create quick macros or even a more complex program with a gui.<br><br>[GlovePIE](http<colon>//glovepie.org/) - This is what I started out learning programming with. It is a quite simple language that allows you to map any input device imaginable(wiimote, joysticks, mice, keyboards, microphones... etc) to basically any action on a computer, but it also allows for some fairly complex programs using that input. I used it to map the input from a wiimote to play computer games like oblivion, and I learned a TON about the basics of programming logic while doing so.<br><br>[Lego mindstorms](http<colon>//www.lego.com/en-us/mindstorms/?domainredir=mindstorms.lego.com) - This is a language that allows you to program a robot made by lego. The robot can do a lot of things, and this language can teach you about the basics of programming logic, but I found it to be clunky and non-representative of most programming languages.<br><br>[Scratch](https<colon>//scratch.mit.edu/) - An INCREDIBLY simple programming language that is almost exclusively a teaching tool. This is great for learning basic programming logic and syntax, as well as to ignite a passion for programming. It has a pleasing interface, and is EXTREMELY intuitive. You could make a simple video game, or a simple algorithm to accomplish something within the program(make the bug search for the candy, or sort/search the cars).<br><br>**edit**<colon> with some more ideas from /u/candyman94<br><br>Online programming contests like [codeforces](http<colon>//codeforces.com/) or Google [code jam](https<colon>//code.google.com/codejam) are worth mentioning as well because they provide competition and regularly participating in contests will help avoid procrastination. Personally, I recommend codeforces because their problems range from very easy to very difficult and they track your growth over time also contests are fairly regular. Regarding code  jam I would say it<sq>s too difficult for a 13yo.<br><br>**Comments<colon>**<br><br>Khan academy is also a very good place to start. <br><br>I think the most important thing isn<sq>t where he starts, or what language he starts with, but to have a set goal in mind. The more complex and far fetched the better. As long as he has motivation to complete this goal, access to an internet connection and a computer, and support from you, he will find a way to complete it. <br><br>You could help him decide to make a video game, or a website, or an AI that plays chess or does something else. You could also set up a reward if he completes the goal. And I think the most important thing is that you ask him about it a lot, and actually become interested in what he<sq>s doing yourself. If he comes running up to you and says he did something, you have to get really excited  and praise him, it really doesn<sq>t matter what he did. Never try to give him advice unless he asks for it, he does something illegal or morally wrong, or he seems to be procrastinating or not using his time effectively. If it has to do with programming, let him learn organically. IMO it<sq>s the only way to learn something and remember it. <br><br>**TLDR;** Encourage him, bolster his curiosity, help him if he asks (but only if), give him motivation in the form of a goal and/or a reward, and watch him learn by himself.</p>", 
                "question": "I<sq>m a father with a 13-year old son who is obsessed with learning coding. Need some suggestions if you wouldn<sq>t mind...."
            }, 
            "id": "cpqhn90"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a 15 year-old programmer and if I were to go back to when I started, this is what I would make myself do<colon><br><br>1. Learn C++ - It<sq>s a very difficult language, but if you learn it first all other languages will be extremely easy.<br><br>2. Get programmer friends - I always thought I was a programming genius because I knew no one my age who programmed, then I started making friends online and found I wasn<sq>t that awesome. This, surprisingly, made a little depressed because I wasn<sq>t as good as I thought.<br><br>3. Do as much programming as possible - When I started I only read books and tutorials and never wrote code. I eventually started writing code and now realize writing code every day is more helpful than reading and memorizing every single bit of information out there. Just program and when you hit something you don<sq>t understand look it up.<br><br>That<sq>s all I can think of right now. I would love to help your son out more if he wants. My Skype is assossagpb</p>", 
                "question": "I<sq>m a father with a 13-year old son who is obsessed with learning coding. Need some suggestions if you wouldn<sq>t mind...."
            }, 
            "id": "cpqemgt"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d buy him a Raspberry Pi and/or and Arduino. There<sq>s a lot you can do with the Raspberry Pi in particular that might be right up his alley.</p>", 
                "question": "I<sq>m a father with a 13-year old son who is obsessed with learning coding. Need some suggestions if you wouldn<sq>t mind...."
            }, 
            "id": "cpqef4y"
        }, 
        {
            "body": {
                "answer": "<p>I know you are lying because you mentioned bug free and php in the same breath. </p>", 
                "question": "The PHP track at Codecademy.com is finally fixed and bug free. Get learning!"
            }, 
            "id": "c9ggwi5"
        }, 
        {
            "body": {
                "answer": "<p>Does this track actually include stuff about integrating php with html? It looks like it<sq>s entirely for loops, arrays, objects, etc. and includes nothing about practical use.</p>", 
                "question": "The PHP track at Codecademy.com is finally fixed and bug free. Get learning!"
            }, 
            "id": "c9gglxu"
        }, 
        {
            "body": {
                "answer": "<p>All of my progress with javascript was erased <colon>\\<br><br>I am sad now.</p>", 
                "question": "The PHP track at Codecademy.com is finally fixed and bug free. Get learning!"
            }, 
            "id": "c9glahk"
        }, 
        {
            "body": {
                "answer": "<p>I tried playing with the python track a bit ago and ragequit because of bugs and inconsistancies, hope it gets fixed up also.</p>", 
                "question": "The PHP track at Codecademy.com is finally fixed and bug free. Get learning!"
            }, 
            "id": "c9gifqy"
        }, 
        {
            "body": {
                "answer": "<p>I think I<sq>ve bookmarked that site 4 times this weekend. Take my upvote! <colon>)</p>", 
                "question": "[X-POST from /r/learnjavascript] CSS Reference - A free visual guide to the most popular CSS properties"
            }, 
            "id": "daj4tmi"
        }, 
        {
            "body": {
                "answer": "<p>The author<sq>s HTML/CSS tutorial site is nice too. Quick way to go over crucial HTML/CSS/some SASS <br><br>http<colon>//marksheet.io/<br></p>", 
                "question": "[X-POST from /r/learnjavascript] CSS Reference - A free visual guide to the most popular CSS properties"
            }, 
            "id": "dajuisc"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing! </p>", 
                "question": "[X-POST from /r/learnjavascript] CSS Reference - A free visual guide to the most popular CSS properties"
            }, 
            "id": "dajidkb"
        }, 
        {
            "body": {
                "answer": "<p>This is great! I<sq>ve always found good front-end devs to be the most valuable asset to me as a primarily back-end person. I know enough to make a basic website but what some of these devs can do is crazy. Maybe I can catch up with a resource like this (the pictures and resettable animations are a huge boon).</p>", 
                "question": "[X-POST from /r/learnjavascript] CSS Reference - A free visual guide to the most popular CSS properties"
            }, 
            "id": "dak0vq7"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m sorry for your loss.<br><br>I would look at not pure binary, but binary-coded decimal.  That<sq>s what most  <dq>binary<dq> clocks use - it<sq>s decimal digits, but each digit is represented in binary.  So it could look something like this<colon><br><br>     0 8 / 1 5 / 1 9 9 1  -  1 2 / 0 1 / 2 0 1 5   <br>     \u25cb \u25cf   \u25cb \u25cb   \u25cb \u25cf \u25cf \u25cb     \u25cb \u25cb   \u25cb \u25cb   \u25cb \u25cb \u25cb \u25cb<br>     \u25cb \u25cb   \u25cb \u25cf   \u25cb \u25cb \u25cb \u25cb     \u25cb \u25cb   \u25cb \u25cb   \u25cb \u25cb \u25cb \u25cf<br>     \u25cb \u25cb   \u25cb \u25cb   \u25cb \u25cb \u25cb \u25cb     \u25cb \u25cf   \u25cb \u25cb   \u25cf \u25cb \u25cb \u25cb<br>     \u25cb \u25cb   \u25cf \u25cf   \u25cf \u25cf \u25cf \u25cf     \u25cf \u25cb   \u25cb \u25cf   \u25cb \u25cb \u25cf \u25cf<br><br>Or with actual 1<sq>s and 0<sq>s instead of the circles<colon> (Note that the circles above should be lined up in columns the same way as the digits below, but the Unicode characters seem to confuse the formatting on mobile, at least in AlienBlue on iOS.)<br><br>     0 8 / 1 5 / 1 9 9 1  -  1 2 / 0 1 / 2 0 1 5<br>     0 1   0 0   0 1 1 0     0 0   0 0   0 0 0 0<br>     0 0   0 1   0 0 0 0     0 0   0 0   0 0 0 1<br>     0 0   0 0   0 0 0 0     0 1   0 0   1 0 0 0<br>     0 0   1 1   1 1 1 1     1 0   0 1   0 0 1 1<br> <br></p>", 
                "question": "Directed here from /r/programming. I am looking for help for a tattoo"
            }, 
            "id": "cz3cnx9"
        }, 
        {
            "body": {
                "answer": "<p>Perhaps a hex representation of [UNIX timestamps?](https<colon>//en.wikipedia.org/wiki/Unix_time) Used very widely in all aspects of programming/computing, and it would be pretty small and look fairly <dq>computery<dq><colon><br><br>`26C8 9080 - 565E 3480`</p>", 
                "question": "Directed here from /r/programming. I am looking for help for a tattoo"
            }, 
            "id": "cz34gqs"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m still a novice, but from an aesthetic standpoint, I wanted to think of something creative, yet simple, so people (non-programmers) can understand it.<br><br>    double birth = 1991.0815;<br>    double passing = 2015.1201;<br>    <br>    while (date > birth){<br>    \tlove(); <br>    }<br><br>This is supposed to be C++, there are syntax errors (love and date are undefined), but the logic is there. I was going towards the idea that anyone can follow the logic in the program. Something with binary is cool, but not many people can actually read it.  Regardless I think this short snippet is touching because even though he<sq>s passed, your love for him will continue for ever (the infinite while loop).<br><br>Edit<colon> aesthetic, not atheistic </p>", 
                "question": "Directed here from /r/programming. I am looking for help for a tattoo"
            }, 
            "id": "cz3exn6"
        }, 
        {
            "body": {
                "answer": "<p>This goes against the tattoo aspect, but perhaps consider having a microchip which contains photos/text/memories of your brother implanted into your hand or someplace (much like a pet<sq>s microchip implant). You<sq>d be able to <dq>keep<dq> that much more information about your brother on you and with you at all times.</p>", 
                "question": "Directed here from /r/programming. I am looking for help for a tattoo"
            }, 
            "id": "cz3gq6h"
        }, 
        {
            "body": {
                "answer": "<p>Anyone with plenty of time in the seat will tell you, everyone<sq>s code sucks, even their own. As soon as you write that elegant function and check it in it becomes old code. A year from now you will look at it and say <dq>who the fuck wrote this!<dq>. Check history, it<sq>s you.</p>", 
                "question": "The Myth of the Genius Programmer -- Don<sq>t be afraid to show your code"
            }, 
            "id": "cbkbexd"
        }, 
        {
            "body": {
                "answer": "<p>This was a great post. <br><br>For me, the most sobering event that made me exchange any ego I had for personal growth was being brought on as an entry level developer. I<sq>m on a small development team of very intelligent, knowledgeable people. It<sq>s been a year now on this team and at this company and I still am learning new things almost every day. Since I work at such a small company I get <dq>thrown into the fire<dq>, so to speak, where I am placed on a project out of my comfort level because we simply don<sq>t have enough people to share work on everything. Incredibly humbling experience. </p>", 
                "question": "The Myth of the Genius Programmer -- Don<sq>t be afraid to show your code"
            }, 
            "id": "cbkev1q"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m still watching it, but the early comments putting coding and code development in a social context, they highlight a real issue<colon> it<sq>s tough to find that person or people to collaborate with, who are willing to help you get rolling and be productive. For example, I want to get started with helping some open source projects, fixing bugs and such, but how do I get started? Who do I talk to, directly, to get oriented in the code, get over any initial issues and maybe avoid some common stumbling blocks? Who can I bounce ideas off of to make sure I<sq>m on the right track? Who can review my code and not say <dq>this doesn<sq>t work. try again<dq>? Those aren<sq>t necessarily rhetorical questions, btw...<br><br>Anyway a good talk so far.</p>", 
                "question": "The Myth of the Genius Programmer -- Don<sq>t be afraid to show your code"
            }, 
            "id": "cbkgn4o"
        }, 
        {
            "body": {
                "answer": "<p>    --Don<sq>t forget to add comments!<br>    Truncate sales.acts_receivable</p>", 
                "question": "The Myth of the Genius Programmer -- Don<sq>t be afraid to show your code"
            }, 
            "id": "cbkce5m"
        }, 
        {
            "body": {
                "answer": "<p>Way to go obfuscate! Welcome to the Open Source community.<br>Feels good to be able to contribute to a group project doesn<sq>t it? <colon>)</p>", 
                "question": "I started teaching myself how to program almost a year and a half ago. Today I made my first successful open source contribution!"
            }, 
            "id": "c8q50io"
        }, 
        {
            "body": {
                "answer": "<p>Nice!<br>I<sq>ve been programming for 3 years and still need to figure out how I<sq>m supposed to fix something in code.</p>", 
                "question": "I started teaching myself how to program almost a year and a half ago. Today I made my first successful open source contribution!"
            }, 
            "id": "c8q7glt"
        }, 
        {
            "body": {
                "answer": "<p>I recommend you learn to use [git rebase](http<colon>//git-scm.com/book/en/Git-Branching-Rebasing)<br><br>It allows you toessentially merge your commits together so that when you open a pull request you don<sq>t pollute master with multiple commits. <br><br>Luckily the developer of glances is nice enough to do it for you, not all devs are. </p>", 
                "question": "I started teaching myself how to program almost a year and a half ago. Today I made my first successful open source contribution!"
            }, 
            "id": "c8q5tww"
        }, 
        {
            "body": {
                "answer": "<p>Great job! Keep up the good work and you<sq>ll go far.</p>", 
                "question": "I started teaching myself how to program almost a year and a half ago. Today I made my first successful open source contribution!"
            }, 
            "id": "c8q4gnx"
        }, 
        {
            "body": {
                "answer": "<p>This a lot better then you give yourself credit for. It looks good espically for just learning for a few months, keep up the good work.</p>", 
                "question": "Today I made my first ever website thingy"
            }, 
            "id": "cbh9jv6"
        }, 
        {
            "body": {
                "answer": "<p>This. This. This. And THIS!<br><br>The best way to solidify your skills is to find ways to put them to use. I<sq>ve done this now probably a few dozen times over my career as a programmer and every time I do it, I gain new skills faster and in more depth than just trying to learn in the abstract.<br><br>Examples<colon><br><br>* I sat down in the summer of 2004 with a book on PHP I got from the library and gave myself the goal of creating an <dq>ecommerce<dq> website for my wife<sq>s photography gigs. **Net result<colon> Those skills got me an awesome internship at a web design company in college.**<br>* In 2006, I got a book on Ruby/Rails and re-did my wife<sq>s website, this time also building an email campaign engine with various business logic and an automated website referral program. **Net result<colon> Those skills allowed me to be on a team at my day job building a new social website. BTW<colon> I got this job because of the internship.**<br>* In 2011 I sit down with MongoDB, Hadoop, and Cassandra definitive guides to learn the ins/outs of NoSQL as I start a new job. **Net result<colon> I<sq>m now in a high-demand industry in a Fortune 500 company working on things that I only dreamed of working on.**<br><br>It all started by my sitting down with that PHP book in 2004 and giving myself a contrived project to put that new knowledge to use ***just like what you are doing here***.</p>", 
                "question": "Today I made my first ever website thingy"
            }, 
            "id": "cbhbj3x"
        }, 
        {
            "body": {
                "answer": "<p>Am I crazy, or did you misspell your own name?  It looks great, by the way.  I just wanted to point that out in case it was a mistake.  </p>", 
                "question": "Today I made my first ever website thingy"
            }, 
            "id": "cbhajmu"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Today I made my first ever website thingy"
            }, 
            "id": "cbhb6n8"
        }, 
        {
            "body": {
                "answer": "<p>I would venture a guess to say that if you spent 90 minutes a night for 6 months you<sq>d already be making games and apps for android if that<sq>s your focus. <br><br>Don<sq>t push yourself too hard, and enjoy the education. Sometimes the beginning stages are frustrating but at the same time it<sq>s where a lot of magic happens as well as large amounts of satisfaction for not a whole lot of effort. <br><br></p>", 
                "question": "Can a <dq>average<dq> person learn enough Java in 2.5 years to create apps and games for android?"
            }, 
            "id": "cdqn5lj"
        }, 
        {
            "body": {
                "answer": "<p>If you honestly spend 90 minutes a night for 2.5 years, yes. The caveat is that if you get bored and tell yourself <sq>ill skip today<sq> or <sq>maybe ill just do 30 minutes tonight<sq>, your chances of success might drop exponentially. </p>", 
                "question": "Can a <dq>average<dq> person learn enough Java in 2.5 years to create apps and games for android?"
            }, 
            "id": "cdql1jv"
        }, 
        {
            "body": {
                "answer": "<p>I learned Java and Android in 20 months and I have a job as and android developer. All self taught. If you understand what is going on then is becomes much easier.</p>", 
                "question": "Can a <dq>average<dq> person learn enough Java in 2.5 years to create apps and games for android?"
            }, 
            "id": "cdqni6u"
        }, 
        {
            "body": {
                "answer": "<p>its more about the motivation, System.out.println(<dq>YOU CAN DO IT ILLEGITIMATEBEAVER<dq>);</p>", 
                "question": "Can a <dq>average<dq> person learn enough Java in 2.5 years to create apps and games for android?"
            }, 
            "id": "cdqotbu"
        }, 
        {
            "body": {
                "answer": "<p>Practice. The more code you read, the easier it<sq>ll get. I<sq>ve gotten far, far better at reading code just by reading people<sq>s questions on /r/learnprogramming and trying to answer them.<br><br>Here<sq>s my process when looking at someone else<sq>s source<colon><br><br>**Goal<colon>** What do I hope to accomplish by reading their source? Am I debugging something? Am I going to suggest ways to refactor it? Am I hoping to [grok](https<colon>//en.wikipedia.org/wiki/Grok#In_computer_programmer_culture) it? You *cannot* just open a program like you would open up, say, a book. Instead, you need to pick a *specific thing* that you want to learn about the code and specifically look for that.<br><br>**Names<colon>** Naming things is probably the most important thing in programming. In any complicated C++ or Java program, objects are passed around constantly. What you need to do is replace `class fooBar` with <dq>FooBar is an object that holds X.<dq> Now, when you see a function that calls a `fooBar` object, you know that you<sq>re really passing X to that function. Why would you do that? Well, look at the name of the function. It should be self-explanatory.<br><br>This is, incidentally, why long variable names and descriptive functions are so goddamn important. Nothing says <dq>Fuck you, person who<sq>s about to spend two hours reading this 40-line function<dq> like `int a, b, c, d, e, f, g // Variables for function`.<br><br>**Main Function<colon>**<br><br>So, with this in mind, go take a look at the `main` function. Every time you see a function call, go find it and see if it<sq>s relevant to your goal. If it is relevant to your goal, parse that function and look up every function there to see if it<sq>s relevant to your goal. Wash, rinse, repeat.</p>", 
                "question": "How do you learn to read source code?"
            }, 
            "id": "d2qh1q0"
        }, 
        {
            "body": {
                "answer": "<p>Slightly offtopic, one of my problems with github is how it has failed to make code easier to understand.<br><br>So many projects there with huge directory trees without the most basic roadmap as to what directory contains what, where the code is, where the tests are, where the <dq>resources<dq> are, <br><br>And nothing there about the design or architecture of a program.<br><br>Understanding code is much more difficult when there are no sign posts.</p>", 
                "question": "How do you learn to read source code?"
            }, 
            "id": "d2qlc57"
        }, 
        {
            "body": {
                "answer": "<p>If the people who wrote the code ever expect anyone else to use it, then they<sq>ve likely added comments explaining what the functions do, and what goes on inside of them. I<sq>d read through those to get a better understand of what is happening at a higher level, and then go line-by-line as they execute what they<sq>re describing.<br><br>Edit<colon> If there are no comments, then chances are anyone who reads it -- regardless of experience -- is likely going to be confused</p>", 
                "question": "How do you learn to read source code?"
            }, 
            "id": "d2qeyo0"
        }, 
        {
            "body": {
                "answer": "<p>One thing that you<sq>ll learn with experience is that a number of larger projects use frameworks, and to understand the code you have to have a basic understanding of the frameworks involved as well. <br><br>I mean this on a few levels. Take a very high level example<colon> the .NET framework. It<sq>s one thing to understand the C# language, but another to know the massive amount of class available to you in the framework. <br><br>Another level<colon> let<sq>s say it<sq>s a website project you<sq>re looking at. Maybe it uses Angular. That<sq>s a JavaScript library that completely changes the way you write code that interacts with your html. You could know JavaScript pretty well and be lost in an Angular project. <br><br>Another<colon> the same website might use Bootstrap as a styling framework. Again, without experience a lot of it won<sq>t make sense. <br><br>That<sq>s just one example of a single stack that you<sq>d have to know numerous frameworks to begin to understand. <br><br>What I<sq>m saying is that it<sq>s natural that you<sq>d be feeling lost reading full-scale programs without the necessary contextual experience to make sense of them. As you continue to practice and expose yourself to complex code, you<sq>ll start seeing the common patterns that help you pick new things easier. There<sq>s no simple answer to <dq>how do you read source code<dq> other than <dq>practice<dq>.</p>", 
                "question": "How do you learn to read source code?"
            }, 
            "id": "d2qk8nh"
        }, 
        {
            "body": {
                "answer": "<p>This should be considered a LifeProTip, but for programmers </p>", 
                "question": "Push yourself to learn your IDE<sq>s shortcuts. Finding one cool shortcut a week and practicing it will really add up."
            }, 
            "id": "cndcw0r"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d learn Vim; even if you never want to use Vim itself many if not most IDEs - and plenty of other systems - have plugins or options for emulating Vim<sq>s shortcuts. (Including VS) QTCreator even has a <sq>fakeVim<sq> mode built in directly. Make you realize how much touching the mouse can break a flow.<br><br>It<sq>s saved me a lot of time between different software. It takes some time to really get into it, but when you do it can be really nice.</p>", 
                "question": "Push yourself to learn your IDE<sq>s shortcuts. Finding one cool shortcut a week and practicing it will really add up."
            }, 
            "id": "cndeo9u"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s one of the reasons I love working with Emacs.  Everything can be done via keyboard and it<sq>s so convenient once you get the most important shortcuts down pat.  And it<sq>s hard to beat Emacs when it comes to its versatility as a text editor.</p>", 
                "question": "Push yourself to learn your IDE<sq>s shortcuts. Finding one cool shortcut a week and practicing it will really add up."
            }, 
            "id": "cndf01n"
        }, 
        {
            "body": {
                "answer": "<p>Learn vim.</p>", 
                "question": "Push yourself to learn your IDE<sq>s shortcuts. Finding one cool shortcut a week and practicing it will really add up."
            }, 
            "id": "cndil4m"
        }, 
        {
            "body": {
                "answer": "<p>Wish they had some other languages besides javascript <colon>/</p>", 
                "question": "Khan Academy Announces New Computer Science Platform"
            }, 
            "id": "c5t3cho"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Khan Academy Announces New Computer Science Platform"
            }, 
            "id": "c5t57st"
        }, 
        {
            "body": {
                "answer": "<p>Beat me to it, was just messing around with it. <br>Here is [a link](http<colon>//www.khanacademy.org/cs) to the actual course. You can make your own programs or watch tutorials.    <br>For those interested there is a Khan Academy subreddit - http<colon>//reddit.com/r/khan, check it out.</p>", 
                "question": "Khan Academy Announces New Computer Science Platform"
            }, 
            "id": "c5t2rur"
        }, 
        {
            "body": {
                "answer": "<p>I feel stupid for asking this. I<sq>ve always assumed Computer Science was about the hardware and other internal mechanics of computers. If it<sq>s just about the programming, then what do you call what I thought it was?</p>", 
                "question": "Khan Academy Announces New Computer Science Platform"
            }, 
            "id": "c5t5do3"
        }, 
        {
            "body": {
                "answer": "<p>[Practical Object Oriented Design in Ruby](http<colon>//www.poodr.com/) - applicable to any object-oriented language and not just ruby. I found it incredibly enlightening.</p>", 
                "question": "What is the best book to learn about Object Oriented Analysis and Design ?"
            }, 
            "id": "d4yq8qy"
        }, 
        {
            "body": {
                "answer": "<p>Growing Object Oriented Software Guided By Tests (GOOS) and Domain Driven Design really helped me.<br><br>They<sq>re both Java heavy, and DDD is really dense with how the business influences software design (I<sq>m tempted to call it a philosophy on software architecture, but that seems a bit strong).</p>", 
                "question": "What is the best book to learn about Object Oriented Analysis and Design ?"
            }, 
            "id": "d4ypozr"
        }, 
        {
            "body": {
                "answer": "<p>[Design Patterns ](https<colon>//www.amazon.ca/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612) by the gang of four. It is the essence of designing software architecture. It describes very common designs that have been tested time and time again, however it is broad and you have to specify your requirements but it is an amazing starting point.<br><br>  (ps it actually is similar to design problems in civil architecture identified by Christopher Alexander. A Pattern Language (1977) & A Timeless Way of Building(1979).)  <br><br>It really opens doors to how you should approach and choose the correct design. It<sq>s not language specific. The book however does have C++ examples</p>", 
                "question": "What is the best book to learn about Object Oriented Analysis and Design ?"
            }, 
            "id": "d4yzw91"
        }, 
        {
            "body": {
                "answer": "<p>[The Object-Oriented Thought Process](https<colon>//www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272) - Matt Weisfeld<br><br>This is considered the golden standard for general OOP design, in my region.</p>", 
                "question": "What is the best book to learn about Object Oriented Analysis and Design ?"
            }, 
            "id": "d4yqy7w"
        }, 
        {
            "body": {
                "answer": "<p>The letter I in API stands for interface, and you need to understand what that means. Compare it to a human interface. <br><br>A car<sq>s interface is the pedals and steering wheel and buttons you can access in the front seat. A microwave<sq>s interface is the buttons you can push on it. And wooden spear<sq>s interface is the big wooden pole portion of it.<br><br>TMy three examples all have very different interfaces to do very different things, but they are interfaces because they allow you as a human to interact with the object or system. An API is very similar, but for programs. An API is simply the interface for a program, as opposed to a human being.<br><br>What that API looks like, what it allows you to do, why it exists, can be very different, but if it<sq>s designed for access through computer code, it<sq>s an API. Got it?<br><br>So, you don<sq>t download an API. It<sq>s not a piece of software. Rather, you have some kind of system or software or device that provides an API. For example, in C++, you have a standard library. The library can be used through various functions and types like `std<colon><colon>string` and `std<colon><colon>vector` and so on. Thus, the C++ library has an API, because you can write code that interacts with the library.<br><br>Google allows you to interact with the Gmail service through an API as well. Because Gmail is an internet service, their API is also based on internet protocols. In their case, it<sq>s over HTTP. You make HTTP requests, and that causes the Google system to take an action and return some information to you.<br><br>Just because a system exists doesn<sq>t mean it has an API. You have written programs before, right? Did you provide an API for them? No. Your hello world program has no API. Just because something exists doesn<sq>t mean it also has an API.</p>", 
                "question": "I don<sq>t understand how most APIs work"
            }, 
            "id": "cysdb7a"
        }, 
        {
            "body": {
                "answer": "<p>One very common type of API is a REST API. With this type of API, your application will make a request to a URL, kind of like how a browser goes to a web address. The server will parse the URL and determine what kind of data was requested. Then the server will typically return the requested data in the JSON format, which kind of looks like a JavaScript object. You can read more about JSON at [JSON.org](http<colon>//www.json.org/).  <br>  <br>Some REST APIs return data in an XML format instead of JSON. It doesn<sq>t really matter. Both are open standards. The important thing is that programming languages can parse both types of responses into objects that the programming languages can understand. By parse, I mean that we can take the JSON or XML strings of data that are returned and break them down into property/value pairs.</p>", 
                "question": "I don<sq>t understand how most APIs work"
            }, 
            "id": "cysdl85"
        }, 
        {
            "body": {
                "answer": "<p>>How are APIs not language specific.<br><br>There are like two entire classes of thing that are called <dq>API<dq> that you seem to be getting confused here.<br><br>One of them works as follows<colon> you access a specific URL on the Internet, and the server on the other end examines the URL, does some logic with it, and sends you back some data that<sq>s formatted in a specific way. You can connect to the Internet with code written in almost any language, and you can interpret the resulting data similarly.<br><br>The other works as follows<colon> somebody writes some code in some specific programming language, and published a bunch of documentation saying what everything is named, what the types of the arguments should be when you call the functions, etc. etc. It<sq>s essentially just a glorified term for <dq>library<dq> - although it might include a few other things, i.e. specifications for classes etc. that *you* need to write that need to be able to do specific things (because the API will use *your* stuff in turn). Anyway, this kind of API is *usually* written in the same language that you<sq>re using, because crossing language barriers isn<sq>t particularly easy. It can be done, but that<sq>s beyond the scope of this reply.<br><br>>I<sq>ve heard of JSON before. How does it work?<br><br>You can literally put `JSON` into Google. It<sq>s a format for data. It<sq>s not an API.<br><br>>Do I have to <sq>download<sq> an API?<br><br>No. You might have to download and install the code, in the second case. But if you<sq>re connecting to a URL, that<sq>s all there is to it. You<sq>re responsible for knowing how to use your programming language to connect to the Internet, and for knowing how to parse a JSON document.<br><br>>How do I get my eclipse/whatever ide to recognize functions and such from the API?<br><br>If it<sq>s a library, then consult its documentation. If it<sq>s a <dq>web API<dq> (for lack of a better term), there are no <dq>functions and such<dq> to recognize. Typically, the specific URLs you<sq>re supposed to connect to (or the general structure of them, with the blanks that you need to fill in to provide information to the server) are called <dq>endpoints<dq>.<br><br>>Are there any really basic apis to work with to get used to it? I tried googles for gmail and I couldn<sq>t even figure out how to download / use it.<br><br>>Lets say I want to access data from a private website. Instead of trying to read the source code for their website, do I contact them and hope they send me an API? Is there danger in doing this? Do they have to <sq>make<sq> an API?<br><br>I have no idea what you<sq>re trying to say here. First off, if it<sq>s really a <dq>private website<dq> then I don<sq>t understand how you<sq>re able to connect to it at all. If by <dq>source code<dq> you mean the HTML that you get when you connect to the site, then that<sq>s unlikely to contain the data you want to <dq>access<dq>; people who know the first thing about security are not in the habit of sending you information they don<sq>t want you to have and hoping you ignore it. If you mean something that only exists on their server, I have no idea how you propose to <dq>try to read<dq> it. APIs do need to be designed, yes. Nobody out there is realistically going to do this because an individual asks nicely; they either have compelling reasons that they haven<sq>t done it already, or it<sq>s just effort that they can<sq>t justify at the moment.<br><br>Look at this from the site owner<sq>s perspective. Keep in mind that publishing an API is essentially advertising to people that you don<sq>t mind non-human users of the site. This can dramatically increase the site<sq>s traffic and cause load issues; you can<sq>t just design how it will work, but you need to set up rate limits etc.<br><br>>how are apis made? What software is used and how are they notated ? How do you give [people?] access to your api without jeopardizing your intellectual property?<br><br>Again, I have no idea what you<sq>re asking really. In particular I have no idea what you think <dq>notation<dq> means in this context. You avoid <dq>jeopardizing your intellectual property<dq> by thinking carefully about what information the API is intended to make accessible. Typically you develop the API using more or less the same <dq>software<dq> (programming language, third-party libraries, ...) that you used to set up the server in the first place.<br><br>>Also if anyone knows how to make programs communicate with any one of blizzards games<br><br>What do you mean by <dq>one of the games<dq> - you want to talk to a server for one of the online games? Or with the client application itself? Or an online (web) leaderboard? Or just what? What do you mean by <dq>communicate with<dq>? Can you give a concrete example of something you want to accomplish?</p>", 
                "question": "I don<sq>t understand how most APIs work"
            }, 
            "id": "cysl5ce"
        }, 
        {
            "body": {
                "answer": "<p>OK for web API<sq>s, most places wont send you the API itself but they may send you a special ID/password to access their API on their servers. this is done to authorize requests to track usage and to limit access if the service is being abused, also there are different levels of access available. <br><br>most sites that i have seen that provide an API (like google, spotify, github), will give you instructions on how to authenticate yourself when you request data... there are a few different ways to do this, but the API might be unrestricted and available to call whenever you want.<br><br>regarding how an API works, in my experience it usually implies that a URL maps directly to a class method or function.. eg. http<colon>//www.somedudeswebsite.com/products/cars/3456 would be internally routed by the server to a method like <sq>public string cars(int carID) { /*business logic here*/}<br><br>what this means is that if you wanted to find out more information about a car for sale (like the example above), you would send a web request to that URL with the correct car ID, and the server will return useful information like the car<sq>s colour, engine size and fuel economy. but more importantly it will generally return the data in a useful format such as JSON or XML, rather than a whole HTML webpage with CSS etc. <br><br>web services are very useful for writing applications that depend on this data as they don<sq>t require you to use a particular language. your application could be in python, objective c, prolog, javascript, C#, C, bash.. it doesn<sq>t matter, as long as the API is accessible via web URLs.<br><br>hope this helps...<br></p>", 
                "question": "I don<sq>t understand how most APIs work"
            }, 
            "id": "cysrjfu"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s some stuff that you may not necessarily get taught at uni<colon><br><br>* Unit testing - honesty this saves so much time in the long run, as much as it seems pointless at first. If you<sq>ve got an SQL schema and you need to make some slight changes, if all your data access stuff is unit tested, then you can make the change, see which tests fail, fix them, and carry on. If you don<sq>t have good test coverage you might do a quick test of the bits you changed with your prototype UI, and everything seems OK. But you **will** miss something eventually, and it will come back to bite you. This is where test driven development comes in too; you can write some tests, and then when they pass you<sq>ll know what you<sq>ve done works. You can also use them as a sort of check-list for how much work you<sq>ve got left to do.<br>* Version control. At the very least this allows more than one person to work on a project without screwing everything up. More advanced use means you can have a stable branch for releases, and have each feature be developed on a different branch. So if you need to push out a hotfix, you don<sq>t have to worry about all your changes, you can just make a new branch off of the stable one, do the fix, and merge it back to the stable one.<br>* Commenting! This gets super important when you<sq>re working with other people, and also when you need to come back to stuff at a later date. If you don<sq>t have comments, you<sq>ll probably just stare at the screen wondering <dq>What does this bit do? What does that bit do?<dq>. Then once you<sq>ve understood what the code is doing, you might think <dq>Why did I do this, that seems like a stupid way of doing things<dq>. And then you might change it, and chastise your past self. If you<sq>ve got good test coverage, you<sq>ll run the tests, and then a few will fail, and you<sq>ll realise *why* you did that thing in a way that seemed stupid. If you don<sq>t have good tests, you might ship the product, and then the customer will come back in a few months when they realise that all their transactions that take place on Tuesdays are out by 10<percent>.<br>* Development time estimation (double what you think, then double it again, then probably add a bit more). Things always take longer than you think they will.</p>", 
                "question": "If you were to make a list of all the various programming concepts that one must be proficient in in order to survive in the real world what would the list contain?"
            }, 
            "id": "cn244e6"
        }, 
        {
            "body": {
                "answer": "<p>A lot of good comments here already regarding programming language things and coding things, but here<sq>s a couple different ones<colon><br><br>* Learning and Research<colon> You<sq>re going to run into new things all the time, be it new code, new libraries, new problems... You need to be good at learning and researching. You would be surprised how many people aren<sq>t very good at finding things on Google (such as documentation for something), or asking good questions that are easy for others to answer on forums, IRC, Stack Overflow or such.<br>* Communication<colon> It<sq>s unlikely you will work alone. You need to be able to talk about things on different levels<colon> Heavy on detail with programmer colleagues, but explain on a more higher and simpler level to less technical folks. In the beginning of your career especially if you work at a bigger corp, chances are you<sq>ll have a team lead type person who deals with the non-tech guys, but still something you oughta learn to do.<br><br>Lastly, I believe teaching/mentoring can also be an important skill for developers. It helps especially on the communication front, as you need to be able to explain things in an easy to understand way. I wrote about it with some more detail here if you<sq>re interested<colon> http<colon>//codeutopia.net/blog/2014/08/18/in-order-to-become-a-better-developer-you-must-first-become-a-teacher/</p>", 
                "question": "If you were to make a list of all the various programming concepts that one must be proficient in in order to survive in the real world what would the list contain?"
            }, 
            "id": "cn25l7t"
        }, 
        {
            "body": {
                "answer": "<p>Just a few I<sq>ve learned over the last few months and taken notes on<colon><br><br>* Do One Thing (DOT)<br>* Keep it Simple, Stupid (KISS)<br>* Don<sq>t Repeat Yourself (DRY)<br>* Open Closed Principle (OCP) - Classes should be able to be extended without modifying its original behavior.<br>* Single Responsibility Principle (SRP) - Every class should have a single, self-contained responsibility. As a result, classes are often small. A large class typically has multiple responsibility. A small class does not imply a lack of references to other classes used internally.<br>* Dependency Inversion Principle (DIP) - High-level modules should not have low-level modules as a dependency. Details should depend on abstractions, not the reverse. Both often reference the same interface.<br>* Liskov Substitution Principle (LSP) - derivative classes must be able to be substituted for their base class.<br>* Command-query, a class or function should either be a command (action) or a query (return data) but never both.<br>* Interface segregation principle, prefer client specific interfaces over general-purpose or catch-all interfaces<br>* Law of Demeter (LOD) - each module should have limited knowledge of other modules and only with those with which it has high cohesion. <dq>Don<sq>t talk to strangers, talk to your friends<dq> Assume as little as possible.<br>* Inversion of Control (IoC) - decouple implementation and execution. Modules should be replaceable. Do not make assumptions, depend on contracts (expect a specific condition on entry, guarantee a certain post-condition, class invariant should be preserved, assumed on entry and guaranteed on exit)<br>* You aren<sq>t gonna need it (YAGNI) do not add functionality until deemed necessary. Don<sq>t write code with the intention to deprecate. Prefer simple, replaceable, approaches that work over complex functionality that is difficult to replace.<br><br>* Simple Constructions, objects should be easy to create. Constructors should only initialize members that have an equal lifetime, all others should be set via methods.<br><br>* Prefer Polymorphism to nested conditional statements<br>* Name interfaces after their functionality<br>* Name classes after interfaces they implement<br><br><br>* Cohesion, elements within the same module should have high cohesion, meaning they logically belong together.<br>* Follow standard conventions, design guidelines, naming guidelines, code quality.<br>* Fail early, errors should be thrown as early as possible, when they are detected<br>* Maintain a high level of consistency, naming, patterns, etc.<br>* Prefer explanatory naming conventions over cryptic ones<br>* Vertical Separation, variables and methods should be defined near where they are used. Local variables should be declared directly before they are used and should have a short lifetime. I.e. don<sq>t declare variables before they are needed<br>* Stay Positive, negated conditionals can be cryptic and hard to read<br>* Refrain from unnecessary nesting, nested code should either handle specific situations or when a task is highly specific.<br>* Encapsulation, encapsulate conditionals and data, refrain from accessing raw class data.<br>* Simple tasks should have simple implementation and use<br>* Ideas should be represented directly<br>* Independent ideas should be independent of one another<br>* Similar ideas should share a common interface and derive from the same base<br>* Prefer local variables over global variables<br>* Abstract, but don<sq>t generalize or gloss over functionality<br><br><br></p>", 
                "question": "If you were to make a list of all the various programming concepts that one must be proficient in in order to survive in the real world what would the list contain?"
            }, 
            "id": "cn2ac2o"
        }, 
        {
            "body": {
                "answer": "<p>I work as a web developer so can<sq>t say whether this applies in non-web, but honestly, one of the most important concepts in my job is Test Driven Development.</p>", 
                "question": "If you were to make a list of all the various programming concepts that one must be proficient in in order to survive in the real world what would the list contain?"
            }, 
            "id": "cn23zya"
        }, 
        {
            "body": {
                "answer": "<p>I haven<sq>t looked at the course yet but I<sq>ve been interested algo trading for a while now. Thanks for doing this. Have a beer on me. /u/changetip</p>", 
                "question": "Hey guys I was an Algo Trader for 2 years. Going to try start-ups now so I made a Udemy course on building Trading Robots to share my past trading experience. (free until Xmas) (Coding Language<colon> MQL4 similar to Java)"
            }, 
            "id": "cmutwqo"
        }, 
        {
            "body": {
                "answer": "<p>Man I love this community, and online education in general. Amazing, thank you so much for this!</p>", 
                "question": "Hey guys I was an Algo Trader for 2 years. Going to try start-ups now so I made a Udemy course on building Trading Robots to share my past trading experience. (free until Xmas) (Coding Language<colon> MQL4 similar to Java)"
            }, 
            "id": "cmur0vo"
        }, 
        {
            "body": {
                "answer": "<p>Where did you work?<br><br>How was the workload (in terms of creating models / programming them / tweaking them) divided?<br><br>Any tips for current graduates?<br><br>Do you think it<sq>s worth getting a PhD? </p>", 
                "question": "Hey guys I was an Algo Trader for 2 years. Going to try start-ups now so I made a Udemy course on building Trading Robots to share my past trading experience. (free until Xmas) (Coding Language<colon> MQL4 similar to Java)"
            }, 
            "id": "cmuso24"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome! Thank you so much for this course!<br><br>Quick question<colon> For those who signed up before Christmas, does the course stay free for them, or does it go behind a paywall for everybody?</p>", 
                "question": "Hey guys I was an Algo Trader for 2 years. Going to try start-ups now so I made a Udemy course on building Trading Robots to share my past trading experience. (free until Xmas) (Coding Language<colon> MQL4 similar to Java)"
            }, 
            "id": "cmvb8ki"
        }, 
        {
            "body": {
                "answer": "<p>I agree with everything.  Deleting your post is a smack in the face to anyone that bothered to spend their free time helping you, doubly so if you spent a lot of time writing a comment only to get the red error message of death when you try to post it.  I try to tag people with RES that do that so that I can remember not to waste my time on them ever again, but I don<sq>t always have a cached page with their name.<br><br>I support taking any and all measures possible to prevent this.</p>", 
                "question": "[Meta] DO NOT DELETE YOUR POSTS plus some discussion"
            }, 
            "id": "ckh28fm"
        }, 
        {
            "body": {
                "answer": "<p>The people who delete their posts are not going to pay attention to this meta post.<br><br>Putting in the posting guidelines will be really helpful, because we know how all posters follow the current guidelines dutifully.<br><br>The real solution is an automated system<colon><br><br>1. Reply to OPs (new to subreddit) with rules.<br>2. Reply to posts indicating OP is known to be a bad actor (i.e. has deleted a previous post).<br><br>And let the community ignore the bad actors. When OPs see upfront that their behavior is going to get them ignored, they will either change or leave.</p>", 
                "question": "[Meta] DO NOT DELETE YOUR POSTS plus some discussion"
            }, 
            "id": "ckh5zgg"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t think the mods are particularly invested in any of this.  If they are they aren<sq>t overly active in posting on reddit in general.  Maybe they just stick to the sidelines, but the abundance of shitty threads that don<sq>t get nuked suggests otherwise.</p>", 
                "question": "[Meta] DO NOT DELETE YOUR POSTS plus some discussion"
            }, 
            "id": "ckh32on"
        }, 
        {
            "body": {
                "answer": "<p>This advice applies to all of Reddit in my opinion, although I do think the motivation for deleting here is a bit different that in a lot of popular subs.  I think here the motivation is that people think their question has been answered and therefore they should delete them.<br><br>In this sub I think the proper course is to edit your post and summarize what you have learned, perhaps with a tip of the hat by mentioning people who were most helpful.  <br><br>Out in the big subs people are deleting posts because they don<sq>t want to get down-voted to oblivion.  It is still a tacky move.  If you realize that you made a mistake in your original post, own up to it.  Edit the post (with an Edit tag) and say that you see your mistake.  Again, it is good to give a mention to the people who educated you or convinced you about why you were wrong.</p>", 
                "question": "[Meta] DO NOT DELETE YOUR POSTS plus some discussion"
            }, 
            "id": "ckh6th2"
        }, 
        {
            "body": {
                "answer": "<p>My best luck comes from restricting my Google search to only pages that have been updated in the past year. </p>", 
                "question": "It seems like the internet is filled with obsolete tutorials for everything (PHP C# C++ whatever). How can I find up-to-date material?"
            }, 
            "id": "cho4j8p"
        }, 
        {
            "body": {
                "answer": "<p>I could be wrong. I will find out in up and down votes. I only started learning Java a couple weeks ago. But don<sq>t get hung up on if you are learning the right version. I did that for months. Wasted time and money. Just find a source - learn it. Learn the fundamentals and learning the syntax is secondary. <br><br>So - don<sq>t sit and wait. Find a source that is with in the last 4 years and roll with it. Anything you do probably for the first 3 months of self study isn<sq>t going to be dramatically different. </p>", 
                "question": "It seems like the internet is filled with obsolete tutorials for everything (PHP C# C++ whatever). How can I find up-to-date material?"
            }, 
            "id": "cho4vp2"
        }, 
        {
            "body": {
                "answer": "<p>1. Google<br>2. Enter <dq>YOUR SEARCH TERMS<dq><br>3. Click search tools near the bottom right of the search bar<br>4. Click anytime on the far left of the options<br>5. Select past year<br><br>I find this helps with most any issues I have when searching for programming materials.</p>", 
                "question": "It seems like the internet is filled with obsolete tutorials for everything (PHP C# C++ whatever). How can I find up-to-date material?"
            }, 
            "id": "cho4zc4"
        }, 
        {
            "body": {
                "answer": "<p>Always check stackoverflow. I<sq>m no longer a programmer, I<sq>ve turned into a Googler and someone who knows how to search on stack</p>", 
                "question": "It seems like the internet is filled with obsolete tutorials for everything (PHP C# C++ whatever). How can I find up-to-date material?"
            }, 
            "id": "cho6aqh"
        }, 
        {
            "body": {
                "answer": "<p>Vim is life. Never trust a person who uses emacs </p>", 
                "question": "Programming in Linux."
            }, 
            "id": "d66ll29"
        }, 
        {
            "body": {
                "answer": "<p>1. JetBrains products (PyCharms, IntelliJ, etc.) are pretty good.<br><br>2. GDB is a command line debugger for C. For python you have pdb from the python standard library. Here<sq>s a GDB tutorial https<colon>//www.cs.cmu.edu/~gilpin/tutorial/ (you can find plenty more online)<br><br>3. Get used to the cli and simple tools. Absorb concepts, not frameworks and tools. Use your time in college to get a strong background in fundamentals. You can learn the fancy frameworks, languages and tools in internships and later on at work.<br>Here<sq>s some tutorials on linux cli<colon> http<colon>//openclassroom.stanford.edu/MainFolder/CoursePage.php?course=PracticalUnix. Again you can find plenty more online.</p>", 
                "question": "Programming in Linux."
            }, 
            "id": "d66magu"
        }, 
        {
            "body": {
                "answer": "<p>May I suggest that if you<sq>re going to be doing Linux programming that perhaps you go all in and learn to use the commands line tools?<br><br>I would think one of these purposes of the course would be for you to experience another type of development environment.  And if you do end up in a Linux shop someday, they will expect you to understand how to use these tools, even if you don<sq>t choose to develop there by preference. <br><br>To do so, you will want to learn how to use the regular gnu and Linux command line stuff like grep, etc, but also learn to code in your favorite text editor* and compile with the commands line<colon> gcc, make, etc<br><br><br><br>*if somebody suggests emacs they<sq>re trying to give you a strange disease. Just say no.  </p>", 
                "question": "Programming in Linux."
            }, 
            "id": "d66mb5s"
        }, 
        {
            "body": {
                "answer": "<p>You don<sq>t *need* an IDE especially with C and Python IMHO. Just stick to a decent editor and learn make for C. <br><br>GDB and LLDB are the two most popular debuggers for C. Just search for a tutorial.<br><br>Trust me learn the command line. The reason so many developers *love* Linux (and OS X) for development is the strong command line support. There are just some things that work better in a command line environment and you find a lot of those things are involved in the development process. Hell it is **so** damn important that Microsoft have even brought the Ubuntu Bash environment to Windows 10 now!<br><br>Some things to get yourself acquainted with - Vim, nano, bash, grep, awk, sed, ssh, gcc, gdb, make, clang, lldb, the linux file system hierarchy.</p>", 
                "question": "Programming in Linux."
            }, 
            "id": "d66mr1b"
        }, 
        {
            "body": {
                "answer": "<p>You just carefully organize sand.</p>", 
                "question": "How to build a CPU?"
            }, 
            "id": "cx47hm4"
        }, 
        {
            "body": {
                "answer": "<p>Start off with much slower, and much bigger circuits like we had in the 50s. </p>", 
                "question": "How to build a CPU?"
            }, 
            "id": "cx47mfn"
        }, 
        {
            "body": {
                "answer": "<p>A book that is semi-related to this topic might interest you<colon><br><br>[Code<colon> The Hidden Language of Computer Hardware and Software]( http<colon>//www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319)<br><br></p>", 
                "question": "How to build a CPU?"
            }, 
            "id": "cx4b5j4"
        }, 
        {
            "body": {
                "answer": "<p>Anyone tried From NAND to Tetris?</p>", 
                "question": "How to build a CPU?"
            }, 
            "id": "cx4aejv"
        }, 
        {
            "body": {
                "answer": "<p>You write pretty code.  It<sq>s consistently formatted, variables are thoughtfully named, methods are sensible, commits history is exceptional and you have a solid grasp of applying algorithms to two dimensional arrays.  Your abstractions could do with some work but I<sq>d be more that happy to work with you professionally.  Uploading the jar and giving wget and run instructions was a nice touch.<br><br>Now, addressing any learners who happen across this.  It is quiet remarkable that /u/theroko has gotten as far as he did with Swing in 4 days but this isn<sq>t representative of four days into programming so the title is a little misleading.   OP has enough experience as a developer to be comfortable swapping between similar OO languages (Python -> Java).<br><br>Please don<sq>t be disheartened by your own progress after looking at this code.  OP<sq>s posted this looking for an ego rub (which I am truly fine giving).  What he failed to mention was the years (see the rest of his repo) in learning that lead up to being able to swap between languages.<br><br>**TLDR;** This is a mid level programmers submission. </p>", 
                "question": "4 first days of java made a Minesweeper game"
            }, 
            "id": "cw7lah6"
        }, 
        {
            "body": {
                "answer": "<p>Very nice to put this on Github.<br><br>I haven<sq>t played your version, so this is just my impression from looking over the code and giving you my ideas (unless other people have already said them). <br><br>Other programmers, feel free to comment on these points, whether they are good or not.<br><br>* It looks like your grid is an array of JButtons. Try and do this just with painting on a JPanel instead. It<sq>s simpler.  (I actually feel quite strongly about this, using a JPanel canvas instead of an array of Swing objects).<br>* I wouldn<sq>t call the main methods <dq>main<dq> except for the public static void main() which is the entry point for the whole project.  It seems a bit confusing to me to have other things called main.<br>* Your get() and set() should be called getSize() and setSize().<br>* Input class must be capitalized. **All class names are capitalized**<br>* You have a capital Input object in line 43 of input.java - name objects in lowercase. <br>* I<sq>m curious as to why you put your instance variables at the very bottom of the class. I see it more like C where you put header files at the top. There are variables and objects that you<sq>ll use throughout your code. If they<sq>re not at the top, then I assume that they are a public variable in another class.<br>* Most of your methods do not need to be public. You can just have no modifier for them (ie. package private).<br>* Smiley.png is capitalized, the other images are not. Consistency is nice.<br>* I would use a constant for BOMB instead of -1.  `final static int BOMB=-1;` then you can say `mineLand[xPoint][yPoint]=BOMB;`<br>* Line 49 of game.java<colon> It looks like you<sq>re using try-catch to handle array out of bounds exceptions. I would not let my students do this. They have to code properly to prevent this from happening. Yes the code is a lot longer and there are more if statements ...<br>* You have more than one class in a file and they are not inner classes. For example class GameEngine is in the same file as class Game.  AFAIK this is generally not good form.<br>* I would make MyMouseListener an inner class. I haven<sq>t got enough of your code in my head to tell if it would work straight away.<br><br>Nice job. Hope this helps. I<sq>ll try and play it tomorrow.<br></p>", 
                "question": "4 first days of java made a Minesweeper game"
            }, 
            "id": "cw82ye4"
        }, 
        {
            "body": {
                "answer": "<p>Your files <dq>game.java<dq> and <dq>input.java<dq> should have the first letter capitalized. The class names should be capitalized as well. </p>", 
                "question": "4 first days of java made a Minesweeper game"
            }, 
            "id": "cw7oysl"
        }, 
        {
            "body": {
                "answer": "<p>Minesweeper.java<colon>14 - I do not like just using an `Object[]` array. It feels hacky.<br><br>game.java<colon>99, 223, 228 - Swallowing an exception is bad.<br><br>game.java<colon>168 - Java 8 has a new DateTime API. I think that may help replace this method all together. You can do things like easy retrieving the instance of the current time, and then directly calculating the duration between two points.<br><br>game.java<colon>168, 247, 271 - Calling `System.exit(0);` like this is generally frowned upon. Avoid it.<br><br>game.java<colon>320 - Swap the string check to avoid any null problems and make it ignore case.<br><br>game.java<colon>373 - Bad practice. Avoid doing this. Look at using an ExecutorService instead.</p>", 
                "question": "4 first days of java made a Minesweeper game"
            }, 
            "id": "cw85qoq"
        }, 
        {
            "body": {
                "answer": "<p>A <dq>language<dq> isn<sq>t programmed, its toolchain is.  You could invent your own language right now, write a compiler for your language in whatever language you want (assembly, C, Python, Haskell), then use your compiler to compile a compiler written in your own language.<br><br>The short answer is that the first compiler for any language isn<sq>t written in that language, an intermediate step is necessary.</p>", 
                "question": "How can a programming language be programmed in its own language?"
            }, 
            "id": "d4urzb0"
        }, 
        {
            "body": {
                "answer": "<p>As others have said, the first version of the compiler is not written in its own language. This procedure is called [Bootstrapping](https<colon>//en.wikipedia.org/wiki/Bootstrapping_\\(compilers\\)). To show how they do it, they usually use so called [Tombstone diagrams](https<colon>//en.wikipedia.org/wiki/Tombstone_diagram). The one on the bottom is the interesting one<colon> In this example the developers wrote their first C compiler in machine code - so they were able to write a compiler in C and translate it to machine code using the machine code compiler. Then they were able to use that compiler to compile additional C code - even better compilers.</p>", 
                "question": "How can a programming language be programmed in its own language?"
            }, 
            "id": "d4uy8cs"
        }, 
        {
            "body": {
                "answer": "<p>The first compiler or interpreter is written in a language other than the one you have. After the first compiler is made, the next compilers can be made in the same language since you have something to compile it already.</p>", 
                "question": "How can a programming language be programmed in its own language?"
            }, 
            "id": "d4usuw9"
        }, 
        {
            "body": {
                "answer": "<p>When you decide to make a language you design it. Let<sq>s call it AL for awesome language. Now that you have designed it, you take a small subset of it, let<sq>s call it SAL. This small subset doesn<sq>t have all the fancy stuff, just the core components. You take your previous favourite language and write a compiler for SAL, let<sq>s call it C0 (this compiler is slow, and hard to maintain, and produce slow code). Then you write a compiler for AL in SAL, and use C0 to compile it, lets call this compiler C1 (this is faster, and easier to maintain, but produce slow code). Then you can write a compiler in your beautiful AL with code optimization and everything, and compile it with C1, producing C2 (this will be fast, easy to maintain, and produce fast code). Then finally you take you AL compiler source code and compile it with C2, and you<sq>re done. You<sq>ve written and compiled a compiler in your new language.<br><br>This process is called bootstrapping.</p>", 
                "question": "How can a programming language be programmed in its own language?"
            }, 
            "id": "d4v2p5v"
        }, 
        {
            "body": {
                "answer": "<p>How many of you are iOS(Objective C/Swift) Developers? Im learning swift now and would be interested in chatting with some experienced (or not) ios devs.</p>", 
                "question": "Learn to program with friends!"
            }, 
            "id": "d0zpfmi"
        }, 
        {
            "body": {
                "answer": "<p>Isn<sq>t it a bit crowded, having 500 members and all that? How do you manage?</p>", 
                "question": "Learn to program with friends!"
            }, 
            "id": "d0zg71d"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Learn to program with friends!"
            }, 
            "id": "d0zo43f"
        }, 
        {
            "body": {
                "answer": "<p>So if I sign up as a beginner can I use this as a source to ask questions about my own programming problems?</p>", 
                "question": "Learn to program with friends!"
            }, 
            "id": "d0zke8s"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re right that the vast majority of programmers won<sq>t need to use calculus in their careers. That is, unless they are doing precise physics simulations or similar, its unlikely they<sq>ll ever need to integrate or differentiate anything. However, the problem-solving skills you learn taking courses in calculus are similar to the problem-solving skills you need as a programmer. <br><br>Calculus is typically where you get exposed to rigorous proofs<colon> you start with something you need to prove and then must proceed, step by step, toward a conclusion. All the while you need to be sure that you<sq>re taking the right steps, aren<sq>t taking unnecessary steps, and that each step follows logically from the preceding ones. Finally, when you<sq>re done you need to be confident that you are actually done.<br><br>This is how computer programs are written, too.<br><br>Calculus is also where you are introduced to higher-order logic. (I am going to greatly simplify things here; I hope the mathematicians don<sq>t jump on me.) For example, in algebra you are mostly concerned with scalar values like integers, reals, and complex numbers. You might have a function like this<colon><br><br>    f(x) = 3x + 5<br><br>To evaluate this function, you plug in a number (say, 12) and out comes another number (41). Algebra is about numbers and the operations you can do on them.<br><br>By contrast, in calculus you start thinking about larger things, not just numbers. You might have a function g(x) where x isn<sq>t a single number but perhaps a *set of numbers* or even *all possible numbers*. The function `g` could be one that transforms a set of values into another set of values.<br><br>The parallel to programming could be a method that accepts a data structure as input and produces another data structure as output. Such a function transforms one data structure into another data structure.<br><br>We can go to even higher orders of thinking. *Higher order programming* is writing programs that write programs. It might never occur to a Java programmer to write a Java program whose output is a Java program. But Perl, Ruby, Scheme, and Lisp (to name but a few) programmers do this frequently. <br><br>It<sq>s a concept introduced in calculus. Taking the derivative of, say, x^2 + 5x is applying a function (derivative) to a function (x^2 + 5x) and producing as output a function! Put another way<colon> derivative is a function that mutates a function into another function.<br><br>If you can master this thought process it can totally transform the way you approach programming (assuming your chosen language supports it, of course). Certainly you could learn about higher-order functions without calculus, but it probably helps if the neural pathways are already in place when you encounter them for the first time.<br><br>TL;DR<colon> There are a lot of similarities between calculus and programming.<br><br>Edit<colon> typos</p>", 
                "question": "Why is calculus important for programming specifically algorithms?"
            }, 
            "id": "d1k41gz"
        }, 
        {
            "body": {
                "answer": "<p>Many programming jobs do not use calculus or even any math beyond basic algebra. However, computer science is more than programming<colon> It is the study of algorithms and computation and is founded in mathematics. Calculus is typically one of the first classes that introduces students to mathematical formalisms while also building directly off of work students perform in high school. Computer science math can be much more abstract and so builds on the skills and expectations developed in calculus and other lower division math courses.</p>", 
                "question": "Why is calculus important for programming specifically algorithms?"
            }, 
            "id": "d1k26ne"
        }, 
        {
            "body": {
                "answer": "<p>To be perfectly honest I don<sq>t think calculus should be required in a large portion of computer programming. Discrete math on the other hand is far more useful.</p>", 
                "question": "Why is calculus important for programming specifically algorithms?"
            }, 
            "id": "d1k6o5b"
        }, 
        {
            "body": {
                "answer": "<p>Of course, it depends what you mean by calculus. Do you mean general calculus? Historically this word was used to mean something very close to <dq>anything that can be computed<dq>, but if you just say <dq>calculus<dq> these days, it implies the calculation of infinitesmals and functions over time... is that what you mean?<br> <br>Why is algebra important for programming? Because computation has massive interest in operations, algebra is the meta-language of operations, and algebra *is* the base of all languages of expression, human- or computer-based. Algebra kind of *is* language. This should probably be *very* easy to see, because all our current programming languages are primarily algebraic and use algebra to great effect.<br><br>Why is geometry important for programming? Because as humans, we are interested in the manifest universe, which has *shape*. When we output our <dq>things<dq>, we want to be able to explain them in visually interesting and human-comprehensible ways. Possibly this point is difficult to see because most of our languages are algebraic first and only geometric later. Most people who are interested in math tend to use pictures a lot, but in their minds, or as the scaffolding for their work, or at best as suffixed appendages to their main work. Generally, geometry and algebra form a kind of symbiotic whole, and are intimately related, though this might not be immediately obvious.<br><br>Why is calculus important for programming? Calculus is important for relationship to time. This is a massively important thing to computing and programming, which *should* be obvious, but we skip over it a lot in our <dq>day to day programming<dq> generally as a whole, so it probably isn<sq>t obvious at all. If you calculate the infinitesmals under a curve, isn<sq>t that equivalent to digitizing it to a certain resolution? Geometrically this is obvious. If I ask you to calculate the precise number of pixels under a circle on the screen at a certain resolution, you<sq>ll need calculus to do this. It<sq>s massively important if you<sq>re going to be doing any kind of game programming or anything and you want to calculate trajectories, or anything else to do with physically related interactions over time.<br><br>However, what about other calculuses such as the Lambda Calculus? As a whole industry, we<sq>re only just starting to really understand how this stuff works and relates to computation and gets used in our day to day programming. Pure functional programming language uses (well, pretty much *is*) the Lambda Calculus to make expressions about functions. When we operate on this level of programming, we can do some pretty amazing things with our code. I encourage you to look into Haskell and other purely functional programming languages if you haven<sq>t already... https<colon>//en.wikipedia.org/wiki/Lambda_calculus<br><br>There<sq>s something foundationally *deep* here - in the turing model of computation, the church-turing hypothesis, and also in the lambda calculus, and the inter-relationship between on the one hand, the ideas in human logic, and on the other hand, the ideas in machine-computable instructions.<br><br>As computers become more parallelized (ie many cores - we start to go sideways rather than up in terms of a graph between # of cores, and speed of processing), different ways of computing than the turing model become more important. (How do we split things into pieces in *time* and *sequence*, and still maintain our correctness, for example?)<br><br>This is more important for expressing our *intent* to the computer so the computer can find an excellent way to do what we want to do. As an extremely simple point in case, suppose you want to add up 1000 different numbers. The simple turing model implies a linear sequencing of operations. The church model implies no such limitation, it simply declares the relationship between the constituent elements and operations, and yet still implies a *method* of computing. A logical model (prolog) implies simply a requirement of an answer, without stipulation of method or constraint at all. Each of these progress towards a more cleanly expressed version of our intent, including its freedoms or constraints.<br><br>So, general calculus is the *beginning* of understanding functons of time. This is very important for computation and mathematical understanding in general, though if you use an OOP or imperative language you might not find yourself concerned with this day to day, because the particlar form of calculus of computation has already been taken out of your hands (<dq>abstracted away<dq> if you like), by the language you use.<br><br>Hopefully this gives you some inspiration to do some digging on your own and go back into the roots of computer programming. It<sq>s a fascinating journey that not enough programmers take. The more we do, though, the better it is for all of us, because it<sq>s only through studying the underpinnings of our subject that we<sq>ll be able to progress it.<br><br>Oh, I almost forgot to plug our <dq>beginning haskell tutorial book<dq> ;-) http<colon>//happylearnhaskelltutorial.com</p>", 
                "question": "Why is calculus important for programming specifically algorithms?"
            }, 
            "id": "d1k4puk"
        }, 
        {
            "body": {
                "answer": "<p>Took me an hour (feels like more) to download and to properly rename all these (because it was so tedious). I put them into a convenient 75 MB 7z<br><br>If you think this is superfluous, try to download these yourself. It<sq>s easy for a few, but quite the chore for others. I even had to manually edit URLs to get the PDFs.<br><br>----<br><br>Thanks to the other guys, these download-URLs are available<colon><br><br>* **[Google Drive, no login required](https<colon>//drive.google.com/file/d/0B3qDuflyhibBV0ozRzJ3U2pqdzA/edit?usp=sharing)** Supposedly never expires. Click button at middle top, ignore can<sq>t-scan-for-viruses warning, enjoy.<br><br>* **[Torrent on The Pirate Bay](http<colon>//thepiratebay.se/torrent/10759046)** Also never expires, if you keep it alive. Don<sq>t forget to keep sharing.<br><br>And thank you guys for all the thanks! Didn<sq>t expect it to be so many.<br><br>Motivation for next time. ;)<br><br>----<br><br>EDIT<colon><br><br>While renaming the files, I realized how nice it would be to be able to do this in a text editor. Would be great to e.g. have as a Notepad++ plugin, since that editor also has column editing - ideal for file names.<br><br>How I imagine it<colon> You open a folder as a document, which will give you a text in which every line is a file(name). You can edit the lines just like a normal text document, except you can<sq>t delete or create lines. When you<sq>re done, you save the document which will perform the renaming.<br><br>That would be awesome. I<sq>d make a suggestion somewhere, but I couldn<sq>t find a link for that for Notepad++, NP++ plugins, or a subreddit that would be appropriate. <colon>/<br><br>----<br><br>EDIT<colon><br><br>**Just made such a tool in JAVA 8. Repository with source and binary download<colon> https<colon>//bitbucket.org/king_of_the_universe/filerenameeditor/ Screenshot album with infos<colon> http<colon>//imgur.com/a/0syhO**<br><br>Hm, I just realize that it makes something else possible that I wanted for the longest time. Guess what it is from the list of the books that are in the archive<colon><br><br>* 01of15 - [ONLY SAMPLE CHAPTERS 1-6] The LION Way - Machine Learning plus Intelligent Optimization<br>* 02of15 - A Course in Machine Learning<br>* 03of15 - A First Encounter with Machine Learning<br>* 04of15 - Bayesian Reasoning and Machine Learning<br>* 05of15 - Introduction to Machine Learning<br>* 06of15 - The Elements of Statistical Learning - Data Mining, Inference, and Prediction<br>* 07of15 - Reinforcement Learning                                                                  <br>* 08of15 - Machine Learning                                                                        <br>* 09of15 - Reinforcement Learning - An Introduction<br>* 10of15 - Gaussian Processes for Machine Learning                                                 <br>* 11of15 - Machine Learning, Neural and Statistical Classification<br>* 12of15 - Introduction To Machine Learning<br>* 13of15 - Inductive Logic Programming - Techniques and Applications                               <br>* 14of15 - Practical Artificial Intelligence Programming in Java<br>* 15of15 - Information Theory, Inference, and Learning Algorithms<br><br><colon>) Copying and pasting a whole folder<sq>s text, incl. optionally trimming away the extensions.</p>", 
                "question": "15 Free eBooks On Machine Learning!"
            }, 
            "id": "cjozl6x"
        }, 
        {
            "body": {
                "answer": "<p>Torrent of the file<colon> http<colon>//thepiratebay.se/torrent/10759046</p>", 
                "question": "15 Free eBooks On Machine Learning!"
            }, 
            "id": "cjp9js6"
        }, 
        {
            "body": {
                "answer": "<p>For those wondering (since it<sq>s not being discussed here), machine learning can be very interesting, but contrary to a common trope in this subreddit, machine learning **does** require a lot of math. In particular, you will *heavily* use statistics and linear algebra.</p>", 
                "question": "15 Free eBooks On Machine Learning!"
            }, 
            "id": "cjpvbh9"
        }, 
        {
            "body": {
                "answer": "<p>Great share, appreciate it.</p>", 
                "question": "15 Free eBooks On Machine Learning!"
            }, 
            "id": "cjp3425"
        }, 
        {
            "body": {
                "answer": "<p>I think you need to stop psyching yourself out. You might fail, I don<sq>t know. Some people do. But just because there is a mathematical symbol you shouldn<sq>t assume that it is a math *problem*. There is, honestly, no math problem that you are being asked to solve. You are being told to compute a value. You are told *how* to compute the value. What you have to do is convert that into code. You don<sq>t need to *understand* it (although that would help).<br><br>> If a and b are known, then the value of c can be determined as c = sqrt( a^2 +  b^2 )<br><br>a^2 is just a\\*a, right? You know how to write a\\*a in code. b^2 is just...? How do you do the sqrt? The assignment *tells* you. Read in the values and compute the value the assignment tells you to compute in the way it tells you to compute it. Don<sq>t see a sqrt() and panic. You aren<sq>t being asked to prove the pythagorean formula or solve for c or anything. You are being told <dq>Do x, y, and z<dq>. Go do them.<br><br>And remember that a program is a bunch of small pieces. The very first part of the program should print out a message. Can you do that? Do that. The next part should read in values for a and b. Actually, it should first read in a value for a. Do that. Then it should read in a value for b. Do *that*. Print out those values to make sure you have them right. Note that at this point you haven<sq>t done *anything* that even *remotely* resembles math. Get these bits working and then compute the value you are being asked to compute in the way you are told to compute it. Then print out the result.</p>", 
                "question": "I<sq>m worried that programming is not going to be for me. I<sq>m struggling with VERY basic stuff. I need some advice."
            }, 
            "id": "d646b6m"
        }, 
        {
            "body": {
                "answer": "<p>Well, why are you getting a CS degree? Do you want to develop software? Software development is hard. Programming is one small part of it. A lot of people overlook that. Even with small programs, the conceptual design and ability to break down problems into solvable subsets is vastly more important than understanding syntax.<br><br>So I<sq>ve found a lot of people starting to learn focus a lot on the mechanics of programming, thinking that <dq>programming<dq> is an end  and not just a tool you use to build things. And when they start solving problems like the ones you linked, they say <dq>hey i know what variables are, what classes and methods are, etc... but I still can<sq>t do this!<dq>. <br><br>That<sq>s like someone saying <dq>I<sq>m very proficient with socket wrenches and a welding torch, so building a car should be easy<dq>. <br><br>Programming is that box of tools. Building a car is applying it by solving problems, breaking down something complex into simpler parts. That<sq>s software development. <br><br>The thing is problem solving is much much harder than programming. 99<percent> of programming is not extremely complex. You get niche guys that do highly intricate things, pull languages to their breaking points, and make things that are ridiculously high level and hard to understand. And if you<sq>re not doing game engines, graphics development, or scientific computing you probably won<sq>t need very high level math skills. But the vast majority of it is working with simple data structures, doing relatively simple tasks.<br><br>The thing is the code of one particular system might be simple, but making a lot of simple systems that work together to be an application is extremely challenging.<br><br>So being comfortable with syntax but struggling to solve problems is normal. You just have to keep developing projects until your brain settles into a mode of thinking where you can look at a large challenge and start to identify and solve smaller parts of it.</p>", 
                "question": "I<sq>m worried that programming is not going to be for me. I<sq>m struggling with VERY basic stuff. I need some advice."
            }, 
            "id": "d646nig"
        }, 
        {
            "body": {
                "answer": "<p>Is it just me or does 12 months seem a little absurd for going from no knowledge to Masters Degree in CS?  Computer Science is a huge subject and I would be a little skeptical of a program bringing you from not knowing anything to ready for a development job that quickly.<br><br>I know that there are bootcamps etc. designed to do this, but those seem to focus on very specific web dev/ language skills.  Learning <dq>Computer Science<dq> is usually not specific job training, but more about learning general problem solving techniques which will enable you to be a better software developer.<br><br>I don<sq>t know about your specific case, but my advice is this<colon> You may want to give yourself some time to answer the question, do you actually like this stuff?  Maybe taking an into to computer science course first would be better than committing to a whole degree from knowing nothing.  Lots of people like the idea of programming, but when it actually comes to spending serious time (we are talking 12 hours a day for years not 4 or 5) it is not all they though it was.  Many people who try it HATE it even though it sounds like the right career path.<br><br>Now, I would definitely not advise you to give up on it.  I cannot begin to describe the amount of joy and satisfaction that it has brought into many people<sq>s lives.  Look before you leap though.  Try to figure out if you actually like it first in a classroom setting where you have a teacher who you can ask for help.  Don<sq>t be discouraged that you can<sq>t figure everything out on your own at first.  Some people can just jump into a textbook and teach themselves everything, but most can<sq>t, certainly not me.  Without taking intro classes with helpful professors to get me started, I would never have been able to figure anything out.<br><br>I hope this helps bring a little perspective to the issue, and I hope you keep working at it.  Happy Coding!</p>", 
                "question": "I<sq>m worried that programming is not going to be for me. I<sq>m struggling with VERY basic stuff. I need some advice."
            }, 
            "id": "d64dua0"
        }, 
        {
            "body": {
                "answer": "<p>To give you some positive news, there isn<sq>t a type of person who <sq>gets<sq> math.  Everything is learned.  And the same for coding.<br><br><br>I.e.  you might have a lot of extra work to do to figure out every little thing, but they are all going to be specific.  It<sq>s not a matter of intelligence but turning <sq>not knowing<sq> into knowing.  And using the web, why not?<br><br><br>The breakthrough comes when you realize BOTH math and coding are just languages, tools, which make it easier (hard to imagine now!) to make <sq>the thing<sq> (your project) work.<br><br><br>That corollary is the act of learning these individual details is moulding YOU into someone who THINKS mathematically, logically.  So while the web is good, you MUST take the pain, the frustration, of truly understanding.  Just copy paste doesn<sq>t help.<br><br><br>And you must know already that the magic of the human brain is that if you try to learn, to work things out, to remember, with repetition you DO improve.  So in addition to the hard work you need to take a project planning view and master the syllabus of what you need to cover.  First to make sure the institution or staff don<sq>t let you down, but also to apply a systematic learning programme that uses modern memory science. Like the Anki app.  In short, make learning efficient.<br><br><br>Ignore all crappy comments that people insult you with in relation to math ignorance.  The point is you just took a different path up to now, that is all! And the point of this course is to get you back on track.<br><br><br>Also if you need material, YouTube Khan academy is good on math.</p>", 
                "question": "I<sq>m worried that programming is not going to be for me. I<sq>m struggling with VERY basic stuff. I need some advice."
            }, 
            "id": "d6479zc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "[Tutorial] Learn how to make a game in C++!"
            }, 
            "id": "d1fbtse"
        }, 
        {
            "body": {
                "answer": "<p>Do game developers tend to create game<sq>s by scratch or do most use already built engines like unity? I<sq>m interested in making a game and I started messing around in unity and it seems to be a lot easier since the engine is handled already.</p>", 
                "question": "[Tutorial] Learn how to make a game in C++!"
            }, 
            "id": "d1fhe0i"
        }, 
        {
            "body": {
                "answer": "<p>*Bookmarks and never visits again*<br><br>Jk, I saw the first bit and I<sq>m intrigued. I<sq>m definitely going to sit down and go through all of this one day</p>", 
                "question": "[Tutorial] Learn how to make a game in C++!"
            }, 
            "id": "d1fr63h"
        }, 
        {
            "body": {
                "answer": "<p>Soo why SDL and not SFML seeing as you are using C++? <colon>P</p>", 
                "question": "[Tutorial] Learn how to make a game in C++!"
            }, 
            "id": "d1ftycm"
        }, 
        {
            "body": {
                "answer": "<p>LPT<colon> Make your functions so complex only you can decipher them for job security.</p>", 
                "question": "LPT<colon> Make functions so simple that you can see what it does at a glance and it just cannot be wrong"
            }, 
            "id": "coyy2un"
        }, 
        {
            "body": {
                "answer": "<p>This is classic C language thinking.  That is to say I am getting old enough to see well accepted design patterns rediscovered *as if they were new*, again and again.</p>", 
                "question": "LPT<colon> Make functions so simple that you can see what it does at a glance and it just cannot be wrong"
            }, 
            "id": "coyvs6g"
        }, 
        {
            "body": {
                "answer": "<p>So I<sq>m going to be <dq>that guy<dq> and say this<colon><br><br>Some problems are difficult and their solutions equally so.  When I am prototyping something new, as I often am when developing new features, I often avoid abstractions until I have a working solution and can analyze it.<br><br>At this point, I will either<br><br>1) Leave the code as a single function, maybe performing minimal refactoring to make it clear and concise<br><br>2) Refactor into several functions, but only after analysis<br><br>3) Rewrite the entire thing.<br><br>Your example is trivial.  What you have is a rendering pipeline that doesn<sq>t care about state.  That is not always the case, and structuring code so that it can be written in the manner you present is not always easy.<br><br>There comes a point in development where you have to make tradeoffs.</p>", 
                "question": "LPT<colon> Make functions so simple that you can see what it does at a glance and it just cannot be wrong"
            }, 
            "id": "coyxhck"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations on discovering the reasoning behind private and public methods!<br><br></p>", 
                "question": "LPT<colon> Make functions so simple that you can see what it does at a glance and it just cannot be wrong"
            }, 
            "id": "coyxnk8"
        }, 
        {
            "body": {
                "answer": "<p>I have enjoyed Programming Throwdown thus far.</p>", 
                "question": "What are some good engaging podcasts about Computer Science?"
            }, 
            "id": "clzyfcu"
        }, 
        {
            "body": {
                "answer": "<p>I asked this question a couple months ago.<br><br>I don<sq>t want to take credit for the answers, so I<sq>ll just link the thread [here](http<colon>//www.reddit.com/r/learnprogramming/comments/22arm1/what_podcasts_focused_on_programming_or/).</p>", 
                "question": "What are some good engaging podcasts about Computer Science?"
            }, 
            "id": "cm00aes"
        }, 
        {
            "body": {
                "answer": "<p>Obligatory <dq>not a podcast, but<dq> -- Computerphile on YouTube. </p>", 
                "question": "What are some good engaging podcasts about Computer Science?"
            }, 
            "id": "cm02gxf"
        }, 
        {
            "body": {
                "answer": "<p>Sadly (core) computer science doesn<sq>t lend itself well to the audio format, but here is what I listen to for a more software-oriented content.<br><br>**Hanselminutes** is usually of very good quality although very short for my liking (30 min). **Programming Throwdown** is of variable quality and quite long (~50 to 60 min) although they discuss a lot of things without researching them which ends up being infuriating and making me doubt the stuff they say about topics which I do not know. **The Changelog** is always of good length and good quality, and they interview some very good people in it. **The Java Posse** is JVM-oriented but of very good quality (content-wise). The sound of the podcast is quite low and not very good though, so I wouldn<sq>t recommend it for listening in a noisy environment. The **Stack Exchange** podcast is usually more about their own stuff but still very interesting. **The Web Ahead** is centered about Web stuff but quite interesting most of the time. **Software Engineering Radio**, like Java Posse, is very interesting but the actual quality of the audio makes is unbearable to listen outside (at least the last time I listened to it).</p>", 
                "question": "What are some good engaging podcasts about Computer Science?"
            }, 
            "id": "cm08ys6"
        }, 
        {
            "body": {
                "answer": "<p>codecademy</p>", 
                "question": "Real subtle CodeAcademy"
            }, 
            "id": "ciisuoy"
        }, 
        {
            "body": {
                "answer": "<p>This is not subtle, at all.</p>", 
                "question": "Real subtle CodeAcademy"
            }, 
            "id": "ciitkxx"
        }, 
        {
            "body": {
                "answer": "<p>I just finished their python course yesterday and it<sq>s riddled with Monty Python references.</p>", 
                "question": "Real subtle CodeAcademy"
            }, 
            "id": "ciiwgud"
        }, 
        {
            "body": {
                "answer": "<p>Hit me?</p>", 
                "question": "Real subtle CodeAcademy"
            }, 
            "id": "ciisob9"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t tell your boss that you did this. Just let the terminal do the work and take a 50 hour vacation. I<sq>m serious. Because if he finds out you can do stuff like this, you will suddenly be doing a lot of extra work above your pay grade for him on the house.<br><br>Not kidding. Completely serious. Don<sq>t show your hand on stuff like this unless you are up for a promotion and want to show off.</p>", 
                "question": "That feeling when you<sq>re watching the terminal do all the work for you"
            }, 
            "id": "ccxcvwo"
        }, 
        {
            "body": {
                "answer": "<p>This is why basic scripting should be taught in high school. Millions of hours are wasted every day by people who could automate their work, but have no idea how to do it, or that it is even possible.</p>", 
                "question": "That feeling when you<sq>re watching the terminal do all the work for you"
            }, 
            "id": "ccxbk4k"
        }, 
        {
            "body": {
                "answer": "<p>The worst is when you get scolded for writing a script to solve a manual task like this. A software program we use at my job occasionally locks up due to a temp file getting corrupted. I wrote a script to delete the temporary file and the software just remakes a non-corrupt version. I left a .bat script on the public desktop to delete the file so that anyone who needed to didn<sq>t have to navigate to the temp folder manually and find the file. Of course, I was asked by the IT department to <dq>stop scripting<dq> because I was breaking some policy or something. But they said it was fine to delete the file manually.</p>", 
                "question": "That feeling when you<sq>re watching the terminal do all the work for you"
            }, 
            "id": "ccx701r"
        }, 
        {
            "body": {
                "answer": "<p>In my experience, doing work faster and more efficiently just means you get more work piled on to you and everyone else gets to slack off.</p>", 
                "question": "That feeling when you<sq>re watching the terminal do all the work for you"
            }, 
            "id": "ccxcbpj"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s where the programmers are fat stereotype is coming from...</p>", 
                "question": "Eat while you learn code."
            }, 
            "id": "cgwjdrp"
        }, 
        {
            "body": {
                "answer": "<p>how to become a fatass 101</p>", 
                "question": "Eat while you learn code."
            }, 
            "id": "cgwk3ul"
        }, 
        {
            "body": {
                "answer": "<p>Sounds like a fast way to get spaghetti code </p>", 
                "question": "Eat while you learn code."
            }, 
            "id": "cgwk5j3"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Eat while you learn code."
            }, 
            "id": "cgwjcd5"
        }, 
        {
            "body": {
                "answer": "<p>I have no idea what I<sq>m doing</p>", 
                "question": "You wan<sq>t to learn how to code a game? Here<sq>s a short template for you. Turn this into tetris as a learning experience. Post a screen shot of your success. "
            }, 
            "id": "c6dwyea"
        }, 
        {
            "body": {
                "answer": "<p>I hate you!<br><br>It<sq>s 1<colon>30 a.m. where I live. I started with Java two days ago. Yet now I sit here and try to figure out what to do.<br><br>Thank you, this is practically the only way to make me work!</p>", 
                "question": "You wan<sq>t to learn how to code a game? Here<sq>s a short template for you. Turn this into tetris as a learning experience. Post a screen shot of your success. "
            }, 
            "id": "c6dxr1y"
        }, 
        {
            "body": {
                "answer": "<p>You know how awesome it would be for us noob programmers if we could get a sub-reddit full of templates like this? </p>", 
                "question": "You wan<sq>t to learn how to code a game? Here<sq>s a short template for you. Turn this into tetris as a learning experience. Post a screen shot of your success. "
            }, 
            "id": "c6e3h7i"
        }, 
        {
            "body": {
                "answer": "<p>I got a few hours to work on this today, so here<sq>s where I am right now.. [link](http<colon>//i.imgur.com/O0jJM.png)<br><br>Have all shapes in, just gotta put in the lines clearing and perhaps a score.<br><br>Gotta get to bed, but will definitely be working on (and hopefully finishing!) this tomorrow.<br><br>Will share source when it<sq>s finished!</p>", 
                "question": "You wan<sq>t to learn how to code a game? Here<sq>s a short template for you. Turn this into tetris as a learning experience. Post a screen shot of your success. "
            }, 
            "id": "c6e3hv4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d start looking for another job. Not because I don<sq>t think you<sq>re capable of getting through your current rut and kicking ass; but because it sounds like that job is going to give you nothing in terms of transferable skills. At some point, you<sq>re going to leave that company, whether by your choice or theirs. I<sq>m sure there are other companies that still need a FoxPro programmer, but those are most certainly going to be less and less as time goes on. You<sq>d be better off working with a more modern language (take your pick, there are plenty) and with a company that<sq>s willing to work with you to help you get what you need done.  </p>", 
                "question": "Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmue9yt"
        }, 
        {
            "body": {
                "answer": "<p>They<sq>re threatening you after just two weeks? Start looking, that<sq>s really dumb. Even a simple job like cashiering takes longer than that to get comfortable with. </p>", 
                "question": "Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmuf89q"
        }, 
        {
            "body": {
                "answer": "<p>HA! Good luck. I am an ex- FoxPro dev. I used to have to use it to develop software for Winmagi, which is a FoxPro based manufacturing ERP used in the Auto industry among others (although just about everyone has abandoned it). It is a nightmare, and as you mentioned, a retired technology (for those who aren<sq>t aware, Foxpro is the retarded parent to Microsoft Access).<br><br>In my experience, you would be best going to your boss, not for code, but for knowledge base access to development docs (or whatever you use). The code for FoxPro is incredibly cryptic. That or they will need to sit you with an experienced Engineer that can help you with a cheat sheet. Its too bad that they are short staffed, but thats not necessarily your fault. A graduate can<sq>t be expected to know a language that has been dead for 10 years.<br><br>To be honest, in the end, if it didn<sq>t directly have something to do with the ERP, I ended up just scraping the databases daily into SQL (yeah, there is a working connector for SQL 2008 somewhere that will work with FoxPro) and running reports and business intelligence out of that. The alternative is to spend 10x the amount of time debugging the FoxPro environment, and even then, performance is absolutely pathetic!</p>", 
                "question": "Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmudqrm"
        }, 
        {
            "body": {
                "answer": "<p>Hang in there, kiddo. Let me get some pants on & get to my computer and I<sq>ll help you out. It<sq>s not everyday I can help someone with my FoxPro knowledge, haha. I<sq>m certainly no authority but I use it everyday. <br><br><br>Yes, your employer sounds like a douche (and maybe you should look for another job -- but that<sq>s none of my business), and FoxPro is certainly antiquated, but it<sq>s nowhere near as bad or incapable as some in this thread would lead you to believe.<br><br><br>Edit<colon> Thanks for the gold, you beautiful bastard (and that was BEFORE I delivered)!</p>", 
                "question": "Hired for my first programming job. I<sq>ve been there two weeks and I<sq>m struggling to grasp advanced problem solving and syntax. I was told my job is on the line if I don<sq>t improve. Suggestions?"
            }, 
            "id": "cmulq9s"
        }, 
        {
            "body": {
                "answer": "<p>Hey man, hope you read this.<br><br>I<sq>ve been programming for almost 30 years.  Around 18 professionally.  You sound like you<sq>re at a dead-end, and don<sq>t know how to proceed.  Given that I<sq>ve visited the Finance department at the company I work for, leads me to believe I know exactly what you<sq>re going through.<br><br>You<sq>re evidently talented.<br><br>You<sq>re evidently engaged in the idea.<br><br>So let<sq>s do something other than doom-saying?  Download Visual Studio 2013 Express.  Or, if you<sq>re really desperate, you could probably torrent the Pro Edition.  C# is easy to learn, powerful, and very much wanted in the industry.  Dude, you can learn this shit for free.<br><br>There are oodles of tutorials on the internet to get you started.  Once you get proficient, you can then start from the beginning again because tutorials tend to aim towards targets rather than best practice.<br><br>PM me anytime, I<sq>ll help and guide - better to do that than to lose a life.  My credentials are good.  We can also discuss how you move forward in the career.<br><br>My credentials, for what they<sq>re worth, is that I lead a medium-sized team, dictate their day-to-day, in a reasonably large company. <br><br>Don<sq>t give up yet.  Wing me a message.  Let<sq>s get you started before you<sq>re finished?<br><br>EDIT<colon> As is customary, and I<sq>ll have to keep it short as I gotta head out the door<colon> Thanks for the Gold <colon>)</p>", 
                "question": "Cry for help. 26 years old love programming and can<sq>t see life going on much longer. Help? [Yes this is a throwaway account for obvious reasons]"
            }, 
            "id": "cmev4z4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m just going to plug /r/SuicideWatch, you should definitely post there as well dude.<br><br>What do you enjoy doing? I<sq>m a 26yo guy from New Zealand - If you<sq>re in need a gaming or coding buddy then hit me up any time. Always keen for a chat!<br><br>Take care.</p>", 
                "question": "Cry for help. 26 years old love programming and can<sq>t see life going on much longer. Help? [Yes this is a throwaway account for obvious reasons]"
            }, 
            "id": "cmeu0lr"
        }, 
        {
            "body": {
                "answer": "<p>One thing is graphically clear from your post is you _are_ suffering from depression.<br><br>Believe me, depression is very real and a very real problem. (And yes, there is probably an overlap in causality, if not a vicious feedback loop, between the colitis and the depression. )<br><br>See if you can get some treatment for that, sometimes you<sq>re lucky and the first / cheapest pills work.... and then sometimes you aren<sq>t. Either way it is a long fight.<br><br>Sounds like there is a lot of potential in you, I encourage you to <dq>hang in there<dq> until you can move to a better environment / job.<br><br>However, I warn you that some of your problems are internal to you and will go with you to wherever you go, and whatever you do. <br><br>So working on that depression is _also_ what you need to do.<br><br>Alas, I can<sq>t offer you <dq>real help<dq> in the sense of a job.<br><br>I could critique your CV for you, which would encourage you to actually write it, clean it up and get it out there.<br><br>In some ways I would encourage you to <dq>hang in there and get that second degree<dq>, but ideally if you could find a less shitty employer who was supportive of you doing that, that would be Grreat.<br><br>ps<colon> Yup, admitting you have major depression and on treatment is probably a disaster with the sort of employer it sounds like you have, so probably don<sq>t do that.<br><br>However, don<sq>t let that stop you from getting help. Your bosses really really DON<sq>T have the right to know (no matter what they think!)</p>", 
                "question": "Cry for help. 26 years old love programming and can<sq>t see life going on much longer. Help? [Yes this is a throwaway account for obvious reasons]"
            }, 
            "id": "cmevnfx"
        }, 
        {
            "body": {
                "answer": "<p>You need to come up with a side project, using your programming skills.  That will open doors.  <br><br>Time heals.  My life is significantly better than it was 10 years ago.  And people won<sq>t flock you; sometimes you have to put you have to put yourself out there. </p>", 
                "question": "Cry for help. 26 years old love programming and can<sq>t see life going on much longer. Help? [Yes this is a throwaway account for obvious reasons]"
            }, 
            "id": "cmetmht"
        }, 
        {
            "body": {
                "answer": "<p>*hackr.io <br><br>Title wrong.<br><br>The benefits of hackr.io is it offers not just outdated links but new stuff as well. techether.com seems to only have the basic and general resources found in a google search front page.  I am sure both offer great things depending on what you are looking for, but as far as <dq>usability<dq> and <dq>content<dq> I would lean toward hackr.io.</p>", 
                "question": "Techether - IMO a far better source of information than Hack.io"
            }, 
            "id": "ct38ep4"
        }, 
        {
            "body": {
                "answer": "<p>Perhaps it was worth to mention that there subjects could be also added, not only resources as with hackr.io - though this could be both advantage or disadvantage depending on how well the resource is administered <colon>)</p>", 
                "question": "Techether - IMO a far better source of information than Hack.io"
            }, 
            "id": "ct38miq"
        }, 
        {
            "body": {
                "answer": "<p>wasn<sq>t techether made by some redditor kinda recently? I think I remember it being posted in [/r/webdev](http<colon>//reddit.com/r/webdev)</p>", 
                "question": "Techether - IMO a far better source of information than Hack.io"
            }, 
            "id": "ct3kysy"
        }, 
        {
            "body": {
                "answer": "<p>thanks, the site seems well maintained.</p>", 
                "question": "Techether - IMO a far better source of information than Hack.io"
            }, 
            "id": "ct4236x"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been an employed software engineer for almost three years now and I still don<sq>t consider myself a <sq>real programmer<sq>. I didn<sq>t even know Imposter Syndrome was a thing.</p>", 
                "question": "A note to those constantly nervous/worried about their code."
            }, 
            "id": "cm1klp3"
        }, 
        {
            "body": {
                "answer": "<p>I expect this fear too when I get there. </p>", 
                "question": "A note to those constantly nervous/worried about their code."
            }, 
            "id": "cm1gess"
        }, 
        {
            "body": {
                "answer": "<p>> Each day, I worried that I would be discovered and fired because I wasn\u2019t good enough.  <br>  <br><br>LOL! I can just imagine someone going over your code, thinking <dq>Wait a minute, this code sucks! This guy<sq>s a fraud!<dq></p>", 
                "question": "A note to those constantly nervous/worried about their code."
            }, 
            "id": "cm1t79l"
        }, 
        {
            "body": {
                "answer": "<p>I had this thought not too long ago.  I am picking back up an project from last year (a gameboy emulator, SharpDMG, it<sq>s on github) and the code I saw when I opened up the VS project was messy, undocumented, and generally bad.  It wasn<sq>t terrible, but knowing what I know now there<sq>s a lot I can clean up and re-implement.<br><br>I was kind of crushed.  In the moment I wrote this code I thought it was good.  What about the code I<sq>m writing now?  I think it<sq>s good.  Is it just as garbage as this?  In the moment I<sq>d have been proud to show this emulator off (it can boot the bios even!) but now looking back at it, should I have been?<br><br>I then came to the conclusion that me knowing that this code can be improved, and knowing how to improve it, means I<sq>m getting better.  Maybe I<sq>m still making code that<sq>ll make me cringe in a few months, but I<sq>m getting better all the time.  This is a good thing.</p>", 
                "question": "A note to those constantly nervous/worried about their code."
            }, 
            "id": "cm1nrn5"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s already /r/askcomputerscience, which is a great sub. I honestly think the one you created is basically the same thing...</p>", 
                "question": "Running into conceptual issues relating to computer science? Check out r/CSELI5 - it<sq>s <dq>Explain Like I<sq>m Five<dq> but for Comp Sci!"
            }, 
            "id": "cd85060"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this. A lot of programming seems to be abstract and really conceptual, at least for me, and as someone who has struggled with this all throughout school this could come in handy. </p>", 
                "question": "Running into conceptual issues relating to computer science? Check out r/CSELI5 - it<sq>s <dq>Explain Like I<sq>m Five<dq> but for Comp Sci!"
            }, 
            "id": "cd85sgv"
        }, 
        {
            "body": {
                "answer": "<p>There<sq>s a lot of opportunity right now for you veteran programmers to help some guys out.<br><br>Anyone who knows how to explain pointers, data structures, or closures should go to the sub and supply some ELI5 answers <colon>)</p>", 
                "question": "Running into conceptual issues relating to computer science? Check out r/CSELI5 - it<sq>s <dq>Explain Like I<sq>m Five<dq> but for Comp Sci!"
            }, 
            "id": "cd87pt7"
        }, 
        {
            "body": {
                "answer": "<p>Great idea. Personally, I will get anxious if I<sq>m learning code and know how to put it together but don<sq>t understand the concepts behind it. Hope to see this sub flourish, and to contribute in any way I can!</p>", 
                "question": "Running into conceptual issues relating to computer science? Check out r/CSELI5 - it<sq>s <dq>Explain Like I<sq>m Five<dq> but for Comp Sci!"
            }, 
            "id": "cd84iv4"
        }, 
        {
            "body": {
                "answer": "<p>[Latex cheat sheet in case you ever need it](http<colon>//www.stdout.org/~winston/latex/latexsheet.pdf)</p>", 
                "question": "Cheat Sheets - Just in case you didn<sq>t come across them yet"
            }, 
            "id": "c7s31zc"
        }, 
        {
            "body": {
                "answer": "<p>[More Cheat Sheets](http<colon>//www.cheat-sheets.org/)</p>", 
                "question": "Cheat Sheets - Just in case you didn<sq>t come across them yet"
            }, 
            "id": "c7sbj9t"
        }, 
        {
            "body": {
                "answer": "<p>Some of these can be pretty great, since you access them from the terminal.  http<colon>//cheat.errtheblog.com/</p>", 
                "question": "Cheat Sheets - Just in case you didn<sq>t come across them yet"
            }, 
            "id": "c7s1u40"
        }, 
        {
            "body": {
                "answer": "<p>Thank you, sir. Also, if you have Eclipse it has built in cheat sheets too.</p>", 
                "question": "Cheat Sheets - Just in case you didn<sq>t come across them yet"
            }, 
            "id": "c7s3ki1"
        }, 
        {
            "body": {
                "answer": "<p>I only have experience with Automate The Boring Stuff with Python, it<sq>s a good book and free. Also there<sq>s a udemy course following the book.  But you don<sq>t learn anything specific I guess for Raspberry Pi. It<sq>s more about learning the basics of the language in the first part of the book and then learning how to automate basic tasks, scrape web pages, organizing files, sending e-mail and so on in the second part of the book. Maybe try searching for Raspberry Pi specific books, I<sq>m sure there are few of those...</p>", 
                "question": "(x-post /r/learnpython) Automate the Boring stuff with Python vs Python crash course"
            }, 
            "id": "d9vpkon"
        }, 
        {
            "body": {
                "answer": "<p>I make a living teaching beginners to code, and /u/AlSweigart <sq>s <dq>Automate the Boring Stuff with Python<dq> is my go-to recommendation for my students that want to learn Python.</p>", 
                "question": "(x-post /r/learnpython) Automate the Boring stuff with Python vs Python crash course"
            }, 
            "id": "d9vxzip"
        }, 
        {
            "body": {
                "answer": "<p>Can<sq>t speak for the other but ATBS was excellent for me. Although I did feel the last couple chapters were rushed. I would recommend ATBS and [sentdex] (https<colon>//www.youtube.com/playlist?list=PLQVvvaa0QuDcG4wbhhCv_XTnexvWfjlBy) for r-pi vids.  <br>OR, skip both and go through sentdex<sq>s python tutorials and r-pi tuts for better combination.</p>", 
                "question": "(x-post /r/learnpython) Automate the Boring stuff with Python vs Python crash course"
            }, 
            "id": "d9vq25m"
        }, 
        {
            "body": {
                "answer": "<p>I did automate the boring stuff, and I<sq>d say it really is aimed at increasing productivity at your desk job. Another route I<sq>d suggest is to finish Codeacademy<sq>s exercises on Python to familiarize yourself with the language, then browse through Learn Python the Hard Way to get more depth.<br>  <br>  <br>ATBS does not cover topics like list comprehension, map, classes, ternary operators, and whatnot, which I feel would be helpful in your case.</p>", 
                "question": "(x-post /r/learnpython) Automate the Boring stuff with Python vs Python crash course"
            }, 
            "id": "d9w6wek"
        }, 
        {
            "body": {
                "answer": "<p>The Nature Of Code - Daniel Shiffman. <br>Covers Vectors, Fractals, Cellular Autonoma and much more.<br><br>It<sq>s not a huge programming manual or a classic university textbook. It will allow you to use your basic knowledge and push you abit further. It is less heavy then other books making it easy to get into after a long day at uni/work.<br><br>You can read it online for free [here](http<colon>//natureofcode.com/book/)</p>", 
                "question": "[Python C C++ JAVA] What are your most pivotal game-chaning books that you<sq>ve read."
            }, 
            "id": "d94cwdw"
        }, 
        {
            "body": {
                "answer": "<p>Clean Code is a really good one to read through. It<sq>s more of a guideline for how you should make your code look/read - parts are a bit advanced, but I really enjoyed it and I feel like I<sq>m not much more advanced than you are.</p>", 
                "question": "[Python C C++ JAVA] What are your most pivotal game-chaning books that you<sq>ve read."
            }, 
            "id": "d94dlbx"
        }, 
        {
            "body": {
                "answer": "<p>The Head First series is great cause it makes dense subject matter very easy to read. I use Head First Java and Head First Design Patterns in a class and they<sq>re great. They are *not* a reference book, but rather a engineering/OO/pattern book.</p>", 
                "question": "[Python C C++ JAVA] What are your most pivotal game-chaning books that you<sq>ve read."
            }, 
            "id": "d94d6ts"
        }, 
        {
            "body": {
                "answer": "<p>Think Python is a great introduction to Python as well as programming in general. It is available for free at [this address](http<colon>//greenteapress.com/wp/think-python/).</p>", 
                "question": "[Python C C++ JAVA] What are your most pivotal game-chaning books that you<sq>ve read."
            }, 
            "id": "d94hw9t"
        }, 
        {
            "body": {
                "answer": "<p>Better now than never. You still have a good 30 years of career in front of you!</p>", 
                "question": "At 35yo is it too late for me to learn how to code and follow that career path?"
            }, 
            "id": "cz1dj8k"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "At 35yo is it too late for me to learn how to code and follow that career path?"
            }, 
            "id": "cz1e1gi"
        }, 
        {
            "body": {
                "answer": "<p>What kind of person would just say <dq>Yes, it<sq>s too late for you. You can<sq>t make a career out of this.<dq>?</p>", 
                "question": "At 35yo is it too late for me to learn how to code and follow that career path?"
            }, 
            "id": "cz1ewhk"
        }, 
        {
            "body": {
                "answer": "<p>No, it<sq>s not too late. You<sq>ll have to work harder at it than younger folks, as they<sq>re more likely to have more tinkering experience than you, but you also have the discipline and maturity to work at it.</p>", 
                "question": "At 35yo is it too late for me to learn how to code and follow that career path?"
            }, 
            "id": "cz1dnty"
        }, 
        {
            "body": {
                "answer": "<p>i run epicodus and wrote most of the curriculum - happy to answer any questions! <colon>)</p>", 
                "question": "Developer bootcamp has their entire curriculum online"
            }, 
            "id": "cksjc6g"
        }, 
        {
            "body": {
                "answer": "<p>It reminds me of a more consolidated version of The Odin Project. </p>", 
                "question": "Developer bootcamp has their entire curriculum online"
            }, 
            "id": "ckska84"
        }, 
        {
            "body": {
                "answer": "<p>Ember etc with rails is exactly what I was going to learn so the timing is great. Thanks!</p>", 
                "question": "Developer bootcamp has their entire curriculum online"
            }, 
            "id": "ckt1l8s"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a student in the current cohort, and I would recommend Epicodus to anyone who<sq>s serious about building a foundation to work in web development. I did quite a bit of dev bootcamp research before committing to it, and of the several qualities that set Epicodus apart I would argue the most important one is the structure. No lectures or passive learning, just learn by doing with 18 weeks of full-time, intensive practice. Having come into Epicodus with really only a general interest in programming and some limited formal coursework, I am stunned at the skill set I<sq>ve picked up and the programming tasks I feel confident in implementing. More importantly, this course focuses heavily on the meta-skill of learning how to teach yourself<colon> diving into resources like documentation, forums like stackoverflow, developing a community of peers, etc. If a bootcamp can<sq>t help you develop that ability in a fast evolving field like web development, I<sq>d say it<sq>s not worth your time or your money.<br><br>I think it<sq>s cool that @michaelrkn put the entire curriculum online for anyone to use, but I think the caveat is that it<sq>s only as good as the time you<sq>re willing to commit to it. Final pitch<colon> if you do decide to apply to Epicodus, you<sq>ll get to live in one of the most thriving cities in the country and pay a lot less on a per hour basis for guided instruction than any bootcamp anywhere. If anyone is curious or has further questions about what it<sq>s like to be a student, I<sq>d be happy to answer them!</p>", 
                "question": "Developer bootcamp has their entire curriculum online"
            }, 
            "id": "ckuv7sa"
        }, 
        {
            "body": {
                "answer": "<p>Good luck man. Friendly advice I was given a while ago is to never speak about what you<sq>re **going to do** because that itself gives a sense of accomplishment and maybe a reason to slack... We<sq>re all guilty of doing it, but it<sq>s best avoided</p>", 
                "question": "Beginning to learn for the 6th time"
            }, 
            "id": "dd0zu0z"
        }, 
        {
            "body": {
                "answer": "<p>How I learned to program<colon><br><br>* Write Code every day (do this for 6 months to a year before you take a break)<br>* Write Code with a purpose (Solve different/challenging problems)<br>* Teach what you know to cement your knowledge (Answer questions on forums or StackOverlow)<br><br>Coding every day is a must, in fact you should also be thinking about solutions to problems throughout your day even while you are away from the computer. Using the right resource for learning is also critical, you need to be challenged, and not use a resource that is <dq>Type what we tell you<dq>. You must be forced to **THINK** about a solution and come up with answers on your own. Failure is a learning experience, don<sq>t be dismayed!!!! I used /r/dailyprogrammer and CodeAbbey.com (CodeAbbey doesn<sq>t allow you view other solutions until you solve them yourself and you code in any language!!!). Taking classes/tutorials, while very good for some, wasn<sq>t enough for me. I stopped with classes/tutorials and only took them up again (to prove what I know) after I taught myself to solve problems on my own. I<sq>ve shared my experience before with /r/learnprogramming but I felt I should throw this out there again, as maybe it will help someone.</p>", 
                "question": "Beginning to learn for the 6th time"
            }, 
            "id": "dd16dvo"
        }, 
        {
            "body": {
                "answer": "<p>Maybe pick a project and try coding it? Look around in https<colon>//scotch.io/tutorials if you are interested in JavaScript and web applications or try the Odin project or something hands on if just watching videos is not working out for you.</p>", 
                "question": "Beginning to learn for the 6th time"
            }, 
            "id": "dd142x0"
        }, 
        {
            "body": {
                "answer": "<p>Good luck to you, but every second you waste on this thread is time you could be actually learning. You don<sq>t need some people to pat you on the back, you need to go out and do it. Our approval does you no good.</p>", 
                "question": "Beginning to learn for the 6th time"
            }, 
            "id": "dd17b9n"
        }, 
        {
            "body": {
                "answer": "<p>Have you ever played War? It definitely takes some time.<br><br> And when you think about it, there<sq>s always at least 26 <dq>battles<dq> , and theres a 50 50 chance of a player winning a <dq>battle<dq>. So both players will end up with 26 cards again (give or take 1 or 2) most of the time.<br><br>Ex. If one player loses 1 card each time they go through 26 cards, there would be 26+25+24+... = 351 Rounds<br><br>If you take away that constant <dq>loses 1 card each time<dq>  and replace the outcome with 50 50 chance, you<sq>ll start to sometimes get larger numbers <br><br>Edit<colon> forgot to how to type on my phone apparently </p>", 
                "question": "I made a program that simulates the card game War. It takes hundreds of plays for one of the players to win. Did I do something wrong or did these games really take forever to complete?"
            }, 
            "id": "cvwzbq1"
        }, 
        {
            "body": {
                "answer": "<p>Didn<sq>t you know that war never changes?</p>", 
                "question": "I made a program that simulates the card game War. It takes hundreds of plays for one of the players to win. Did I do something wrong or did these games really take forever to complete?"
            }, 
            "id": "cvx9dzz"
        }, 
        {
            "body": {
                "answer": "<p>I have heard in the past that it is entirely possible to have a game of War fall into an infinite loop.  I haven<sq>t seen it, but it wouldn<sq>t surprise me.  I think that most games finish up in a couple hundred deals, though that may be because the cards don<sq>t actually stay in the same order in practice, they usually get thrown in a pile until you run out and collect the pile.</p>", 
                "question": "I made a program that simulates the card game War. It takes hundreds of plays for one of the players to win. Did I do something wrong or did these games really take forever to complete?"
            }, 
            "id": "cvwzq6u"
        }, 
        {
            "body": {
                "answer": "<p>War?  Huh.<br><br>What is it good for?</p>", 
                "question": "I made a program that simulates the card game War. It takes hundreds of plays for one of the players to win. Did I do something wrong or did these games really take forever to complete?"
            }, 
            "id": "cvxjh4o"
        }, 
        {
            "body": {
                "answer": "<p>Usually people do not work on the exactly same pieces of code - projects are big enough so people clash not that often.<br><br>Also they of course are aware of who is doing what so they can communicate.<br><br>When conflicts arose, usually they are resolved by one of two persons in conflict, not by third person, surely <colon>)<br><br>> I<sq>m just curious about how small groups (2-5) organize themselves, since I<sq>ve only ever worked alone.<br><br>Almost the same - git can nicely merge everything automatically in many cases. So you only pull updates often enough and merge them into your working copy to avoid surprise if you work on your copy too long.</p>", 
                "question": "How do programmers (or other contributors) work on the same project at the same time?"
            }, 
            "id": "ctc19er"
        }, 
        {
            "body": {
                "answer": "<p>> How do you know the changes you just made won<sq>t completely break everything when combined with someone else<sq>s changes?<br><br>You don<sq>t - you need to run tests to check that any changes haven<sq>t broken anything. This is true for single developers as well as for teams.</p>", 
                "question": "How do programmers (or other contributors) work on the same project at the same time?"
            }, 
            "id": "ctc1a15"
        }, 
        {
            "body": {
                "answer": "<p>You already use git<colon><br><br>You have a (`--bare`) shared repository. You clone it (or pull it), do your changes locally, test them, commit them and push them back to the shared repository. That<sq>s all there is, on the surface at least. <br><br>Usually the one trying to push gets a message that someone else already push before and has to do the merge (locally, _and test them_) and then push again.</p>", 
                "question": "How do programmers (or other contributors) work on the same project at the same time?"
            }, 
            "id": "ctc2cml"
        }, 
        {
            "body": {
                "answer": "<p>> How do you know the changes you just made won<sq>t completely break everything when combined with someone else<sq>s changes?<br><br>You don<sq>t. But there are two things that can help<colon><br><br>* Well structured software that makes it easy to add new features while keeping the changes to the already existing code minimal<br>* Talking to each other. In small groups and with small codebases you can meet regularly in one room and everyone tells everyone else what they are going to do and how they intend to do it. With bigger groups there are mailing lists etc.<br><br>For example I<sq>m following the mesa-dev mailing list<colon> http<colon>//lists.freedesktop.org/archives/mesa-dev/2015-July/thread.html (mesa is the userspace part of the open source linux graphics drivers (OpenGL etc.) for intel, radeon GPUs etc.). The way bigger projects work involves usually some sort of review. On the mesa-dev list you can see many, many <dq>patches<dq>, that are just commits that haven<sq>t actually been commited to the main repository yet, because someone else needs to look over them and agree that it<sq>s okay.  <br>That<sq>s another way of catching changes that break too many other things for no reason, because most mesa developers are probably reading this list and can chime in if a patch needlessly interferes with their work.<br><br>> How does a third person resolve conflicts given that they didn<sq>t write either piece of code?<br><br>One recent example is<colon> Marek Ol\u0161\u00e1k at AMD has implemented `ARB_tessellation_shader` for radeon, Dave Airlie at Red Hat has implemented `ARB_gpu_shader5` for radeon. What they do is not important, but they are two different OpenGL extensions. They are both implemented in different branches and if you do a naive `git merge` of them, you get several <dq>merge conflicts<dq>. Then you can run `git mergetool` and it will open a merge tool that allows you to resolve these conflicts and save them as a new correctly merged version.<br><br>Well, someone has to do that now. Either one of them or someone else, who has at least some ideas how the implementation of both features works. But it looks like Dave Airlie is currently doing it, because he proposed two <dq>simple<dq> patches that just rename some things that are supposed to go into the main branch first to then make merging the two new features easier<colon><br><br>http<colon>//lists.freedesktop.org/archives/mesa-dev/2015-July/089407.html<br>http<colon>//lists.freedesktop.org/archives/mesa-dev/2015-July/089408.html<br>http<colon>//lists.freedesktop.org/archives/mesa-dev/2015-July/089409.html<br><br>Tl;dr<colon> Always make sure to commit&push your changes first, so people who commit after you have to clean up the mess you made. <colon>)<br><br>edit<colon> In practice it isn<sq>t actually that bad. You<sq>ll be surprised how often you can automatically merge stuff and everything keeps working.</p>", 
                "question": "How do programmers (or other contributors) work on the same project at the same time?"
            }, 
            "id": "ctc8rmb"
        }, 
        {
            "body": {
                "answer": "<p>This list need more C++.</p>", 
                "question": "List of 75+ open source games on Github."
            }, 
            "id": "co01zmy"
        }, 
        {
            "body": {
                "answer": "<p>This is exactly what I was looking for! Thank you!<br><br>I<sq>m wondering why these are almost only web-based games. Maybe there is not many games in other languages on Github?</p>", 
                "question": "List of 75+ open source games on Github."
            }, 
            "id": "co08ct3"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m new to GitHub. How can I tell what language a given game is in if it<sq>s not listed in the descripton? </p>", 
                "question": "List of 75+ open source games on Github."
            }, 
            "id": "co0g3mf"
        }, 
        {
            "body": {
                "answer": "<p>Hey! Could you please cross-post this to /r/OpenSourceGames ? Thanks.</p>", 
                "question": "List of 75+ open source games on Github."
            }, 
            "id": "co0jm98"
        }, 
        {
            "body": {
                "answer": "<p>Direct link to access<colon> https<colon>//www.visualstudio.com/dev-essentials/<br><br>Either create new account or use old one to join Visual Studio Dev Essentials.</p>", 
                "question": "Just a tip<colon> If you register on Visual Studio Dev Essentials you get some free stuff including 3 months free subscription to pluralsight"
            }, 
            "id": "derpynd"
        }, 
        {
            "body": {
                "answer": "<p>I did this last month for the free 3 months of Linux academy, When I found out I got 3 months of PS I was stoked. I pay monthly so that saved me about $100</p>", 
                "question": "Just a tip<colon> If you register on Visual Studio Dev Essentials you get some free stuff including 3 months free subscription to pluralsight"
            }, 
            "id": "derr03u"
        }, 
        {
            "body": {
                "answer": "<p>Cheers, thanks for this.</p>", 
                "question": "Just a tip<colon> If you register on Visual Studio Dev Essentials you get some free stuff including 3 months free subscription to pluralsight"
            }, 
            "id": "dery88a"
        }, 
        {
            "body": {
                "answer": "<p>(Not always lead or supervisor but on some jobs)<br><br>* General office skills<br><br>Hygiene. (don<sq>t take your shoes off even under your desk, ~~shave twice a day if needed~~ Be well groomed, brush your teeth after meals if needed, use mouthwash before meetings if needed, etc) *Edit people are focusing on shaving twice a day for some reason.*<br><br>Basic kitchen skills / food safety / not stealing others food. (clean up after yourself.)<br><br>Basic respect / <dq>shut your mouth if you disagree and the other person is unlikely to change their mind<dq><br><br>Fairness is a childish thing we pretend is real so that we don<sq>t have to hear a lot of whining. In reality we have 10<percent> of the people doing 90<percent> of the work. They will probably be compensated more, allowed to be late, given prime vacations etc. If we went by fair most of the others would just be fired. Don<sq>t complain about fair until you<sq>ve done a full assessment and determining which group you are in.<br><br>It doesn<sq>t matter how good you are at your job. If you are too difficult to work with people will figure out a way to make sure you aren<sq>t their problem, either by firing, promotion, transfer, desk at the end of the hall whatever.<br><br>Office politics are real. Don<sq>t put up a Trump sticker (or Bernie etc) as it<sq>s not going to make the office a nice place to be. It does nothing but piss people off (who don<sq>t agree with you.) and does nothing to help keep people focused on what we are all there for. Making the company money.<br><br>* Program specific office skills<br><br>Vocabulary - You may be the smartest person in the room but if you speak like George W Bush people will think you are an idiot. Use the correct words, inheritance is not interface, etc.<br><br>Backup your stuff. We are expected to be <dq>computer people<dq> let the IT guys do their job but be able to say <dq>I have work from Monday saved here. etc.<dq><br><br>Don<sq>t do someone else<sq>s job. You are probably not the IT guy if you are the programmer, don<sq>t rearrange the network without their knowledge. If you do, let them know.<br><br>Not everyone focuses on soft skills. Most think, <dq>I<sq>m here to program.<dq> Not <dq>I<sq>m here to program in such a way that if I<sq>m fired tomorrow the project can continue. Comment, document etc. Learn to communicate with people via the method they prefer. If Bob wants to email, so he can pick his words carefully, and not fumble over larger words great, do that. If sally likes voice mail, do that for her. If John wants you to walk to his desk point things out while he takes notes, work with him as well.<br><br>Allow others to shine. For god<sq>s sake everyone in the room knows what is happening when you start with <dq>Well Bob and I came up with this implementation in Cobalt<dq> When you<sq>ve just graduated and Bob<sq>s been writing Cobalt for 40 years. It<sq>s better to say, <dq>Bob came up with a good plan last night and taught me a few things. This is where we ended up.<dq></p>", 
                "question": "Project Managers/Team Leads redditors what soft skills do you believe programmers need that are often overlooked and you had hoped they came in knowing?"
            }, 
            "id": "dcm1n5w"
        }, 
        {
            "body": {
                "answer": "<p>I work with a lot of Devs and the best ones actually look at the greater problem that are solving and not the task they have been assigned. <br><br>Working with people who are trying to solve the customer and business problem is so much better than someone who only wants to solve the technical problem. <br><br>Be the person who challenges ideas so that you can find the best solution for customer needs, don<sq>t be the person who challenges so they can appear smarter and more technical than everyone else.<br><br>Learn the business domain, look at competition in the area and understand the value of the project you<sq>re working on. It<sq>s a 10x to focus on this rather than just the best technology solution. </p>", 
                "question": "Project Managers/Team Leads redditors what soft skills do you believe programmers need that are often overlooked and you had hoped they came in knowing?"
            }, 
            "id": "dcm7g7r"
        }, 
        {
            "body": {
                "answer": "<p>I think the biggest differentiator I<sq>ve seen is communication skills. <br><br>**1. Know how to craft your communication based on your audience.** <br><br>The guy over in marketing and the VP asking about feature X typically don<sq>t care about the technical details of what you<sq>ve done. They just wants to know how to use it, how long until the bug will be fixed, etc. I often see engineers spend 15 minutes detailing every for loop the<sq>ve written and I just watch the marketing guy<sq>s eyes glaze over. On the other hand, engineers often do care about the technical details and want that information. Make sure you understand what the person you<sq>re talking to considers important. They<sq>ll think more highly of you when you speak their language.<br><br>**2. Know when to ask for help.** <br><br>Even senior devs ask for help when they get stuck, there<sq>s no shame in asking. Part of the balance of being a good engineer is knowing when to figure it out yourself and when you would save a lot of time by asking for a pointer when you<sq>re having a hard time understanding something.<br><br>**2.1 Respect the time of people who help you**<br><br>Asking for help is great, but there is a limit - don<sq>t be that guy that asks for help with the exact same thing every week. One thing that I try to do is pay it forward<colon> the next time someone else asks about that process or code, offer to answer their questions so that one person isn<sq>t answering everyone<sq>s questions. Better yet, document that code or process for the whole team and make it easier for everyone. <br><br>**3. Get good at communicating your status.** <br><br>Managers and PMs often get asked by their bosses when Feature X will be done. It sucks for them when they have to BS their way around saying <dq>I don<sq>t know<dq>. To avoid putting them in this position give them regular, easy to understand updates on your progress, such as <dq>I<sq>m done with the planning and have moved on to implementation. It should roughly be another 5 to 8 days<dq>.  This becomes especially important when dealing with bugs in production. When shit really hits the fan I typically send daily, or sometimes even hourly email updates to the project stakeholders. </p>", 
                "question": "Project Managers/Team Leads redditors what soft skills do you believe programmers need that are often overlooked and you had hoped they came in knowing?"
            }, 
            "id": "dcmbb3d"
        }, 
        {
            "body": {
                "answer": "<p>Damn dawg, how<sq>d you get a Jr developer job with just html & css? That<sq>s amazing! </p>", 
                "question": "Project Managers/Team Leads redditors what soft skills do you believe programmers need that are often overlooked and you had hoped they came in knowing?"
            }, 
            "id": "dcm55dw"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m surprised nobody has mentioned this yet. Once you have your GitHub account set up as was suggested in other comments, you can check out [this website](http<colon>//up-for-grabs.net/#/) which has a list of issues reported in open source projects that the maintainers have identified as good projects to tackle for a beginner to the project. They might be simple things like updating documentation but they are a good way to get started in a meaningful way.</p>", 
                "question": "How to start contributing to open source?"
            }, 
            "id": "curkkch"
        }, 
        {
            "body": {
                "answer": "<p>Welcome to skills a programmer needs to have that they don<sq>t seem to teach in school.<br><br>The first thing is to create a github account and start using git in your own stuff. It may be a bit daunting at first but you can learn most of what you<sq>ll need to know about git in a day or two. Publish some of your own code, start keeping everything you work on in source control even if you intend never to publish it.<br><br>> I get intimidated by the size of the code and by all the things I don<sq>t understand in it.<br><br>This is normal, take it slow, understanding a large existing code base takes time. Focus on making small fixes and simple changes to learn how things are put together.</p>", 
                "question": "How to start contributing to open source?"
            }, 
            "id": "curfwmk"
        }, 
        {
            "body": {
                "answer": "<p>Find a project you think you could be passionate about. This will keep you motivated. Look at their list of easy to fix bugs (hopefully there project you like marks them with easy, medium, hard, unknown, etc). Then find out if they have an irc channel (preferably) or a mailing list. Try to understand the code around the bug only, and when you have trouble, ask on irc or the mailing list. A good project will be supportive of new members, and you won<sq>t need to figure out the entire codebase (on very large projects that can take months or years). A lot of projects have these easy bugs for the purpose of bringing in new people.<br><br>The important part about this exercise for you is learning to do research and learning how to communicate. It is EXTREMELY important that you learn those two skills because you will use them for all projects, whether it be github, freelancing or corporate.<br><br>If source control is your worry, I recommend [github<sq>s tutorial](https<colon>//try.github.io/levels/1/challenges/1). I<sq>m sure there<sq>s also similar ones for svn, mercurial, etc. If you<sq>re truly unsure, most projects have a recommended workflow documented and you can always double check through the recommended communication channels (irc, mailing list, etc).</p>", 
                "question": "How to start contributing to open source?"
            }, 
            "id": "curgaed"
        }, 
        {
            "body": {
                "answer": "<p>Everyone is telling you to get a GitHub account, and that is very good advice.<br><br>I would add<colon> Use some libraries on GitHub in your own code. Most of my first contributions to open source were on projects that I was actively using in my own projects.<br><br>The process looks like this<colon><br><br>- Use their library<br>- Happen upon a defect of some kind. Perhaps it<sq>s something that<sq>s too slow for your purposes, or perhaps a crash. Maybe incorrect output, maybe a missing feature.<br>- Investigate and fix that problem.<br>- Submit fix to maintainer.<br>- Now that the maintainer trusts you, take a look through their issues if you feel like contributing more. Otherwise just rinse and repeat this cycle.<br></p>", 
                "question": "How to start contributing to open source?"
            }, 
            "id": "curqubr"
        }, 
        {
            "body": {
                "answer": "<p>Hopefully it<sq>s not healthcare.gov<br><br><br>In all serious, congrats!</p>", 
                "question": "Started from nothing 5 years ago. Today something I worked on made front page. Maybe not a big deal but I<sq>m ecstatic!"
            }, 
            "id": "cd3h4ik"
        }, 
        {
            "body": {
                "answer": "<p>Porn site.  Got it.<br><br>Joking aside, good for you, brother!</p>", 
                "question": "Started from nothing 5 years ago. Today something I worked on made front page. Maybe not a big deal but I<sq>m ecstatic!"
            }, 
            "id": "cd3jc7m"
        }, 
        {
            "body": {
                "answer": "<p>[removed]</p>", 
                "question": "Started from nothing 5 years ago. Today something I worked on made front page. Maybe not a big deal but I<sq>m ecstatic!"
            }, 
            "id": "cd3jeue"
        }, 
        {
            "body": {
                "answer": "<p>Congrats! Must be an awesome feeling.<br><br>I<sq>m also currently working towards my associates degree -- nice to see someone is achieving something with hard work. I feel like everyone turns their nose up to me when I say I won<sq>t be pursuing a BS in Computer Science.</p>", 
                "question": "Started from nothing 5 years ago. Today something I worked on made front page. Maybe not a big deal but I<sq>m ecstatic!"
            }, 
            "id": "cd3jwua"
        }, 
        {
            "body": {
                "answer": "<p>> I understand this will be a long stressful journey<br><br>Try viewing it as doing crossword puzzles. This is your high-quality spare time where you do some casual brain jogging.<br><br>The beginning can be really exciting. Don<sq>t miss out on it.</p>", 
                "question": "Is this a smart path to beginning programming or overwhelming?"
            }, 
            "id": "ddbhmh9"
        }, 
        {
            "body": {
                "answer": "<p>Seems fine. You probably won<sq>t even need codecademy after you<sq>ve gone through CS50 if you<sq>re willing to dive into the docs. I<sq>ve never heard of codecombat, but as with codecademy you probably won<sq>t need it. Feel free to give them both a try though.</p>", 
                "question": "Is this a smart path to beginning programming or overwhelming?"
            }, 
            "id": "ddbhc7f"
        }, 
        {
            "body": {
                "answer": "<p>I believe CS50 is in C + Python. I think these are good choices for such a course. After that course you should be familiar enough with the basics of programming that you can pick up any commonly-used language without too much trouble. C# is soooort of like halfway between C an Python so you<sq>ll have a good base to start with. C# is a commonly used language in business. I use it at work and it is quite nice. It has some slightly more complicated constructs that C or Python though - so I think it<sq>s a good thing if you start with those via CS50.<br> <br>I would concentrate only on CS50 for a while - unless you<sq>re stuck and need to look at other resources to get unstuck. That course should be pretty self-contained. I think CodeAcademy is a reasonably good resource if you<sq>re stuck on something from CS50. There<sq>s some CodeAcademy stuff on Git, SQL, Python, HTML and CSS that you can do. Definitely learn git at some point - it<sq>ll take you a few hours to get started with it and it<sq>s invaluable. I<sq>ve not heard of CodeCombat - it looks polished, but it also looks more broadly focused than CodeAcademy, which offers narrow, tool specific modules. CodeCombat almost looks like it<sq>s a course in itself. It looks like it is paid as well.<br>  <br>If you have a spare hour or so and you don<sq>t want to do CS50 but you want to practice, then I would recommend doing some [CodeAbbey](http<colon>//www.codeabbey.com/) problems. It<sq>s just a big list of programming puzzles that you can do in any language. I<sq>d recommend Python for these but any language will do. It<sq>s nice to have something that you can finish in 1/2 hour.<br>  <br>Overall I<sq>d say don<sq>t sweat the details too much and just write code. It doesn<sq>t really matter if it<sq>s an online course, puzzle or personal project - any code you write in any language will teach you something useful and transferable. If you find that CS50 is too much of a commitment then don<sq>t despair, just keep writing code in some capacity and try it again sometime or try something different later.<br></p>", 
                "question": "Is this a smart path to beginning programming or overwhelming?"
            }, 
            "id": "ddbhwfn"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to share a small handful of topics that I think will help you as a programmer. This is all taught in school, but it just goes to show that you can learn in a short time what some professors spend weeks covering (of course, in greater detail and interspersed with other things, but still)<colon><br><br># **LOGIC**<br><br>If you understand how to work with logical statements, you can avoid mistakes and confusion. Boolean algebra is really simple and *will* come in handy when you are crafting conditional statements, which happens a lot. It<sq>s taught in Math, CS, and EE.<br><br>`OR` is sort of like <dq>addition<dq>. Known as a _gathering gate_ in EE. I<sq>ll use `||`. <br><br>`AND` is sort of like <dq>multiplication<dq>. Known as a _barrier gate_ in EE. I<sq>ll use `&&`.<br><br>### There are simplification rules<colon><br><br>    A && False = False<br>    A || False = A<br>    A && True = A<br>    A || True = True<br>    !A || A = True<br>    !A && A = False<br><br>    (!A && B) || (A && B)<br>    = (!A || A) && B<br>    = True && B<br>    = B<br><br>    (A && B) || (A || B)    <br>    = A || B<br>    <br>Why? `A && B` is merely a *subset* of `A || B`.  The middle `||` cedes to the superset in this case. This kind of situation is common in programming - you<sq>ll think through some logic very literally, but the resulting statement can be refined into a simpler statement.<br><br>### There<sq>s a handy theorem called **DeMorgan<sq>s Theorem**, which behaves as such<colon>  <br><br>    !(A && B) = !A || !B                // a.k.a. NAND<br><br>    !(A || B) = !A && !B                // a.k.a. NOR<br><br>      A ^ B   = (!A && B) || (A && !B)  // a.k.a. XOR<br><br>    !(A ^ B)  = (A || !B) && (!A || B)  <br>              = A && !A || A && B || !B && !A || !B && B<br>              = False || A && B || !A && !B || False<br>              = A && B || !A && !B      // a.k.a. XNOR<br><br><br>Point being that DeMorgan<sq>s comes up a lot and applies to lots of operators.<br><br>_**TIP<colon>** ALWAYS think in terms of <dq>positive logic<dq>. Only use negations (!) when they help you express and understand a logical statement clearly._<br><br>    Example<colon>  <br>    A = car has a flat tire.<br>    B = key in ignition.<br>    C = !A && B = car can drive<br>    !C = A || !B             // By DeMorgan<sq>s Theorem<br><br>    boolean C = !(A || !B)   // awkward<br>    boolean C = !A && B      // better<br><br># **PROOFS AND TESTING**<br><br>Remember that computer science is rooted in math, and math is grounded in proofs. Proofs are simply a way of asserting, supporting, and cornering claims so that there<sq>s no doubt or ambiguity about them. For example, if you wanted to prove claims using odd and even numbers, it<sq>s helpful to define odd numbers as `2k+1` and even numbers as `2k` and work from there. <br><br>Likewise, algorithms courses often deal with proofs, attempting to answer questions like _how can I prove that an algorithm works? How do I analyze its runtime?_<br><br>### Similarly, when you<sq>re programming some logic, it<sq>s helpful to think about three things<colon><br><br>1. The thing that computes your logic - call it C. Often called **<dq>System Under Test<dq>** or SUT for short. (In EE, <dq>Design Under Test<dq>, or DUT). Sometimes this will thing will use other things (giving you a large, composite thing - that<sq>s fine. If you test them all individually, typically those are <dq>unit tests<dq>).<br>2. The input(s) that C takes.<br>3. The output(s) that C produces.<br><br>_**ULTRA-MEGA PRO TIP<colon>** ALWAYS have a fast *test suite* ready to go, or at least access to a REPL in your language. A test suite is a nice way to quickly prove that something works a certain way on a particular set of inputs.<br><br>It doesn<sq>t have to be fancy, and it doesn<sq>t even have to be hooked up to directly to your project. For example, if you<sq>re building an Android app, go download IntelliJ and set up a basic desktop gradle Java project. Add some JUnit test cases. This is all very easy to set up and the payoff is enormous.  I use it often when I<sq>m not sure what a piece of code will do under certain circumstances, and I just want a quick check to hedge against uncertainty.<br><br>When you<sq>re programming, projects can get large and cumbersome, even as a beginner. Say you<sq>re building an app and you have to make 10 clicks to get to the place in the code where some bug happens. A basic approach would be to fix the code, re-run the project, click 10 times, confirm whether the bug is fixed, and repeat as necessary (can be very frustrating).<br><br>Well, if you know what piece of code you<sq>re trying to fix, and it<sq>s feasible to extract it into a plain Java project via copy & paste, you can just put in a test case or two, adjust the inputs for each case, and see what happens very rapidly (small tests will typically run in the single digit milliseconds), and... no clicks! Repeated cycles of clicks + fiddling with code = a decline in your sanity. Of course, sometimes you can<sq>t avoid the more cumbersome approach. The key is to uses tests when applicable as leverage in your quest for the Truth.<br><br>Why is this good to know in a job?  When you build things, a bad scenario that can eat away at your reputation is to write code that is buggy and crashes a lot. Your boss, project manager, or testers will run your code/app and UH OH - it crashes. Ok fine, so you find the problem and <dq>fix<dq> it. Now you broke something else.  Fuck.  Now your boss runs the app and something else breaks.  Is this 100<percent> avoidable?  For most people, no. Gaining a 100<percent> perfect bird<sq>s eye view of the code is not easy. You also have to worry about teammates doing bad things. Some of this solvable with certain code management practices. In some situations, it<sq>s either perfect coverage or GTFO. Avionics, medical, rockets, etc. You cannot afford to have mistakes. In your average Android app, it<sq>s **far** less of a concern. But hey, in a job like that, if you can write code with few mistakes, it<sq>s in your best interest to find whatever high-leverage tools you can, and you don<sq>t necessarily need a degree to understand them.<br><br>This is all beyond beginner level, but the point I<sq>m trying to make is that if you can respect logic and <dq>proofs<dq>, despite whatever groaning they made you do in high school, you can actually gain a LOT of confidence in programming. Obviously without them you can still learn languages, and syntax, and how to build apps, etc.  Just know that as you progress, later on that approach starts to grow stale and becomes <dq>programming by coincidence<dq>. Strong logic and understanding of the basics of proofs can help you be more certain, faster, and more valuable.<br><br># **LEARNING**<br><br>Generally speaking, **DO NOT READ TEXTBOOKS**, unless there<sq>s a super compelling reason to do it (you love the author, the book is particularly good, you have nothing better to do, you have no other source for the material).<br><br>Many college study guides emphasize that the textbooks and lectures are often redundant. So if you<sq>re taking online courses with a lecture series, two things are important<colon><br><br>1. Learn the fundamentals of that lesson however you choose<colon> watch lecture, read the text, whatever.<br>2. Start applying what you learned, and making mistakes and getting rapid feedback, as early as possible. <br><br>Learning happens when you challenge yourself, but that doesn<sq>t have to mean digesting a course-worth of material and then taking an exam 3 months later. Treat every problem like a bite-sized, low stakes exam. Struggle with it, try on your own, but consult the solution manual for rapid feedback. If you get a problem wrong, try to see why, and put a sticky note next to it. Come back a few days later and try to do it blind -  try to **force yourself to recall the solution**.<br><br>## **Project Euler, USACO, etc.**<br><br>A nice way to crash-course your understanding of discrete math, data structures, and algorithms is to do exercises on these sites. Not easy, but even the first few can give you some insight into the world of computation and how to actually apply data structures and algorithms to problems with crazy inputs.  (Not super common if you<sq>re just writing business or consumer applications that are mainly UI- and framework-driven, but if you start getting into situations where you have to eek out some efficiency, a good working knowledge of DS & Alg. is a must).<br><br>Example<colon><br><br>**Let<sq>s say you have a list of numbers and every time you add a number to the list you want to find the median efficiently. Write an algorithm that can do this in O(log(n)) time.**<br><br>* _TIP<colon> <dq>list<dq> can throw you off here._<br>* _TIP<colon> The <dq>brute force<dq> solution is to sort the list every time, find the middle of the list and take the median. If the list is unsorted to begin with, you can<sq>t do any better than O(n*log(n)) with comparison-based sorting (radix sort is linear, but that<sq>s still not good enough). If it<sq>s sorted, you just have to go through the whole list until you find where the new number can go._<br><br>The solution is to use a **Min-Heap** and a **Max-Heap**. When one heap has one more item in it than the other, the median is simply the root of the larger heap, which can be accessed in constant time.<br><br>Inserting a number takes longer than that, but luckily since heaps are complete trees, insertion takes O(log(n)) time, because complete trees have height = O(log(n)). When you insert, you end up bubbling the item through the height of the tree, rather than through the entire list of numbers so far!<br><br># Conclusion<br><br>Do you need to know this kind of stuff when building apps? Most of the time - no. But there are a lot of scenarios where knowing a particular data structure (say, a Directed Acyclic Graph, or Min-Heap, or whatever) and algorithm is going to be pivotal in implementing a particular feature correctly, quickly, or efficiently.<br><br>The key is just balancing your time spent learning vs. doing.  The philosophy <dq>Just Ship It<dq> is good, but it<sq>s counteracted by the need for fundamental knowledge.  <br><br><colon>)</p>", 
                "question": "Is this a smart path to beginning programming or overwhelming?"
            }, 
            "id": "ddc07wm"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t know if it<sq>s me or not but the movie posters look out of proportion. Have a look at the sizes of the movie posters on [IMDB](http<colon>//www.imdb.com/title/tt2713180/?ref_=nm_flmg_act_6). (Yours are 256x150 theirs is 268x182). Other wise everything else looks decent. <br><br>Edit<colon> Also what would be awesome if you included ratings from IMDB, maybe there<sq>s a script to do so somewhere.<br><br>Edit #2<colon> [This might help you with my idea](http<colon>//ycouriel.blogspot.co.uk/2010/06/get-imdb-movie-rating-using-javascript.html)</p>", 
                "question": "Finished my first large JS project a site to watch movies/tv shows from youtube would love some feedback! (Link in Description)"
            }, 
            "id": "d7xdjkz"
        }, 
        {
            "body": {
                "answer": "<p>XSS RE<colon> js/search.js input.<br><br>Looks nice though.</p>", 
                "question": "Finished my first large JS project a site to watch movies/tv shows from youtube would love some feedback! (Link in Description)"
            }, 
            "id": "d7xewsl"
        }, 
        {
            "body": {
                "answer": "<p>Well done, it works! More to the point, it is actually useful! <br><br>You could score a few easy bonus points with some aesthetic improvements along with some minor UX stuff (e.g. the play button is miles out in the bottom right of the details box), but minor issues aside, it<sq>s great!<br><br>I saw that new content is added via the repo. Have you considered implementing logic for gathering new content automatically?</p>", 
                "question": "Finished my first large JS project a site to watch movies/tv shows from youtube would love some feedback! (Link in Description)"
            }, 
            "id": "d7xhasc"
        }, 
        {
            "body": {
                "answer": "<p>Nice!<br><br>It would be cool if you set the alt-text for each thumbnail to the videos title</p>", 
                "question": "Finished my first large JS project a site to watch movies/tv shows from youtube would love some feedback! (Link in Description)"
            }, 
            "id": "d7xf7vm"
        }, 
        {
            "body": {
                "answer": "<p>LPTHW is so garbage. The first 15-20 chapters are great but then it becomes pure retardedness. I got Think Python later and my love for learning python suddenly came back.</p>", 
                "question": "(x-post from /r/learnpython) My thoughts on learning Python one year later"
            }, 
            "id": "csdug1m"
        }, 
        {
            "body": {
                "answer": "<p>if you enjoy project euler you  would probably also enjoy codeabbey.  I bounce between the two when I<sq>m stuck</p>", 
                "question": "(x-post from /r/learnpython) My thoughts on learning Python one year later"
            }, 
            "id": "csdv1hy"
        }, 
        {
            "body": {
                "answer": "<p>Are you glad you went with Python?  I<sq>m deciding which language to focus on, and python seems like a nice general language with simple syntax, but my fears are<colon><br><br>1. Not really that practical for web sites - ruby/php would be more practical (yes, I<sq>m aware of django)<br><br>2. It<sq>s only a dynamic language, and is missing a lot of core data structures that Java/C have that I<sq>d like to learn</p>", 
                "question": "(x-post from /r/learnpython) My thoughts on learning Python one year later"
            }, 
            "id": "cse6s8m"
        }, 
        {
            "body": {
                "answer": "<p>Hey man, thanks for this.  I just started plowing through  Learn Python the Hard Way and am on ex 9.  It<sq>s good to have this <dq>insider info<dq> from people who have been there, it makes this a lot less scary of a prospect.</p>", 
                "question": "(x-post from /r/learnpython) My thoughts on learning Python one year later"
            }, 
            "id": "cse1hi1"
        }, 
        {
            "body": {
                "answer": "<p>This is coming from someone who, after graduating college, got a job where he got thrown into working the backend of a complex system that has been around for close to a decade and is absolutely massive.<br><br>You will never be able to read ALL of it, and likely will never need to. Not all developers use the concept of self-documenting code, and can often write stuff so obscure that even the original author can get lost looking at it.<br><br>The key is a combination of 2 things<colon> A good IDE, and a starting point. The starting point needs to be something you know, and I almost ALWAYS choose a button. <br><br>First, I pick my button. If I press this button, I know that it does x action. Then I look in the code for that button and the event it triggers/the code it runs/whatever that is attached to it. After that I start looking over that piece of code until I find exactly how the action I know happens is written. This often requires my IDE to allow me to select a method/variable and bounce to its definition, where it is used, etc. After that, I can start to branch out and find more and more things.<br><br>Doing this helps you track down specific pieces of code, but also helps you learn how they write. Now, with large team projects that don<sq>t enforce a standard, you will be in for a ROUGH time, but if any kind of standard is enforced then it should make it a little easier to get a grasp on what is happening.<br><br>Even people who have been coding for years struggle to just hop into these large projects, because it<sq>s not so much about knowing how to code or how to read code, as much as it is understanding how to read that particular developer<sq>s code.</p>", 
                "question": "How do I read the source code of a <sq>bigger<sq> project?"
            }, 
            "id": "cryjn3w"
        }, 
        {
            "body": {
                "answer": "<p>Most real-world software is too complex for one person to grasp every detail. But (hopefully) its architecture is deliberately designed so that you wouldn<sq>t have to know too many details at once.<br><br>Try to first look out for an actual freature within the software (or game) and then search for this feature afterwards. If you were able to find it (which is probably the hardest task) you will probably see that the relevant code isn<sq>t too long.</p>", 
                "question": "How do I read the source code of a <sq>bigger<sq> project?"
            }, 
            "id": "crygscn"
        }, 
        {
            "body": {
                "answer": "<p>Same way you eat an elephant - one byte at a time. </p>", 
                "question": "How do I read the source code of a <sq>bigger<sq> project?"
            }, 
            "id": "crylfna"
        }, 
        {
            "body": {
                "answer": "<p>As someone who has a hard time with this as well, I<sq>ve found that stepping through the code you<sq>re trying to understand with a debugger can be a really useful exercise. I tend to just set breakpoints for the functions or blocks of code that I don<sq>t understand and take some simple notes just to clarify things as much as possible.</p>", 
                "question": "How do I read the source code of a <sq>bigger<sq> project?"
            }, 
            "id": "crylwpb"
        }, 
        {
            "body": {
                "answer": "<p>[The Odin Project](http<colon>//www.theodinproject.com/) is awesome, as well!</p>", 
                "question": "Start learning web-development right now with 5 basic exercises!"
            }, 
            "id": "co3ynep"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Start learning web-development right now with 5 basic exercises!"
            }, 
            "id": "co3nmmv"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>d be useful to note that you don<sq>t need a remote server to run a web application. In fact, it<sq>s a terrible idea because it complicates the initial development and slows down the viewing of changes.<br><br>Instead, install a local server. For many interpreted languages (like PHP), there<sq>s a number of packages where you simply install the program and then just start the server from a link in the start menu (etc), allowing you to immediately view the results in your web browser. EasyPHP is an example (note that I haven<sq>t used PHP in a very long time, so this may be outdated).</p>", 
                "question": "Start learning web-development right now with 5 basic exercises!"
            }, 
            "id": "co4d3u6"
        }, 
        {
            "body": {
                "answer": "<p>Having just finished codecademy and having dipped my feet in writing my own code with that knowledge, I found the very first problems of Project Euler to be incredibly overwhelming.<br><br>CodeAbbey looks like a great intermediary. Thanks!!</p>", 
                "question": "Start learning web-development right now with 5 basic exercises!"
            }, 
            "id": "co49k50"
        }, 
        {
            "body": {
                "answer": "<p>I actually saved that answer in my bookmarks as I found it so informative. Thanks for putting the time into this @boojit, great stuff!</p>", 
                "question": "If you were interested in the conversation about custom email addresses yesterday you might like this deeper view into how email works."
            }, 
            "id": "cwsctwk"
        }, 
        {
            "body": {
                "answer": "<p>Why not actually post it here rather than posting a link to it? <br><br>Cheers tho <colon>)</p>", 
                "question": "If you were interested in the conversation about custom email addresses yesterday you might like this deeper view into how email works."
            }, 
            "id": "cwsr4jb"
        }, 
        {
            "body": {
                "answer": "<p>Thank you for this.<br><br>I also made a comment stating that I was disappointed even the more <dq>in-depth<dq> answers were about <dq>how to setup email<dq> as opposed to the specifications of how email is engineered.<br><br>Just skimming through your post (it<sq>s a little heavy / new for me to read all at once), I<sq>m glad you cover those aspects more.</p>", 
                "question": "If you were interested in the conversation about custom email addresses yesterday you might like this deeper view into how email works."
            }, 
            "id": "cwsj7ds"
        }, 
        {
            "body": {
                "answer": "<p>All I know is that dovecot and Postfix are like 30 fucking components. My plan has always  been to have enough understanding to make it work, but don<sq>t peek under the hood too much. Because that way lies madness. </p>", 
                "question": "If you were interested in the conversation about custom email addresses yesterday you might like this deeper view into how email works."
            }, 
            "id": "cwtupu2"
        }, 
        {
            "body": {
                "answer": "<p>How many of these are *good* tutorials? So far I just tried a few that I felt I would actually learn something in (I tried Java, C#, Vim, and Clojure), and I don<sq>t feel very fulfilled by any of them. One of my main disappointments with this list are quite a few of them are made by the same person/people (all of the learn(shell|-c|python|javaonline|-js|-php|cs).org sites), and none of them are very complete are entirely accurate.<br><br>There was just a [topic here](http<colon>//www.reddit.com/r/learnprogramming/comments/1z756w/c_has_anyone_used_learncorg_is_it_a_good_way_to/) about [learn-c.org](http<colon>//learn-c.org), and I would say the same goes for all of the language lessons that goes for C that /u/missblit pointed out. The C# and Java lessons were just not quite helpful for me, not that I don<sq>t understand the content, but that there was so much that wasn<sq>t explained - too much <dq>skeleton code<dq> given with no explanation. The design of those sites make me almost uncomfortable, as well. It<sq>s just not enough room for the code or the information, and there is too much provided code with not enough information.<br><br>The Clojure tutorial ([tryclj.com](http<colon>//tryclj.com)) was a bit better, but I didn<sq>t learn anything. It was very short, I didn<sq>t have to do any reading (and I have never actually used Clojure), and I got through it all in maybe two minutes. I know I could<sq>ve read what was going on (and I did a little, regarding `defn`/`fn`/`def`, which was neat), but why should I when I really just have to pay attention to the boxed text and simply type that out exactly? I didn<sq>t try the other Clojure tutorials, but it seems like a concern that one of the suggested tutorials didn<sq>t teach me anything about actual functional programming practices vs imperative or what Clojure is particularly good at or why I care about Clojure or really anything about Clojure. I don<sq>t know, maybe I<sq>m just bitter.<br><br>And finally the Vim tutorial was alright. I<sq>m not an expert in Vim, but I feel comfortable enough with it to use it in a non-graphical environment for basic word editing, programming, and the like. It did show me quite a few relevant commands, and I liked it at first, but, again, I didn<sq>t really need to learn anything. A flashing button told me what key to press and when, and I could<sq>ve gotten through it in a couple minutes if I didn<sq>t let it type out all of the instructions. Again, it has boxed letters/commands that tell me exactly what to do, so I really didn<sq>t need to understand any of it. One common gripe with Vim, I believe - I may be wrong, is that the commands can be so confusing and forgettable, and the tutorial didn<sq>t repeat hardly anything, so anything I learned will surely be gone in the next few minutes. It seems promising, and with some work it could definitely be a useful tool to practice commands and learn to be a real Vim power user, but definitely not today.<br><br>I love the idea of interactive and video tutorials, because I know how dry and boring a lot of text-only tutorials can be, and how easily you can be distracted while you<sq>re already online, but that doesn<sq>t mean interactive or video tutorials are inherently better. In fact, I think they<sq>re much harder to get right. One major flaw with almost every online tutorial (text-only, interactive, video, combination, whatever) is that they<sq>re ***far*** too short. Creators and readers alike have to realize that for some of these topics there are thousands (if not tens of thousands) of books written on certain subjects. I mean even Vim alone has [plenty of books](https<colon>//www.google.com/search?q=vim+book&tbm=shop) written on it. A dangerous thing can happen with these tutorials (of any kind) where they only take a little bit to finish, and the reader expects to be an expert at that point. There are some series of video tutorials on languages or tools that have hundreds of hours of content, which is great (if it<sq>s *good*, valid, well-taught content, and most video tutorials honestly don<sq>t have high quality content), but even if you watch hundreds of hours of videos, that doesn<sq>t make you an expert. Video tutorials have a hard time of teaching how to take the information viewed and run with it. It takes [years](http<colon>//norvig.com/21-days.html) to really learn anything, and programming is no different.<br><br>I believe (and I agree) that that is why so many people recommend books for learning instead of these interactive or video tutorials. Books are typically much higher quality because they<sq>re written by well-establish authors who have excellent credentials, and the books are reviewed by other experts. I can make video tutorials on Clojure if I want and make it seem like an excellent tutorial, even though I have no idea how to write effective Clojure. The problem is that there<sq>s no way for a beginner to tell what good or bad Clojure (or any language) is, because they<sq>re a beginner, whereas I can usually spot bad code and ignore the information, as I am not a beginner.<br><br>So my point is this; I appreciate the effort you (I assume you run the site, OP) put in to collect all these resources, but I worry this may not be helpful to those who come here looking for information. I, again, didn<sq>t get the chance to look through every tutorial, but for the ones I tried, they were definitely less than ideal for beginners. I think a better and more useful approach would be to do this with books (the list of books provided by the wiki for this subreddit is really disappointing, honestly) first, and then try to figure out how to translate that teaching style to video or interactive formats with people who are well-versed in the topic, and have them up reviewed and critiqued by qualified people. Obviously that is a bit of an extreme request, sadly, but I think that until that happens, I would recommend people staying skeptical of all of these video and interactive tutorials.<br><br>tl;dr, I don<sq>t trust most video/interactive tutorials, and neither should you.</p>", 
                "question": "Like learning new things? Here<sq>s a library of free online interactive programming language tutorials!"
            }, 
            "id": "cfrdphw"
        }, 
        {
            "body": {
                "answer": "<p>Thanks<br></p>", 
                "question": "Like learning new things? Here<sq>s a library of free online interactive programming language tutorials!"
            }, 
            "id": "cfrilua"
        }, 
        {
            "body": {
                "answer": "<p>Thanks!</p>", 
                "question": "Like learning new things? Here<sq>s a library of free online interactive programming language tutorials!"
            }, 
            "id": "cfro19q"
        }, 
        {
            "body": {
                "answer": "<p>Is Ruby on top because it is the most relevant? </p>", 
                "question": "Like learning new things? Here<sq>s a library of free online interactive programming language tutorials!"
            }, 
            "id": "cfrnznw"
        }, 
        {
            "body": {
                "answer": "<p>Hey guys, CS50 teaching fellow here.  If you have any questions feel free to ask.<br><br>EDIT<colon> Turns out we actually have over 900 students in class in person this semester!</p>", 
                "question": "Free CS Courses from a Harvard Lecturer"
            }, 
            "id": "c69z0uz"
        }, 
        {
            "body": {
                "answer": "<p>I have to admit, even though I<sq>ve been programming for over 4 years and am in the final year of my CS course (here in Ireland) I found these lectures very helpful and thoroughly enjoyable!</p>", 
                "question": "Free CS Courses from a Harvard Lecturer"
            }, 
            "id": "c69zb2d"
        }, 
        {
            "body": {
                "answer": "<p>Just wanted to thank you for posting this, yesterday I [uninstalled every single game](http<colon>//www.reddit.com/r/gaming/comments/101kq2/so_this_was_a_pretty_hard_decision_but_i_think/) from my pc in the hope of becoming more productive in my spare time. <br><br>As an aspiring programmer, something like this is exactly what I was looking for to do with my spare time, thank you!</p>", 
                "question": "Free CS Courses from a Harvard Lecturer"
            }, 
            "id": "c69y4oq"
        }, 
        {
            "body": {
                "answer": "<p>David Malan is wondrous. </p>", 
                "question": "Free CS Courses from a Harvard Lecturer"
            }, 
            "id": "c69zfij"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d recommend <dq>Excel 2010<colon>power programming with VBA<dq> (or a more recent addition). I used it to teach myself VBA and automate a good chunk of my job.    <br><br><br>This site has a pile of good resources<colon> <br>http<colon>//www.mrexcel.com/forum/excel-questions/509144-best-visual-basic-applications-book-teach-yourself-visual-basic-applications.html   <br><br>Stack overflow and the <dq>Mr. Excel<dq> sites are pretty good resources as well (Though SO can sometimes have a get bent, noob<dq> attitude).    <br><br>Last but not least, the Macro recorder is a great tool to learn from. Want to do something in VBA? Record yourself doing it and then look at code the recorder spits out!</p>", 
                "question": "I want to learn VBA to make my excel files more effecient at work. What<sq>s the best resource?"
            }, 
            "id": "d1yhhmb"
        }, 
        {
            "body": {
                "answer": "<p>Be careful, VBA in excel is the gateway drug into full on programming <colon>)</p>", 
                "question": "I want to learn VBA to make my excel files more effecient at work. What<sq>s the best resource?"
            }, 
            "id": "d1ymf05"
        }, 
        {
            "body": {
                "answer": "<p>Just  +1 to the macro recorder.  And the add developer toolbar. So with the recorder, just start by recording small but repetative tasks (where the number of actions per task is small).  This way it is easy to understand what the recorder has recorded.  Learn how to take the macro code and put inside a user form Button<sq>s click event (you<sq>ll need the developer toolbar for this).  Once you<sq>ve done that, play around with some simple userforms<br><br>I used VBA to automate my files and then made the jump to actual programming.  By using the fruit of your own labor (<dq>dogfooding<dq>) you<sq>ll find out quickly what works, what doesn<sq>t</p>", 
                "question": "I want to learn VBA to make my excel files more effecient at work. What<sq>s the best resource?"
            }, 
            "id": "d1yjzx3"
        }, 
        {
            "body": {
                "answer": "<p>I guess this is a sign that I am old school IT *prepares to shake cane*, but I always thought of VBA as some sort of witchcraft. Not like neat witchcraft that you could do magic with either, more like the you need to be burned at the stake kind. *shrug*</p>", 
                "question": "I want to learn VBA to make my excel files more effecient at work. What<sq>s the best resource?"
            }, 
            "id": "d1yxuxi"
        }, 
        {
            "body": {
                "answer": "<p>man o man, thanks for this, I<sq>m really interested <colon>)</p>", 
                "question": "Just released a draft of my free book for those interested in learning (or teaching) basic game development with HTML5/Phaser"
            }, 
            "id": "cilplqa"
        }, 
        {
            "body": {
                "answer": "<p>Buying.</p>", 
                "question": "Just released a draft of my free book for those interested in learning (or teaching) basic game development with HTML5/Phaser"
            }, 
            "id": "cilpx0k"
        }, 
        {
            "body": {
                "answer": "<p>Bought it for $5! Sorry I<sq>m a poor student.</p>", 
                "question": "Just released a draft of my free book for those interested in learning (or teaching) basic game development with HTML5/Phaser"
            }, 
            "id": "cim2sil"
        }, 
        {
            "body": {
                "answer": "<p>RemindMe! 36 hours</p>", 
                "question": "Just released a draft of my free book for those interested in learning (or teaching) basic game development with HTML5/Phaser"
            }, 
            "id": "cim59vh"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s not the *only* way. You need a mixture of both.</p>", 
                "question": "Today I learned that the only way you can learn programming or web development is by doing and not reading"
            }, 
            "id": "cgjgv9g"
        }, 
        {
            "body": {
                "answer": "<p>You can<sq>t learn just by reading - and nobody is going to suggest that you can. <br><br>You can<sq>t expand your knowledge by just doing either. You need some sort of input into defining and expanding the problem space as you know it. <br><br></p>", 
                "question": "Today I learned that the only way you can learn programming or web development is by doing and not reading"
            }, 
            "id": "cgji048"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s the same for everything, your parents could sit there and tell you how to walk for centuries, but when you actually walk it will be entirely different.<br><br>The only way to do anything, is to start doing it.</p>", 
                "question": "Today I learned that the only way you can learn programming or web development is by doing and not reading"
            }, 
            "id": "cgjgm4k"
        }, 
        {
            "body": {
                "answer": "<p>Today you learned a bad lesson. You go in blind when dealing with pointers or something like a huffman tree, and you are going to have a very miserable time.</p>", 
                "question": "Today I learned that the only way you can learn programming or web development is by doing and not reading"
            }, 
            "id": "cgjt94j"
        }, 
        {
            "body": {
                "answer": "<p>OK it<sq>s a rant, but I<sq>ll answer anyway.<br><br>The use of foo and bar are as placeholders in examples where the actual values or names represented by them are irrelevant. The point is to a) avoid having to come up with names, b) make it clear that the names or values are irrelevant.<br><br>Like<colon> <dq>the average of foo and bar is (foo+bar)/2<dq>. This makes it clear that I<sq>m not talking about the average of any particular things, but the average of anything, and allows me to plow ahead without stopping to think about what would be good names for two things that are taken the average of.<br><br>They can also be used to name things that are extremely temporary and should be deleted on sight.<br></p>", 
                "question": "<dq>Foo<dq> <dq>Bar<dq> - Does this actually help anyone - Ever?"
            }, 
            "id": "clayhmv"
        }, 
        {
            "body": {
                "answer": "<p>Foo,  bar,  and *hello world* are the <dq>lorum ipsum<dq>  of code. </p>", 
                "question": "<dq>Foo<dq> <dq>Bar<dq> - Does this actually help anyone - Ever?"
            }, 
            "id": "claymfs"
        }, 
        {
            "body": {
                "answer": "<p>Should have.</p>", 
                "question": "<dq>Foo<dq> <dq>Bar<dq> - Does this actually help anyone - Ever?"
            }, 
            "id": "claz840"
        }, 
        {
            "body": {
                "answer": "<p>we all have our idiosyncrasies. but <br><br>A dev not liking foo and bar is like a designer thinking lorum ipsup is bad .</p>", 
                "question": "<dq>Foo<dq> <dq>Bar<dq> - Does this actually help anyone - Ever?"
            }, 
            "id": "clb33e2"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "It<sq>s 2014. Web programming still sucks. Why?"
            }, 
            "id": "cicfkp0"
        }, 
        {
            "body": {
                "answer": "<p>Because most of the <sq>web languages<sq> are unweildly, slow, hacky things that got to be the way they are now because it<sq>s how people used them, not because how they were designed.<br><br>However, people are too invested in the technology to change it, and all they bother doing making superficial improvements that don<sq>t really help anyone.</p>", 
                "question": "It<sq>s 2014. Web programming still sucks. Why?"
            }, 
            "id": "cicck4u"
        }, 
        {
            "body": {
                "answer": "<p>Sorry to bring that up, but java promised that two decades ago... Yeah, I know, we<sq>re not gonna get any younger... </p>", 
                "question": "It<sq>s 2014. Web programming still sucks. Why?"
            }, 
            "id": "cicce01"
        }, 
        {
            "body": {
                "answer": "<p>Sometimes I wish someone invented a new protocol and a new web format to ease making web pages. Things work, but they could definitely be better.</p>", 
                "question": "It<sq>s 2014. Web programming still sucks. Why?"
            }, 
            "id": "ciccnig"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "List of beginner programs that can be done in any language to help learn new languages?"
            }, 
            "id": "cgakdpc"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a few, off the top of my head.<br><br>basic concept + extra challenge<br>---------------------------------<br>* Tic-tac toe + computer opponent with different difficulty levels<br>* Hangman  + dictionary loaded from text file, different difficulty levels<br>* Calculator  + GUI<br><br><br>gotta run now, I<sq>ll see if I can add more later. Have fun!</p>", 
                "question": "List of beginner programs that can be done in any language to help learn new languages?"
            }, 
            "id": "cgaki8v"
        }, 
        {
            "body": {
                "answer": "<p>You might want to give [this](http<colon>//www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/) a try.</p>", 
                "question": "List of beginner programs that can be done in any language to help learn new languages?"
            }, 
            "id": "cgaoo13"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s one from [/g/.](http<colon>//i.imgur.com/i9Nv7uu.jpg)</p>", 
                "question": "List of beginner programs that can be done in any language to help learn new languages?"
            }, 
            "id": "cgayk9s"
        }, 
        {
            "body": {
                "answer": "<p>Hoping my story might fuel the fire of ambition to anyone who might read it.<br><br><br>I am a college dropout who went on to work in factories, and then worked their way up the retail ladder to become a store manager for a big-name retailer.  The daily stresses, the lack of peers, and the overall poor satisfaction led me to wonder what the rest of my life looked like.  I just turned 30 this year and also decided to make a career change. <br><br>After becoming friends with someone who was in software development, conversations tended to lead towards programming as I inquired about what it was like. This person then decided to be a bit of a mentor and helped me develop a bot that worked with a chat client via Python and flask.  I wrote my very first line of code June 28th with no prior experience or schooling whatsoever.  <br><br>Within a month, I had an interview at said person<sq>s company and am now being paid to continue my learning and eventually be an asset.  <br><br>I<sq>ve now gone from creating a small script to make a bot speak to writing a full-stack single-page application of my own from scratch using Express, Node, Angular, and PostgreSQL, while learning bits of CSS, HTML, and Bootstrap along the way.  <br><br>I did have the huge benefit of having someone to ask for direction and help.  That said, a drive and patience are the real keys to making this change.  I<sq>ve utilized everything suggested from every learning subreddit, to books, to e-learning, to youtube.  I won<sq>t lie<colon> it has been the biggest challenge of my life.  It feels like cramming for a final that never comes every single day.  But, to see my words on a screen come to life is one of the coolest feelings I<sq>ve ever experienced.   <br><br>All of the struggle is worth it!</p>", 
                "question": "Quitting my job to become a web developer at 29"
            }, 
            "id": "d84r3jw"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a 28 year old accountant and in the same line of thought. I just haven<sq>t made any moves toward a career change yet. I enjoyed your post. </p>", 
                "question": "Quitting my job to become a web developer at 29"
            }, 
            "id": "d84nbav"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m 28 and I<sq>m married with a child. I<sq>ll be moving my family and I into my mother<sq>s house because I haven<sq>t been able to find work where I<sq>m at. I<sq>m on food stamps and unemployment. I applied everywhere I could but got nothing.<br><br>I never took college seriously so I don<sq>t have a degree. I<sq>m largely self taught when it comes to programming. This is a euphemism for being completely unmarketable which is entirely my fault.<br><br>No degree. No portfolio. No linkedIn. No github. No money. No guidance.<br><br>That doesn<sq>t mean I<sq>ve quit. I can code in C, Java, Python, and Javascript. My goals are to eventually pick up Haskell, Rust, and C++.<br><br>I have a friend that is going to help me get a job at the software company he works at. Previously I worked doing configuration management (JIRA grunt work) for one of the world<sq>s largest telecom companies. I proved I could code by writing a fibonacci function in python on a whiteboard. I explained why using memoization is more efficient than just pure recursion. I even got fancy and drew the recursion tree! They hired me on the spot so I<sq>m not completely incompetent.<br><br>Once I<sq>m settled in my mom<sq>s house I<sq>ll be attending a seminar on embedded software engineering. I absolutely HATE web development.<br><br>As of now I<sq>m writing Conway<sq>s Game of Life in nothing but pure C. This, I believe, will suffice to prove I can code because doing things in C is considered to be <dq>the hard way<dq>. I also don<sq>t have the time to make some huge impressive project.<br><br>The only thing I<sq>m thinking of is where to draw to. Terminal? GTK window? Maybe wxwindows?<br><br>Tips are greatly appreciated.<br><br>To the discouraged coder<colon> not everyone that applies for a job is an ace coder. I<sq>ve dealt with tons of incompetent HR people and recruiters. I<sq>ve been given the run around more times than I like to admit. <br><br>Never give up. <br><br>The person that gets the job isn<sq>t the most qualified but rather the one that talks the talk. If you manage to squeeze into any organization don<sq>t be afraid to ask questions. On the job training is the fastest way to learn how to code. If you<sq>re like me and don<sq>t have a degree you can worry about that once you<sq>ve got bills paid.<br><br>Life will never stomp trying to take you down and feed you lemons. Grab life, squeeze lemon juice in her eye, and make her your bitch. Otherwise the opposite will happen.<br><br>Also take care of your body. Diet and exercise are important.</p>", 
                "question": "Quitting my job to become a web developer at 29"
            }, 
            "id": "d84u3s9"
        }, 
        {
            "body": {
                "answer": "<p>First of all - congrats on making the decision. <br><br>I<sq>m in a similar boat as you - just started a bootcamp last week. <br><br>This is harder than you think it will be!!! Even when accounting for knowing that it will be hard. <br><br>Read through Eloquent Javascript and do all the problems without looking at answers in the book. <br><br>Seek out problems that you don<sq>t readily have the answer to. That<sq>s the biggest drawback of online tutorials and lessons. You get something wrong and then it is explained or answered for you right away. You see the answer and think <dq>oh, I knew that.<dq> <br><br>Maybe you did, but you need to learn to solve problems with that knowledge, not just recognize something that is correct. <br><br>If you have family members who are programmers ask them to give you problems. <br><br>Learn to pseudocode!<br>It will help break your programming tasks down into smaller chunks so you don<sq>t panic when you have a huge task ahead of you. <br><br>Good luck!<br><br></p>", 
                "question": "Quitting my job to become a web developer at 29"
            }, 
            "id": "d84zwdd"
        }, 
        {
            "body": {
                "answer": "<p>Unless you are planning to work with pdf<sq>s where you know the formatting isn<sq>t changing much doing it for every possible formatting of a document will get complicated very fast. <br><br>Look for code on Github that do pdf2word or on the openoffice forums. </p>", 
                "question": "I<sq>ve made a program that takes an image/pdf file extracts the text and writes it to a Word document but I<sq>m wondering how I can get it to maintain formatting"
            }, 
            "id": "d5vr9og"
        }, 
        {
            "body": {
                "answer": "<p>Hi. I<sq>ve done about 5 minutes of investigation here, but I think I can put you on some kind of path of... discovery.<br><br>Basically, all documents have to have some sort of markup to retain their formatting, right? Word documents aren<sq>t any different. I<sq>ve discovered that if you change the extension of a word document to .zip, you can unpack it and it should have a word folder with a document.xml inside it (in amongst a whole bunch of other xml files that help create the final document).<br><br>So, your document would need that markup to tell word where to put the indents, bold, italics, font type etc. So, you<sq>d need to know the xml schema to know how to write it and make a document. <br><br>So... that<sq>s where I<sq>m going to stop, but hopefully this has fleshed out your understanding of what a word document is and what<sq>s necessary to generate one. Hopefully there<sq>s an api out there to assist with getting this figured out.<br><br>Maybe try converting the extracted text to a rich text file and then changing the extension to .docx? Not sure what your workflow is either, so i<sq>m not sure why you need it to be a word document.</p>", 
                "question": "I<sq>ve made a program that takes an image/pdf file extracts the text and writes it to a Word document but I<sq>m wondering how I can get it to maintain formatting"
            }, 
            "id": "d5vtqrq"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t really help, but the reason <dq>file<dq> becomes <dq>?le<dq> is that the f and i are represented as a ligature in your text https<colon>//en.wikipedia.org/wiki/Typographic_ligature</p>", 
                "question": "I<sq>ve made a program that takes an image/pdf file extracts the text and writes it to a Word document but I<sq>m wondering how I can get it to maintain formatting"
            }, 
            "id": "d5w0n8c"
        }, 
        {
            "body": {
                "answer": "<p>Can I ask why you<sq>re using Apache POI?<br><br>Looking at its site, it only barely supports Word, and even then mostly for pulling text out.<br><br>This link suggests a number of better alternatives, including docx4j, java2doc, and an OpenOffice library<colon> http<colon>//stackoverflow.com/questions/203174/whats-a-good-java-api-for-creating-word-documents<br><br>And that<sq>s pretty old so there may be better ones now.<br><br>You might also be able to write word-compatible xml manually on your own and either be content with that or use a converter on the back-end to change it to a proper word format if it isn<sq>t already.<br><br>Another option is to write to a new PDF with text objects (or even to HTML or something) using a superior library, and then to again use a back-end converter to gracefully shift that new unpacked output format into Word when it would fail on the original non-OCR<sq>ed stuff.<br><br>Basically, I don<sq>t think you can easily solve this using Apache POI, but you can swap out that problem for a different problem that you *can* solve with the right libraries and/or tools.</p>", 
                "question": "I<sq>ve made a program that takes an image/pdf file extracts the text and writes it to a Word document but I<sq>m wondering how I can get it to maintain formatting"
            }, 
            "id": "d5vvqm6"
        }, 
        {
            "body": {
                "answer": "<p>Comments should never explain <dq>what is done<dq>, but always <dq>why something is done in a certain way<dq>.<br><br>A typical, completely useless comment would be<colon><br><br>    int i = 5;  // set i to 5<br><br>A programmer instantly sees that the variable `i` is set to `5`, so the comment is unnecessary and only adds visual clutter.<br><br>The above is a typical beginner<sq>s comment (and one, unfortunately, that the educational system likes to see, even though it is completely wrong).<br><br>Comments should only be used to *explain reasons*, the actual code should be written in such a way that the *how* is easily understandable.<br><br>Comments should be used like spices - in moderation. While unit/method/variable header comments are perfectly appropriate and encouraged (Java uses Javadoc comments to produce documentation), inline comments should only be used when really necessary.<br><br>> He says to redesign the code so that the intention is obvious, but how do you do that? How do you know if you<sq>re doing it correctly?<br><br>This is fairly easy to explain<colon><br><br>+ use clear naming of methods and variables. The names of methods and variables should directly convey their purpose. - Unless as loop indexes, variable names like `i`, `j`, `r`, `a` are not useful because you cannot derive their purpose. <br><br>    If you are working with a coordinate system, it is, of course, perfectly fine to use `x` and `y` as variables for the coordinates - again, if their purpose is identifiable from context.<br><br>    If you are working with a matrix, grid, or table, use `row` and `col` (or `column`) as variables so that the reader instantly understands what goes where.<br><br>+ Avoid numeric literals that have a meaning - these are often called <dq>Magic Numbers<dq> and should be replaced by *constants*<br><br>    Typical example<colon> `degC = (degF - 32) * (5/9);`<br><br>    Do you directly understand what I<sq>m doing here?<br><br>     The `32` and the `5/9` are numbers with a special meaning - they  are conversion factors. It would be better to declare such factors as *constants*<colon><br><br>    `static final double offsetFahrenheit = 32.0;`<br> <br>    `static final double factorFahrenheitToCelsius = 5.0/9.0;`<br><br>    `degC = (degF - offsetFahrenheit) * factorFahrenheitToCelsius;`<br><br>    The latter is easier understandable.<br>+ Use proper method (function) naming - a method(function) name ususally consists of <verb><noun> combinations<colon> `convertFToC` is clearer than `F2C`, `fetchSingleRecord` is better than `fetchFromDatabase` - even though the latter uses the normal naming convention, it doesn<sq>t tell us the actual intention.<br>+ Follow the [*SOLID*](https<colon>//en.wikipedia.org/wiki/SOLID_<percent>28object-oriented_design<percent>29) design principle - especially the [*Single Responsibility Principle*](https<colon>//en.wikipedia.org/wiki/Single_responsibility_principle) - each class/method (function) should have only a single responsibility/perform only a single task.<br><br>    A potentially bad design decision is `createAndDisplayRecord` a method that creates a new record and displays it afterwards, thus performing two tasks in one method. While it may be convenient to have such a method, it reduces the *modularity* of the code. What if you want to only *add* a record without displaying it? What if you only want to *display* an existing record? In both cases, you would need to add additional methods that replicate a part of the `createAndDisplayRecord` code. In this case, it is best to define individual methods for adding and displaying and then (if *really* necessary) combine both method calls in a single method to create and display a record.<br><br>----<br><br>Keep in mind that *good code* is *readable code*. You should always program in such a way that an outsider would be able to read and understand your code without you being around.<br><br>Keep asking yourself the question<colon> <dq>Would somebody who has no clue what I am programming understand my code without my help?<dq> <br><br>Try to program in such a way that the answer to above question is and stays <dq>yes<dq> - then you have reached your goal.</p>", 
                "question": "What does good commenting look like?"
            }, 
            "id": "d4ig7pz"
        }, 
        {
            "body": {
                "answer": "<p>A good book for you would be [clean code](https<colon>//www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). I<sq>m only part way into it, but it<sq>s a really good resource for learning better code practices. You won<sq>t find much commenting in there, however, as their philosophy is that you shouldn<sq>t need comments if you do it right. It might be a good place to start if you<sq>re willing to look for good commenting practices elsewhere</p>", 
                "question": "What does good commenting look like?"
            }, 
            "id": "d4if69a"
        }, 
        {
            "body": {
                "answer": "<p>Mostly mention the <dq>why<sq>s<dq> and sometimes the <dq>how<sq>s<dq>.  For most functions, a programmer can read them and understand what they do, but they perhaps don<sq>t know what assumptions you have made for those functions, or even why they exist in the first place<colon> make sure that there is no part of the program that someone might wonder <dq>why is this even needed?<dq><br><br>As for <dq>how<sq>s<dq>, that<sq>s when you do something tricky in your implementation that is not immediately clear.  For example, you could mention that you<sq>re implementing algorithm XYZ from http<colon>//where-you-found-it.com and the general idea is to blah blah or that on Ubuntu 16.04 there is this bug and that you are working around it.  For most functions, this isn<sq>t really needed, but some parts of a program should probably give more information on how things work.</p>", 
                "question": "What does good commenting look like?"
            }, 
            "id": "d4ige64"
        }, 
        {
            "body": {
                "answer": "<p>Where I work they actually discourage comments. This is only because they believe your code should be written in clearest and simplest way possible. I wasn<sq>t sure about it because we had used comments at the last place I worked but now I see that it actually makes sense and helps to to write cleaner, simpler, more maintainable code. Not necessarily the right way, but it is some people<sq>s perspective on comments.</p>", 
                "question": "What does good commenting look like?"
            }, 
            "id": "d4ivlef"
        }, 
        {
            "body": {
                "answer": "<p>This comment has been overwritten by an open source script to protect this user&apos;s privacy.  It was created to help protect users from doxing, stalking, harassment, and profiling for the purposes of censorship. <br><br>   If you would also like to protect yourself, add the Chrome extension [TamperMonkey](https<colon>//chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https<colon>//addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and add [this open source script](https<colon>//greasyfork.org/en/scripts/10380-reddit-overwrite).   <br><br> Then simply click on your username on Reddit, go to the comments tab, scroll down as far as possible (hint<colon>use [RES](http<colon>//www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.</p>", 
                "question": "Wrote a small program to control Spotify client from the terminal (OSX Python3). Code/Design critiques are welcome!"
            }, 
            "id": "ctk6699"
        }, 
        {
            "body": {
                "answer": "<p>This is gonna be so neat using ssh, will have to check it out soon.</p>", 
                "question": "Wrote a small program to control Spotify client from the terminal (OSX Python3). Code/Design critiques are welcome!"
            }, 
            "id": "ctk3yq0"
        }, 
        {
            "body": {
                "answer": "<p>It probably already works better than their application.</p>", 
                "question": "Wrote a small program to control Spotify client from the terminal (OSX Python3). Code/Design critiques are welcome!"
            }, 
            "id": "ctk8spi"
        }, 
        {
            "body": {
                "answer": "<p>hi, maybe you can improve the country selection stage <colon>) some autocomplete or something... dude great job!</p>", 
                "question": "Wrote a small program to control Spotify client from the terminal (OSX Python3). Code/Design critiques are welcome!"
            }, 
            "id": "ctk8mxw"
        }, 
        {
            "body": {
                "answer": "<p>><colon> You need a project your passionate about that solves your own problems. Mine is a mobile application that syncs with a desktop application. <br><br>This is where I have fallen down so far!<br><br>I<sq>m the sort of person who likes to have something material that I<sq>m working towards, where I can see my progress... But I completely lack creativity! </p>", 
                "question": "I built and released my first app today! Here are some recommendations from what I<sq>ve learned along the way."
            }, 
            "id": "dcopmuo"
        }, 
        {
            "body": {
                "answer": "<p>Damn you got the app for both App Store and Android. I just launched the 2nd version of my first app this week too, Snap Scramble, and all my friends are mad at me for not launching on Android. God damn it. Congrats on the small win my friend.</p>", 
                "question": "I built and released my first app today! Here are some recommendations from what I<sq>ve learned along the way."
            }, 
            "id": "dcom47v"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve always been really skeptical for paying for online courses because there<sq>s always so many free ones available.. do you think it<sq>s worth the money? Or am I better off looking at the free ones. </p>", 
                "question": "I built and released my first app today! Here are some recommendations from what I<sq>ve learned along the way."
            }, 
            "id": "dcopxlx"
        }, 
        {
            "body": {
                "answer": "<p>Great idea, I think lots of people could find it a handy app. Where are you getting the video content, are you making it yourself?</p>", 
                "question": "I built and released my first app today! Here are some recommendations from what I<sq>ve learned along the way."
            }, 
            "id": "dcotlu4"
        }, 
        {
            "body": {
                "answer": "<p>Hey Kazakhstan. How<sq>s it going?</p>", 
                "question": "Have you ever wondered what the geographical representation of /r/learnprogramming was? Well I have some data for you."
            }, 
            "id": "da8aadu"
        }, 
        {
            "body": {
                "answer": "<p>Can you normalize this based on the regular traffic reddit gets from around the world? Reddit is primarily visited by the US, so I<sq>d be interested to see the relative interest by country as compared to regular site traffic. </p>", 
                "question": "Have you ever wondered what the geographical representation of /r/learnprogramming was? Well I have some data for you."
            }, 
            "id": "da8cvqq"
        }, 
        {
            "body": {
                "answer": "<p>I love the <br>>TODO supply a title</p>", 
                "question": "Have you ever wondered what the geographical representation of /r/learnprogramming was? Well I have some data for you."
            }, 
            "id": "da8i3g3"
        }, 
        {
            "body": {
                "answer": "<p>\ud83c\udd92</p>", 
                "question": "Have you ever wondered what the geographical representation of /r/learnprogramming was? Well I have some data for you."
            }, 
            "id": "da88xoa"
        }, 
        {
            "body": {
                "answer": "<p>It comes from the latin word argumentum, which has various meanings. <br>In english <dq>argument<dq> usually means quarrel, but in italian <dq>argomento<dq> is used more as topic, subject, object or matter.<br><br>I guess the first time it was used in old mathematical texts written in latin as <dq>argumentum functionis<dq>, argument of a function, object of the function, the thing on which the function does its magic. <br>Then from mathematics it just became used in programming too.</p>", 
                "question": "ELI5<colon> Why is it called an <dq>argument<dq> when you put something in parentheses?"
            }, 
            "id": "cx7yrse"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s not when you put it in parentheses, it<sq>s when you pass it as a parameter to a method or function.<br><br>This can be written with parentheses, but it isn<sq>t always (depending on the programming language), and you<sq>ll often find something in parentheses, which isn<sq>t an argument.<br><br>That it<sq>s called <dq>argument<dq> (or <dq>parameter<dq>) is just vocabulary...</p>", 
                "question": "ELI5<colon> Why is it called an <dq>argument<dq> when you put something in parentheses?"
            }, 
            "id": "cx7y6sw"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//etymonline.com/index.php?term=argument&allowed_in_frame=0<br><br>https<colon>//en.wikipedia.org/wiki/Function_(mathematics)<br><br>https<colon>//en.wikipedia.org/wiki/Argument<br><br>Programming is based on math and logic, and that<sq>s where you get the term <dq>argument.<dq> Arguments are verbal combinations of evidence and claim, or premises and conclusion. When you put a value into a function, you<sq>re completing the <dq>argument.<dq> <br><br>EDIT<colon><br><br>This discussion made me want to know when exactly this semantic shift occurred. It wasn<sq>t all that hard to find. It was [Gottlob Frege](https<colon>//en.wikipedia.org/wiki/History_of_the_function_concept#Frege.27s_Begriffsschrift_1879)<colon><br><br>> At the outset Frege abandons the traditional <dq>concepts subject and predicate<dq>, replacing them with argument and function respectively, which he believes <dq>will stand the test of time. It is easy to see how regarding a content as a function of an argument leads to the formation of concepts.</p>", 
                "question": "ELI5<colon> Why is it called an <dq>argument<dq> when you put something in parentheses?"
            }, 
            "id": "cx7yuc7"
        }, 
        {
            "body": {
                "answer": "<p>The name that is given to things does not always take on any rhyme or reason. But in all cases the name that is finally agreed upon must be something that is universally accepted.<br></p>", 
                "question": "ELI5<colon> Why is it called an <dq>argument<dq> when you put something in parentheses?"
            }, 
            "id": "cx7y4oh"
        }, 
        {
            "body": {
                "answer": "<p>> that is very tough to decipher in some spots.]<br><br>> ...which has resulted in some incredibly tough to decipher code <br><br>I think you<sq>ve answered your own question there.<br><br>In general short concise code in large code bases and maintainability over *years* don<sq>t go together well.</p>", 
                "question": "What makes Perl so bad? What caused it to lose so many users to Python?"
            }, 
            "id": "cvcgjil"
        }, 
        {
            "body": {
                "answer": "<p>I asked a similar question a while back and got [this as an answer](http<colon>//scott.yang.id.au/2003/08/python-vs-perl-according-to-yoda.html).</p>", 
                "question": "What makes Perl so bad? What caused it to lose so many users to Python?"
            }, 
            "id": "cvci28c"
        }, 
        {
            "body": {
                "answer": "<p>These days, I use python and don<sq>t look back. I was a professional perl hacker for a few years, and you could not pay me to touch it these days.<br><br>But to be fair, the problem is not so much the language as the community. When TMTOWTDI is one of your core tenets, then, well, like you say, people do it more than one way. Sometimes in the same *line*. The community had a tendency to glorify <dq>clever<dq> - one liners, cuteness at the cost of legibility. And the language did have a bit of a resemblance to line noise at the best of times.<br><br>But with good discipline (ie, read and apply Damian Conway<sq>s guides to readable perl) enforced across a project, you could certainly do some serious heavy lifting with perl.<br><br>The other thing that really killed perl, which is why some of us are passionate about new programmers learning python3, is that perl6 took 15 years. perl5 was always <dq>good enough<dq>, so people kept using it, and there was no incentive to move to perl6, so there was no incentive to finish perl6, and that becomes a feedback loop, which eventually sees people drift off. The community became disenchanted, people weren<sq>t sure if they should commit to 5 or move to 6, the whole thing was a mess.</p>", 
                "question": "What makes Perl so bad? What caused it to lose so many users to Python?"
            }, 
            "id": "cvcgxpb"
        }, 
        {
            "body": {
                "answer": "<p>Perl was always known as a Write Only Language.  Due to the way the shortcuts worked and the ability to do things in a variety of ways, readability suffered horribly.  <br><br>By contrast, you can actually read (and thus maintain) proper Python code.</p>", 
                "question": "What makes Perl so bad? What caused it to lose so many users to Python?"
            }, 
            "id": "cvcm1fq"
        }, 
        {
            "body": {
                "answer": "<p>Having fun isn<sq>t hard when you have a library card - Arthur Read</p>", 
                "question": "If you<sq>re a college student check with your library you may be able to get tons of programming books online."
            }, 
            "id": "crjyd0z"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re a high school student, sign up for Edmodo through your school <br>As part of the latest ConnectED initiative, all the O<sq>Reilly books will be free for you on Safari.  <br>https<colon>//schools.safaribooksonline.com/<br></p>", 
                "question": "If you<sq>re a college student check with your library you may be able to get tons of programming books online."
            }, 
            "id": "crjuxig"
        }, 
        {
            "body": {
                "answer": "<p>I love checking the programming/IT books in local libraries in my city, just to name a few available books<colon><br><br>Word 2007, Java 5, Excel 2005, RHEL 2.1..<br><br>You would assume I live in a small village in Estonia.. I live in Milan..<br><br>Anyway, I<sq>m not kidding, I love doing it because it<sq>s amusing seeing stuff so outdated still around.</p>", 
                "question": "If you<sq>re a college student check with your library you may be able to get tons of programming books online."
            }, 
            "id": "crk4wv1"
        }, 
        {
            "body": {
                "answer": "<p>The good thing about buying programming books is that you can find most of them for like $10-40 on amazon, so even if your school doesn<sq>t offer it, it<sq>s not such a big deal. </p>", 
                "question": "If you<sq>re a college student check with your library you may be able to get tons of programming books online."
            }, 
            "id": "crjtaub"
        }, 
        {
            "body": {
                "answer": "<p>It depends. Some languages were designed to be <dq>link-compatible<dq>, such as linking together C and C++. Such languages have some degree of compatibility at the binary level, known as the ABI. Some languages are too different to be link compatible, however. In such case, you can often embed one in the other via an adaptation layer of some kind. For example, you can load C into a JVM (Java) and call it via JNI.<br><br>Other times, the application actually consists of multiple programs which communicate with each other via files, shared memory, networking, etc.</p>", 
                "question": "How do some big programs use two or more languages?"
            }, 
            "id": "cqre2ol"
        }, 
        {
            "body": {
                "answer": "<p>To generalize.  Here<sq>s all that<sq>s needed<colon><br><br>1) Some sort of standard needs to be established.<br><br>2) Interface endpoints must agree on those standards.<br><br>3) The caller, receiver, transport mechanisms implement what<sq>s necessary to invoke, delegate, and receive calls or information sharing according to the standard.<br><br>---<br><br>Some examples<colon><br><br>1) File formats.  XML, JSON, YAML, or even JPG, PNG, BMP, etc.  Those all establish standards for information storage.  Others implement what<sq>s necessary to interface with these formats.<br><br>You might not think this applies, but in CS there<sq>s not much of a difference between code for data and execution.  After all, that data might be code!<br><br>2) Binary-level compatibility, generally called ABI (application binary interface).  http<colon>//en.wikipedia.org/wiki/Application_binary_interface<br><br>When functions, data structures, format, conventions, etc. of binary code (ex<colon> has direct ASM equivalents) adheres to a standard, then that code can invoked from an external source.<br><br>Because of how low-level this is, it can be a little difficult to digest.  There<sq>s a lot of considerations.  Just rest assured that your compiler, linker, assembler, operating system are doing what they need to ensure compatibility with code <colon>)<br><br>3) High-level message passing mechanism.  Let<sq>s assume A1 and B1 are running services.  A1 might send a message (HTTP, WebSocket, operating system-level, some other specification) that B1 is listening for (over a web address, or have a method callback that a framework or OS knows how to invoke).<br><br>Using network calls is likely the most compatible means.  It also scales somewhat and is super flexible as far as configuration and deployments is concerned.<br><br>Here, you don<sq>t have to worry about ANY low level details, really.  Network protocols and negotiation methods are already handled on a system level for you.  Of course, I<sq>m not saying no one writes raw network code any more.  Lots of people do!<br><br>4) Run-time evaluation of code.  You can include a compiler / interpreter with another program and provide a way to compile execute code <dq>on the fly<dq>.  This can be immensely powerful, also dangerous!  Modern JIT compilers are a good balance in safety, speed and power.<br><br>---<br><br>A somewhat more concrete example<colon><br><br>A1 is a file containing the following<colon><br><br>    BEGIN PROGRAM;<br>    FUNCTION LIST BEGIN;<br>        FUNCTION SAY_HELLO<colon><br>            PRINT <dq>HI<dq>;<br>        END FUNCTION;<br>        FUNCTION ADD_NUMBERS(a, b);<br>            PRINT a+b;<br>        END FUNCTION;<br>    FUNCTION LIST END;<br><br>B1 contains something that opens A1, looks for <dq>BEGIN PROGRAM;<dq>  It then looks for a <dq>FUNCTION LIST BEGIN;<dq>, and until it sees a <dq>FUNCTION LIST END;<dq> reads the contents of reach <dq>FUNCTION<dq> (including name, what code to execute) and caches that.<br><br>No matter the format, actual cross-language or application interfaces aren<sq>t too far from this.  They often just have different considerations and variable formats.  (Kind of a pain, but it makes sense because there<sq>s variable motives depending on intended usage.)</p>", 
                "question": "How do some big programs use two or more languages?"
            }, 
            "id": "cqreyvs"
        }, 
        {
            "body": {
                "answer": "<p>This depends on what the languages are. In terms of compiled languages these get translated or *compiled* into object files. These object files can then be linked using a linker into a single binary/executable. An object file is language agnostic, meaning that it really doesn<sq>t matter who or what made it.<br><br>So lets say I make a function in language X<colon><br><br>    func my_cool_function(a<colon> Int, b<colon> Int) -> Int {<br>        return a + b<br>    }<br><br>and I want to make use of it in a C program. What I would do is declare the function as an external dependancy in the code. For example<colon><br><br>    extern int my_cool_function(int a, int b);<br><br>The first thing you may notice is that I have translated the function definition into C from language X. This is so that the C compiler knows about the structure and how to call and handle that function. We can call it and use it as any other function in our C code.<br><br>Basically the extern is us making a promise to the compiler that we will make such a function available to the linker at a later point in time.<br><br>You can find a lot more information about this http<colon>//en.wikipedia.org/wiki/Linker_<percent>28computing<percent>29.</p>", 
                "question": "How do some big programs use two or more languages?"
            }, 
            "id": "cqrdxef"
        }, 
        {
            "body": {
                "answer": "<p>Our programs that incorporate 2 languages are probably not what you<sq>d think. <br><br>It<sq>s not that a SINGLE program uses 2 different languages.  Larger programs are often COMPOSED of multiple programs or scripts or software that may be coded in a different language.  <br><br>I<sq>ll give you an example.  <br><br>You might have a program that is written in C++.  It does a lot of data processing, background stuff, etc.  But the initial script or executable files (like MyAwesomeApp.exe) that starts this program also starts a SEPARATE web server program that runs on java.  The java based web server and C++ based program are both running side by side, perhaps talking to each other or doing things with the same data/files.  In a sense, they<sq>re a single <dq>program<dq> that is launched from the machine.  But in another sense, they are technically 2 separate programs running at the same time.  <colon>)</p>", 
                "question": "How do some big programs use two or more languages?"
            }, 
            "id": "cqrlqby"
        }, 
        {
            "body": {
                "answer": "<p>Open Course Ware (ocw) is great.<br>Another approach (that I use) is to look at the course webpages for a class at a University. Professors often post lecture slides, textbook pdfs, assignments, and exams as well as supplemental resources.<br>I think what you might be looking for are the degree required courses for a Computer Science major. <br>Here<sq>s a list of CIS courses required/provided at my University<colon> https<colon>//www.cs.uoregon.edu/Classes/ <br>If you follow the link for a course, often times you can find the website and materials.</p>", 
                "question": "Self taught programmer from a third-world country here. I<sq>m trying to fill the big gaps of my CS knowledge. Is there a way to see a detailed look of <dq>major courses<dq> in CS programs from a reputable university in the USA? I would like to find the materials and try to learn them by myself. Thanks."
            }, 
            "id": "cq9qspx"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d highly recommend the SICP in Python - CS61A course at Berkeley. They post all lecture materials, videos, etc and the course text is freely available (composingprograms.com by John DeNero).<br><br>John DeNero taught version here - http<colon>//www-inst.eecs.berkeley.edu/~cs61a/fa14/<br><br>Paul Hilfinger taught version here - http<colon>//www-inst.eecs.berkeley.edu/~cs61a/sp14/<br><br>It<sq>s an excellent and challenging course. I<sq>m a bit ambivalent about some other MOOCs. A lot of them are considerably dumbed down to appeal to the masses... very few stay true to their counterpart courses at the universities. That being said, there are some MOOCs that are supposed to be near identical to their university counterparts and those would also be great options.<br><br>I would also highly recommend the Algorithms I and II courses on Coursera by Robert Sedgewick and Kevin Wayne whenever they are offered. They are outstanding courses and probably one of my favorite set of MOOCs that I<sq>ve participated in.<br></p>", 
                "question": "Self taught programmer from a third-world country here. I<sq>m trying to fill the big gaps of my CS knowledge. Is there a way to see a detailed look of <dq>major courses<dq> in CS programs from a reputable university in the USA? I would like to find the materials and try to learn them by myself. Thanks."
            }, 
            "id": "cqa9cm2"
        }, 
        {
            "body": {
                "answer": "<p>this might come handy<colon><br><br>http<colon>//blog.agupieware.com/2014/05/online-learning-bachelors-level.html?m=1<br><br>https<colon>//www.google.com/about/careers/students/guide-to-technical-development.html</p>", 
                "question": "Self taught programmer from a third-world country here. I<sq>m trying to fill the big gaps of my CS knowledge. Is there a way to see a detailed look of <dq>major courses<dq> in CS programs from a reputable university in the USA? I would like to find the materials and try to learn them by myself. Thanks."
            }, 
            "id": "cq9xryh"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//imgur.com/gallery/DBNMTfZ<br><br>This is a great list to learn everything by yourself <colon>). </p>", 
                "question": "Self taught programmer from a third-world country here. I<sq>m trying to fill the big gaps of my CS knowledge. Is there a way to see a detailed look of <dq>major courses<dq> in CS programs from a reputable university in the USA? I would like to find the materials and try to learn them by myself. Thanks."
            }, 
            "id": "cqa2n4q"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s an excellent idea, definitely going to check it out.</p>", 
                "question": "Hey LearnProgramming /r/ProgrammingBuddies is a thing now"
            }, 
            "id": "cekzpvj"
        }, 
        {
            "body": {
                "answer": "<p>any plans for a more one way mentoring system?</p>", 
                "question": "Hey LearnProgramming /r/ProgrammingBuddies is a thing now"
            }, 
            "id": "cel54lr"
        }, 
        {
            "body": {
                "answer": "<p>Awesome idea. I saw somebody on here the other day looking for something like this and there was nowhere to point him too. Great idea for a sub, i feel like it will bring a lot of success. Subscribed & posted.</p>", 
                "question": "Hey LearnProgramming /r/ProgrammingBuddies is a thing now"
            }, 
            "id": "cel0k5p"
        }, 
        {
            "body": {
                "answer": "<p>This comment has been overwritten by an open source script to protect this user&apos;s privacy.  It was created to help protect users from doxing, stalking, and harassment. <br><br>   If you would also like to protect yourself, add the Chrome extension [TamperMonkey](https<colon>//chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo), or the Firefox extension [GreaseMonkey](https<colon>//addons.mozilla.org/en-us/firefox/addon/greasemonkey/) and add [this open source script](https<colon>//greasyfork.org/en/scripts/10380-reddit-overwrite).   <br><br> Then simply click on your username on Reddit, go to the comments tab, scroll down as far as possibe (hint<colon>use [RES](http<colon>//www.redditenhancementsuite.com/)), and hit the new OVERWRITE button at the top.</p>", 
                "question": "Hey LearnProgramming /r/ProgrammingBuddies is a thing now"
            }, 
            "id": "cel8ck7"
        }, 
        {
            "body": {
                "answer": "<p>Thank you so much for this! I<sq>ve signed up -- I<sq>ll be interested to see if I can understand it or not, I<sq>m pretty much as novice as they get. (I know a bit of CSS? Hahah.<br><br>Will this expire at any point? I mean I<sq>m signed up now, but if I can<sq>t get to it until 2014, will I be out of luck?</p>", 
                "question": "Udemy Course for Redditors- C# for Absolute Beginners. Free until X-mas"
            }, 
            "id": "ce4i9ly"
        }, 
        {
            "body": {
                "answer": "<p>So I am about half way done with the course after about an hour and a half. (I took System Programming with C in college last semester, so breezing through)<br><br>Got to say, this is very well done. Its at a perfect speed, and you explain everything perfect. What I really must say that stands out is your examples during <dq>Live Coding<dq> videos/lectures are very unique to what I<sq>ve seen on the internet personally. If you go to youtube, they are all the same examples and homework assignments, but the games/applications you show us is very cool and practical. <br><br>I am only half way through, but major props to this so far, I recommend anyone getting into programming even without knowing a single thing, this will help. Its honestly a whole college semester course that can be done in less than a week.</p>", 
                "question": "Udemy Course for Redditors- C# for Absolute Beginners. Free until X-mas"
            }, 
            "id": "ce4lvi3"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, I<sq>ve signed up and will be getting started this weekend. I<sq>m told I<sq>d better learn this before I start the languages components of my degree next year.</p>", 
                "question": "Udemy Course for Redditors- C# for Absolute Beginners. Free until X-mas"
            }, 
            "id": "ce4hkfw"
        }, 
        {
            "body": {
                "answer": "<p>Neat - I signed up.<br><br>Free is Free.</p>", 
                "question": "Udemy Course for Redditors- C# for Absolute Beginners. Free until X-mas"
            }, 
            "id": "ce4cbew"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve considered using the IBM Watson natural language processing(NLP) API on texts from my SO(Integration Telegram, I don<sq>t know if it<sq>s possible with Whatsapp) to find out if she<sq>s secretly angry(because what man can possibly predict it..).. I mean, you<sq>d definitely get the app, right? I<sq>d feed it with data from the past where I found out she was, indeed, angry afterwards, and times where she wasn<sq>t. <br><br>Trademark<colon> SheCrazy?<br><br>Edit<colon> ideas just come to me today. Imagine you get a text from your SO, and the app brings a pop-up<colon> <dq>Warning bro, shecrazy. 7/10 tread carefully, godspeed<dq><br><br>I want this!<br><br>Edit2<colon> I just want to mention that I came up with this before having my morning coffee.<br><br>Edit3<colon> I will tell my GF about this idea tonight, it was nice knowing you all, please carry the dream out<br><br></p>", 
                "question": "Programming to solve everyday challenges"
            }, 
            "id": "dfi8uqr"
        }, 
        {
            "body": {
                "answer": "<p>Well I don<sq>t know if this is exactly what you mean, but I use Python a lot to speed up or simplify rote or large tasks at (non-dev) work. I have a regular office job. <br><br>This includes things like renaming files/folders, reconnecting data layers to new data sources, using regex to find things faster, etc. <br><br>I<sq>m not a professional or a developer. </p>", 
                "question": "Programming to solve everyday challenges"
            }, 
            "id": "dfiax5t"
        }, 
        {
            "body": {
                "answer": "<p>I work as a support analyst in a large pharma company.  I am teaching myself C# so I can get out and follow that career path.  I<sq>m still a beginner, but I have made a small windows form which has several buttons for commonly used resolving agencies.  It basically sends the RA as a string to the clipboard so I can quickly assign remedy tickets.  Aside from that; for practice I made my wife a calculator for her business so she can calculate quarterly estimates taxes.  Simple stuff,  but it<sq>s given me hope as a beginner that I can actually do this.</p>", 
                "question": "Programming to solve everyday challenges"
            }, 
            "id": "dfib8da"
        }, 
        {
            "body": {
                "answer": "<p>Would writing bash scripts that use youtube-dl to snag new porn count?<br><br>Hypothetically, for science.</p>", 
                "question": "Programming to solve everyday challenges"
            }, 
            "id": "dfidowt"
        }, 
        {
            "body": {
                "answer": "<p>> But one thing that kept me going was instead of thinking of how I<sq>ll feel while doing it, think of how I<sq>ll feel when I<sq>m finished.       <br><br>I find the next bit even more satisfying.  That feeling when other people are using what you have created.</p>", 
                "question": "I<sq>ve learnt a lot from this sub over the last few years and now I have something to show for it!"
            }, 
            "id": "dc81tgb"
        }, 
        {
            "body": {
                "answer": "<p>Was this the only place you learned programing from???</p>", 
                "question": "I<sq>ve learnt a lot from this sub over the last few years and now I have something to show for it!"
            }, 
            "id": "dc855x7"
        }, 
        {
            "body": {
                "answer": "<p>You should make one of the likes of this one but instead of a ship, it should be a turd going down the intestines!</p>", 
                "question": "I<sq>ve learnt a lot from this sub over the last few years and now I have something to show for it!"
            }, 
            "id": "dc8hll2"
        }, 
        {
            "body": {
                "answer": "<p>Hey, since this is /r/learnprogramming you should post your learning process to get to where you are. Not trying to be a dick it would just add a lot to your post, especially for the people who would love to be in your shoes!</p>", 
                "question": "I<sq>ve learnt a lot from this sub over the last few years and now I have something to show for it!"
            }, 
            "id": "dc8rpq1"
        }, 
        {
            "body": {
                "answer": "<p>The first thing you need to do is *find out where the time is being spent*. You tried minify js, but if the size of the JavaScript is a non-issue then that<sq>s just wasted engineering effort. Perhaps the whole problem is the speed of the database backing the web-page. Perhaps the db queries you are making are not making good use of the db (I<sq>ve seen db queries that ask for all the rows and then do the filtering in memory. Databases are supposed to be good at that. Let the db engine do the heavy lifting).<br><br>Profile, profile, profile.</p>", 
                "question": "[new grad] My boss want me to make a web page faster what do I do?"
            }, 
            "id": "d9ij0q9"
        }, 
        {
            "body": {
                "answer": "<p>The number one rule of performance optimization is to measure first! Don<sq>t start making random changes until you know *why* it<sq>s so slow.<br><br>20+s is absurdly long, there are probably some really easy fixes.<br><br>If the issue is on the client side, like slow JavaScript, too many resources, too many network requests, or un-minified JavaScript, try the Google PageSpeed tools<colon> https<colon>//developers.google.com/speed/pagespeed/ - it will help you narrow down what will probably have the biggest impact.<br><br>Since you mentioned joins, my guess is that more of your problem is on the server side.<br><br>The first thing I<sq>d do is try fetching the web page from the command line, for example<colon><br><br>    time curl http<colon>//mywebsite.com/search?query<br><br>See how long it takes just to fetch the html. That takes the browser rendering out of the loop and tells you how long it<sq>s taking the server to respond and send the data.<br><br>If that<sq>s more than 1 second, you have problems on the server side. Next I<sq>d suggest measuring how long each individual step takes by adding logging to your server code. Add a log at the top of the HTTP GET handler and another one at the bottom, and then start logging at various points in the code.<br><br>Next, focus your energy on the slowest parts. Don<sq>t start optimizing something that<sq>s taking 300 ms when something else is taking 13s. Start with the slowest things and fix them one at a time.<br><br>When you find something that<sq>s slow - like a particular query - don<sq>t just see if you can optimize it using something like a secondary index, ask yourself if it needs to be computed at all.<br><br>Most importantly, measure after every change you make!<br><br>Using Redis or memcached or something like that might be helpful, but I wouldn<sq>t consider that until you<sq>ve exhausted all other possibilities.<br><br>DEFINITELY don<sq>t consider something like sharding the database until you<sq>ve exhausted other possibilities. If you have inherently complex queries and billions of rows, that might be warranted - but my strong suspicion is that there are much easier fixes to find first.<br></p>", 
                "question": "[new grad] My boss want me to make a web page faster what do I do?"
            }, 
            "id": "d9ijf86"
        }, 
        {
            "body": {
                "answer": "<p>try running the queries by themselves and see how long they take. if the query takes 10+ seconds to produce results then it doesn<sq>t really matter what you do with your client side configuration. </p>", 
                "question": "[new grad] My boss want me to make a web page faster what do I do?"
            }, 
            "id": "d9im6ih"
        }, 
        {
            "body": {
                "answer": "<p>I worked on a website not to long ago that took 9 minutes to load. The problem was the database call- it was looping a select query and built a temp table each time and had to aggregate 12 years worth of data.<br><br>With your problem, start with the database, run the query you<sq>re running and find ways to optimize it. And please, do not loop over a database call... It<sq>s the worst thing you could do.<br><br><br>Edit<colon> Run the query through a program meant to work with the database, not the application.</p>", 
                "question": "[new grad] My boss want me to make a web page faster what do I do?"
            }, 
            "id": "d9ipcn5"
        }, 
        {
            "body": {
                "answer": "<p>Since this inevitably comes up anytime someone talks about algorithms, especially ones you don<sq>t really code much in real world practice, the purpose of this series isn<sq>t to technically teach you bubble sort. The overarching theme and goal is to teach you to how to take a conceptual solution to a problem and to translate that solution into code.<br><br>Bubble sort is a great learning tool and starting place for doing this, so I started there, but truthfully you are unlikely to code bubble sort in real world practice. Very few people do.<br><br>Learning to take a conceptual solution and turn it into code is vital because many people finish a CS degree (or whatever other education) and while they may understand algorithms or other things about programming, they struggle with taking a whiteboard hand-wavy solution and translating it into code. <br><br>What makes this bad is that this is what real world jobs often are. Sure, you will do the normal CRUD stuff a lot, but the best jobs at places like Google and Facebook involve solving real, hard problems, and then coding those solutions.<br><br>That is why Google, Facebook, and all of the other top tech companies test your ability to implement algorithms during your interview. It isn<sq>t because they want to see if you remember some old algorithm you never use, but because they want to see if you can solve a problem and then translate it into code.<br><br>I hope this series helps all of you learn to do that.</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> Implementing Bubble Sort"
            }, 
            "id": "d92fv99"
        }, 
        {
            "body": {
                "answer": "<p>I will be in and out this evening, but I will try to answer any/all questions this weekend. I hope you enjoy the post!</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> Implementing Bubble Sort"
            }, 
            "id": "d92ec2k"
        }, 
        {
            "body": {
                "answer": "<p>Just booked booked marked this it looks like good content thanks !! </p>", 
                "question": "Let<sq>s Learn Algorithms<colon> Implementing Bubble Sort"
            }, 
            "id": "d92rdaf"
        }, 
        {
            "body": {
                "answer": "<p>Looks really clean and good, will read it later today.Thanks!</p>", 
                "question": "Let<sq>s Learn Algorithms<colon> Implementing Bubble Sort"
            }, 
            "id": "d93flso"
        }, 
        {
            "body": {
                "answer": "<p>How does everyone feel about Swift?</p>", 
                "question": "I created a study guide for people who want to get started learning how to program in Swift."
            }, 
            "id": "crkg49e"
        }, 
        {
            "body": {
                "answer": "<p>awesome, thanks john</p>", 
                "question": "I created a study guide for people who want to get started learning how to program in Swift."
            }, 
            "id": "crkl7dt"
        }, 
        {
            "body": {
                "answer": "<p>Thank You.</p>", 
                "question": "I created a study guide for people who want to get started learning how to program in Swift."
            }, 
            "id": "crkgobo"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for making this, but you might want to look it over again. There are a few typos. (<dq>building a bride<dq> instead of <dq>building a bridge<dq>)</p>", 
                "question": "I created a study guide for people who want to get started learning how to program in Swift."
            }, 
            "id": "crkxfel"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for doing it!! <colon>) It does sound like an awesome project. How will you be doing the analyzing? I<sq>m guessing you<sq>re using the Reddit API to gather the data itself.<br><br>I am doing something similar with Linux. Lots of people helped me out as well, so I try to come on here once in a while to help out someone else that<sq>s getting started with Linux. It<sq>s just not as fancy; mostly me just checking out /new once in a while and replying to posts.</p>", 
                "question": "I want to put back in what I got out of this sub...."
            }, 
            "id": "cmwgdhz"
        }, 
        {
            "body": {
                "answer": "<p>Although I do appreciate the sentiment I think it would be smarter to just <sq>do<sq> it and post when you have the results. We get people with the best intentions to do stuff like this pretty much every week and most of them you never hear from again. </p>", 
                "question": "I want to put back in what I got out of this sub...."
            }, 
            "id": "cmwh1tk"
        }, 
        {
            "body": {
                "answer": "<p>[10 tips to go from a beginner to an intermediate developer](http<colon>//www.techrepublic.com/blog/software-engineer/10-tips-to-go-from-a-beginner-to-an-intermediate-developer/#.). See point number 3. You seem to be embracing that sentiment quite well, so props! This sub *needs* a healthy supply of answerers to really flourish, so you have my thanks for your enthusiasm in contributing there.<br><br>Answering questions is why I visit this sub too. If you<sq>re interested in collecting third-party data as well, I<sq>d be happy to compile a list of links to some of the most meaningful discussions *I<sq>ve* been a part of here over the past year or so and send it your way, if that would help you in your endeavor. I love the idea of establishing a knowledgebase that<sq>s more comprehensive than the basic FAQ, and it would be my pleasure to contribute to that if I can in any way.</p>", 
                "question": "I want to put back in what I got out of this sub...."
            }, 
            "id": "cmwh63a"
        }, 
        {
            "body": {
                "answer": "<p>Mathematics is an important aspect of a Computer Science degree, but how does that requirement translate into the real world? Are you doing equations and whatnot on a regular basis? I ask because, quite frankly, I<sq>m not enjoying math at all. Maybe it<sq>s because I just don<sq>t understand the material, but I sometimes feel like everything is an uphill battle and I<sq>m questioning when I<sq>ll actually ever use anything that I<sq>m learning in the process of programming.</p>", 
                "question": "I want to put back in what I got out of this sub...."
            }, 
            "id": "cmwpdgt"
        }, 
        {
            "body": {
                "answer": "<p>Will probably get downvoted for this, but seems to me like there<sq>s not much substance to that article/blog post. I certainly don<sq>t see why it should be in the FAQ. Most people aren<sq>t coming here asking <dq>is programming hard?<dq> or <dq>on a scale of 1 to 10, how much is programming like being a wizard?<dq>.</p>", 
                "question": "What I Tell All New Programmers (found on /r/programming)"
            }, 
            "id": "cjqzykb"
        }, 
        {
            "body": {
                "answer": "<p>I kinda dislike the <sq>it<sq>s really hard<sq>. No it isn<sq>t, if it was then there wouldn<sq>t be TONS of coders out there being paid averagely. It<sq>s just a skill really  and sure being awesome at it is hard, but that goes for any profession</p>", 
                "question": "What I Tell All New Programmers (found on /r/programming)"
            }, 
            "id": "cjr0lqv"
        }, 
        {
            "body": {
                "answer": "<p>>Programming is basically magic. Think about it - we study hard and pore over our books of lore (the computer + internet), to make spells (programs). Wizards can teach other wizards how to cast their magic. We can make things happen in the world spontaneously, and create wonderous devices anyone can use. (Like the internet and mobile phones). These devices can do things that would be impossible without our skills<br><br>Oh shut the fuck up.</p>", 
                "question": "What I Tell All New Programmers (found on /r/programming)"
            }, 
            "id": "cjr8ow3"
        }, 
        {
            "body": {
                "answer": "<p>Not really true. Programming isn<sq>t the hardest thing I<sq>ve ever done. It<sq>s just like any other skill. You keep practicing you<sq>ll eventually get good at it. </p>", 
                "question": "What I Tell All New Programmers (found on /r/programming)"
            }, 
            "id": "cjrauky"
        }, 
        {
            "body": {
                "answer": "<p>This is the same OS that has included a bunch of Wikipedia pages and such, so that people without an internet connection can still access information. Really cool project.</p>", 
                "question": "Found an OS that you can possibly learn to code inside similar to codeacademy!"
            }, 
            "id": "dg4pvzp"
        }, 
        {
            "body": {
                "answer": "<p>One of the Advisors for the organization is [Muhammad Yunus](https<colon>//en.wikipedia.org/wiki/Muhammad_Yunus), whom I recently read about on wikipedia. Among many things he received a Nobel Prize for his microfinance institution [Grameen Bank](https<colon>//en.wikipedia.org/wiki/Grameen_Bank_). Knowing he is a part of this project makes it a heavyweight. I look forward to seeing this succeed.<br><br>Edited to fix formatting.</p>", 
                "question": "Found an OS that you can possibly learn to code inside similar to codeacademy!"
            }, 
            "id": "dg4tlct"
        }, 
        {
            "body": {
                "answer": "<p>Ah, it<sq>s the OS that has been deflecting requests to list the proprietary software it bundles with it.</p>", 
                "question": "Found an OS that you can possibly learn to code inside similar to codeacademy!"
            }, 
            "id": "dg54g64"
        }, 
        {
            "body": {
                "answer": "<p>Man, their website is absolutely terrible for trying to get any sort of actual information about the OS. </p>", 
                "question": "Found an OS that you can possibly learn to code inside similar to codeacademy!"
            }, 
            "id": "dg5b4mp"
        }, 
        {
            "body": {
                "answer": "<p>Security is a very hard topic because the more you know, the more likely you are to assume you know something that you actually don<sq>t. Before looking at any of the links or resources I (or anyone else who responds) send you, please make sure you understand that *security is a __massive__ field in which there are many ways to do something wrong and few ways to do something right*. The standard disclaimer in cryptography essentially boils down to <dq>don<sq>t try this at home<dq>. There are so many vectors of attack that, unless you are truly an expert in security, you would never even *think* about, and the methods to defend against some of them rely on some pretty complex mathematics. For reference, here is a *small sample* of [potential attacks against a cryptosystem](http<colon>//security.stackexchange.com/a/18198). Basically, you should *never* roll your own crypto or security suite and you should *always* use something that has been peer tested and reviewed by experts and is considered an industry standard. (This includes not re-implementing industry standards, by the way, since there are many [side channel attacks](http<colon>//en.wikipedia.org/wiki/Side-channel_attack) to worry about as well.)  <br><br><br>*****<br><br><br>Now that I<sq>ve gotten the standard cryptography disclaimers out of the way, how do you learn security? Well, there are a *lot* of branches in security, and they all go pretty deep. You have cryptography (which has the very-significant subsections of both symmetric cryptography and asymmetric (or public key) cryptography), networking, exploitation, malware, hardware security (e.g. chip design security), physical security (e.g. preventing physical access to servers), social engineering, and many others. One of the key issues in security is that **you are only as strong as your weakest link**. No matter how well you do at every single other area of security, a single area is enough to bring everything down. Weak encryption can be broken and can topple the strength of many other areas; insecure networks allow for man-in-the-middle attacks, replay attacks, denial of service attacks, spoofing, eavesdropping, etc.; exploitation can bypass security measures; malware can steal credentials such that the attacker can simply pretend they are an authorized user; if your physical device is compromised, everything at a higher level is as well; if attackers can gain physical access to the server, there isn<sq>t much they won<sq>t be able to do; if your users are lax with their credentials, or your recovery system is abusable, or an attacker can talk their way into gaining access to your system, they can similarly override or bypass any other defense mechanisms you may have in place.  <br><br><br>Essentially, this means that any single person has a *lot* to learn before they can design a secure ecosystem (and I do mean ecosystem -- no system can stand alone for the above reason that any weakness affects every other layer). But of course, you have to start somewhere. So where do you start? Well, the answer to that is simple<colon> the very beginning. Pick a subsection of security and start learning the basics. <br><br><br>*****<br><br><br>I<sq>m personally a fan of cryptography, and a great first cipher is the [Caesar cipher](http<colon>//en.wikipedia.org/wiki/Caesar_cipher). Read it, understand it, perhaps write a tool to encrypt and decrypt it given a key (the shift number). **Now write something to break it.** This is an important step in learning security<colon> you *have* to be able to think about security from *both the attacker<sq>s __and__ the defender<sq>s perspectives* if you want to be able to design a system to resist attacks. There are a few ways to break a caesar cipher. The simplest is brute force<colon> there are only 26 keys, *just try them all*. Getting a little more complex, you could try [frequency analysis](http<colon>//en.wikipedia.org/wiki/Frequency_analysis).  <br><br><br>Ok, so you<sq>ve written and broken your Caesar cipher. What<sq>s next? Let<sq>s go a little bit more complex. Look at an Affine cipher. Next look at a Substitution cipher, then a Vigenere cipher, then a Playfair cipher, then a Hill cipher. These are all classic ciphers that have been used in the past. I<sq>m sure you<sq>re wondering what the point of this is<colon> it<sq>s not like they<sq>re actively being used today. And you<sq>d be correct -- nobody is going to encrypt anything modern with one of these ciphers. But by breaking each of them, you<sq>re starting to learn how to think in terms of cryptography. You<sq>re starting to learn, to truly *understand* the progression of a cryptosystem. Something seems, intuitively, very difficult to break. Then some math comes along and breaks it, or at least significantly weakens it. So a more complex cryptosystem is created. You start to learn the types of ways something can be broken, and you also learn the types of ways something can be encrypted. All of this applies when you start looking at more modern ciphers.<br><br><br>Enter [DES, or the Data Encryption Standard](http<colon>//en.wikipedia.org/wiki/Data_Encryption_Standard)! Now, instead of working on letters, we<sq>re working on bits of data. DES was once considered very secure, but its key size is too small (56 bits) and it<sq>s able to be broken in under 24 hours now. Enter [Triple DES](http<colon>//en.wikipedia.org/wiki/Triple_DES), or running DES three times, with three separate keys, providing 112 bits of security. Wait a second, why only 112 bits instead of 56 (bits of a single key) \\* 3 (number of keys) = 168 bits? That<sq>s because Triple DES is vulnerable to a [Meet-in-the-middle attack](http<colon>//en.wikipedia.org/wiki/Meet-in-the-middle_attack) where you attack the first half (keys 1 and 2) and the second half (key 3) separately. Triple DES is still technically secure in that we have no known way to reduce it past 2^112 and there<sq>s no current way to brute force that keyspace, but it is considered a legacy algorithm and shouldn<sq>t really be used in general applications (oversimplifying a bit here, but that<sq>s the gist of it).<br><br><br>Enter [AES, or Advanced Encryption Standard](http<colon>//en.wikipedia.org/wiki/Advanced_Encryption_Standard)! AES has key sizes of 128, 192, or 256 bits (AES-128, AES-192, and AES-256 respectively) and is based on the Rijndael cipher. The best explanation I<sq>ve found for AES is [this one](http<colon>//www.moserware.com/2009/09/stick-figure-guide-to-advanced.html), so I<sq>ll simply let you read it (I<sq>d recommend reading the whole thing, not just the AES details, as it covers some other important crypto topics).<br><br><br>Done? Awesome! So AES is what we currently use for symmetric-key encryption. Symmetric key encryption is where the encryption and decryption keys are the same. So far we<sq>ve only looked at symmetric key encryption. There<sq>s another type of encryption called asymmetric encryption, or public-key encryption, because it has *two* keys<colon> one is public (you can tell it to anyone) and it used to encrypt the data, and the other is private (keep it secret!) and it is used to decrypt the data. While you can derive the public key if you know the private key, there is no known way to derive the private key from the public key. At first, this may seem impossible. And in fact, many people thought it *was* impossible until very recently<colon> public key cryptography was first [invented in the 1970s](http<colon>//en.wikipedia.org/wiki/Public-key_cryptography#History).<br><br><br>The trick to most public key cryptography is something called [modular exponentiation](http<colon>//en.wikipedia.org/wiki/Modular_exponentiation) which basically just means exponentiation under some modulus. I<sq>m not going to go into the math of it here, I<sq>m going to assume that, as a CS major, you understand how mod works, but the basic idea is that of the [discrete logarithm problem](http<colon>//en.wikipedia.org/wiki/Discrete_logarithm)<colon> essentially, it is computationally difficult to solve the equation b^k = g mod p for k, given certain constraints on b, g, and p. Put another way, if you know b (mod p), b^k (mod p), and p, it is not currently thought to be possible (though it hasn<sq>t been proven to be impossible) to quickly find k. There is another, more recent, type of public key cryptography known as ECC (or Elliptic curve cryptography). It works under similar principles, but I won<sq>t go into detail about it here. If you<sq>re interested in public key cryptography, [this](http<colon>//arstechnica.com/security/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/) is a great primer on it. It focuses on ECC, but it does go into RSA (the current most popular asymmetric algorithm) and the concepts behind public key cryptography.<br><br>*****<br>[Continued in response!](http<colon>//www.reddit.com/r/learnprogramming/comments/32g958/looking_to_get_started_in_cybersecurity/cqazte1?context=10000)</p>", 
                "question": "Looking to get started in cybersecurity"
            }, 
            "id": "cqazmcn"
        }, 
        {
            "body": {
                "answer": "<p>This is more IT than programming related. You probably should try /r/netsec instead. </p>", 
                "question": "Looking to get started in cybersecurity"
            }, 
            "id": "cqawbto"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s not that IT isn<sq>t important to this, but there is plenty to be done in the programming side. I<sq>m in a CS computer security course taught by one of our better professors at the moment. Cryptography was a large part of the beginning. We moved on to certificates and digital signing. Then we worked on buffer overflows (stack smashing and such) and some web security like cross site scripting and what not. We are on operating system security at the moment. I really feel like this class was a worthwhile investment and intro to the subjects. Also, because of how our own student run security team placed in the MIT LLCTF contest, this same professor started up an official cybersecurity team in the CS department. I hang out with them sometimes, but don<sq>t have the time to join the team and go to all the events and training sessions. (gotta find a job). Fun stuff. </p>", 
                "question": "Looking to get started in cybersecurity"
            }, 
            "id": "cqaylh7"
        }, 
        {
            "body": {
                "answer": "<p>You might like this book on ciphers and Python programming, by the same guy who made popular Invent Computer Games with Python.<br><br>http<colon>//inventwithpython.com/hacking/</p>", 
                "question": "Looking to get started in cybersecurity"
            }, 
            "id": "cqbhkzr"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Help me turn my life around please. Programming."
            }, 
            "id": "c6p1ntq"
        }, 
        {
            "body": {
                "answer": "<p>I just came here to say you are an awesome person and your ambitions are amazing. My girlfriend is a speech therapist so I know how challenging post stroke activities can be. You should post back here every few months with updates!</p>", 
                "question": "Help me turn my life around please. Programming."
            }, 
            "id": "c6oy8of"
        }, 
        {
            "body": {
                "answer": "<p>I can **highly** recommend [CS50x](https<colon>//www.edx.org/courses/HarvardX/CS50x/2012/about), it<sq>s truly a fantastic course. I can<sq>t say enough good about it, and your timing is great too! That<sq>s what I<sq>m currently doing, while simultaneously reading/doing <sq>[Python the hard way](http<colon>//learnpythonthehardway.org/book/)<sq> & solving easy tasks on /r/dailyprogrammer. <br><br>Baby steps is probably my best advice <colon>-)</p>", 
                "question": "Help me turn my life around please. Programming."
            }, 
            "id": "c6oyo1b"
        }, 
        {
            "body": {
                "answer": "<p>I say go for it.<br><br><br>There are many places to begin.<br><br>Personally, I<sq>d start with a website.  Create a very simple web page.  <br><br>From there, add complexity and slowly begin learning programming on the server side.<br><br>I realize you said <dq>software engineer<dq> and people don<sq>t typically think of websites, but these days a lot of software is on the web.</p>", 
                "question": "Help me turn my life around please. Programming."
            }, 
            "id": "c6ovlza"
        }, 
        {
            "body": {
                "answer": "<p>This is a great idea. Unfortunately i am learning java right now. If something like your idea would exist for java i would cheer. <br>By the way, if someone else has a great link please share it with me</p>", 
                "question": "Would you watch?<colon> Livecoding of /r/dailyprogrammer problems"
            }, 
            "id": "d2nu1y9"
        }, 
        {
            "body": {
                "answer": "<p>How many of the posts there have you solved? How experienced are you overall as a programmer? Watching someone struggle to solve problems, or to solve them in a very bad way would not be too valuable to people learning.</p>", 
                "question": "Would you watch?<colon> Livecoding of /r/dailyprogrammer problems"
            }, 
            "id": "d2nt9vx"
        }, 
        {
            "body": {
                "answer": "<p>I think there should be **no code** at first; what a lot of people lack when learning programming (or even when they<sq>ve been doing it for years) is the ability to sit down and analyse a problem.  <dq>What are my inputs?  What should be my outputs?  Should I perform the operation in place or return a new structure?  What are the likely edge cases?  What asymptotic complexity is my idea?  Could I simplify the problem by transforming the data, e.g. sorting it or converting it to a more appropriate data structure?<dq><br><br>Speaking from my personal experience here, I recently finished my M.Sc. project, a compiler, and I needed a dataflow analysis to know if two variables were possibly aliased to one another.  Trying to do it on the computer got me nowhere and I quickly went to the blackboard instead.  It took a solid week to nail all the details, but eventually I got everything in place and then it took a day to implement that design.<br><br>I had a lab mate who was fond of saying <dq>hours of coding can save you minutes of thinking<dq>.  If you go ahead with your project, your videos should probably be split into (1) design phase where you figure out how to solve the problem on paper, (2) implementation in a well-known imperative language (Java or Python), (3) implementation in a functional language with a focus on how to deal with immutability.<br><br>Good luck!</p>", 
                "question": "Would you watch?<colon> Livecoding of /r/dailyprogrammer problems"
            }, 
            "id": "d2ocs94"
        }, 
        {
            "body": {
                "answer": "<p>I would watch for sure.</p>", 
                "question": "Would you watch?<colon> Livecoding of /r/dailyprogrammer problems"
            }, 
            "id": "d2nv6tf"
        }, 
        {
            "body": {
                "answer": "<p>Something like [CodeWars](http<colon>//www.codewars.com/) may be beneficial because it gives you lots of problems to solve at an appropriate level, so you can gradually work through them and practice your algorithmic thinking, because once you know a language, that<sq>s the hardest part. <br><br>Of course, the only way to improve these skills is to practice - you wouldn<sq>t become a marathon runner by reading how to move each muscle, you<sq>d learn by actually running a few marathons! Continuing with this analogy, you might struggle a bit with solving some of the problems, just as you might not be able to complete the marathon first time, but if you keep persevering (and learning from other people<sq>s solutions on CodeWars if you can<sq>t do it!) you should be able to learn and improve.</p>", 
                "question": "Learning how to solve problems"
            }, 
            "id": "d16mcq8"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m in my <dq>advanced c++<dq> class in undergrad.  It<sq>s about design patterns etc and is the third class in a series of c++ classes.  I had a horrible time in c++ 2, but have been blowing threw my third class with a breeze.  I used to have the exact same problems you did and here<sq>s how I solved them<colon><br><br>1.  Give yourself adequate time - this is literally the most important thing.  If you plan on an assignment taking 5 hours, plan on it taking 10.  <br>2.  Write out your thoughts and use pseudo code to draw a flow for your program.  <br>3.  Use that pseudo code to start to narrow down individual, small problems.<br>4.  Take the nouns in your pseudo code and consider making them classes.  Obviously, you<sq>ll have to give it some thought as to if it is deserving of an entire class to itself.  <br>5.  Take the verbs in your pseudo code and consider making them functions.  As like above, give it some thought as to whether that verb constitutes having a function.<br>6.  Begin to do one small problem at a time.  For example, if I<sq>m reading in a text file, I work on setting up the structure to hold the data that we read in, then we open the streams for the data, then read it in.  One small step at a time.  <br>7.  Test test test.  You need to make a way to test each and every function that isn<sq>t overly simple to make sure that each detail is right before you move on.  Nothing is worse than solving multiple problems that depend on each other.  It<sq>s much more difficult to fix a chain of problems than one at a time.<br>8.  Lastly, this really should be at the top but whatever.  Read, read, read.  You should be a professional googler.  Remember, it<sq>s not about just getting the assignment done.  If you really want to program,  you need to look at each assignment as an opportunity to learn and display what you have already learned.  Too many times I see new programmers in my tutoring class that want to just hurry up and find a quick function to solve their problems.  They<sq>ll just put it in and check the output.  They didn<sq>t learn anything.  They copy and pasted.  That<sq>s not programming.  <br>9.  Master OOP - good programmers will save themselves ample amounts of time to prevent re writing code.  But, nothing makes a mess faster than trying to save code but really not understanding the concepts of OOP.<br><br>If you follow all these steps, I promise you<sq>ll be much better off.  Also, I think it is very important to actually write out your pseudo code.  I notice my discrepancies in my logic when I write things down.  I used to just dive in and pick a random class or function to start at.  This is literally guaranteeing you will have twice as hard of a time.  You need to try to follow top down design meaning you need to look at the big picture and plan out the structure from a high level view and then begin to slowly add the details.  This will keep your code clean and have it make sense.  <br><br>If you have any questions, feel free to pm me.  I love to help!  <br><br>Edit<colon>  one last note.... if you can<sq>t figure out the same problem for a half hour or more, get off the computer and go do something else and think about the code.  Or take a nap.  Sometimes you just get stuck in what I call <dq>a thought loop<dq> where you stop thinking like a programmer and start doing the same crap over and over.  This goes hand in hand with giving yourself plenty of time.  I<sq>ve solved lots of problems in my sleep or it appears that way haha! </p>", 
                "question": "Learning how to solve problems"
            }, 
            "id": "d16pr3v"
        }, 
        {
            "body": {
                "answer": "<p>Check out the book [Think Like A Programmer](http<colon>//www.amazon.com/Think-Like-Programmer-Introduction-Creative/dp/1593274246/ref=sr_1_1?ie=UTF8&qid=1458477885&sr=8-1&keywords=think+like+a+programmer) by V. Anton Spraul. Although he uses C++ for his examples, his principles on problem solving can be related through any language. As mentioned, [Code Wars](http<colon>//www.codewars.com) is a great place to go for practicing what you covered in the book. <br><br>If you want to get an idea of what is covered in the <dq>Think Like a Programmer<dq> book, the author has a Youtube Channel and [Playlist](https<colon>//www.youtube.com/playlist?list=PLKQ5LYb497AZIZe9dBWy8GwLluVaMQVj0) with tutorials on some of the practices in his book. This book along with Code Wars helped get over that hump from just understanding to practical application. <br><br>Edit for Errors in linkage.</p>", 
                "question": "Learning how to solve problems"
            }, 
            "id": "d16nt6r"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//en.wikipedia.org/wiki/How_to_Solve_It</p>", 
                "question": "Learning how to solve problems"
            }, 
            "id": "d16q2ec"
        }, 
        {
            "body": {
                "answer": "<p>I tried to learn with code academy once and I felt I was just copying, not learning.  I<sq>ve been learning python with the thinkpython free ebook. And it sticks enough for me to be developing an app that I feel is pretty advanced for my level.</p>", 
                "question": "What is in your opinion the current best interactive resource to learn programming? Codeacademy? MIT? Harvard? Other?"
            }, 
            "id": "cok8pfq"
        }, 
        {
            "body": {
                "answer": "<p>To be honest, the best way I<sq>ve found to learn the basics of a language has been to take a couple simple tutorials, like codecademy or something similar, then try an build a simple app or two that covers a lot  of programming basics. Like in C++ for example I decided to program a threaded, networked, phone directory. (Like my own version of an online phone book) The end goal being that I can search by first name, last name, address, or number, or a combination. This teaches data structures, classes, IO, threading, networking... A lot! <br><br>Now before anyone yells that it<sq>s way too big a project for a first time, that<sq>s the *point*. It forced me to break it down into simple easy steps an learn each thing on my own as I went. I started off with just making a simple program that lets me enter a number and then prints it back to me. Then I moved on to storing an array of numbers. Then onto names, address, etc. Then that got me looking at different data structures (array, arraylist, linked list...), which in turn got me looking at creating classes and objects to make Storting my data easier, which lead me to learning memory management... You get the idea.<br><br>It took me a few months, but by the end I had a pretty good understanding of how to code in C++, and the ability to make other small apps mostly on my own. <br><br>Tl;Dr pick a simple-ish project that is above your ability, break it into small manageable tasks that you *can* accomplish with some googling, then build upon each thing you create until you achieve your original goal. By then end you should have the basics of programming in that language, giving you the confidence and ability to take on bigger and harder things.<br><br>Above all, relax, don<sq>t give up, and have *fun!*</p>", 
                "question": "What is in your opinion the current best interactive resource to learn programming? Codeacademy? MIT? Harvard? Other?"
            }, 
            "id": "cokajrh"
        }, 
        {
            "body": {
                "answer": "<p>edx.org, definitely. It<sq>s interactive, they grade you, and it<sq>s challenging. Currently in the middle of Introduction to Programming and computer science using Python, by MIT.</p>", 
                "question": "What is in your opinion the current best interactive resource to learn programming? Codeacademy? MIT? Harvard? Other?"
            }, 
            "id": "cokeqr8"
        }, 
        {
            "body": {
                "answer": "<p>I like [the odin project](http<colon>//www.theodinproject.com/).<br><br>It is very complete, maybe even too much, you have to be careful not to get lost on all the links they throw you. But you learn coding on your own machine, unlike codecademy. And at your own pace, unlike online courses.</p>", 
                "question": "What is in your opinion the current best interactive resource to learn programming? Codeacademy? MIT? Harvard? Other?"
            }, 
            "id": "cokhkhh"
        }, 
        {
            "body": {
                "answer": "<p>You can come back 6 months later having forgotten everything about it and be able to pick it up again without much struggle in figuring out left from right.</p>", 
                "question": "How do you know that your code is well written?"
            }, 
            "id": "devzect"
        }, 
        {
            "body": {
                "answer": "<p>Can you easily understand it and modify it?</p>", 
                "question": "How do you know that your code is well written?"
            }, 
            "id": "devx7rq"
        }, 
        {
            "body": {
                "answer": "<p>Once you get a job programming and are faced with your first deadline - if the code does what it is supposed to do then it<sq>s good code. <br><br><dq>We<sq>ll refactor it in phase 2<dq>.<br><br>Yeah, phase 2 will never come....<br><br></sarcasm></p>", 
                "question": "How do you know that your code is well written?"
            }, 
            "id": "dew177h"
        }, 
        {
            "body": {
                "answer": "<p>Show it to someone else and count the number of times you hear <dq>WTF<dq> per minute.</p>", 
                "question": "How do you know that your code is well written?"
            }, 
            "id": "dewbezd"
        }, 
        {
            "body": {
                "answer": "<p>A few caveats I<sq>d include<colon><br><br>**Modularity**<colon><br><br>Yes! Modularity is good. It<sq>s good right up until you<sq>re adding layers of abstraction for the sake of adding layers of abstraction. Remember that each level of abstraction adds code, and every line of code you write is a line of code that (1) might be buggy, and (2) might get in your way the next time you need to change things, which you will. And don<sq>t try pulling that <dq>no it<sq>s okay I<sq>ll just make sure my code is extensible<dq> thing - *nobody* can accurately forecast all possible ways in which the code will need to be changed, at least without including hundreds of ways that the code, in retrospect, will never change.<br><br>This is not to say you shouldn<sq>t have layers of abstraction. You absolutely should. Just note that there<sq>s such a thing as too much.<br><br>I don<sq>t have any objective rules to tell you how much is too much - this is the kind of thing that all coders end up finding their own answer to.<br><br>(Also, that whole <dq>deploy part of the project<dq> deal? Yeeeeah. First off, that applies only to projects where this is practical - you can<sq>t exactly patch a quarter of a game through Steam, for example. And second, I wouldn<sq>t even think of doing this in production code. Just deploy the whole thing, you<sq>ll save yourself headaches.)<br><br>**Continuous Integration**<colon><br><br>Okay, this isn<sq>t a caveat so much as encouragement. Continuous integration is what you should do once you<sq>re comfortable with source control. Remember how much life sucked before you had source control? Yeah, get a CI server up. Seriously. They<sq>re pretty easy to set up. Do it.<br><br>**Redundancy**<colon><br><br>Does the author not realize that a local Git repo *is* a completely redundant copy? And what does he mean, <dq>push corrupted files in the repo<dq>? It<sq>s a source control system. You just, y<sq>know, get the old files back out. Sheesh.<br><br>Redundancy is useful, this just makes me pretty dang skeptical of the author<sq>s understanding of Git.<br><br>**Refactoring**<colon><br><br>Author didn<sq>t mention this. It<sq>s important. *Learn to refactor your damn code*. At some point, a month down the line, you<sq>ll realize that your old program design was junk and you have a new way to lay it out. A novice coder will start from scratch. A more experienced programmer will sigh and try to shoehorn new code into the old system anyway. An expert coder will gradually refactor the old code into a more sensible system. Gradual invasive code refactoring is a stone bitch but it<sq>s a *very* useful skill to have.<br><br>Once you<sq>ve learned how to refactor your own code, learn how to refactor other people<sq>s code. This will save your life when you<sq>re unexpectedly put in charge of a hundred-thousand-line program written by barely-trained monkeys. You *can* get that under control without starting from scratch. Seriously.</p>", 
                "question": "The 7 Rules for Writing Software That Won\u2019t Die When You Do"
            }, 
            "id": "coat7oe"
        }, 
        {
            "body": {
                "answer": "<p>This stuff is not taught in academia enough, unfortunately</p>", 
                "question": "The 7 Rules for Writing Software That Won\u2019t Die When You Do"
            }, 
            "id": "coanp0p"
        }, 
        {
            "body": {
                "answer": "<p>Nice article.  Thanks.</p>", 
                "question": "The 7 Rules for Writing Software That Won\u2019t Die When You Do"
            }, 
            "id": "coap7ja"
        }, 
        {
            "body": {
                "answer": "<p>Having worked in an Indian IT Services company for most part, I just follow these two rules while writing software<colon><br><br>Rule 1<colon> See to it that functionality fulfills the client<sq>s requirement (All unit test cases are passed and design docs are adhered).<br><br>Rule 2<colon> As a corollary to Rule 1, see to it that no additional or unintended functionality is provided to client outside the scope of design (`cause this will lead to him/her raising more bugs than are necessary).<br><br>*Source<colon> Experience*</p>", 
                "question": "The 7 Rules for Writing Software That Won\u2019t Die When You Do"
            }, 
            "id": "coatlci"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not sure it<sq>s definitive, but if you already know a bit of javascript, [You Don<sq>t Know JS](https<colon>//github.com/getify/You-Dont-Know-JS) is a good source.</p>", 
                "question": "Is there a definitive Javascript book?"
            }, 
            "id": "dfrsema"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve heard Eloquent Javascript is really good but I haven<sq>t read it myself.</p>", 
                "question": "Is there a definitive Javascript book?"
            }, 
            "id": "dfrsorh"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m surprised no one has mentioned [Mozilla Developer Network](https<colon>//developer.mozilla.org/en-US/docs/Web/JavaScript). Although technically not a book, the tutorial sections read back-to-back will give a relatively book-like experience. Specifically, I would start with their [reintroduction to JS](https<colon>//developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) chapter. Also, I find their [language reference](https<colon>//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference) the best on the web by far and definitely worth a bookmark.<br><br>JS changes fast. The standard is evolving and adding lots of features and syntactic sugar. Unfortunately, JS books age fast. Mozilla does a good job of keeping their site up to speed. You definitely don<sq>t need to know every cutting edge feature to be productive.</p>", 
                "question": "Is there a definitive Javascript book?"
            }, 
            "id": "dfsbmre"
        }, 
        {
            "body": {
                "answer": "<p>Not an expert, but heard this title being bandied around<colon> https<colon>//www.amazon.co.uk/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742</p>", 
                "question": "Is there a definitive Javascript book?"
            }, 
            "id": "dfrw1ot"
        }, 
        {
            "body": {
                "answer": "<p>I am not hating, but we have a discord chat already... I will join the JS chat though.</p>", 
                "question": "Want to learn JavaScript? Join the SpeakJS Discord server and chat to over 500 members!"
            }, 
            "id": "dbl3ghx"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Want to learn JavaScript? Join the SpeakJS Discord server and chat to over 500 members!"
            }, 
            "id": "dblbofn"
        }, 
        {
            "body": {
                "answer": "<p>Merry xmas guys!</p>", 
                "question": "Want to learn JavaScript? Join the SpeakJS Discord server and chat to over 500 members!"
            }, 
            "id": "dblkrlh"
        }, 
        {
            "body": {
                "answer": "<p>Well, the title is no longer accurate. It should be <dq>chat to over 1000 members!<dq> now. <colon>)</p>", 
                "question": "Want to learn JavaScript? Join the SpeakJS Discord server and chat to over 500 members!"
            }, 
            "id": "dbszzuv"
        }, 
        {
            "body": {
                "answer": "<p>I just started cs50 and I<sq>m loving it. Could you tell me how long it took you to finish it?</p>", 
                "question": "My review of CS50x - Harvard<sq>s Introduction to Computer Science"
            }, 
            "id": "ctepz6a"
        }, 
        {
            "body": {
                "answer": "<p>[Here<sq>s the link to the course.](https<colon>//www.edx.org/course/introduction-computer-science-harvardx-cs50x) </p>", 
                "question": "My review of CS50x - Harvard<sq>s Introduction to Computer Science"
            }, 
            "id": "cteyqol"
        }, 
        {
            "body": {
                "answer": "<p>>the material quickly accelerates, and by Problem Set 3, students are making a version of the classic arcade game Breakout. <br><br>This has been the problem with basically every MOOC, or actual university class I<sq>ve taken. I lasted about 5 weeks at my schools Python - Introduction to Algorithms (<sq>No Programming Experience Necessary!<sq>) course before it<sq>s like suddenly you<sq>re expected to have reached that epiphany moment where you can crank out a search engine w/minimal course guidance. Fucking code man. I switched to javascript because no one seems to say it<sq>s easy, anyway, and so far it<sq>s going a lot better than my forays into Python. No doubt my current course will figure out how to throw an exponential learning curve in there somewhere to discourage me.</p>", 
                "question": "My review of CS50x - Harvard<sq>s Introduction to Computer Science"
            }, 
            "id": "ctf2gnq"
        }, 
        {
            "body": {
                "answer": "<p>A couple users on /r/learnprogramming have started a Slack account to discuss and keep up with each other to add a degree of classmates and accountability otherwise missing from the free version. If you have any interest, feel free to shoot me a pm! <br> </p>", 
                "question": "My review of CS50x - Harvard<sq>s Introduction to Computer Science"
            }, 
            "id": "cteybbq"
        }, 
        {
            "body": {
                "answer": "<p>HTML and CSS are pretty simple, I would spend almost no time reading about them (Unless this is for some sort of job interview) for the most part you will just be googling <dq>How to I make round borders<dq> until you can do it by rote memorization.<br><br>JS, on the other hand, is a tricky beast.  I would spend a majority of my time learning not just how to write javascript, but how to write good javascript.<br><br>[javascript the good parts](http<colon>//www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) and [Javascript garden](http<colon>//bonsaiden.github.io/JavaScript-Garden/) is where I would start out learning.  Javascript is easy to write, but hard to write well.  You need to follow strong conventions otherwise your code will end up looking like spaghetti right quick and in a hurry.  If you start playing around with the language, I would suggest using [JSLint](http<colon>//www.jslint.com/) to make sure you aren<sq>t doing anything stupid.<br><br>After getting a good strong base in javascript jquery shouldn<sq>t be too hard. It is just a javascript library. perusing through the docs and getting a feeling for what it can do is probably all you really need.  Just like any library you<sq>ve used.  You didn<sq>t learn all of the .Net framework, rather you would google and lookup specifics as you needed them.  That is much the way you are likely to use jQuery.  It can do a lot and you don<sq>t need to know everything it can do to use it effectively.<br><br>In short, javascript is where the traps are.  The other things you mentioned are <dq>I<sq>m going to google this anyways<dq> so I wouldn<sq>t really spend a large amount of time learning them.</p>", 
                "question": "I have three days to learn HTML + JavaScript + CSS + jQuery in three."
            }, 
            "id": "cn8agtv"
        }, 
        {
            "body": {
                "answer": "<p>For Starters<colon><br><br>Take a look at the<colon> [**5 hour developer freebie bundle on Stacksocial**](https<colon>//stacksocial.com/sales/the-5-hour-developer-freebie-bundle) to get started. (4 days left to get it free)</p>", 
                "question": "I have three days to learn HTML + JavaScript + CSS + jQuery in three."
            }, 
            "id": "cn88lkc"
        }, 
        {
            "body": {
                "answer": "<p>Where are all these time-constrained learning posts coming from? How are people getting into these situations? It feels like every other day we see a post like <dq>I have to learn x86 ASM over my lunch break, can someone send me a link?<dq>.<br><br>I<sq>m genuinely curious. Is it for a job interview that you overstated your credentials? Did someone leave the company and you<sq>ve been given a week to try to pick up the slack? Some type of college test? Completing last year<sq>s resolution?</p>", 
                "question": "I have three days to learn HTML + JavaScript + CSS + jQuery in three."
            }, 
            "id": "cn8grfg"
        }, 
        {
            "body": {
                "answer": "<p>What is your reason for wanting to learn all of it in 3 days? Are you building a website? If so, depending on the purpose/level of complexity of the site you may only need HTML and CSS. If the purpose is simply to learn HTML, JavaScript, CSS, jQuery, then you can probably learn the basics of HTML & CSS in a day, then spend a day on JavaScript, and a day on jQuery but it<sq>s going to take more than 3 days to get to the point where you can hand code a complex website. <br><br>edit<colon> a word</p>", 
                "question": "I have three days to learn HTML + JavaScript + CSS + jQuery in three."
            }, 
            "id": "cn8ek0w"
        }, 
        {
            "body": {
                "answer": "<p>coupon code as promised REDDITSQL and you can find the course at https<colon>//www.udemy.com/practical-sql-skills-from-beginner-to-intermediate/</p>", 
                "question": "Hey /r/learnprogramming I<sq>ve just started teaching a course on Udemy about SQL programming useful even if you don<sq>t know the basics - FREE for reddit readers - coupon code in comments"
            }, 
            "id": "capr5s8"
        }, 
        {
            "body": {
                "answer": "<p>If anyone wants to see the curriculum, [I<sq>ve taken a screenshot](http<colon>//i.imgur.com/zJFA1sw.png)</p>", 
                "question": "Hey /r/learnprogramming I<sq>ve just started teaching a course on Udemy about SQL programming useful even if you don<sq>t know the basics - FREE for reddit readers - coupon code in comments"
            }, 
            "id": "capxhzl"
        }, 
        {
            "body": {
                "answer": "<p>This is absolutely incredible and I<sq>ve signed up. I<sq>ve got a university course next semester that is at least partly on SQL, so the timing of this is amazing.<br><br>But unfortunately I currently don<sq>t have a large amount of Internet quota, and I won<sq>t have one until late July. Will the resources still be available then? (Better yet, any chance of text file resources\u203d)</p>", 
                "question": "Hey /r/learnprogramming I<sq>ve just started teaching a course on Udemy about SQL programming useful even if you don<sq>t know the basics - FREE for reddit readers - coupon code in comments"
            }, 
            "id": "captcvv"
        }, 
        {
            "body": {
                "answer": "<p>The free coupons have gone but you can use REDDITSQL2 to get the course for $10</p>", 
                "question": "Hey /r/learnprogramming I<sq>ve just started teaching a course on Udemy about SQL programming useful even if you don<sq>t know the basics - FREE for reddit readers - coupon code in comments"
            }, 
            "id": "caqfkc7"
        }, 
        {
            "body": {
                "answer": "<p>I started applying for jobs when I could make something decent from scratch without any hand holding.<br><br>I<sq>ll be honest. I never really felt ready, but I did feel like taking a risk. Then I got interviews, which meant there were people out there who thought I had the ability to work for them based on my resume. That gave me confidence. Interviews gave me experience.<br><br>Then someone gave me a chance. They told me that they wouldn<sq>t hire me based on my skill alone, but they loved my personality and said they thought it would be nice to work with me.<br><br>I<sq>m 30 years old. I have a family. I work full time. I<sq>ve been self learning for less than a year. Someone still decided to hire me. I start next month.<br><br>Tldr just apply. You won<sq>t know until you try. Just do it. </p>", 
                "question": "When do you know when you<sq>re ready to start interviewing?"
            }, 
            "id": "d7jdhi3"
        }, 
        {
            "body": {
                "answer": "<p>Do a practice interview. And by that, I mean apply for a job at a company where you don<sq>t necessarily want to work. See how well you do and gauge how much more ready you need to be. </p>", 
                "question": "When do you know when you<sq>re ready to start interviewing?"
            }, 
            "id": "d7j4hxs"
        }, 
        {
            "body": {
                "answer": "<p>For a basic software developer gig you should at minimum have a website that showcases some of your cool projects and a resume </p>", 
                "question": "When do you know when you<sq>re ready to start interviewing?"
            }, 
            "id": "d7j45bl"
        }, 
        {
            "body": {
                "answer": "<p>I would say the point should be when your comfortable taking a concept and actually start building something. if your not able to figure out how to start yet or what to do. then your most likely going to run into the same issue when working <br><br>so if you can take a concept and start building a working prototype does not need to be perfect as works of art takes years not days. but if you can start working up a plan and tackle what you can then you should be able to do the same for someone else<sq>s ideas as well<br><br>by the time that is possible you most likely have somethings in your portfolio you could use as examples of experience and knowledge that would allow you sell yourself with  </p>", 
                "question": "When do you know when you<sq>re ready to start interviewing?"
            }, 
            "id": "d7j72ke"
        }, 
        {
            "body": {
                "answer": "<p>Perfect grasp of HTML5, CSS3. That includes using the appropriate tags for HTML and knowing CSS rules such as <br>    display / position / transform<br>etc. Also, learn media queries and how to use them to make responsive websites. This might be easier with Bootstrap, Foundation or a relevant framework. Learn a CSS preproccesor like SASS to make writing and maintaining CSS less of a hell. CSS preproccesors come with many features that dramatically improve CSS. Then, absolutely *master* JavaScript if you want to do front-end development. It<sq>s a necessity nowdays. Besides that, learn React or Angular from JS frameworks. Lastly, a task-runner like Gulp/Grunt can prove helpful, to compile SASS/LESS (CSS preproccesors) into vanilla CSS, add prefixes automatically etc. Besides languages, learn how the internet works and follow many tutorials alongside to get the best out of every course.<br></p>", 
                "question": "What skills do I need for front-end development?"
            }, 
            "id": "d7fet24"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.freecodecamp.com/<br><br>They will walk you through the full stack. An entire working years worth of course materials, with certifications (not accredited) for various stages, and many rather large personal projects to add to your portfolio, and capstone is a non-profit internship (assuming you don<sq>t get a job before then). All with a huge, vibrant community of people to work with and talk about the problems.<br><br>For Free. No strings.<br><br>It<sq>s the Khan Academy of web development.</p>", 
                "question": "What skills do I need for front-end development?"
            }, 
            "id": "d7ffyz2"
        }, 
        {
            "body": {
                "answer": "<p>A willingness to have your enthusiasm for life crushed into tiny pieces and burnt in a furnace.<br><br>jk. Well, only a little.</p>", 
                "question": "What skills do I need for front-end development?"
            }, 
            "id": "d7fnfn9"
        }, 
        {
            "body": {
                "answer": "<p>Front-End Web Developer Skills Checklist<colon> Free E-guide from Udacity<br><br>http<colon>//1onjea25cyhx3uvxgs4vu325.wpengine.netdna-cdn.com/wp-content/uploads/2014/12/UdacityUltimateSkillsChecklistforYourFirstFrontEndDeveloperJob.pdf</p>", 
                "question": "What skills do I need for front-end development?"
            }, 
            "id": "d7fpphy"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this, I<sq>ve actually been meaning to at least get a proof of concept or something with some parallel programming. Having even a relatively simple parallel project just showing that you<sq>ve experimented with CUDA is a good thing to have in your github (and put on your resume, maybe)</p>", 
                "question": "Want to learn parallel programming using your Nvidia graphics card? Check out their FREE learning tools."
            }, 
            "id": "crzgmih"
        }, 
        {
            "body": {
                "answer": "<p>Teach the controversy!<br><br>http<colon>//documen.tician.de/pyopencl/<br><br>OpenCL is not restricted to nvidia, unlike CUDA, so you can run your code on any conforming GPU.<br><br>Which said, CUDA is probably a more robust and widespread technology, and nvidia are the platform of choice for GPGPU based supercomputing, as far as I know. </p>", 
                "question": "Want to learn parallel programming using your Nvidia graphics card? Check out their FREE learning tools."
            }, 
            "id": "cs02abl"
        }, 
        {
            "body": {
                "answer": "<p>CUDA tends to be really complicated, due to a lot of micro-management of your GPU memory (you need to transfer values to and from the GPU, it is like C memory allocation on steroids). I last used CUDA two years ago, but I hear that is now more progammer friendly.<br>Second point<colon> on a linux laptop, you may have to deal with Intel Optimus which is a huge pain when using CUDA...</p>", 
                "question": "Want to learn parallel programming using your Nvidia graphics card? Check out their FREE learning tools."
            }, 
            "id": "crzvcbo"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for the links! I<sq>ve written some basic code in CUDA for physics calculations but I<sq>ve really struggled with it. Hopefully this will help clear up some of the questions I was having!</p>", 
                "question": "Want to learn parallel programming using your Nvidia graphics card? Check out their FREE learning tools."
            }, 
            "id": "crzksdw"
        }, 
        {
            "body": {
                "answer": "<p>[This](http<colon>//cli.learncodethehardway.org/book/) is one of the best resources I<sq>ve come across for learning CLI. It is a very interesting take on making you memorize all the different commands.Hope this helps.</p>", 
                "question": "Anything like Code Academy for learning the Linux command line?"
            }, 
            "id": "c9n443n"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Anything like Code Academy for learning the Linux command line?"
            }, 
            "id": "c9n9qnq"
        }, 
        {
            "body": {
                "answer": "<p>You don<sq>t learn Linux command line, you become it, you breath.<br><br><br>It<sq>s a way of life.<br><br><br><br>man *life*</p>", 
                "question": "Anything like Code Academy for learning the Linux command line?"
            }, 
            "id": "c9nd13j"
        }, 
        {
            "body": {
                "answer": "<p>This is a fucking brilliant question. Great idea, seriously. </p>", 
                "question": "Anything like Code Academy for learning the Linux command line?"
            }, 
            "id": "c9nd84v"
        }, 
        {
            "body": {
                "answer": "<p>Companies love a man thats good with SQL. It<sq>s generally a pretty big plus.</p>", 
                "question": "What jobs and programming language are on high demand for remote jobs?"
            }, 
            "id": "cxi4iy4"
        }, 
        {
            "body": {
                "answer": "<p>Basically there are three kinds of <dq>remote<dq> work.  <br><br>There<sq>s the work at home, but hey you could come into the office.  Lots of places have this and will happily let people do this, usually after they establish themselves at the company.  This is the <dq>local<dq> option.<br><br>Then there<sq>s grunt work - basically working basic grunt bug fixes, this is often remote, but it<sq>s remote in places where <dq>some<dq> level of technical talent exists and the cost of labor is lower than most of the 1st world.  This is the remote <dq>grunt<dq> option.<br><br>Last is the situation where you have special skills that are highly in demand and there<sq>s not enough people like you to go around, so its a compromise for the company, they<sq>d like you to be in San Francisco, USA, but sadly the only Computer Vision in C# guy they could find for $200k was in Milan, Italy.  Sometimes the 1st <dq>local<dq> option becomes more remote because the person is valuable to the company and <dq>established<dq>.  This is my personal situation, when I started, I worked for my divisions headquarters in Sapporo, Japan, then I went <dq>local<dq> remote because most of my programmers were in Korea or India and there was little reason to be physically in the office 90<percent> of the time.  Eventually my wife became terminally homesick and we made the decision to move back to the US.  Company decided that keeping me working there was more important than my being in Japan.</p>", 
                "question": "What jobs and programming language are on high demand for remote jobs?"
            }, 
            "id": "cxi5ncm"
        }, 
        {
            "body": {
                "answer": "<p>Hi, your question is also interesting to me, which is why [I built a free service](http<colon>//upstats.garage-coding.com/#analysis) that computes metrics for the freelance online market UpWork, and skill demand is one of the metrics being computed.<br>The metrics are updated every 8 hours. <br>If you<sq>d like to read more about UpStats [I also regularly blog about it here](http<colon>//blog.garage-coding.com).<br></p>", 
                "question": "What jobs and programming language are on high demand for remote jobs?"
            }, 
            "id": "cxi79gu"
        }, 
        {
            "body": {
                "answer": "<p>Are Javascript Engineer (Node.js, plain Javascript, MVC Framework) and iOS Developer good fields to find remote jobs?</p>", 
                "question": "What jobs and programming language are on high demand for remote jobs?"
            }, 
            "id": "cxi634q"
        }, 
        {
            "body": {
                "answer": "<p>- React describes itself as the V in MVC, not exactly a full fledged SPA framework like Angular, Ember, Backbone. <br><br>- Angular<colon> By far the most popular of the big SPA frameworks. Backed by Google. Angular 2.0 will be a major change from 1.x but in my opinion it<sq>s changing for the better. It wasn<sq>t originally made to be what it is used for today so this change as necessary to get rid of some of the major flaws from 1.x. This is the one I use. <br><br>- Ember<colon> A Rails like framework, probably second in popularity to Angular. I use it at work and honestly am not a huge fan. It feels a lot bulkier than Angular and I<sq>m not a big <dq>convention over configuration<dq> guy. But to each their own. <br><br>- Mustache is a template system, not a framework. <br><br>- Meteor<colon> From what I understand more of a full stack solution than anything. A Meteor/Angular combination is fairly popular from what I<sq>ve seen. <br><br>Sorry for being broad, Angular is the only one Im really knowledgeable with. No one had commented in an hour so I figured I<sq>d give you something <colon>D. </p>", 
                "question": "The number of JavaScript frameworks available is overwhelming. Can anyone give me a quick rundown of what makes the popular ones special/different and which should be used when?"
            }, 
            "id": "csv7rgp"
        }, 
        {
            "body": {
                "answer": "<p>Might check out the weekly podcast <dq>5 Minutes of JavaScript<dq> and listen to ~10 or so recent episodes (so 50 minutes). They really have their finger on the pulse of what is a very dynamic subject. In fact, the March 5th episode specifically covers <dq>framework fatigue<dq>... you<sq>re not alone if you feel overwhelmed by the options. </p>", 
                "question": "The number of JavaScript frameworks available is overwhelming. Can anyone give me a quick rundown of what makes the popular ones special/different and which should be used when?"
            }, 
            "id": "csvfi0j"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.4603 <br> > [What is this?](https<colon>//pastebin.com/64GuVi2F/96741)</p>", 
                "question": "The number of JavaScript frameworks available is overwhelming. Can anyone give me a quick rundown of what makes the popular ones special/different and which should be used when?"
            }, 
            "id": "csvlt8s"
        }, 
        {
            "body": {
                "answer": "<p>Why not just learn and use javascript and add frameworks as you think plain javascript is lacking in something?</p>", 
                "question": "The number of JavaScript frameworks available is overwhelming. Can anyone give me a quick rundown of what makes the popular ones special/different and which should be used when?"
            }, 
            "id": "csv7suh"
        }, 
        {
            "body": {
                "answer": "<p>Yes, but you don<sq>t want that.<br><br>For login it should be secure, and they actually make USB tokens that will do that, the other option is smart card logins. Right now I<sq>m actually using a smart card reader, the readers are about $15 and the cards about $1-5, and they perform a very very secure login. The USB devices are a little bit more ($10-15/user).<br><br>The main advantage is these devices can<sq>t be copied, and they operate in a way that your effective password NEVER leaves the device (windows can verify the device and can verify your pin with the device, but doesn<sq>t actually know the crypto key). Additionally there are existing drivers and stuff to do what you want.<br><br>If you use a regular thumb drive anyone can come along and copy it and use it for login, and any authentication you try to do against those scripts can be tampered with. You don<sq>t want that.</p>", 
                "question": "Is it possible to create a USB flash drive that logs me in? If so how do I do it."
            }, 
            "id": "coo5q7y"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Is it possible to create a USB flash drive that logs me in? If so how do I do it."
            }, 
            "id": "coo8rkk"
        }, 
        {
            "body": {
                "answer": "<p>You<sq>re looking for [something like this](http<colon>//www.rohos.com/support/knowledge-base/how-to-set-up-usb-flash-drive-for-secure-windows-login/).<br><br>It does use some client software on the computer to modify the windows login screen to recognise the key.<br><br>Logging in without typing your password is one thing.<br>Rather more usefully (for some applications), it can be used for 2-factor authentication - so you need the key and *still* have to type a separate PIN.<br><br>Aside from Rohos, there<sq>s also [Predator](http<colon>//download.cnet.com/Predator-Free-Edition-32-bit/3000-2144_4-10915340.html), and a simple google search for <dq>[usb login key](https<colon>//www.google.co.uk/search?q=usb+login+key&ie=utf-8&oe=utf-8&gws_rd=cr&ei=rVnjVJH3F435aJWCgeAD)<dq> brings up several other options.<br><br>Companies like RSA have been selling fobs for 2-factor authentication for years, along with lots of organisations using smart cards for staff to access doors, but also to unlock computers and automatically lock them when they remove the card.<br><br>I know this is /learnprogramming, so you<sq>re looking to do it yourself rather than just use 3rd party software, but those are some implementations that might be useful to look at as you roll your own solution.</p>", 
                "question": "Is it possible to create a USB flash drive that logs me in? If so how do I do it."
            }, 
            "id": "coo5mjw"
        }, 
        {
            "body": {
                "answer": "<p>I could imagine the most foolish way would be to make it like a macro keyboard.<br><br>When plugged is as a keyboard you can press a a hardwarebutton and then it does these inputs.<br><br>The problem within this lies.<br><br>If a input doesnt get registered ( as per example your TAB ) the whole password would be printed in the name field.<br></p>", 
                "question": "Is it possible to create a USB flash drive that logs me in? If so how do I do it."
            }, 
            "id": "coo49xh"
        }, 
        {
            "body": {
                "answer": "<p>1. Know how computers work on the processor and machine code level. This can help you understand things like performance on the micro-scale and how memory is laid out (important for understanding some exploits and weird behaviors of languages that don<sq>t do boundary checks).<br>2. What OSes do. Concepts of files, virtual memory, etc.<br>3. Caching. The scales of magnitude of access time. eg, how much faster is it to access data stored in the CPU cache vs memory vs a hard drive vs on the internet?<br>4. Basic command line usage. What the shell does, calling programs, arguments, returned status codes, piping output, stdout/stderr/stdin, redirecting output.<br><br>And yes, Linux is important. If you have to use a server (eg, for a website), there<sq>s a very high chance that it will run Linux. You<sq>ll also find that many Linux utilities (command line ones) are extremely helpful. Some such programs you should consider learning include<colon><br><br>1. grep<br>2. find<br>3. ls<br>4. man<br>4. less<br>4. ssh<br>4. tar<br>4. Command line tools for your language, like gcc, gdb, etc<br>5. At least one command line editor, such as vim, emacs, nano, etc<br>6. If applicable, command line versions of build tools, such as make, maven, sbt, etc<br>7. Version control of your choice, such as git, subversion, mercury<br>8. If applicable, interpreter or REPL versions of your language (run simple code without needing to compile), eg, python, scala, etc<br>9. Package management for your OS and/or language, eg, apt-get, npm, etc<br><br>Note that in order to be effective, you will have to learn #4 from the first list. You should also know how to execute shell scripts and how to combine these commands to write your own shell script (although personally, I<sq>d rather use Python over a shell script -- cross platform and much more readable code).<br><br>IDE doesn<sq>t really matter. Depends on the language and even then there<sq>s a lot of variance amongst work places. Most employers won<sq>t mention or care about the IDE. You can usually pick your own, too (provided that it<sq>s compatible with whatever the project uses).</p>", 
                "question": "What computer skills (aside from programming) should someone learn if they want to get a job as a programmer?"
            }, 
            "id": "clnwitx"
        }, 
        {
            "body": {
                "answer": "<p>Linux experience is great.  Learn how to operate on a real command line interface (not the one in Windows).  Learn either emacs or vi (I prefer vim), at least enough to open the editor and modify a file.  Write a few shell scripts, maybe pick up a scripting language like python or perl.</p>", 
                "question": "What computer skills (aside from programming) should someone learn if they want to get a job as a programmer?"
            }, 
            "id": "clnw6n5"
        }, 
        {
            "body": {
                "answer": "<p>noone mentioned googling thats why i will do it<br><br>you have to know how to google to get the results you want and you have to develop a mentality to google everything that you want to know (and filter the unimportant things out)</p>", 
                "question": "What computer skills (aside from programming) should someone learn if they want to get a job as a programmer?"
            }, 
            "id": "clnyg56"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll say Networking and Databases...pretty much anything you<sq>re going to write these days is going to store and retrieve data to/from somewhere and it<sq>s probably going to be over a network. Having a decent understanding of network and database principals will help.</p>", 
                "question": "What computer skills (aside from programming) should someone learn if they want to get a job as a programmer?"
            }, 
            "id": "clny441"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m 48 and the vast majority of programmers I know were self taught. I spent 10 years reading and doing tutorials until OOP design patterns finally clicked, but I was working after the first 6 months - often faking it until I made it. Got fired a few times but got to put the experience on my resume. Most HR people are clueless about how to hire programmers.</p>", 
                "question": "any self-taught programmers care to share story?"
            }, 
            "id": "cin46gc"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "any self-taught programmers care to share story?"
            }, 
            "id": "cin3gjk"
        }, 
        {
            "body": {
                "answer": "<p>Picked up programming in high school because it seemed cool and I always liked math. Messed around and made some mods for a few games, but nothing super cool or useful. Decided to go to school for computer science, dropped out after 3 semesters, bad grades, didn<sq>t focus on school enough.<br><br>Spent a few years not sure what I wanted to do, living at with my parents, working at a grocery store. Picked up programming again when a friend needed their website fixed, so I thought I<sq>d give it a shot. Doing some googling I was able to figure out it was just some server configuration, although I had no idea what I was doing I just found a stackoverflow answer for the same problem. Got paid 200 which was a ton of money for me at the time. <br><br>Decided to try pursuing learning on my own time, and rediscovered how much I loved programming. That same friend had me come fix various issues, and even implement some new features on their website over the next few months. Meanwhile I freelanced, realized I hated freelancing and was more interested in making <sq>software<sq>  instead of just spinning up wordpress installations for people. <br><br>Applied for a job and asked for a dirt low salary because I still didn<sq>t consider myself a really programmer. The code base was horrible, all my coworkers were pretty much self taught but without any motivation to improve. Took me about a 3 months to realize that I was already way ahead of my coworkers because I was constantly devoting my own time to improving. <br><br>6 months into the job I shot out a few resumes to see what was out there. I took the first job I was offered because I thought any other place would be more conducive to improving my skillset than where I was. Turns out there<sq>s a lot of bad development shops that don<sq>t care about programmer or software quality at all, as long as it works. 6 months onto that job I realized it was only a small step up from my previous one, and it still wasn<sq>t conducive to my learning. So I sent out a few resumes, because it can<sq>t hurt right? Well one of the resumes was to one of the big 4. They got back to me, gave me a brief phone screening, flew me in for an interview a week later and gave me a job offer a week later. I just started here a little over a month ago. It still feels pretty crazy to think I went from making 35k to over six figured in less than a year. </p>", 
                "question": "any self-taught programmers care to share story?"
            }, 
            "id": "cin69js"
        }, 
        {
            "body": {
                "answer": "<p>In my late 20s I found *The C Programming Language* book on an uncle<sq>s bookshelf and got intrigued. He set me up with a C compiler (Borland C, running under DOS, so my bugs would crash the OS and require a reboot). I wasn<sq>t working at the time, so I would spend all day on it. I got rather obsessed. I then taught myself C++. A year or so later, I got a job doing tech support at a videogame company. I started looking for ways to help around the department using my coding skills. My manager loved me and recommended me for promotion. Eventually, after 4 or so years from learning C, I was on a game team writing Playstation games.<br><br>Many of the best programmers I<sq>ve worked with are self-taught, which is not to say all self-taught coders are good or that being self-taught makes you better, but that people who<sq>s affinity for coding is so strong that they can<sq>t help but teach themselves are *more likely* than someone who chooses it as a college major for other reasons, to be good. A lot of the best programmers I know are people who went to school for other things, took a programming course as part of their major in math, physics, chemistry, etc., and got <dq>the bug<dq>, and ended up coding instead. <br><br>If programming reaches you in that way, such that you find it addictive, you<sq>re going to end up being good.<br><br>As for being employed; many of the best places to work could give a flying fuck how you learned to code, and care more about your ability. You only need to find one to have a work history, which most employers care more about than education history.<br><br><br><br><br><br><br></p>", 
                "question": "any self-taught programmers care to share story?"
            }, 
            "id": "cin6ife"
        }, 
        {
            "body": {
                "answer": "<p>Any sort of job threat that involves <dq>or you<sq>re fired<dq> means they<sq>re going to get rid of you anyway, but just need to document whatever they don<sq>t like.<br><br>You need to find a new job immediately. Work on your SSRS skills until you<sq>re awesome and you can get a job doing reporting almost anywhere.<br><br>Don<sq>t bother trying to cover everything, since you<sq>ll only be able to make an incremental improvement in a the time you have.</p>", 
                "question": "I just received an ultimatum improve my SQL server skill set or I<sq>ll be fired. Need help."
            }, 
            "id": "chdanu5"
        }, 
        {
            "body": {
                "answer": "<p>Hey I<sq>m a MSSQL database developer/ETL engineer and a T-SQL programmer.  I can definitely point you to some good resources.  In general, technet & BOL is an awesome resource.  Say what you want about Microsoft, but generally development library/documentation are really, really good.<br><br>* For variables, you should have a good idea of all the [datatypes](http<colon>//msdn.microsoft.com/en-us/library/ms187752.aspx) that SQL Server supports.  The datatypes that I wouldn<sq>t worry about right now (or never have to worry about) are spatial, hierarchyid, sql_variant, and timestamp.  The table type is used for passing in table valued parameters into stored procedures.<br><br>* Table variables are just tables stored in memory.  Note that this isn<sq>t the same as in-memory tables (which SQL Server doesn<sq>t support until very, very recently so nobody expects you to know this but you can look up Hekaton).  So don<sq>t assume that these will be necessarily faster than physical tables.  The big question is typically when would you use a temp table vs a table variable.  I would read this [stackexchange answer](http<colon>//stackoverflow.com/questions/27894/whats-the-difference-between-a-temp-table-and-table-variable-in-sql-server) as well as all the linked articles.  Once you get the hang of it table variables, you can look into using [table valued parameters](http<colon>//technet.microsoft.com/en-us/library/bb510489.aspx) which are tables that are passed into stored procedures.  I would definitely read the quintessential article by Erland Sommarskog on [passing <dq>arrays<dq> into sprocs](http<colon>//www.sommarskog.se/arrays-in-sql-2008.html).  There<sq>s some sample C#/VB code as well.  (In fact all of Erland<sq>s articles are pure gold, so read up as much as you can).<br><br>* As for <dq>obscure commands and functions<dq>, I would get [started here](http<colon>//technet.microsoft.com/en-us/library/ms174318.aspx).  The functions you want to be familiar with are Aggregate, Ranking, Conversion, Date, Logical, Mathematical, and String.  After that you want to look into Ranking functions, and Cursor Functions.  Ranking functions are used with <dq>Window Functions<dq> which uses the `OVER` clause.  This is a whole separate and advanced topic that is extremely, extremely valuable.  It<sq>s covered in great detail by Itzik Ben-Gan in this book on [High Performance T-SQL](http<colon>//www.amazon.com/Microsoft-High-Performance-Functions-Developer-Reference/dp/0735658366).  It<sq>s a small book but it<sq>s worth its weight in gold.  As far as [cursors](http<colon>//technet.microsoft.com/en-us/library/ms191179.aspx), I don<sq>t have any advice for you that you probably didn<sq>t already hear.  The proper use of cursors is a nuanced topic that requires deep understanding of the optimizing agent. My advice is learn to write a cursor, but don<sq>t use it unless you are performing sysadmin tasks, iterating over multiple tables, or you know what you are doing.  This will come with experience.<br><br>* Common Table Expressions are wonderful.  It improves readability of your T-SQL, but it also allows you to write [recursive queries](http<colon>//technet.microsoft.com/en-us/library/ms186243<percent>28v=sql.105<percent>29.aspx).  Generally speaking, you would use a CTE when you would use a subquery.  Since you are doing a lot of ETL, one place where you would want to use a temp table over a CTE is when you need to pop an index over a result set in a staging table.  Let<sq>s say you<sq>re loading data into a table, and you need to perform a lot of transformations.  The source table doesn<sq>t have the proper indexes.  In this case, instead of loading straight from source to destination and do all your transformations in a CTE, you would <dq>stage<dq> your data into a temp table, put indexes on the appropriate column(s), and then perform your transformations.<br><br>* XML.  Does your team/company want you to shred `xml` columns?  That<sq>s rough.  XML is typically at the application layer.  I personally *hate* storing XML in SQL Server.  I<sq>m not an expert on XML queries because I hardly ever use it.  I would strongly recommend [this resource](http<colon>//www.sqlservercentral.com/stairway/92778/).  It<sq>s a nice tutorial for XML queries in SQL Server, and it helped me tremendously when I was learning.  Sorry I can<sq>t help much here, however, because I avoid XML like the plague.<br><br>If you are heavily involved in ETL, I would get intimately familiar with the `MERGE` statement, [described here](http<colon>//msdn.microsoft.com/en-us/library/bb510625.aspx) and [discussion on optimization here](http<colon>//technet.microsoft.com/en-us/library/cc879317<percent>28v=sql.105<percent>29.aspx). For ETL, it comes in **very** handy.  Also, once you learn `MERGE`, read my little [blurb](http<colon>//www.reddit.com/r/SQLServer/comments/210tcn/how_to_treat_null_null_as_true_workaround_to_no/) about how to set `NULL` = `NULL` to be true.  It works pretty well with `MERGE` statements.<br><br>Aside from BOL/technet, I would browse through other [SQL Server Stairways](http<colon>//www.sqlservercentral.com/stairway/).  There<sq>s also a few good blogs/articles I recommend<colon> Anything by Grant Fritchey (/u/scarydba), Brent Ozar (/u/BrentOzar) and his team, and Kimberly Tripp off the top of my head.  Itzik Ben-Gan is a T-SQL God.  He has a lot of good books out (one I pointed to before).   /r/SQLServer and /r/SQL are good resources for questions.<br><br>God, I could go on forever, but I think this might be enough to get you started.<br><br>Also, PM me for any questions.</p>", 
                "question": "I just received an ultimatum improve my SQL server skill set or I<sq>ll be fired. Need help."
            }, 
            "id": "chdc3eb"
        }, 
        {
            "body": {
                "answer": "<p>>I just received an ultimatum, improve my SQL server skill set or I<sq>ll be fired. Need help.<br><br>Quit. No employer who offers such an ultimatum without providing you with the tools to improve it isn<sq>t someone you want to work for.</p>", 
                "question": "I just received an ultimatum improve my SQL server skill set or I<sq>ll be fired. Need help."
            }, 
            "id": "chdbl9y"
        }, 
        {
            "body": {
                "answer": "<p>Do the SQL courses on pluralsight. </p>", 
                "question": "I just received an ultimatum improve my SQL server skill set or I<sq>ll be fired. Need help."
            }, 
            "id": "chd4nlz"
        }, 
        {
            "body": {
                "answer": "<p>Shame it<sq>s just a bunch of sparsely annotated PowerPoints. I don<sq>t really think it<sq>s enough to go on to learn the material on your own.</p>", 
                "question": "MIT updates OpenCourseWare Intro to C and C++"
            }, 
            "id": "c8zytr6"
        }, 
        {
            "body": {
                "answer": "<p>Even if it were a repost, it<sq>s still appreciated. </p>", 
                "question": "MIT updates OpenCourseWare Intro to C and C++"
            }, 
            "id": "c8zxmze"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "MIT updates OpenCourseWare Intro to C and C++"
            }, 
            "id": "c90arps"
        }, 
        {
            "body": {
                "answer": "<p>If you<sq>re serious about C, then [this](http<colon>//ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-087-practical-programming-in-c-january-iap-2010/) is the one you<sq>ll wanna go through.</p>", 
                "question": "MIT updates OpenCourseWare Intro to C and C++"
            }, 
            "id": "c904qnk"
        }, 
        {
            "body": {
                "answer": "<p>The one thing I love about Microsoft as a company (and there is plenty to dislike, don<sq>t get me wrong), is that they value developers more than any other large tech firm. Their documentation, training, and evangelism of technology is pretty impressive. Of course it has the benefit of getting you to use their IDE and platform in the process, but so what, those skills transfer to all the other platforms too. Thanks for the link!<br></p>", 
                "question": "[C# / Visual Basic / HTML5 / JavaScript] Let Microsoft Teach You How to Code For Free"
            }, 
            "id": "c7y5shu"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s ok to learn HTML5 AND CSS3 without knowing HTML and CSS? Is there a difference?<br><br>http<colon>//channel9.msdn.com/Series/HTML5-CSS3-Fundamentals-Development-for-Absolute-Beginners</p>", 
                "question": "[C# / Visual Basic / HTML5 / JavaScript] Let Microsoft Teach You How to Code For Free"
            }, 
            "id": "c7yem4o"
        }, 
        {
            "body": {
                "answer": "<p>This seems really awesome, but just as a warning to newcomers to programming<colon> <dq>visual studio c++<dq> is not necessarily the same as c++ (possibly the same for other languages). That caused a HUGE amount of frustration for me when I started out with programming.<br><br>I had these problems about 6 years ago, so if this is not still the case please let me know so that I can delete this comment.</p>", 
                "question": "[C# / Visual Basic / HTML5 / JavaScript] Let Microsoft Teach You How to Code For Free"
            }, 
            "id": "c7ybzig"
        }, 
        {
            "body": {
                "answer": "<p>~</p>", 
                "question": "[C# / Visual Basic / HTML5 / JavaScript] Let Microsoft Teach You How to Code For Free"
            }, 
            "id": "c7y9gao"
        }, 
        {
            "body": {
                "answer": "<p>4 pounds a week is an incredible amount to be losing. You<sq>re better off shooting maybe half, even a quarter of that. If you lost that much weight in such a fast amount of time, you<sq>re very likely to put it back on because there is no sustainable way to lose 4 pounds a week without being on a starvation diet, which will not teach you the skills you need to actually keep the weight off. I would say start eating better and pursue physical activity for the myriad of other reasons other than purely weight loss. That said, its cool that you made the calculator!</p>", 
                "question": "Taught myself how to make a weight calculator...realised how much weight I need to lose <colon>D"
            }, 
            "id": "d3vxx5e"
        }, 
        {
            "body": {
                "answer": "<p>Got another program for you to write. Takes body weight and body fat percentage and spits out target weight at 10<percent> body fat. <br><br>The reason I say that, 190lbs is probably unrealistic unless you have no muscle to speak of. I<sq>m about the same size as you, with a decent amount of muscle, and my goal weight is closer to 220. My lean body mass is around 190lbs-200lbs, and an extremely healthy male will have 8-10<percent> body fat on top of that (more for women). It would be impossible/dangerous for me to be 190lbs unless I lost a lot of muscle. You might be different than me, but you can find places nearby that will do a high accuracy body fat percentage calculation, and that will tell you how far you actually have to go.</p>", 
                "question": "Taught myself how to make a weight calculator...realised how much weight I need to lose <colon>D"
            }, 
            "id": "d3vyh9c"
        }, 
        {
            "body": {
                "answer": "<p>Sorry for the wall of text, but I had a great experience losing weight that I feel could be useful to you. No one has mentioned it yet, but MyFitnessPal is a great phone app (and free!) available on Android and iPhone which lets you track your calories easily.  In my opinion, it is one of the best and simplest ways to lose weight. You input your height, weight, age, sex, etc., and it gives you a calorie target based on whether you are aiming to lose 1 or 2 lbs per week, etc. You can input your food and exercise and it keeps track of the calories, fat, protein, vitamins, etc., that you are consuming.<br><br>Pretty much any food you could ever imagine is already programmed into it because it is sort of open source, so people can add all of their own foods and stuff. For packaged food, it is even easier, since it has a bar-code scanner so you can just scan the package and it will import everything automatically.<br><br>It also gets easier and easier to use as it learns your common foods. I was at one point 280-285 (6<sq> tall), and I started using the app in 2013 and was able to drop down to about 220 over the course of maybe 5 months. I took some time off of it due to getting busy with work and stress during grad school, but currently I am sitting at about 245, so still significantly under where I started.<br><br>My favorite thing about it is that you can choose to diet however you want. If you want to build your diet around healthy eating all-around, you can do a bunch of small meals over the course of the day, alternatively, if you know you want to stuff your face with a full pizza at dinner, you can do that as long as you plan ahead and either keep your breakfast and lunch as small as possible or build a good workout into your day to burn off those extra calories you plan on having.  You can choose your battles.<br><br>If you want any more info about using the app, I<sq>d be glad to help. Regardless of whether you use it, just know that battles in the kitchen are just as important as battles in the gym, if not more so.</p>", 
                "question": "Taught myself how to make a weight calculator...realised how much weight I need to lose <colon>D"
            }, 
            "id": "d3w1gss"
        }, 
        {
            "body": {
                "answer": "<p>Have a head over to r/Keto, see if it is of interest to you? Ive been doing Keto since October, and have lost 55lb so far, and have never felt better</p>", 
                "question": "Taught myself how to make a weight calculator...realised how much weight I need to lose <colon>D"
            }, 
            "id": "d3vzpcy"
        }, 
        {
            "body": {
                "answer": "<p>FYI there<sq>s a lot of people out there saying LPtHW isn<sq>t a good course, and can in fact be detrimental by teaching you bad habits. you might wanna look into and google some of those discussions. Personally, I think it would be more useful to take an intro to CS/programming course that also teaches Python. This one is very solid, https<colon>//www.udacity.com/course/intro-to-computer-science--cs101, and so is [this MIT course](https<colon>//www.edx.org/course/introduction-computer-science-mitx-6-00-1x-6#!), though I<sq>m not sure when the next class starts. You can always still work through the previous class material on your own schedule without the <dq>credit.<dq> <br><br>also check this out<colon> https<colon>//github.com/open-source-society/computer-science#introduction-to-computer-science<br><br>It<sq>s an online curriculum people put together to learn everything you would for a CS degree for free.<br><br>(I probably should have asked if you<sq>re completely new or are more advanced and just learning a new language)</p>", 
                "question": "I am going to start learning Python with <dq>Learn Python the Hard Way<dq>. Should I begin with codeacademy before I do so? A lot of people on this sub seem to take that path."
            }, 
            "id": "d10swj1"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been doing LPTHW for a 2-3 of weeks now. Best advice<colon> just jump in. I looked around for awhile trying to decide what to do but in the end I just had to start something. LPTHW is designed for beginners with little experience. It<sq>s only 50+ lessons and the lessons are short, which makes them less intimidating. I try to do 2 hrs per day  4-5 days a week. So far it<sq>s been fun. <br><br>My first day was the first two lessons and honestly it felt really good to just start. Now that I<sq>ve been working through the lessons regularly I<sq>ve been finding more resources and I have a better idea of how to move forward once I<sq>m done with LPTHW. For me, learning programming has a built in reward system because I<sq>m solving these little problems every day. I never thought I<sq>d get excited about finding that missing <dq><colon><dq> in my 32 lines of code but last night I let out an audible yell. Just start and be consistent.</p>", 
                "question": "I am going to start learning Python with <dq>Learn Python the Hard Way<dq>. Should I begin with codeacademy before I do so? A lot of people on this sub seem to take that path."
            }, 
            "id": "d10pmhx"
        }, 
        {
            "body": {
                "answer": "<p>The upsides of Codecademy<colon><br><br>- Your lessons, code editor, and output are all in one window<br>- You get instant feedback on whether your code worked, and hints on how to do things<br>- It<sq>s got a built-in community to give you help<br><br>Downsides<colon><br><br>- It doesn<sq>t go very in-depth<br>- It doesn<sq>t help you learn the process of writing and running code on your own system.  The #1 question people have after completing codecademy is usually <dq>how do I actually write and run python on my own computer<dq>.<br><br>LPTHW, by contrast, will walk you through a lot of that setup, and goes much more in-depth.<br><br>The problem with both resources, unfortunately, is that they both teach Python2 (LPTHW actively discourages Python 3).  We<sq>ve moved past that now.  Yes, there are still people using Python 2 for legacy reasons, but new learners should be learning Python 3 in 2016.<br><br>The other problem, as we<sq>ve been discussing on /r/learnpython, is that they seem to teach non-idiomatic python.  Then again, apparently almost every beginner resource teaches ugly, non-idiomatic python.  You<sq>ll probably have to get caught up on that later.<br><br>If you want a list of recommended resources that will teach you Python 3, hop over to /r/learnpython and check out the FAQ.</p>", 
                "question": "I am going to start learning Python with <dq>Learn Python the Hard Way<dq>. Should I begin with codeacademy before I do so? A lot of people on this sub seem to take that path."
            }, 
            "id": "d10qmp4"
        }, 
        {
            "body": {
                "answer": "<p>My advice is to skip codecademy and go straight to [this course](http<colon>//cscircles.cemc.uwaterloo.ca), which is  one of the best intro to python/programing I<sq>ve personally seen. <br><br>LPTHW isn<sq>t (IMO) a very good book. Learning by rote is a very outdated teaching style for a reason, and Zed has a lot of controversial opinions which he presents as facts so make sure you fact-check everything he says. </p>", 
                "question": "I am going to start learning Python with <dq>Learn Python the Hard Way<dq>. Should I begin with codeacademy before I do so? A lot of people on this sub seem to take that path."
            }, 
            "id": "d10vfoo"
        }, 
        {
            "body": {
                "answer": "<p>Codecademy is a nice site to get a quick glimpse (or a refresher) and mainly to learn syntax.<br><br>It will not teach you *programming*, though. (HTML/CSS are not programming BTW. HTML is a content markup language and CSS is a layout - presentation - language, both do not count as programming.)<br><br>Codecademy as a sole resource is not enough for anything. You<sq>ll need additional tutorials, books, etc. and also you<sq>ll need lots of practice.</p>", 
                "question": "Is Codecamedy any good for learning programming?"
            }, 
            "id": "csma4ky"
        }, 
        {
            "body": {
                "answer": "<p>Coursera.org.  python for infomatics.  Free through the UofM</p>", 
                "question": "Is Codecamedy any good for learning programming?"
            }, 
            "id": "csma461"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s designed super well, but I would mainly use Codecademy as a reinforcer of knowledge or something you do on the side of learning from more thorough sources. <br><br>Codecademy does a lot of handholding which leads to you feeling like you did more than you actually did. However, this does lead to people getting really excited about writing code which in my opinion is a great thing!<br><br>There are so many amazing resources to learn any programming language you want and you can probably find links to the resources by searching in this subreddit. <br><br>Overall I<sq>m excited that you<sq>re excited! If codecademy got you excited and you like it so far, I<sq>d say continue for the time being but remember that once you finish all the codecademy courses you are still far from an expert in any of the languages. </p>", 
                "question": "Is Codecamedy any good for learning programming?"
            }, 
            "id": "csmatmd"
        }, 
        {
            "body": {
                "answer": "<p>Basically this thread<sq>s tldr<colon><br><br>It<sq>s good for learning syntax, but not good for learning what to do with the syntax. </p>", 
                "question": "Is Codecamedy any good for learning programming?"
            }, 
            "id": "csmihkf"
        }, 
        {
            "body": {
                "answer": "<p>Have been using FreeCodeCamp for a while, and it<sq>s really great.</p>", 
                "question": "If you haven<sq>t been to Free Code Camp yet they just made some amazing new changes."
            }, 
            "id": "crqqole"
        }, 
        {
            "body": {
                "answer": "<p>Cheers dude, been wanting to get into either Odin or this one. Will check it out.<br><br>Ninja edit<colon> Taken from [this thread](http<colon>//www.reddit.com/r/learnprogramming/comments/373z9s/need_guidance_on_which_web_development_track_i/crmvksf) a [post](http<colon>//www.arshaan.me/why-i-switched-from-the-odin-project-to-freecodecamp/) from someone who switched from Odin Project to FreeCodeCamp.</p>", 
                "question": "If you haven<sq>t been to Free Code Camp yet they just made some amazing new changes."
            }, 
            "id": "crqoe3p"
        }, 
        {
            "body": {
                "answer": "<p>What is the else block?<br><br>^(I<sq>m so funny)</p>", 
                "question": "If you haven<sq>t been to Free Code Camp yet they just made some amazing new changes."
            }, 
            "id": "crqti6r"
        }, 
        {
            "body": {
                "answer": "<p>Just checked it out this morning  after someone else mentioned it on here , already making my way through the lessons and enjoying it, seems like i could actually learn quite a lot if i stick with it for  a few weeks or months.<br><br>Not my first ever attempt to learn programming but it seems like it could be my most successful. </p>", 
                "question": "If you haven<sq>t been to Free Code Camp yet they just made some amazing new changes."
            }, 
            "id": "crqw24y"
        }, 
        {
            "body": {
                "answer": "<p>just laughed my ass off as i saw LOLCODE the first time<br><br>     HAI<br>     CAN HAS STDIO?<br>     PLZ OPEN FILE <dq>LOLCATS.TXT<dq>?<br>         AWSUM THX<br>             VISIBLE FILE<br>         O NOES<br>             INVISIBLE <dq>ERROR!<dq><br>     KTHXBYE</p>", 
                "question": "A somewhat wacky question...What is a bad language to learn?"
            }, 
            "id": "cqmudr5"
        }, 
        {
            "body": {
                "answer": "<p>There are **tons** of languages, since programming languages are man-made and humans can make some pretty stupid shit sometimes. Just because we can.<br><br>Here<sq>s some code in a language called Brainfuck (hello world)<colon><br><br>    +++++ +++               Set Cell #0 to 8<br>    [<br>        >++++               Add 4 to Cell #1; this will always set Cell #1 to 4<br>        [                   as the cell will be cleared by the loop<br>            >++             Add 2 to Cell #2<br>            >+++            Add 3 to Cell #3<br>            >+++            Add 3 to Cell #4<br>            >+              Add 1 to Cell #5<br>            <<<<-           Decrement the loop counter in Cell #1<br>        ]                   Loop till Cell #1 is zero; number of iterations is 4<br>        >+                  Add 1 to Cell #2<br>        >+                  Add 1 to Cell #3<br>        >-                  Subtract 1 from Cell #4<br>        >>+                 Add 1 to Cell #6<br>        [<]                 Move back to the first zero cell you find; this will<br>                        be Cell #1 which was cleared by the previous loop<br>        <-                  Decrement the loop Counter in Cell #0<br>    ]<br><br>There<sq>s also a programming language, called ArnoldC, which is made entirely out of Arnold Schwarzenegger<sq>s catch phrases. Here<sq>s how you would print numbers 1-10 in ArnoldC<colon><br><br>    IT<sq>S SHOWTIME<br><br>    HEY CHRISTMAS TREE isLessThan10<br><br>    YOU SET US UP @NO PROBLEMO<br><br>    HEY CHRISTMAS TREE n<br><br>    YOU SET US UP 0<br><br>    STICK AROUND isLessThan10<br><br>    GET TO THE CHOPPER n<br><br>    HERE IS MY INVITATION n<br><br>    GET UP 1<br><br>    ENOUGH TALK<br><br>    TALK TO THE HAND n<br><br>    GET TO THE CHOPPER isLessThan10<br><br>    HERE IS MY INVITATION 10<br><br>    LET OFF SOME STEAM BENNET n<br><br>    ENOUGH TALK<br><br>    CHILL<br><br>    YOU HAVE BEEN TERMINATED<br><br>These are some languages that fulfill all of your categories above.</p>", 
                "question": "A somewhat wacky question...What is a bad language to learn?"
            }, 
            "id": "cqmp64n"
        }, 
        {
            "body": {
                "answer": "<p>There are some bad languages invented as jokes like INTERCAL, unlambda, brainfuck, etc. But, you have no danger of getting a job using them, because no sane person would use them for anything important. For a language to really be <dq>bad to learn<dq> in my opinion, you have to run the risk of someone offering you enough money to coerce you into using it.<br><br>With that in mind, I<sq>ll suggest [MUMPS](https<colon>//en.wikipedia.org/wiki/MUMPS).</p>", 
                "question": "A somewhat wacky question...What is a bad language to learn?"
            }, 
            "id": "cqmr7is"
        }, 
        {
            "body": {
                "answer": "<p>COBOL - you might get roped into making a career of it. It will be sad, lonely and unfulfilling.</p>", 
                "question": "A somewhat wacky question...What is a bad language to learn?"
            }, 
            "id": "cqmtfvb"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t agree with this at all. If your interested in robotics or an embedded projects then none of this is going to help you.<br><br>Best advice. Programming is about building something. So find something you want to build and then figure out how to write it. Figure out which language would be the best to write it in. Then start writing it piece by piece, line by line. <br><br>Edit<colon> Due to the popularity I<sq>m going to add to this. <br><br>If a problem is to large, figure out ways to break it down. Look to see how others have solved the problem or a similar problem. Take what they did and then apply it to what your doing. Create simple tests to validate your solution and then build on those. <br><br>When you fail and you will fail. Don<sq>t take it hard. No project ever gets completed without more failures than successes just keep working on it. Don<sq>t worry about time limits <dq>It<sq>s done when its done!<dq> But that doesn<sq>t mean slack off. That means work as hard as you can but if its taking longer than you thought it would that<sq>s normal. A great way to help you stay focused is to set aside time each day that you<sq>ll code for. I do an hour of code each day where I solve a programming problem. Doesn<sq>t matter what it is, but as long as I<sq>m coding. Then time passes and an hour turns into two hours.<br><br>Last thing. Whatever coding you do the more you do it the better you<sq>ll become. You<sq>ll have great, good, and projects that just plain suck for some reason. However, you will improve if you just keep coding. If want to be a steely eye<sq>d coder then just code code code away! </p>", 
                "question": "Your First 100 Hours of Code"
            }, 
            "id": "coya7hk"
        }, 
        {
            "body": {
                "answer": "<p>Seems like a pretty good path if you want to learn to make websites and do server-side stuff. I know some people who might be interested in this. I<sq>ll pass it along. </p>", 
                "question": "Your First 100 Hours of Code"
            }, 
            "id": "coy422s"
        }, 
        {
            "body": {
                "answer": "<p>Worth noting this only really applies to a very specific kind of learning to program. For people who want to get into embedded, scientific, numeric, ML or other fields this isn<sq>t really applicable.</p>", 
                "question": "Your First 100 Hours of Code"
            }, 
            "id": "coy8o8n"
        }, 
        {
            "body": {
                "answer": "<p>What? I found my wife by diving into the next <dq>hot<dq> thing. <br><br>But really, I<sq>ve been programming full time for 5 or 6 years and consider myself pretty solid. I don<sq>t know (or have ever known) HTML, CSS, Javascript/jQuery, Ruby, or Rails. You say they should start by finding what technologies are interesting, and then, in direct contrast, recommended they learn specifically web dev technologies.</p>", 
                "question": "Your First 100 Hours of Code"
            }, 
            "id": "coyctha"
        }, 
        {
            "body": {
                "answer": "<p>One trick I<sq>ve found useful if I am trying to learn a new piece of tech is grab a cheat sheet and make it my desktop backdrop.  That way it<sq>s always right there, and I am familiarizing myself with it while idle.  When I find I no longer need to reference it, I remove it and replace it with something else.  I learned vi commands and regexes (regular expressions) this way.<br><br>I would also usually use Photoshop to invert the colors on the cheat sheets so they were white text on black backgrounds, but just because I prefer darker backdrops.</p>", 
                "question": "65+ Useful Cheat Sheets for Designers and Developers"
            }, 
            "id": "cj6945h"
        }, 
        {
            "body": {
                "answer": "<p>the resolution is horrible and it<sq>s basically a collection of CSS tips and tricks</p>", 
                "question": "65+ Useful Cheat Sheets for Designers and Developers"
            }, 
            "id": "cj691gl"
        }, 
        {
            "body": {
                "answer": "<p>how many CSS cheat-sheets do you really need though?</p>", 
                "question": "65+ Useful Cheat Sheets for Designers and Developers"
            }, 
            "id": "cj67rru"
        }, 
        {
            "body": {
                "answer": "<p>jQuery 1.3? <br><br>2009 represent!</p>", 
                "question": "65+ Useful Cheat Sheets for Designers and Developers"
            }, 
            "id": "cj6hcu0"
        }, 
        {
            "body": {
                "answer": "<p>any idea how to sign up for the intro to databases on coursera? Every time i click <dq>go to class<dq> it just says i have to enroll first but there is nowhere to enroll. I have an account and im already enrolled in the CS101 self paced...<br><br><br>Thanks for the list!<br><br>EDIT<colon>Go directly to Stanford<sq>s Class2Go website to enroll in intro to databases. http<colon>//class2go.stanford.edu/db/Winter2013</p>", 
                "question": "Here<sq>s a list of 34 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2013)"
            }, 
            "id": "cd8e4h7"
        }, 
        {
            "body": {
                "answer": "<p>Can someone give me some help? I crated an account and am trying to access the Introduction to Databases course, but when I click the go to class button it says <dq>Looks like you are not enrolled in this course!<dq></p>", 
                "question": "Here<sq>s a list of 34 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2013)"
            }, 
            "id": "cd8id5r"
        }, 
        {
            "body": {
                "answer": "<p>Too many  awesome classes, not enough time.</p>", 
                "question": "Here<sq>s a list of 34 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2013)"
            }, 
            "id": "cd8meo2"
        }, 
        {
            "body": {
                "answer": "<p>Heya, have you thought about adding a Google Calendar option to the MOOC tracker?  So there would be calendar entries for each course (such as next lesson date, start date, etc.)<br><br>I tried out the current option, but it just links the start date to the calendar.</p>", 
                "question": "Here<sq>s a list of 34 free online programming/CS courses (MOOCs) with feedback(i.e. exams/homeworks/assignments) that you can start this month (November 2013)"
            }, 
            "id": "cd8a1kg"
        }, 
        {
            "body": {
                "answer": "<p>And also get pen and paper or a white board. Many things just click when you start drawing them.</p>", 
                "question": "Close your eyes and visualize"
            }, 
            "id": "d8swnki"
        }, 
        {
            "body": {
                "answer": "<p>Completely reminds me of this comic!<br><br>http<colon>//m.imgur.com/gallery/3uyRWGJ</p>", 
                "question": "Close your eyes and visualize"
            }, 
            "id": "d8tehmt"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m pretty new to programming (c#) and I do something similar, but what helps me is to imagine if my code is a physical machine, and each function is a part of the assembly line. <br>Before starting any actual programming I used a lot of node-based post-production software, and their <dq>coding<dq> system of dragging wires between inputs and outputs helped me visualize passing values through particular modifiers.<br></p>", 
                "question": "Close your eyes and visualize"
            }, 
            "id": "d8t67uf"
        }, 
        {
            "body": {
                "answer": "<p>What you<sq>re talking about requires talent. In my experience, people can<sq>t learn a talent.<br><br>Example<colon> I coached rec-league soccer for 9-12 yr olds. Some kids had field vision (like radar, knowing kinda where other people on the field are), some didn<sq>t. Out of like 30 kids, there were like 5 that had both field vision and aptitude with the game, then some 10 each that had one or the other in varying degrees, and then The Professor and Maryann.<br><br>I tried very hard to teach the kids without vision how to be aware, but they simply didn<sq>t have the wiring. They were good or whatever with whatever they saw in front of them, but had no concept outside their Field of View.<br><br>As a programmer, I understand what you<sq>re talking about. I see music and sometimes design that way. However, I can<sq>t see code that way.<br><br>Bottom line<colon> please don<sq>t fault or become frustrated with people under your tutelage that don<sq>t do this. They may just simply not have the wiring.</p>", 
                "question": "Close your eyes and visualize"
            }, 
            "id": "d8t65wy"
        }, 
        {
            "body": {
                "answer": "<p>Your API key is exposed. It may not be a big deal for this project but you don<sq>t want to get in the habit of exposing your API keys.</p>", 
                "question": "WeatherCat<colon> my first little web app. It is buggy and useless but I made it."
            }, 
            "id": "d1dv0el"
        }, 
        {
            "body": {
                "answer": "<p>Cool, I<sq>ll forward it to my two girls. They love cats.</p>", 
                "question": "WeatherCat<colon> my first little web app. It is buggy and useless but I made it."
            }, 
            "id": "d1dtbgd"
        }, 
        {
            "body": {
                "answer": "<p>Loved the cat gif. Was not expecting that. I think using the word <dq>halp<dq> is a bit much, but that<sq>s just something that tends to grind my gears. I doubt you<sq>d do that if you were selling this to someone, so yeah, to each their own.</p>", 
                "question": "WeatherCat<colon> my first little web app. It is buggy and useless but I made it."
            }, 
            "id": "d1e2p0g"
        }, 
        {
            "body": {
                "answer": "<p>You could use Google<sq>s geocoder to give you the latitude and longitude based on the users input then take those values and plug it into OpenWeatherMap. I<sq>ve done something similar in the past and it worked pretty well for me.</p>", 
                "question": "WeatherCat<colon> my first little web app. It is buggy and useless but I made it."
            }, 
            "id": "d1dz3cj"
        }, 
        {
            "body": {
                "answer": "<p>Version control. Learn in right away. Most noobs (myself included) put it off till the last minute. Then you mess stuff up irreversibly in a big project and you<sq>re all like, <dq>shit I shouldve used version control<dq>. </p>", 
                "question": "Programmers could you share one real-life problem you had and help beginners learn from it ?"
            }, 
            "id": "cmcahxq"
        }, 
        {
            "body": {
                "answer": "<p>Back when I was first learning to program, I was a part of my school<sq>s robotics team where I was in charge of coding the robot. One evening, I ran into a completely incomprehensible bug -- after making a few minor changes to the code, everything stopped working. Motors were suddenly turning at half-speed/weren<sq>t turning at the same rate to each other, random pieces of the system were firing on and off erratically, etc -- the entire thing was crippled.<br><br>I must have spent _hours_ double-checking my code and trying different things. Eventually, I had the idea of rolling back to my old version, before I had made the change (and realized why version control was so important!), and discovered that the problem _still_ persisted. <br><br>I started investigating the hardware/wiring, and after a few more hours, discovered the problem -- the effing battery was almost dead. It was obvious in retrospect, but I had previously assumed that the battery would either be charged or dead<colon> it hadn<sq>t occurred to me that there was ever an intermediate stage. As it turns out, a half-dead battery apparently has enough juice to partly and inconsistently power the system, explaining the phantom bugs I was experiencing. <br><br>I was too used to thinking in binary -- real life is analog.<br><br>---<br><br>I learned 3 valuable lessons from this experience<colon><br><br>1. Be very paranoid, and assume as little as possible. Don<sq>t jump to conclusions, and test the hell out of everything.<br>2. Track all your changes, and use version control religiously. Being able to revert to an old version of code is a _super_ helpful debugging technique.<br>3. Not every problem is actually due to coding errors. As programmers, we tend to focus exclusively on our code, but sometimes it helps to pause and start looking a little more broadly at the overall context in which your code lives. Often, your code is only a small part of the bigger picture, and you should always try and maintain that perspective and avoid tunnel vision.</p>", 
                "question": "Programmers could you share one real-life problem you had and help beginners learn from it ?"
            }, 
            "id": "cmccdoc"
        }, 
        {
            "body": {
                "answer": "<p>I would say one of my problems when I first got out of college was being able to read and understand other people<sq>s code at a high level. <br><br>It<sq>s one thing reading your own code or looking at someone else<sq>s 200 line program, but navigating through 1 million+ lines of code to find an issue is something that they can<sq>t teach in school.<br><br>So the lesson that a beginner can learn is, spend time reading code and not just writing it. It will help you in the future.</p>", 
                "question": "Programmers could you share one real-life problem you had and help beginners learn from it ?"
            }, 
            "id": "cmca1rd"
        }, 
        {
            "body": {
                "answer": "<p>So there I was learning from tutorials, like you. I<sq>d learn a new concept and then the writer would either prompt me with a challenge or I would make my own program to use what I learned. I always had so much trouble figuring out how to use methods other people created. Then one day it clicked. See I<sq>m an Electronics Technician, but I like to program and maybe someday I<sq>ll get a job programming. But it<sq>s my experience that made it click. Programming is just like electronics systems, it<sq>s all inputs and outputs. All those methods I was having trouble with, it was because I didn<sq>t truly understand that just like those systems they often required a specific input (parameters) or gave a specific output. <br><br>So it<sq>s always important to remember while programming, what do you need and what will you get? What you get is just as important because it needs to fit in with the rest of what the program expects to receive.</p>", 
                "question": "Programmers could you share one real-life problem you had and help beginners learn from it ?"
            }, 
            "id": "cmc7rro"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Hey Programmers what does your desk look like?"
            }, 
            "id": "ckmm9b3"
        }, 
        {
            "body": {
                "answer": "<p>[Mine](http<colon>//i.imgur.com/eyrdvkl.jpg). Sorry about the potato camera.<br><br>I<sq>m not actually working today, but this is a typical layout. From top left working clockwise<colon><br><br>* Work email, work Slack<br>* (left speaker)<br>* PSPP (hobby project), bash terminals for Vagrant boxes and git<br>* (right speaker)<br>* TweetDeck, MusicBox<sq>s MiniSub interface<br>* Reddit tabs, Stack Overflow and misc research<br>* Visual Studio (often with toolbars on the top and left monitor)<br>* MySQL Workbench, PDF docs.<br>* HD webcam in center.<br><br>RGB LED strip for lighting behind the monitors, which is important for illuminating the keyboard at night. One of the HDMI monitors has a headphone out jack that connects to the speaker amp and subwoofers. One USB hub on the desk where I can reach it, one on the monitor stand. Various piles of crap I should do something with on the desk.<br><br>Just out-of-frame to the left is the <sq>laptop<sq> (Asus G75VW) running it all.<br><br>Edit<colon> [some technical details](http<colon>//www.reddit.com/r/learnprogramming/comments/2gu9la/hey_programmers_what_does_your_desk_look_like/ckn5z07)</p>", 
                "question": "Hey Programmers what does your desk look like?"
            }, 
            "id": "ckmtwnc"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//i.imgur.com/w56Ic32.jpg<br></p>", 
                "question": "Hey Programmers what does your desk look like?"
            }, 
            "id": "ckmknbo"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll start. http<colon>//imgur.com/vpB1MsA<br><br>EDIT<colon> Thanks for showing me some of your awesome and okay-ish desks. [Here<sq>s a bonus pic.](http<colon>//imgur.com/seAG3co)</p>", 
                "question": "Hey Programmers what does your desk look like?"
            }, 
            "id": "ckmkhoe"
        }, 
        {
            "body": {
                "answer": "<p>Same idea [here](https<colon>//www.kickstarter.com/projects/primerist/code-hero-a-game-that-teaches-you-to-make-games-he/posts) and waste of money. Funded in Feb 2012 and 2 years the designer closes the project.</p>", 
                "question": "Codespells (video game that teaches players how to code) launched their Kickstarter campaign today!"
            }, 
            "id": "ck7btwu"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//codecombat.com/ - hey look a FREE video game that already does this</p>", 
                "question": "Codespells (video game that teaches players how to code) launched their Kickstarter campaign today!"
            }, 
            "id": "ck7t39n"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not sure copying Scratch and adding WoW to it is going to make it easier to learn coding.</p>", 
                "question": "Codespells (video game that teaches players how to code) launched their Kickstarter campaign today!"
            }, 
            "id": "ck7a3ny"
        }, 
        {
            "body": {
                "answer": "<p>I like the idea and although I<sq>m sure the intention is good, I have to agree with people saying this doesn<sq>t really add on to the learning process of programming. If anything, I<sq>d be inclined to say it would take it away. Based on what<sq>s provided already, it doesn<sq>t seem like players would be able to internalize concepts as they<sq>re applied.<br><br>Still, it<sq>s creative. I<sq>ll be keeping up to tabs with this and decide if it<sq>s worth donating to.</p>", 
                "question": "Codespells (video game that teaches players how to code) launched their Kickstarter campaign today!"
            }, 
            "id": "ck7p39h"
        }, 
        {
            "body": {
                "answer": "<p>Linkbait.</p>", 
                "question": "10 Secrets You Should Have Learned with Your Software Engineering Degree \u2013 But Probably Didn\u2019t"
            }, 
            "id": "ci01l0p"
        }, 
        {
            "body": {
                "answer": "<p>Now I don<sq>t know about Software Engineering, but I would say any CS program that doesn<sq>t at least expose students to 2 through 9, isn<sq>t worth a shit.<br><br>Hell, regex? Damn near half of my Computational Complexities course was Regex. That<sq>s pure CS right there.<br><br>Basically this article should be <dq>2 things schools should start incorporating more<dq>.</p>", 
                "question": "10 Secrets You Should Have Learned with Your Software Engineering Degree \u2013 But Probably Didn\u2019t"
            }, 
            "id": "chzvxzv"
        }, 
        {
            "body": {
                "answer": "<p>TIL my shitty college degree taught me stuff</p>", 
                "question": "10 Secrets You Should Have Learned with Your Software Engineering Degree \u2013 But Probably Didn\u2019t"
            }, 
            "id": "chzx8i6"
        }, 
        {
            "body": {
                "answer": "<p><dq>Secrets<dq>. Really.<br><br>EDIT<colon> While I<sq>m up this high here, I would like to give students some solid advice<colon> if you are not taught this it is up to you to learn. You are solely responsible for your education. If you weren<sq>t taught these things, that is not an excuse to not have learned it.</p>", 
                "question": "10 Secrets You Should Have Learned with Your Software Engineering Degree \u2013 But Probably Didn\u2019t"
            }, 
            "id": "ci00mwi"
        }, 
        {
            "body": {
                "answer": "<p>/r/freecodecamp you will find other students creating the same projects you are and may learn a thing or two from their projects. Be sure to post it there too</p>", 
                "question": "I<sq>m learning front development from freecodecamp. I really like the way they encourage students to create real world applications. It<sq>s helped me learn a lot. Just showing off a small project!"
            }, 
            "id": "ddu2wzv"
        }, 
        {
            "body": {
                "answer": "<p>Tip<colon> when writing on codepen in html section you are already writing in body tag. To add external stuff use cogs at the top of relevant sections.</p>", 
                "question": "I<sq>m learning front development from freecodecamp. I really like the way they encourage students to create real world applications. It<sq>s helped me learn a lot. Just showing off a small project!"
            }, 
            "id": "ddtp9wr"
        }, 
        {
            "body": {
                "answer": "<p>This is actually really dope, great work!<br><br>Can you break down and explain the fetch to get a new quote when I click on the new quote button?</p>", 
                "question": "I<sq>m learning front development from freecodecamp. I really like the way they encourage students to create real world applications. It<sq>s helped me learn a lot. Just showing off a small project!"
            }, 
            "id": "ddu4s12"
        }, 
        {
            "body": {
                "answer": "<p>You could add ending quote at the end like in Quotes on design site</p>", 
                "question": "I<sq>m learning front development from freecodecamp. I really like the way they encourage students to create real world applications. It<sq>s helped me learn a lot. Just showing off a small project!"
            }, 
            "id": "ddu5vsd"
        }, 
        {
            "body": {
                "answer": "<p>Find out what he<sq>s into so he can create programs that align with his interest. This makes the whole process less of a chore.<br><br>My dad was interested in graphics like fractals and tiling patterns so I taught him how to write code in Processing and javascript.</p>", 
                "question": "Teach a 60 year old how to code."
            }, 
            "id": "daocyyc"
        }, 
        {
            "body": {
                "answer": "<p>[CODE<colon> The Hidden Language of Computer Hardware and Software](https<colon>//www.amazon.com/dp/B00JDMPOK2/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1) is a great book written for the non-tech crowd.  It gives a good basis for what computers are all about.       <br><br>If he works in an office, I<sq>d point him to [Automate the Boring Stuff with Python](https<colon>//automatetheboringstuff.com/) as it will deal with things he is probably already familiar with.      <br><br></p>", 
                "question": "Teach a 60 year old how to code."
            }, 
            "id": "daoiefp"
        }, 
        {
            "body": {
                "answer": "<p>As an older gentleman myself, our brains have been trained to learn things and solve them a specific way. However, that doesn<sq>t easily translate to using code to solve the <dq>hit it with a hammer until it goes away<dq> problem. <colon>)<br>If he<sq>s more interested in web (front end) page, sit him down in front of freecodecamp. You can try the [Viking code school prep course](https<colon>//www.vikingcodeschool.com/prep) and see how he feels about that. For python (back end stuff), have him look at the Automate the Boring Stuff book. <br><br>I think from those two, you<sq>ll find out where his interest lays and can then go from there. Good luck. <br>FWIW, I<sq>m still trying to figure it out for myself still.</p>", 
                "question": "Teach a 60 year old how to code."
            }, 
            "id": "daolef9"
        }, 
        {
            "body": {
                "answer": "<p>show him Codecademy or FreeCodeCamp.<br><br>If he<sq>s interested, he<sq>ll pick it up himself.</p>", 
                "question": "Teach a 60 year old how to code."
            }, 
            "id": "daod08y"
        }, 
        {
            "body": {
                "answer": "<p>An alternative suggestion is to break the resources section into beginner and intermediate. The logical next step after finishing a beginner tutorial would be to move onto the more advanced content.</p>", 
                "question": "[Meta] Can we please update the FAQ to deal with the weight of <dq>I just finished [wellKnownBeginnerCourse] and am lost on what to do next<dq>?"
            }, 
            "id": "cyg18og"
        }, 
        {
            "body": {
                "answer": "<p>You can edit the FAQ yourself. Please do!</p>", 
                "question": "[Meta] Can we please update the FAQ to deal with the weight of <dq>I just finished [wellKnownBeginnerCourse] and am lost on what to do next<dq>?"
            }, 
            "id": "cyg2ptp"
        }, 
        {
            "body": {
                "answer": "<p>If the question is just as you say (<dq>... am lost as what to do next<dq>), then having a section of the FAQ that will get them unlost sounds like a great idea.<br><br>But we shouldn<sq>t forget this is a community as well as a learning resource. The aim should never be to shut down someone<sq>s attempt at starting a conversation, even if that conversation might include a request for advice that is tiresome to answer.<br><br>We already have a Stack Exchange. We don<sq>t need another one, IMO.</p>", 
                "question": "[Meta] Can we please update the FAQ to deal with the weight of <dq>I just finished [wellKnownBeginnerCourse] and am lost on what to do next<dq>?"
            }, 
            "id": "cyg63mv"
        }, 
        {
            "body": {
                "answer": "<p>We probably can<sq>t avoid people posting the questions, but it would be nice to be able to point them to a canned response in the FAQ.<br><br>We still get lots of <dq>I<sq>m interested in programming, but don<sq>t know where to start questions.<dq> But being able to point to the FAQ is helpful.</p>", 
                "question": "[Meta] Can we please update the FAQ to deal with the weight of <dq>I just finished [wellKnownBeginnerCourse] and am lost on what to do next<dq>?"
            }, 
            "id": "cyg5io9"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s fairly simple<colon><br><br>Good code is *readable, self-explanatory* code.<br><br>+ Keep your functions/methods short<br>+ Let your functions/methods only do *one* thing, not multiple things.<br>+ Keep input/output separated from logic as far as possible (e.g. instead of directly printing something return a string that can be printed when needed, don<sq>t ask for input directly, use parameters for methods). I/O should be handled in a separate class (mostly the class where the *main* entry point is).<br>+ Use clever naming (names that explain the purpose) x,y,z,i,k are fine for loops, but for anything else proper names are better.<br>+ Comment *why* you did something, not *what* you did. Comments should only explain the reason why something was done in a certain way, but never what was done.<br>+ Don<sq>t use *magic numbers* (such as conversion factors, or other numbers that have a special meaning). Declare them as constants and use the constants.<br>+ Use a standard indentation style. Either keep all `{` on the same line or on a separate line, don<sq>t mix them.</p>", 
                "question": "How does one write <sq>good code<sq>?"
            }, 
            "id": "cqw5kd0"
        }, 
        {
            "body": {
                "answer": "<p>Basically almost everything in the book [Clean Code](http<colon>//www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882)<br><br>Good code is good that is easy to read and maintain. It<sq>s code that doesn<sq>t require a ton of comments to explain it, but has comments to cover the parts that need it.<br><br>When I was in college I used to be impressed by difficult to read code, thinking <dq>if I have no idea what it does, it must be awesome!<dq> That is so far from the truth. Good code should be readable and you should be able to grok it<sq>s intent quickly. Note I said intent not implementation, so that points to a good use of abstraction.<br><br>Small methods and functions and not relying a lot on static objects and in some cases (like oop) using principles of [SOLID](http<colon>//en.wikipedia.org/wiki/SOLID_<percent>28object-oriented_design<percent>29) and [DRY](http<colon>//en.wikipedia.org/wiki/Don<percent>27t_repeat_yourself)<br><br>With all that said, I<sq>ve taught programming before and these are things are are important but your first step shouldn<sq>t be trying to do too much. It should be trying to learn how to think like a programmer and understand the logic involved. Once you get over that hump and are able to write entire simple programs on your own successfully, you can start looking at this.<br><br>It<sq>s great that you are forward thinking, but focus on learning the basics first, then improve on it.<br><br></p>", 
                "question": "How does one write <sq>good code<sq>?"
            }, 
            "id": "cqw5jft"
        }, 
        {
            "body": {
                "answer": "<p>I think one indicator of <dq>good code<dq> is that an experienced programmer should be able to read your code and immediately know what you are doing.</p>", 
                "question": "How does one write <sq>good code<sq>?"
            }, 
            "id": "cqw5jp9"
        }, 
        {
            "body": {
                "answer": "<p>You asked<colon><br><br>> How does one write <sq>good code<sq>?<br><br>You also mentioned<colon><br><br>> Sense i am still learning the basics, i want to know it there is anything i could while i practice so i don<sq>t write awful code. So i don<sq>t practice horrible habits that i would eventually have to iron out later in my career, and would take longer than learning it now.<br><br>There<sq>s plenty of answers here that try to define good code. In reality good code is about two primary things<colon> be **clear about what the code does**, and do it as slowly as is required so that it<sq>s **easy to understand how it does it**. Others mentioned other very good things, but I<sq>m going to leave those suggestions to others and hit on something else.<br><br>However, your question was not <dq>What is good code?<dq> as much as it was <dq>How do I (learn to) write good code?<dq><br><br>That is an entirely different story. The **only way I know to effectively learn how to write good code is to write bad code, and learn from it**.<br><br>There are three big things that help to highlight your own bad code - all three should be done<colon><br><br>* Write your code, then do other stuff - until your code is no longer fresh in your mind - then come back and re-read it. Do not think <dq>How good is my code?<dq>; instead think <dq>Is this as simple as I can reasonably make it?<dq> and <dq>Does this flow?<dq>. KISS - keep it simple stupid. If it<sq>s not simple, in 6 months, when you go back to read it, it will not be simple then either - and you forgot how it worked.<br><br>* Revisit old code *and clean it up if it<sq>s not up to your standards* after 6 months or so. As you become a better coder, improve your past attempts. When you come back and read your code, there should be enough there that you can just look at it and understand what it<sq>s doing. You won<sq>t remember it, but there should be no <dq>learning gap<dq> when you start reading your own codebase - if there is, you need to rework it.<br><br>* Have someone else read your code. Have many someone else<sq>s read your code. Solicit their comments. You want comments on what it<sq>s doing - maybe they have a better way of doing something. You want comments on how your formatting looks - maybe they are used to something you are not. You want to know if it flows for them or not. Let them tell you what they think - no matter how harsh it might be, you need to hear it.<br><br>Your code will likely not be that good at first. I<sq>d be willing to bet that after 6 months, you<sq>re just getting enough into the language that you start taking shortcuts - and you want to start saving space - so at first your code will likely get worse rather than better. I know I had that problem. Hopefully you will sometime realize however that saving those 5 lines is not actually helping you - it just makes things more confusing.<br><br>**tl;dr<colon> The only way that I know of to learn to write good code is to evaluate your own code, improve it, and learn from it.**</p>", 
                "question": "How does one write <sq>good code<sq>?"
            }, 
            "id": "cqwcbdk"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting this story. I was looking for a little inspiration, and this was just what I needed.  <dq>Programming is a pure joy for me.<dq> - Snarwhal, hit the feels really deep.<br>  <br>Super glad you found a sense of achievement in programming. Too many learning programmers stop because they don<sq>t get moments like these, so keep sharing it when you can.   <br><br>Additionally, I read that gist and couldn<sq>t help but notice that all the actions depend on the walk condition. by inverting the check between walk and par (walk first, then par), you get some shorter code.<br><br>\tpublic void animate(Sprite sprite2, boolean par) <br>\t{<br>\t\tif (walk) {<br>\t\t\tbool overMod14 = !anim <percent> 14 >= 7;<br>\t\t\tif (par) {<br>\t\t\t\tflip = !overMod7;<br>\t\t\t\tsprite = sprite2;<br>\t\t\t} <br>\t\t\telse if (overMod14){<br>\t\t\t\tsprite = sprite2;<br>\t\t\t}<br>\t\t}<br>\t}<br><br>And some more neat stuff. The if statements are atomic conditions, such that if one is true, the others must be false. You can replace the of statements after if(dir == 0) with <dq>else if<dq>. That way, if one is true, then it won<sq>t check the rest.  <br><br>    if (dir == 0) {}<br>    else if (dir == 1) {}<br>    else if (dir == 2) {}<br>    else if (dir == 3) {}<br><br>  <br>But lets get this running even faster.  <br><br>Because the if statements check whether a number is a particular value (and not a range), they can rewritten as a switch case.<br><br>    switch (dir) {<br>        case 0<colon> <br>                //maybe flip here<br>                sprite = Sprite.animation; //something;<br>                animate(Sprite.animation, true);<br>                break;<br>        case 1<colon>  <br>                break;<br>        case 2<colon>  <br>                break;<br>        case 3<colon>  <br>                break;<br>    }<br>Admittedly, it doesn<sq>t really make the code that much clearer, but I wanted to illustrate it because using a switch case makes the compiler far more likely to optimize using a jump table. This means that if dir == 3, it will jump straight to case 3, without touching the other cases and checking their conditions whatsoever.  <br><br>Forgive me for playing code golf, but that gist was just too interesting. <colon>D<br><br>Would you mind if I borrowed this gist? I know a couple of college professors that teach programming I/II that would be interested in looking at a real world case that demonstrates the sort of generalization that you hit upon when you originally wrote the gist that was a solution to the problem from the Cherno Project. Additionally, it<sq>s not trivial to find good readily apparent real world cases that demonstrate the usefulness of switch-case.<br><br><br></p>", 
                "question": "Wow what an incredible expereience!"
            }, 
            "id": "cfi7aqf"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve never heard of the Cherno Project. I<sq>m watching the intro and it looks awesome! I<sq>m jumping in.</p>", 
                "question": "Wow what an incredible expereience!"
            }, 
            "id": "cfibqyt"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome, good for you!<br><br>I have to say though, this is what I thought of when I read the title<colon> http<colon>//i.imgur.com/rV2WKR4.jpg</p>", 
                "question": "Wow what an incredible expereience!"
            }, 
            "id": "cfiftba"
        }, 
        {
            "body": {
                "answer": "<p>One of the most important lessons in programming is re-reading and proof reading for spelling and syntax errors as you work.  <br><br>Its SO MUCH extra work to find these things later on when your code is failing over and over.<br><br>I can tell from the title of your post that you haven<sq>t really gotten the hang of that.  Pump the brakes, work a little slower, and check each line after you bang it out.  It<sq>ll work miracles for your turnaround time.</p>", 
                "question": "Wow what an incredible expereience!"
            }, 
            "id": "cfie1ik"
        }, 
        {
            "body": {
                "answer": "<p>Is anyone else bothered by this common advice to start by learning frameworks? I see this advice a lot, but it doesn<sq>t make any sense. It<sq>s kinda like saying <dq>Learn how to drive before you invent the wheel.<dq><br><br>For example, if you don<sq>t know Javascript, it seems like jQuery is going to be a mysterious black box that you won<sq>t fully understand. And when things go wrong, you won<sq>t fully understand how to debug it. </p>", 
                "question": "If you want to learn code but don<sq>t know where to start"
            }, 
            "id": "ca58w41"
        }, 
        {
            "body": {
                "answer": "<p>Great advice, but it<sq>s relevant to Web Development Only. I think it should be mentioned more prominently. </p>", 
                "question": "If you want to learn code but don<sq>t know where to start"
            }, 
            "id": "ca5nexf"
        }, 
        {
            "body": {
                "answer": "<p>I try to learn how to program every year or so but I always fail. I don<sq>t think I have the brain for it, I was never good at math either. My skills are on the more creative and communicative side. </p>", 
                "question": "If you want to learn code but don<sq>t know where to start"
            }, 
            "id": "ca5nhij"
        }, 
        {
            "body": {
                "answer": "<p>Sincerely, I found codecademy EXTREMELY helpful.<br>http<colon>//www.codecademy.com/</p>", 
                "question": "If you want to learn code but don<sq>t know where to start"
            }, 
            "id": "ca5kgcv"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t quite tell... Is this free? My 10 year old is desperate to learn java and this will help him more than the books he is using as he<sq>s a very visual learner.</p>", 
                "question": "Udacity.com announced a new course today - Introduction to Programming in Java"
            }, 
            "id": "c9pzvie"
        }, 
        {
            "body": {
                "answer": "<p>Do i have to apply or something?</p>", 
                "question": "Udacity.com announced a new course today - Introduction to Programming in Java"
            }, 
            "id": "c9pxgse"
        }, 
        {
            "body": {
                "answer": "<p>Does somebody know where I can get a course for advanced java programmers <br></p>", 
                "question": "Udacity.com announced a new course today - Introduction to Programming in Java"
            }, 
            "id": "c9qblbc"
        }, 
        {
            "body": {
                "answer": "<p>So there is CS101 and CS46A. Which one is good to start on? </p>", 
                "question": "Udacity.com announced a new course today - Introduction to Programming in Java"
            }, 
            "id": "c9q0jmy"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve done Udacity<sq>s CS101, which is probably the best tutorial I<sq>ve gone through, and am now doing their CS253, which is taught by Reddit co-founder Steve Huffman. So far, 253 seems to be pretty good. Udacity<sq>s strategy of short lectures and quizzes and homework problems really helps me learn the material.</p>", 
                "question": "Here<sq>s a list of dozen free online programming/cs courses with feedback(i.e. exams/homeworks/assignments) that you can start this month."
            }, 
            "id": "c4x19m2"
        }, 
        {
            "body": {
                "answer": "<p>Nice to know, dude! I<sq>ll be enrolling in at least one of them.<br></p>", 
                "question": "Here<sq>s a list of dozen free online programming/cs courses with feedback(i.e. exams/homeworks/assignments) that you can start this month."
            }, 
            "id": "c4x0g79"
        }, 
        {
            "body": {
                "answer": "<p>Thanks a lot! Would any of you happen to know a good intro to web application programming course that utilizes Ruby on Rails?</p>", 
                "question": "Here<sq>s a list of dozen free online programming/cs courses with feedback(i.e. exams/homeworks/assignments) that you can start this month."
            }, 
            "id": "c4x4maz"
        }, 
        {
            "body": {
                "answer": "<p>THANK YOU</p>", 
                "question": "Here<sq>s a list of dozen free online programming/cs courses with feedback(i.e. exams/homeworks/assignments) that you can start this month."
            }, 
            "id": "c4xbw89"
        }, 
        {
            "body": {
                "answer": "<p>Watched the first 4 episodes and it seems great so far.</p>", 
                "question": "I found this great tutorial series for the Django framework"
            }, 
            "id": "ct12w5i"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s another [vid](https<colon>//www.youtube.com/watch?v=2geC50roans&feature=youtu.be) you guys might find interesting. A Flask/Angular app written via PyCharm in ~23 minutes. Flask is the shit, btw. Fully functional apps in very few lines of code.</p>", 
                "question": "I found this great tutorial series for the Django framework"
            }, 
            "id": "ct1bvsv"
        }, 
        {
            "body": {
                "answer": "<p>I was literally just looking for one.<br><br>Thanks!</p>", 
                "question": "I found this great tutorial series for the Django framework"
            }, 
            "id": "ct1eahb"
        }, 
        {
            "body": {
                "answer": "<p>Don<sq>t want to be a party-pooper but those videos are from a paid TutsPlus course - http<colon>//code.tutsplus.com/courses/django-unchained <br><br>Looking at the rest of the videos on that channel, they too are ripped from various paid courses. I suppose it<sq>s fine if it<sq>s not against the subreddit rules. <br><br>If any one is looking for actual free django tutorials you might wanna check out Mike Hibbert<sq>s videos -  https<colon>//www.youtube.com/playlist?list=PLxxA5z-8B2xk4szCgFmgonNcCboyNneMD</p>", 
                "question": "I found this great tutorial series for the Django framework"
            }, 
            "id": "ct1m73t"
        }, 
        {
            "body": {
                "answer": "<p>atta boy!</p>", 
                "question": "It works!! This will probably go unread but I finally know what I want to do for a living."
            }, 
            "id": "c60p0vm"
        }, 
        {
            "body": {
                "answer": "<p>You deserve a cake. Not just any cake, though. A chocolate lava cake.</p>", 
                "question": "It works!! This will probably go unread but I finally know what I want to do for a living."
            }, 
            "id": "c60q0lb"
        }, 
        {
            "body": {
                "answer": "<p>When you feel like God, because you created something new out of your own thoughts... yeah... tough to beat that feeling. <br><br><dq>*I do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success... such emotions make a man forget food, sleep, friends, love, everything.*<dq><br>**-Nikola Tesla**<br><br>Remember that feeling when you are struggling with problems you don<sq>t understand. You must pay for that power with understanding.</p>", 
                "question": "It works!! This will probably go unread but I finally know what I want to do for a living."
            }, 
            "id": "c60vwnb"
        }, 
        {
            "body": {
                "answer": "<p>Yes! Awesome feeling isn<sq>t it?<br><br>I just had the same thing, finally had an itch I NEED to scratch, I<sq>m at the beginning of the journey but I<sq>m getting hooked on the AHA! moments and mini-breakthroughs. I<sq>m 35 and haven<sq>t coded since high school and that was only BBC Basic ! <br><br>Learnign python, front end web design, interfacing with MS word docs in spare time feels like fun not work because its got a real goal in mind. All the good getting started guides to coding say this, find a project you want to do. I can confirm that it really helped me. <br><br>Hopefully I<sq>ll be posting a similar post to you in the future, it seems miles and miles away now though. </p>", 
                "question": "It works!! This will probably go unread but I finally know what I want to do for a living."
            }, 
            "id": "c60qlme"
        }, 
        {
            "body": {
                "answer": "<p>Found it! [YAGNI](https<colon>//en.wikipedia.org/wiki/You_aren<percent>27t_gonna_need_it)</p>", 
                "question": "What is the computer science philosophy called about not implementing features that <dq>might<dq> come up in the future?"
            }, 
            "id": "d9t1r2d"
        }, 
        {
            "body": {
                "answer": "<p>Interesting, <br><br>&nbsp;<br><br>I have always prefered to somewhat future-proof my code, but I can see how this style would be more efficient in the short-term.</p>", 
                "question": "What is the computer science philosophy called about not implementing features that <dq>might<dq> come up in the future?"
            }, 
            "id": "d9t2ba7"
        }, 
        {
            "body": {
                "answer": "<p>We never bothered naming it. We figured we weren<sq>t going to need it.<br><br>\ud83d\ude00</p>", 
                "question": "What is the computer science philosophy called about not implementing features that <dq>might<dq> come up in the future?"
            }, 
            "id": "d9tffkp"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s always a trade-off.  Engineering and programming always are.  It<sq>s risk/benefit analysis - where to spend your resources (dev time / money to pay developers)?  Making the right call is always tough and this principle as a rule of thumb is OK, but, like anything, taken to an extreme is going to cause problems.<br><br>An example<colon><br><br>I work in game dev.  Frequently the design changes.  Building only what the designers ask for the first time will bite you - they<sq>ll try it out and realize some things work, some don<sq>t.  It<sq>s always worth taking time to consider the intent of the design and consider ways they may change it after playing the first revision, then building your solution to allow for more flexibility than they originally called for.<br><br>But that<sq>s only one case - there are definitely other times when such a principle is warranted.</p>", 
                "question": "What is the computer science philosophy called about not implementing features that <dq>might<dq> come up in the future?"
            }, 
            "id": "d9t4yle"
        }, 
        {
            "body": {
                "answer": "<p>Why should I learn Haskell? What<sq>s so good about Haskell when I could use something else? Not trying to criticize,  I<sq>m just curious as to your answer <colon>)</p>", 
                "question": "I<sq>ve been teaching Haskell for 6+ months this is the guide I give people to learn Haskell"
            }, 
            "id": "cig5gge"
        }, 
        {
            "body": {
                "answer": "<p>I always wanted to try Haskell, but what can I actually make with Haskell? Just console application and file I/O stuff? I want a project to build as I learn. </p>", 
                "question": "I<sq>ve been teaching Haskell for 6+ months this is the guide I give people to learn Haskell"
            }, 
            "id": "cigc89z"
        }, 
        {
            "body": {
                "answer": "<p>Just curious, but what<sq>s the general opinion on <dq>Learn You a Haskell (For Great Good)<dq>?  This seemed like a popular reference, at least for awhile.  Does anyone have some experience with it?</p>", 
                "question": "I<sq>ve been teaching Haskell for 6+ months this is the guide I give people to learn Haskell"
            }, 
            "id": "cigcsdb"
        }, 
        {
            "body": {
                "answer": "<p>Thanks a ton, exactly what I<sq>ve been looking for <colon>) <br><br>My professor at Uni didn<sq>t do a good job at teaching Haskell and I kinda lost interest in it. <br><br>But recently I<sq>ve gotten into Linux some more and specifically into tiling WMs like Xmonad, which uses Haskell - this will help a lot, thank you! </p>", 
                "question": "I<sq>ve been teaching Haskell for 6+ months this is the guide I give people to learn Haskell"
            }, 
            "id": "cig4355"
        }, 
        {
            "body": {
                "answer": "<p>So, pro tip from someone in the field.<br><br>Most programming documentation sucks, most programmers have opinions about things that are more vitriolic than the offenses that they portray, and more often than not people who are wrong take forever to admit it.   <br><br>A great example is w3schools.com a website that teaches quite a few programming languages.  There was a website made called w3fools that called them out on every minor error on the website (which was thousands of pages of content) and the internet hate brigade basically said that it was shit and discouraged using it.   Meanwhile there were still thousands of examples of decent resources for beginners on the website.<br><br>Similarly, I had a coworker once who was using netbeans as an IDE because <dq>It<sq>s the best IDE<dq>, I was like, sure, do you.   I started cranking away in intelliJ and he started on some bullshit about how there were major security flaws in executables made by intelliJ and how it was <dq>just bad<dq> etc.  It took me showing him my ANT build files and the command line commands that were being run to show him that the Java behind the scenes was exactly the same before he let up.  <br><br>People are people.  Programmers specifically tend to be well-educated and opinionated.  We make impassioned arguments over things that change on a very frequent basis.  HTML tags, web security, how forms should be processed, how to escape characters, the best regex to write for a problem, input sanitation, data serialization, and a million and one other things.  With the tides constantly changing in the programming world the soup de jour is always something new. So when you say you<sq>re using a Vector in java, people are going to jump on you and talk about synchronization and how using vector is literally like reviving Hitler...<br><br>But listen, if it<sq>s your first project, and it works, fuck it.   Just make it.  Don<sq>t listen to the detractors about anything until you get to the point where you<sq>ve made a big project and it<sq>s running like shit.  Once you get to the <dq>Hey, I had this big idea and now I need to get into performance<dq> phase, focus on efficiency, optimization, and the nuances of the language that you<sq>ve chosen.  For now, focus on getting a few projects out the door, then reflecting on what you could<sq>ve done better for each.</p>", 
                "question": "My programming learning is basically hopping from one poorly written documentation to the other - is this how it<sq>s supposed to be done?"
            }, 
            "id": "d1d71tw"
        }, 
        {
            "body": {
                "answer": "<p>if you<sq>re just starting out, i wouldn<sq>t worry too much about that. <br><br>it<sq>s like you<sq>re learning the guitar, and you<sq>ve got a few chords down, but you want to read about music theory. <br><br>don<sq>t worry about that stuff right now. just get some basics down, get some kind of app and/or website working. worry about all the complicated stuff later.  <br><br>at least, that<sq>s my thinking. i<sq>m still at the advance beginner stage, so, take any advice i have with a grain of salt. </p>", 
                "question": "My programming learning is basically hopping from one poorly written documentation to the other - is this how it<sq>s supposed to be done?"
            }, 
            "id": "d1d2df1"
        }, 
        {
            "body": {
                "answer": "<p>Yes and no. Yes, you<sq>re supposed to Google stuff you don<sq>t know, and yes, much of what you come across is only tangentially related to what you actually do, or may be far more detailed than you need. On the flip side, no, you probably don<sq>t need to be that deep in the weeds to start with. <br><br>What might help you is working through some of the more highly-rated tutorials on codeproject and MSDN that are directed at beginners, and are for your stack or technology of choice. Books are also very helpful, many of them provide walkthrough examples that explain each part of what you<sq>re doing. Again, look for ones with good reviews. <br><br>Bear in mind though, this discipline is MUCH more reading than it is writing (code, that is) especially at the outset (as with many disciplines). That<sq>s okay, and no one who is serious about it should think otherwise. It<sq>s tough, it<sq>s a slog, and half the battle is knowing the right questions to ask. That<sq>s why SO gets such a bad rap...the information is out there, but if people *do* attempt to look it up, they often don<sq>t know what they<sq>re looking for, and get overwhelmed. SO is one of my go-tos, but I don<sq>t even have an account, simply because I<sq>ve always been able to find what I needed by searching. Finely-honed google-fu will be the most valuable tool you can have, for at least the first five years of your programming career. </p>", 
                "question": "My programming learning is basically hopping from one poorly written documentation to the other - is this how it<sq>s supposed to be done?"
            }, 
            "id": "d1d2209"
        }, 
        {
            "body": {
                "answer": "<p>> Is this how you should learn this stuff? **I barely code**, and when trying to figure out the basics I always end up on an overly detailed SO answer giving me the arcane grand theory of something I will never ever use.<br><br>No. You<sq>re not going to even *retain* 96<percent> of the arcane stuff you are reading, so that<sq>s almost a perfect waste of your time, except, unlike all your other life time wasters, it<sq>s entirely tedious. <br><br>You learn--that is, *retain*, by *doing.* Set a manageable and limited goal and achieve it. Read only the minimum to support the limited project. <br><br>What are your overall goals?<br></p>", 
                "question": "My programming learning is basically hopping from one poorly written documentation to the other - is this how it<sq>s supposed to be done?"
            }, 
            "id": "d1d5bqk"
        }, 
        {
            "body": {
                "answer": "<p>#I have 0 knowledge in CS/Programming right now. I hope I don<sq>t crash and burn next year. <br><br>Stuff I want to do in my own time<colon><br><br>- Finish CS50x<br>- Make Android apps. (I<sq>ve got a few ideas in mind) <br>- Automate the boring stuff with Python (if I have time)<br><br><br>Books I want to read<colon><br><br>- Code<colon> The Hidden Language of Computer Hardware and Software <br>- The C Programming Language<br>- The Pragmatic Programmer<br>- Debugging\u2014The Nine Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems<br><br><br>Classes I<sq>m taking at college<colon><br><br>- Intro to Programming<br>- Discrete Mathematics<br>- Introduction to Algorithms and Data Structures<br>- Algorithms and Data Structures (more adv. than the intro)<br>- Adv. Programming Principles<br>- Linear Algebra for CSCI <br><br><br>#edit<colon> Maybe I should start a weekly blog to keep myself accountable.</p>", 
                "question": "2016 programming goals"
            }, 
            "id": "cycjmqr"
        }, 
        {
            "body": {
                "answer": "<p>I want to become the next Bill Gates.</p>", 
                "question": "2016 programming goals"
            }, 
            "id": "cycje21"
        }, 
        {
            "body": {
                "answer": "<p>I want to learn how to build android and iOS apps and successfully create an app for my high school. </p>", 
                "question": "2016 programming goals"
            }, 
            "id": "cychpb6"
        }, 
        {
            "body": {
                "answer": "<p>Currently learning<colon><br><br>* Node.js with [Professional Node.js](http<colon>//www.amazon.com/Professional-Node-js-Building-Javascript-Scalable/dp/1118185463/ref=sr_1_1?ie=UTF8&qid=1451199956&sr=8-1&keywords=professional+node.js)<br>* Express<br><br>2016 Goals<colon><br><br>* Become comfortable with a JS MVC framework<br>* Learn Angular<br><br>If anyone has any learning resources for any MVC JS framework or Node feel free to share.<br><br>Edit<colon> New goal is to learn Meteor.js. Some resources I<sq>ve compiled for others who might want to learn Meteor too<colon><br><br>* Javascript is sexy<sq>s [Learn Meteor Propery](http<colon>//javascriptissexy.com/learn-meteor-js-properly/)<br>* [Meteor Tutorial Book](http<colon>//www.meteor-tutorial.org/book) by Matthew Platts<br>* [Meteor Learning!](https<colon>//github.com/ericdouglas/Meteor-Learning)<br>* [Discover Meteor](https<colon>//www.discovermeteor.com/)</p>", 
                "question": "2016 programming goals"
            }, 
            "id": "cycjz6z"
        }, 
        {
            "body": {
                "answer": "<p>Hey I<sq>m signed up, first time ever doing something like this, excited and nervous!</p>", 
                "question": "MITx<sq>s 6.00.1x <dq>Introduction to Computer Science and Programming Using Python<dq> starts tomorrow!"
            }, 
            "id": "ccsf2oo"
        }, 
        {
            "body": {
                "answer": "<p>This is awesome!! I just registered!<br><br>So since this is a course that means that there are probably specified times that we need to attend? or all the videos pre-recorded so I can go through it on my own time?? and how many lectures would there be per week?<br><br>Also, I think this was mentioned in the faq, but is the text book absolutely necessary? since this is my first time hearing about this I don<sq>t know if i<sq>ll have the time to go out to a book store and look for it <colon>(..<br><br>please let me know!</p>", 
                "question": "MITx<sq>s 6.00.1x <dq>Introduction to Computer Science and Programming Using Python<dq> starts tomorrow!"
            }, 
            "id": "ccsfh72"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m from Australia so my times are never going to match up, but thanks for using pre-recorded material.<br><br>I<sq>m going to sign up for this once I<sq>m back home from work. I<sq>m 28 and was thinking about returning to University for CompSci, if this course <dq>feels<dq> right , then it<sq>ll help my decision.</p>", 
                "question": "MITx<sq>s 6.00.1x <dq>Introduction to Computer Science and Programming Using Python<dq> starts tomorrow!"
            }, 
            "id": "ccshqr0"
        }, 
        {
            "body": {
                "answer": "<p>Hey what happened to SICP?</p>", 
                "question": "MITx<sq>s 6.00.1x <dq>Introduction to Computer Science and Programming Using Python<dq> starts tomorrow!"
            }, 
            "id": "ccsc2vk"
        }, 
        {
            "body": {
                "answer": "<p>> Now technically, I couldn\u2019t sell them the program. The code had been largely written on company time so they owned it.<br><br>How prevalent is this idea? I find it really hard to comprehend that something you did during work time automatically belongs to the company. Really curious about this.<br><br>e<colon> Thanks for all the responses. I<sq>m quite shocked, and apparently very naive.</p>", 
                "question": "Computer phobic in my early 20\u2019s 15 years later I\u2019m now a semi-professional computer programmer. Here\u2019s my story."
            }, 
            "id": "cc91ic0"
        }, 
        {
            "body": {
                "answer": "<p>Great story, it<sq>s always nice to people change from techophobes to technophiles. When you get a chance, set some partition space aside for archlinux, you may enjoy it!</p>", 
                "question": "Computer phobic in my early 20\u2019s 15 years later I\u2019m now a semi-professional computer programmer. Here\u2019s my story."
            }, 
            "id": "cc900gf"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for sharing. I usually don<sq>t make it through walls of text but your story is similar to mine and I<sq>m constantly automating things at my workplace and I<sq>m not even paid to be a software developer. </p>", 
                "question": "Computer phobic in my early 20\u2019s 15 years later I\u2019m now a semi-professional computer programmer. Here\u2019s my story."
            }, 
            "id": "cc92pfu"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s kinda an inspiring story.  I always looks for ways to streamline / improve business processes. <br><br>I just started with week1 CS50 and i had a great time creating my scratch project. <br><br>http<colon>//scratch.mit.edu/projects/12324981/</p>", 
                "question": "Computer phobic in my early 20\u2019s 15 years later I\u2019m now a semi-professional computer programmer. Here\u2019s my story."
            }, 
            "id": "cc923q5"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "10 free tutorials code a game from scratch"
            }, 
            "id": "cbpj7pz"
        }, 
        {
            "body": {
                "answer": "<p>**Already it<sq>s not free anymore. $49 to take it.**</p>", 
                "question": "10 free tutorials code a game from scratch"
            }, 
            "id": "cbqfd47"
        }, 
        {
            "body": {
                "answer": "<p>Is this going to be free forever or could it change to a paid course?</p>", 
                "question": "10 free tutorials code a game from scratch"
            }, 
            "id": "cbpo6ex"
        }, 
        {
            "body": {
                "answer": "<p>I thought I already saved this thread </p>", 
                "question": "10 free tutorials code a game from scratch"
            }, 
            "id": "cbpoqoa"
        }, 
        {
            "body": {
                "answer": "<p>I hadn<sq>t heard of this before this thread, but I have to say... it reminds me of [this](http<colon>//xkcd.com/927/).</p>", 
                "question": "LiveCode is now open source! Great way to learn basic programming concepts and get your first app running fast!"
            }, 
            "id": "cb2it3z"
        }, 
        {
            "body": {
                "answer": "<p>Huh, this is what we used in school last year when I first got my head around how programming works. Pretty cool.</p>", 
                "question": "LiveCode is now open source! Great way to learn basic programming concepts and get your first app running fast!"
            }, 
            "id": "cb2mumc"
        }, 
        {
            "body": {
                "answer": "<p>My goodness, 12 years?! How comes that I never heard about it....</p>", 
                "question": "LiveCode is now open source! Great way to learn basic programming concepts and get your first app running fast!"
            }, 
            "id": "cb2lnhw"
        }, 
        {
            "body": {
                "answer": "<p>I don<sq>t get it. I thought that the whole point of learning to program was to learn how to tell the computer how to do the task, not just what to do. </p>", 
                "question": "LiveCode is now open source! Great way to learn basic programming concepts and get your first app running fast!"
            }, 
            "id": "cb2q1qe"
        }, 
        {
            "body": {
                "answer": "<p>too many video tutorials on the net, text is way better<br><br>udacity is so annoying because of the videos</p>", 
                "question": "How to (make games with) L\u00d6VE - Game-programming tutorials for beginners"
            }, 
            "id": "d9y5qkg"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for taking the time to create the tutorial. do you think it<sq>s possible to use LOVE to create a isometric view game? It<sq>s essentially 2D plane with 4 possible directions. An example is legend of zelda<colon> link to the past.</p>", 
                "question": "How to (make games with) L\u00d6VE - Game-programming tutorials for beginners"
            }, 
            "id": "d9y2kg3"
        }, 
        {
            "body": {
                "answer": "<p>Writes a tutorial for a framework that uses Lua, table index starts at 0. I love it.<br><br>Edit<colon> got a chance to read through it and I really like this tutorial. I have friends that are interested in making 2d games and I<sq>m terrible at explaining stuff. I<sq>m going to give them this.</p>", 
                "question": "How to (make games with) L\u00d6VE - Game-programming tutorials for beginners"
            }, 
            "id": "d9yf75p"
        }, 
        {
            "body": {
                "answer": "<p>Just want to say *not* doing videos is imho the right move. Text, code snippets and maybe some images is the way to go (not only) for coding tutorials. There are way to many videos of all kinds out there that would have been better summarized in a text paragraph.</p>", 
                "question": "How to (make games with) L\u00d6VE - Game-programming tutorials for beginners"
            }, 
            "id": "d9ydmka"
        }, 
        {
            "body": {
                "answer": "<p>Thanks! This comes at a great time for me, as I was planning to spend my Saturday studying C#. I just finished the third video. You have a terrific voice for this--the intonation is spot on--and I<sq>m finding your explanations to be quite clear and precise. I appreciate how you make sure to introduce key terms to your viewer. I<sq>ve been studying C# off and on for about two weeks now, but this is already filling in a bunch of gaps at the foundation. I<sq>ll make sure to leave a review when I<sq>m done. </p>", 
                "question": "Free course on the fundamentals of C# programming"
            }, 
            "id": "cpm2ad4"
        }, 
        {
            "body": {
                "answer": "<p>Thank you!</p>", 
                "question": "Free course on the fundamentals of C# programming"
            }, 
            "id": "cpm8i7j"
        }, 
        {
            "body": {
                "answer": "<p>Is this an ultimate beginner<sq>s guide or does it require any sort of coding experience?</p>", 
                "question": "Free course on the fundamentals of C# programming"
            }, 
            "id": "cpm4qpd"
        }, 
        {
            "body": {
                "answer": "<p>So, what makes this course different from other free C# courses?</p>", 
                "question": "Free course on the fundamentals of C# programming"
            }, 
            "id": "cpm8hnd"
        }, 
        {
            "body": {
                "answer": "<p>For anybody who needs to learn/brush up on Java, I found these lectures very helpful. The first one is 40 minutes, but the rest are 20 minutes or less.<br><br>[Introduction to Java](https<colon>//itunes.apple.com/us/course/introduction-to-java/id551000192)<br><br>There are plenty of Java practice problems on [CodingBat](http<colon>//codingbat.com/).</p>", 
                "question": "Upcoming Android Developer Course on Coursera"
            }, 
            "id": "ce0vh6h"
        }, 
        {
            "body": {
                "answer": "<p>Any tips for getting to the <dq>already know how to program in Java<dq> asap? I<sq>ve only got some Python experience.</p>", 
                "question": "Upcoming Android Developer Course on Coursera"
            }, 
            "id": "ce0vc9u"
        }, 
        {
            "body": {
                "answer": "<p>I got one question, how are lectures held, is it in realtime or I will be able to download the videos and other course material later?</p>", 
                "question": "Upcoming Android Developer Course on Coursera"
            }, 
            "id": "ce0uzo0"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m signed up for this.  PM me with info if you get a google group together.</p>", 
                "question": "Upcoming Android Developer Course on Coursera"
            }, 
            "id": "ce0wvam"
        }, 
        {
            "body": {
                "answer": "<p>Also, an interesting tidbit about reddit that he talks about in one of the later videos<colon> in the first few months, he and Alexis generated nearly all of the content by using tons of fake accounts to make the site initially seem a lot more popular than it really was. He actually goes on to talk a lot about how reddit really works under the hood and how he made it.</p>", 
                "question": "Web development course taught by the creator of Reddit"
            }, 
            "id": "cajug1b"
        }, 
        {
            "body": {
                "answer": "<p>[Let<sq>s have a quick quiz](http<colon>//i.imgur.com/pzE0p7b.jpg?2)</p>", 
                "question": "Web development course taught by the creator of Reddit"
            }, 
            "id": "cak1m1x"
        }, 
        {
            "body": {
                "answer": "<p>To the experienced, this can be useful<br><br>> How to Serve Millions<br><br><br>> Scaling, caching, optimizations</p>", 
                "question": "Web development course taught by the creator of Reddit"
            }, 
            "id": "caju5n5"
        }, 
        {
            "body": {
                "answer": "<p>Nice</p>", 
                "question": "Web development course taught by the creator of Reddit"
            }, 
            "id": "caju25g"
        }, 
        {
            "body": {
                "answer": "<p>Usually around /r/CoolGithubProjects people share their own open source projects. <br><br>Edit<colon> Nicely done. That<sq>s a good idea for a subreddit. </p>", 
                "question": "Is there a Subreddit where authors go to request help with their open source project?"
            }, 
            "id": "d71x2zd"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//www.firsttimersonly.com/ & http<colon>//up-for-grabs.net/ might be useful.</p>", 
                "question": "Is there a Subreddit where authors go to request help with their open source project?"
            }, 
            "id": "d71x1z7"
        }, 
        {
            "body": {
                "answer": "<p>Following /r/RepositoryRequest, I have asked myself that question and I would like to know who to contribute with.</p>", 
                "question": "Is there a Subreddit where authors go to request help with their open source project?"
            }, 
            "id": "d71y1es"
        }, 
        {
            "body": {
                "answer": "<p>I made a sub awhile back /r/boreddevs, kinda what you<sq>re looking for. Almost no posts there though</p>", 
                "question": "Is there a Subreddit where authors go to request help with their open source project?"
            }, 
            "id": "d7208eb"
        }, 
        {
            "body": {
                "answer": "<p>Maybe a Google hangout class few times a week with a small group and a tentative syllabi? </p>", 
                "question": "I<sq>m teaching programming for free so that I could improve my speaking fluency."
            }, 
            "id": "clnghnm"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m not a native English either, but I could really need someone to help me understand the basics of Python or Java.</p>", 
                "question": "I<sq>m teaching programming for free so that I could improve my speaking fluency."
            }, 
            "id": "cln2guz"
        }, 
        {
            "body": {
                "answer": "<p>are you from india ?.</p>", 
                "question": "I<sq>m teaching programming for free so that I could improve my speaking fluency."
            }, 
            "id": "clnou3v"
        }, 
        {
            "body": {
                "answer": "<p>Not native, but I<sq>ve been speaking English since kindergarten (22 years old now). I<sq>d like to get started with Python.</p>", 
                "question": "I<sq>m teaching programming for free so that I could improve my speaking fluency."
            }, 
            "id": "cln4260"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m going to have to play devil<sq>s advocate with you on a few of your points.<br><br>1.  Although it is generally the case that duplicating code is a bad idea, there is also the other extreme of over-modularization.  Some languages tend to encourage this, but an application can quickly turn into a nightmare of overabstraction.  Like PartyButton says...never say never.<br><br>6. Only write less code if the clarity remains intact, which it normally does.  Some languages let you get away with a lot of <sq>magic<sq> (C, Perl) with a few keystrokes, but the resulting code is cryptic to anyone needing to get in and look at it.<br><br>10.  Do all the manual labor until you can do it in your sleep.  Then automate it.  Just make sure you know exactly what is happening in every step of the build phase.<br><br>11.  Too often people look at this as an invitation to write sloppy code, thinking that they can optimize it later.  I often think the term <sq>premature optimization<sq> is something people say when they can<sq>t do it right the first time.  Of course this is an oversimplification, but if there is an optimization that you are aware of while you<sq>re writing the code, you should be writing it into your code.  Better yet, make these optimizations part of your normal programming lexicon.  This means turn on ALL errors and warnings in your IDE.  If you see some bizarre warning, figure out why you<sq>re getting it.  Don<sq>t just gloss over it and think you<sq>re home free because the build succeeded.<br><br>[Strive for Perfection](http<colon>//lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf).</p>", 
                "question": "10 steps to becoming a better programmer"
            }, 
            "id": "c6uzl13"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m so glad that this wasn<sq>t a binary joke. Interesting article.</p>", 
                "question": "10 steps to becoming a better programmer"
            }, 
            "id": "c6uzpk6"
        }, 
        {
            "body": {
                "answer": "<p>0.) never say never!<br><br>other than that, looks very solid, especially #10 which is often overlooked</p>", 
                "question": "10 steps to becoming a better programmer"
            }, 
            "id": "c6uy7lc"
        }, 
        {
            "body": {
                "answer": "<p>Hate to say it but could someone explain to me how <colon><br>>enabled = numMines > 0;<br><br>works</p>", 
                "question": "10 steps to becoming a better programmer"
            }, 
            "id": "c6uzkbq"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//programming-motherfucker.com/</p>", 
                "question": "28 Ways to Learn Programming"
            }, 
            "id": "c6ppjn6"
        }, 
        {
            "body": {
                "answer": "<p>Your submission is titled<colon><br><br>> 28 Ways to Learn Programming<br><br>The website<sq>s title<colon><br><br>> 27 Ways to Learn to Program<br><br>The url slug<colon><br><br>> heres-25-ways-to-learn-online/<br><br>One of you is lying.</p>", 
                "question": "28 Ways to Learn Programming"
            }, 
            "id": "c6pwt24"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "28 Ways to Learn Programming"
            }, 
            "id": "c6pqeet"
        }, 
        {
            "body": {
                "answer": "<p>Thought this was going to be actual methods to learn programming rather than just sites that have tutorials.</p>", 
                "question": "28 Ways to Learn Programming"
            }, 
            "id": "c6pqcuz"
        }, 
        {
            "body": {
                "answer": "<p>The sad thing is there isn<sq>t a single eBook on the list that I<sq>m interested in downloading.</p>", 
                "question": "Microsoft Annual Free eBook Giveaway"
            }, 
            "id": "d5atcc0"
        }, 
        {
            "body": {
                "answer": "<p>I think they need to highlight the fact that those are **FREE** downloads.<br><br>Joking aside, by how that text was designed, I feel like I<sq>m running the risk of downloading all kinds of viruses. The word <dq>free<dq> appears on the page 20 times, and all but one are in all caps; most are bolded. Jeez.</p>", 
                "question": "Microsoft Annual Free eBook Giveaway"
            }, 
            "id": "d5b272l"
        }, 
        {
            "body": {
                "answer": "<p>\t$request = Invoke-WebRequest -Uri https<colon>//blogs.msdn.microsoft.com/mssmallbiz/2016/07/10/free-thats-right-im-giving-away-millions-of-free-microsoft-ebooks-again-including-windows-10-office-365-office-2016-power-bi-azure-windows-8-1-office-2013-sharepoint-2016-sha/ -UseBasicParsing<br>\t$hrefs = ($request.Links | Where href -like <sq>*ligman.me*<sq> | Select href).href | Select -Unique<br>\t$hrefs | Out-File -FilePath links.txt -Append -Encoding utf8<br><br>Little PS magic to get the download links. Dump into your favourite download manager.</p>", 
                "question": "Microsoft Annual Free eBook Giveaway"
            }, 
            "id": "d5az1zp"
        }, 
        {
            "body": {
                "answer": "<p>If anyone wants to download everything, just in case here<sq>s some ugly C# code that<sq>ll do the job.<br><br>    string url = new WebClient().DownloadString(@<dq>http<colon>//www.mssmallbiz.com/ericligman/Key_Shorts/MSFTFreeEbooks.txt<dq>);<br>    string[] urls = url.Replace(<sq>\\r<sq>,<sq> <sq>).Split(<sq>\\n<sq>);<br>    foreach(string tmp in urls) {<br>        try {<br>            System.Diagnostics.Process.Start(tmp);<br>        } catch(Exception) { }<br>        System.Threading.Thread.Sleep(100);<br>    }</p>", 
                "question": "Microsoft Annual Free eBook Giveaway"
            }, 
            "id": "d5axohj"
        }, 
        {
            "body": {
                "answer": "<p>Hiding downvotes in general is useless. This only works when browsing Reddit in a web browser without any extensions. RES and mobile Reddit apps don<sq>t show custom subreddit style. You can only display them and hope people will follow reddiquette. </p>", 
                "question": "[Announcement] Downvotes are no longer hidden and will stay that way"
            }, 
            "id": "ctg7xy9"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "[Announcement] Downvotes are no longer hidden and will stay that way"
            }, 
            "id": "ctgd2g1"
        }, 
        {
            "body": {
                "answer": "<p>They were hidden?</p>", 
                "question": "[Announcement] Downvotes are no longer hidden and will stay that way"
            }, 
            "id": "ctga0rn"
        }, 
        {
            "body": {
                "answer": "<p>Thanks, I think this is the right call!</p>", 
                "question": "[Announcement] Downvotes are no longer hidden and will stay that way"
            }, 
            "id": "ctg4gud"
        }, 
        {
            "body": {
                "answer": "<p>While we are on the subject, considering so many resources to learn by yourself exist, why would anyone pay for courses and such? I know some people prefer teachers, but even for those there are free courses online..</p>", 
                "question": "A list of Free Learning Resources for programming"
            }, 
            "id": "codlf93"
        }, 
        {
            "body": {
                "answer": "<p>This is on the FAQ also.</p>", 
                "question": "A list of Free Learning Resources for programming"
            }, 
            "id": "codqzkg"
        }, 
        {
            "body": {
                "answer": "<p>For recursion can you provide a link?<br><br>It<sq>s the third time im trying to understand deeply recursion but i can understand if i see the method done if i try to do it myself i fail miserably.<br><br>Thanks<br><br>PS<colon> This [book](http<colon>//chimera.labs.oreilly.com/books/1234000001805/index.html) i found on your link looks just good<br>Gonna get it</p>", 
                "question": "A list of Free Learning Resources for programming"
            }, 
            "id": "codma42"
        }, 
        {
            "body": {
                "answer": "<p>As someone that<sq>s been programming (very little web programming, though) longer than you have been alive it<sq>s hard for me to wrap my head around an 18 year old saying he<sq>s going to prepare people for jobs creating web sites. Your classes aside, how much money do you personally make creating websites, and what are some examples of your finished work?<br><br>I don<sq>t mean to imply young people can<sq>t be accomplished and skilled in this field. I know web programming can be a different kind of beast bordering on being artistic depending on what you do. </p>", 
                "question": "Learn HTML5 and CSS3 in under a week. [Update - 150 free coupons]"
            }, 
            "id": "co8tcno"
        }, 
        {
            "body": {
                "answer": "<p>Am I the only person that cringes every time someone refers to writing HTML/CSS as programming?</p>", 
                "question": "Learn HTML5 and CSS3 in under a week. [Update - 150 free coupons]"
            }, 
            "id": "co8po7t"
        }, 
        {
            "body": {
                "answer": "<p>You are one heck of a businessman. Well, good luck! Just post your results in some biz sub here and PM me. I am pretty interested in this. The business that is.</p>", 
                "question": "Learn HTML5 and CSS3 in under a week. [Update - 150 free coupons]"
            }, 
            "id": "co8k9ww"
        }, 
        {
            "body": {
                "answer": "<p>Pity I missed out on this being free...I honestly can<sq>t even afford it at 60<percent> off right now.<br><br> I<sq>m flying through codecademy<sq>s HTML and CSS tutorials and I<sq>m almost done with them; If perchance you<sq>re familiar with that course, what do you have in yours that it doesn<sq>t? </p>", 
                "question": "Learn HTML5 and CSS3 in under a week. [Update - 150 free coupons]"
            }, 
            "id": "co8khsk"
        }, 
        {
            "body": {
                "answer": "<p>I have found 3 programming buddies in this subreddit and after a while they seem to get bored and never finish what we where studying together.<br><br>I gave up, now only studying by myself + internet. Hope you guys good luck</p>", 
                "question": "Find a programming buddy. Any language any goal."
            }, 
            "id": "ckrh356"
        }, 
        {
            "body": {
                "answer": "<p>I just started The Odin Project about a week ago and I<sq>m on the html/css section of codeacademy, which is the 101 section of Odin. My goal is to finish Odin completely by the end of December. Anyone want to join? I am new to programming.<br><br><br>Link<colon> http<colon>//www.reddit.com/r/theodinproject/comments/2hdcs2/where_are_you_in_odin_right_now_and_what_are_your/<br><br><br>I<sq>m also taking an online Python course through coursera. </p>", 
                "question": "Find a programming buddy. Any language any goal."
            }, 
            "id": "ckrg7r3"
        }, 
        {
            "body": {
                "answer": "<p>Anyone up for a self-paced quest to master Artificial Intelligence? Okey it<sq>s a terribly vague goal to say the least and I don<sq>t have the faintest clue as to how to go about it. But if you are genuinely interested in it and willing to dip your toe, perhaps we can exchange notes or solve maths or simply discuss? And along the way maybe we can write cool bots for robotgames or vindinium or maybe even solve some board game? It sure sounds daunting but come aboard anyway if you are fascinated by these despite having no formal knowledge and can be in it for the long haul.<br><br>Edit<colon> Thanks for all the interest people. I have opened a tentative sub where we can talk about the most pressing issues for now. Come over here if you are interested<colon> http<colon>//www.reddit.com/r/learnAI/comments/2hf2yb/greetings_my_fellow_glorious_humanoids_lets_talk/</p>", 
                "question": "Find a programming buddy. Any language any goal."
            }, 
            "id": "ckrkzj8"
        }, 
        {
            "body": {
                "answer": "<p>What if I<sq>m looking for more of a mentor relationship? This might be weird but I<sq>m currently in college and as a woman who just started programming in the last two years I don<sq>t know as much as I wish and have no real adult that I feel like I could learn from other than professors. Not only about programming itself but the industry and how it all works out. Anyone be willing to be a mentor? </p>", 
                "question": "Find a programming buddy. Any language any goal."
            }, 
            "id": "ckrq3rf"
        }, 
        {
            "body": {
                "answer": "<p>The course was monumental in my understanding of computer science. I honestly can<sq>t recommend enough. I think you should give it a go.</p>", 
                "question": "Is CS50 a good start?"
            }, 
            "id": "dbbtxo3"
        }, 
        {
            "body": {
                "answer": "<p>Imo great garlic bread is simple. You make a paste with butter, garlic, salt, and basil. Put that spread on some bread and bake.<br><br>If you<sq>re from the US and need to Americanize it for your parents (like I do) top it with fresh shredded mozz before you bake. They see cheese, and think it<sq>s good. Then they find out it<sq>s good because of other ingredients</p>", 
                "question": "Is CS50 a good start?"
            }, 
            "id": "dbcfufb"
        }, 
        {
            "body": {
                "answer": "<p>I finished it about a month ago and I am now completely hooked to programming and computer science. It<sq>s been a life-changing experience for me and many others. Give it a try - it<sq>s completely free.</p>", 
                "question": "Is CS50 a good start?"
            }, 
            "id": "dbbta1t"
        }, 
        {
            "body": {
                "answer": "<p>I knew 0 programming going into cs50. I am so glad I started with CS50 and finished it.  It is the best class I have ever taken in my life and I feel it gave me a great foundation. The class teaches you to think like a programmed and how to problem solve. Essential skills no matter what language you use in the future or what you want to build.</p>", 
                "question": "Is CS50 a good start?"
            }, 
            "id": "dbbxpc2"
        }, 
        {
            "body": {
                "answer": "<p>Hindi, Mandarin, Arabic, Russian, French. </p>", 
                "question": "If you could learn 5 languages to cover most bases what would they be?"
            }, 
            "id": "cwkxwb0"
        }, 
        {
            "body": {
                "answer": "<p>Haskell is different, not particularly harder.<br><br>C is essential for low-level stuff, it<sq>s still the most important language out there in terms of existing codebases doing important things out in the wild and in terms of being the default language for very low-level work in embedded devices or whatever else.<br><br>C++ and Java also has a massive amount of existing code out there doing important things. COBOL and FORTRAN are rarely used to write anything new, but old codebases are still plenty active out there. A lot more code than you<sq>d think from 1980 or earlier is still running business-critical systems.<br><br>Erlang isn<sq>t very widespread but has some big clout in small niches.<br><br>C# is running a non-trivial amount of the web and other generally Windows-centred systems.<br><br>Go, Rust and Elixir all have a certain amount of fad status right now, but make now mistake<colon> they haven<sq>t proven that they<sq>ll matter at all come 10 years time yet. They<sq>re all young and don<sq>t have that <sq>too big to fail<sq> status. (Also don<sq>t get me wrong, that doesn<sq>t mean they<sq>re bad languages - I think Rust should become a big language in fact - but that doesn<sq>t mean it will.)<br><br>PHP has a lot of mostly older codebases out there on the web, but it still has a lot of the web market.<br><br>Ruby and RoR are a non-trivial segment of the market too.<br><br>There are more language and no doubt people that would disagree with me on this or that in what I<sq>ve said, but the basic premise is this<colon> there<sq>s a lot of stuff out there and we can<sq>t tell you what to do without really knowing what you want. <sq>low-level<sq> is pretty trumped by C and C is often considered the lingua franca of programming anyway, but other than that there<sq>s a lot of opinion in making an answer. </p>", 
                "question": "If you could learn 5 languages to cover most bases what would they be?"
            }, 
            "id": "cwksnf0"
        }, 
        {
            "body": {
                "answer": "<p>If your sole purpose is maximizing the number of jobs you can do...<br><br>* C++<br>* C#<br>* Java<br>* SQL<br>* JavaScript<br><br>C# and Java are similar enough that learning both isn<sq>t really all that hard.</p>", 
                "question": "If you could learn 5 languages to cover most bases what would they be?"
            }, 
            "id": "cwkzukq"
        }, 
        {
            "body": {
                "answer": "<p>You don<sq>t need to know five languages.<br><br>JavaScript, Python, and C++. That covers your client-side, server-side, and desktop app side.</p>", 
                "question": "If you could learn 5 languages to cover most bases what would they be?"
            }, 
            "id": "cwktq0w"
        }, 
        {
            "body": {
                "answer": "<p>If I look back on my own career, the big leaps have come when I would get out of my <dq>wheelhouse<dq> and tried to do things that cut across lots of disciplines. It makes you a much more flexible thinker, gives you more of a wide scope of problems you can solve (in my opinion).<br><br>For example when I was a younger coder I started programming on an IBM platform called the AS/400, and then I started making a name for myself integrating these new wiz-bang PCs to the AS/400 (which was considered a pretty novel thing at the time). <br><br>But I felt I made a really big leap when I set up my own Linux server in my basement, simply so I could run my own Quake server. Before long I was<colon><br><br>* setting up a LAMP stack and writing web pages to display <br>tournament stats to the players;<br>* Diving deep into TCP/IP networking;<br>* Fooling around with linux device drivers for a different project where I wanted to control my CD changer from a web page;<br>* Learning, to name a few<colon> Bash shell programming, PHP, Python, Perl, CGI, while continuing my education in C;<br>* Learning how to operate email servers and stuff like Jabber/XMPP;<br>* And of course developing a pretty thorough understanding of Linux administration/operation.<br><br>And that<sq>s just for starters. I still run my own Linux server to this day (in the cloud now, alas -- it is simultaneously much better and not nearly as satisfying).<br><br>Of course you don<sq>t want to become a <dq>jack of all trades, master of none<dq> (an accusation that could probably be fairly directed at me) -- you should keep a core competency where you are The Expert. But I think this sort of cross-discipline fucking around gives you a flexibility in your thinking that really improves overall problem solving skill. When you are doing this kind of stuff, you<sq>re just constantly mowing through one (sometimes frustrating, sometimes rewarding) problem after another.</p>", 
                "question": "How to improve your problem solving skills as a beginner who has been out of school."
            }, 
            "id": "cuwhpiy"
        }, 
        {
            "body": {
                "answer": "<p>Adding to the original post, practice makes perfect and even a small amount of time each day doing something related to what you<sq>ve been learning can be helpful!<br><br>There are a variety of websites out there that offer practice problems, including [CodingBat.com](http<colon>//codingbat.com) (Java and Python), [Project Euler](http<colon>//projecteuler.net) (any language), and the practice problems available within the [Projects repository](http<colon>//github.com/karan/projects) on [Karan Goel<sq>s GitHub profile](http<colon>//github.com/karan) (any language) being some of the resources available.<br><br>One could even start their own project and continue to improve upon it as they learn more and refine their skills. It is definitely a neat thing to look back on something and see how far you<sq>ve come since you started! There could be a variety of learning opportunities available with something like this, too, especially if you<sq>re interested in something new (be it a programming language, IDE, API, etc.) or different!<br><br>Even contributing to an open source project on a website like [Github.com](http<colon>//github.com) could be worthwhile, and may provide opportunities for one to learn and develop their skills, while, at the same time, contributing to something used by many people each day. This sort of thing could even potentially be put on a resume, too!</p>", 
                "question": "How to improve your problem solving skills as a beginner who has been out of school."
            }, 
            "id": "cuwfeqp"
        }, 
        {
            "body": {
                "answer": "<p>Learn math; do proofs. </p>", 
                "question": "How to improve your problem solving skills as a beginner who has been out of school."
            }, 
            "id": "cuwoa9g"
        }, 
        {
            "body": {
                "answer": "<p>My biggest leap as a programmer came when I learnt about Structural Induction (https<colon>//en.wikipedia.org/wiki/Structural_induction) in my degree. Up until that point, I relied entirely on intuition. Taking things apart, putting them back together. Poring over other people<sq>s code, rewriting it, maybe trying to improve it.<br><br>Structural Induction taught me that a problem can be solved if you base your solution on predictable results. The actual method of induction works well for typically structured problems, but it was more the process of starting with the problem, attempting to solve the problem in it<sq>s most basic case and evolving the solution from there. It taught me that a problem can<sq>t always be solved in one huge step. Rather that you need to approach it from multiple angles, in small, digestible chunks. Otherwise your brain will become overloaded with information and won<sq>t trigger that next step.<br><br>Other than that, the best way I<sq>ve found to improve your general problem solving skills is to challenge yourself to build something that already exists, or try to build a common algorithm or data structure in a number of different languages. The Ring Buffer (or Circular Array) is usually my go to data structure in any new language I learn as it<sq>s easy to comprehend and almost any language will have the ability to create it.<br><br>Of course you can also go outside code<colon> chess, sudoku and <dq>brain teaser<dq> or logic games are great quick ways to learn on the train or wherever you are. </p>", 
                "question": "How to improve your problem solving skills as a beginner who has been out of school."
            }, 
            "id": "cuwwhip"
        }, 
        {
            "body": {
                "answer": "<p>If you are already an experienced programmer, start with [Accelerated C++](http<colon>//www.amazon.co.uk/Accelerated-Practical-Programming-Example-Series/dp/020170353X), which is short and will get you started quickly.You will still need other resources to learn all the new features that have been introduced into the language, but Accelerated C++ will get you off to a good start.</p>", 
                "question": "<dq>Fluent in C++<dq> seriously?"
            }, 
            "id": "cuscvnj"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m pretty sure the only person who feels he has learned all of C++ is Stroustrup himself. If you<sq>re feeling small, you<sq>re probably well on your way to being a C++ programmer. If you<sq>re angry at feeling small and looking for an escape route, you<sq>re probably already a C++ programmer.<br><br>Edit<colon> Just realised this is learnprogramming - anyone new reading<colon> consider the above tagged <sq>mostly humour<sq>, just in case anyone thought I was 100<percent> serious. <colon>)</p>", 
                "question": "<dq>Fluent in C++<dq> seriously?"
            }, 
            "id": "cusijsg"
        }, 
        {
            "body": {
                "answer": "<p>C++ is quite a big language, but you don<sq>t need to know anything close to <dq>everything<dq> to make very meaningful programs.<br><br>Books aren<sq>t just about learning the C++ syntax and rules. They might also teach you a lot about the standard library (which is quite big) and all kinds of other things that will make your life easier.</p>", 
                "question": "<dq>Fluent in C++<dq> seriously?"
            }, 
            "id": "cusdz81"
        }, 
        {
            "body": {
                "answer": "<p>I took a two-semester course on C++ covering [this book](http<colon>//www.amazon.com/Programming-Problem-Analysis-Program-Design/dp/1285852745/ref=sr_1_1?s=books&ie=UTF8&qid=1441546799&sr=1-1&keywords=C<percent>2B<percent>2B+Malik) by Malik, which is about 1500 pages long.  Figure about half of the pages are examples/practice questions, and most of the pages of actual content overly explain the syntax for beginners.  There is an entire chapter on loops that is like 100 pages long.  No doubt, the language is complicated, but don<sq>t let the size of the book deter you.  For reference, I was a math major who wanted to learn to code.  C++ was my first language, and it took me about a year to learn enough for me to say I knew C++.  </p>", 
                "question": "<dq>Fluent in C++<dq> seriously?"
            }, 
            "id": "cusg92z"
        }, 
        {
            "body": {
                "answer": "<p>You should really learn Javascript. It<sq>s [going through the roof](http<colon>//githut.info/).<br><br>It can now be used both client side and [server side](https<colon>//nodejs.org).<br><br>ES6 (the new Javascript standard) introduces a better structure for a more traditional object orientated approach.<br><br>Tons of tools / resources<br><br>Relatively easy to pick up.<br><br>Tons of frameworks/libraries. Maybe take a stab at [jQuery](http<colon>//jquery.com) first.<br><br>Pick it up, you won<sq>t regret it. [Start here](http<colon>//www.codecademy.com/en/tracks/javascript).</p>", 
                "question": "Do you have to learn JavaScript for web development?"
            }, 
            "id": "csw3sl0"
        }, 
        {
            "body": {
                "answer": "<p>Everyone saying it<sq>s *not* a <dq>must<dq> is imagining hypothetical scenarios where you create a website that looks like it<sq>s from the 90s.<br><br>If you<sq>re creating anything approaching a modern website, and you don<sq>t have another developer doing the front end for you, you *have* to learn JavaScript. Period.<br><br>Actually, you could avoid learning JavaScript by learning a language that *compiles* to JavaScript (e.g. Coffeescript, Typescript, etc.) but thanks to the Law of Leaky Abstractions, you<sq>ll end up needing/wanting to know JavaScript anyway.</p>", 
                "question": "Do you have to learn JavaScript for web development?"
            }, 
            "id": "cswc5gx"
        }, 
        {
            "body": {
                "answer": "<p>Have to; no. It<sq>s perfectly possible to make a web application that<sq>s fully rendered on the back-end through RoR for example. However; not knowing any JS will hinder you because you really want to at least validate user input on the client side.</p>", 
                "question": "Do you have to learn JavaScript for web development?"
            }, 
            "id": "csw1mnm"
        }, 
        {
            "body": {
                "answer": "<p>Technical answer, no. Logical answer, yes. It<sq>s like asking can I build a car without learning how to shape and fabricate metal? Could you technically do it? Yes, but it<sq>d be one clunky POS. </p>", 
                "question": "Do you have to learn JavaScript for web development?"
            }, 
            "id": "csw546m"
        }, 
        {
            "body": {
                "answer": "<p>Go to https<colon>//education.github.com/ NOW and sign up with an .edu email.<br><br>Why? The student pack.<br><br>Bundle Benefits;<br>* **Atom** - A hackable text editor for the 21st Century<br>(Already free and open source. Next)<br><br>* **Bitnami** - Install cloud applications in a single click. Business 3 plan **(normally $49/month)** for one **year.**<br><br>* **CrowdFlower** - Crowdsourcing and data enrichment platform. Access to the Crowdflower platform **(normally $2,500/month)**<br><br>* **DigitalOcean** - Simple cloud hosting, built for developer. **$100 in platform credit** for new users<br><br>* **DNSimple** - Simple DNS management with one-click services and a robust API. *Bronze hosted DNS plan* **(normally $3/month)** for **two years**<br><br>* **GitHub** - Powerful collaboration, code review, and code management. *Micro account* **(normally $7/month)** with **five private repositories** while you<sq>re a student<br><br>* **HackHands** - Live programming help available 24/7. **$25 in platform credit**<br><br>* **Microsoft DreamSpark** - A suite of Microsoft developer tools including the Visual Studio IDE. **Visual Studio Community 2013** and the rest of the DreamSpark collection while you\u2019re a student<br><br>* **Namecheap** - Affordable registration, hosting, and domain management. **One year** domain name registration on the .me TLD **(normally $8.99/year)** & **One year SSL certificate (normally $9/year)**<br><br>* **Orchestrate** - A complete database portfolio that includes search, time-series events, geolocation and graph queries through an API. Developer account **(normally $49/month)** while you<sq>re a student<br><br>* **SendGrid** - Email infrastructure as a service. Student plan **15K free emails/month** *(normally limited to 200 free emails/day)* while you<sq>re a student<br><br>**Stripe** - Web and mobile payments, built for developers. **Waived transaction fees** on first $1000 in revenue processed<br><br>* **Travis CI** - Continuous integration platform for open source and private projects. **Private builds (normally $69/month)** while you<sq>re a student<br><br>* **Unreal Engine** - A **complete suite** of development tools for PC, console, mobile, web and VR. **Unreal Engine** while you<sq>re a student</p>", 
                "question": "As a beginner how can I use GitHub to my advantage?"
            }, 
            "id": "cpmtey1"
        }, 
        {
            "body": {
                "answer": "<p>I think it<sq>s good habit to get into using git. Even as a beginner. Github is a server running git. You can use git on your local machine. You don<sq>t need github. Just know that your git/code/work is vulnerable to loss if its only on your computer. Github is one remote git repo option of many available. <br><br>To answer your question about multiple folders. Those are just file system folders. Its an organization of logical groupings of related files. Includes, images, etc.. <br><br>Check out http<colon>//git-scm.com/ and especially the documentation. They break it down quite well from basics to working with multiple remotes and multiple coders in one codebase. </p>", 
                "question": "As a beginner how can I use GitHub to my advantage?"
            }, 
            "id": "cpmract"
        }, 
        {
            "body": {
                "answer": "<p>Try this<colon><br><br>http<colon>//pcottle.github.io/learnGitBranching/<br><br>Knowing git when you leave college will give you a massive advantage when you start your first job, it<sq>s one seriously complex thing less to worry about</p>", 
                "question": "As a beginner how can I use GitHub to my advantage?"
            }, 
            "id": "cpmv287"
        }, 
        {
            "body": {
                "answer": "<p>I really think git is important even for beginners, if only to roll things back when they break.</p>", 
                "question": "As a beginner how can I use GitHub to my advantage?"
            }, 
            "id": "cpmw0vq"
        }, 
        {
            "body": {
                "answer": "<p>In addition<colon> If it<sq>s a business idea, it<sq>s not the idea that<sq>s worth millions, it<sq>s the execution. Without execution the idea is nothing. <br><br>As an example<colon> If you could jump in a time machine and go to 2004, could you clone FB and beat the real FB? Would you be able to execute on engineering, marketing, sales, fundraising, all that stuff? Friendster and MySpace couldn<sq>t beat FB, what makes you think you could?<br><br>Your idea is worth nothing. </p>", 
                "question": "I<sq>m not going to steal your ideas"
            }, 
            "id": "cpiz6ro"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "I<sq>m not going to steal your ideas"
            }, 
            "id": "cpj338g"
        }, 
        {
            "body": {
                "answer": "<p>Nice try Zuckerberg</p>", 
                "question": "I<sq>m not going to steal your ideas"
            }, 
            "id": "cpj0h8p"
        }, 
        {
            "body": {
                "answer": "<p>This.  I teach mobile and game development, and I get this kind of stuff almost every day.  <br><br>So far I haven<sq>t stolen a single idea. In fact, I really don<sq>t want to hear it.  I<sq>m not going to assign it as a final project, and you can<sq>t have my best student (who literally was just hired by Google) for free.  Computer science majors are all earning paid internships, and none of them need <dq>experience<dq> working on your project. Nor do I want equity in a business that is at the moment a complete liability.  </p>", 
                "question": "I<sq>m not going to steal your ideas"
            }, 
            "id": "cpj2niq"
        }, 
        {
            "body": {
                "answer": "<p>From a game development standpoint you need to figure out a lot more than this.<br><br>First some background.  How long have you been programming?  How long have you been designing?  Do you have any complete games already?<br><br>What is your audience?  Is this a game for core players, casual players, older players, etc?  What age range are do you imagine for your audience?<br><br>Now on to some meat.<br><br>What is your platform?  mobile/pc/console/...  <br>How about programming environment?  <br>Possible thoughts for engines you may use, or languages?<br><br>Think highly about the feasibility of this.  Try working it into a diagram to see how parts of your game may be interacting.<br><br>What is the main part of this that is supposed to make the game fun? Is it the exploration or the battling?  Is it something else?<br><br>Before upgrades, what is the basic gameplay?  Example of a battle?<br><br>What is the cycle players are going to be following as soon as they get into the game?<br><br>How exactly do you plan on exposing people to programming in this game?<br><br>* Will it be to a degree in which people are going to learn something? (If so, keep in mind that this will remove LOTS of people from your audience if its for anyone to play)  <br>* Will it rather be just the idea of programming you are sharing?  People won<sq>t be learning any programming, but it might make them feel like they are programming?<br><br>* This leads to the important thought of how you will implement this.  You absolutely will have to limit the player<sq>s choices.  You never wan<sq>t someone able to explicitly do coding in your game.<br><br>What is the pace of the game?  If you want it to be an exciting battle, <sq>coding<sq> in the middle of things could really take away from that.<br><br>How are you going to keep people coming back to your game?<br><br><br>What<sq>s your ideal team size and composition?  What skills do you have available to you?<br><br>These are some of the first thoughts I<sq>ve had.  You don<sq>t have to explicitly answer me on any of these; I realize they could be giving too much information out by answering.  At least think about them well and even PM me your thoughts if you want.</p>", 
                "question": "An MMO where kids <sq>accidentally<sq> get exposed programming."
            }, 
            "id": "cdjjlre"
        }, 
        {
            "body": {
                "answer": "<p>I love the concept, so this isn<sq>t a nitpick so much as a warning about a problem you<sq>ll encounter later.<br><br>Let<sq>s say you let players program missiles with tracking intelligence. Eventually, the best possible code for the job will be found and posted on forums and kids will copy paste it in. Even if you make it so that everyone<sq>s code must be somehow different, people will find a way to make <dq>least effort guides<dq> that will mess with the whole conceit.<br><br>Measuring programming skill is an open question with many solutions, none of which are optimal. They all have tradeoffs in terms of what they<sq>ll cause players to try and <dq>maximize<dq>. Which non-optimal solution you pick will determine how effective your game is at teaching programming (as opposed to copy-pasting).<br><br>I can<sq>t go into more depth without knowing more of the specifics. However, just know that your answer to <dq>what specifically am I trying to test in players?<dq> will be the most important decision you make in designing this game, and it should be something you spend A LOT of time thinking about.<br><br>Best of Luck!</p>", 
                "question": "An MMO where kids <sq>accidentally<sq> get exposed programming."
            }, 
            "id": "cdjjzyb"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ll share a relevant story on how I got started programming.<br><br>I<sq>m old, and I started playing MMO<sq>s on things called [MUDs](http<colon>//en.wikipedia.org/wiki/MUD).  It was basically an MMO, but it was all text based and if you got more than 50 or so players on a server things started to get hairy.  It was every bit as addicting as WOW, but it was entirely text based.  Kids got kicked out of school for being on the MUD instead of going to classes or doing their homework.<br><br>I played the MUD for hours a day and sometimes all weekend.  Some parts of the MUD were pretty tedious.  For example, you have to eat, and drink.  You can<sq>t adventure all day on an empty stomach.  So when you were hungry you saw the text<colon> <dq>You are famished.<dq>  Then you had to type <dq>eat mushroom,<dq> that is, if you HAD a mushroom.  If not, you<sq>d have to get one to eat.  If you were thirsty you<sq>d see the text <dq>You are parched.<dq>  Then you had to type <dq>drink flask<dq> which would solve that issue, assuming that you had water in your flask.<br><br>After 200 hours of playing this game you get real tired the eating and drinking stuff.  I heard about a few people using something called TinTin++ to automate these tasks, so I looked into it.  TinTin++ sat in between your telnet session and the MUD, intercepting every bit of text that scrolled by.  TinTin monitored the text and could execute commands based on rules.  My first rule was to look for the text <dq>You are parched.<dq> and issue the command <dq>drink water.<dq><br><br>Great that was nice.  Problem solved.  But I could still get hungry.  So the next rule I made looked for the words <dq>You are famished.<dq> which in turn executed the command <dq>eat mushroom.<dq>  Now I had two awesome rules that made my life easier.  This worked for a while, until I didn<sq>t have a mushroom.  Now I needed a rule that looked for <dq>You have no mushroom to eat<dq> in which case I would <dq>cast create mushroom;eat mushroom.<dq>  This worked because I was a cleric.  All was well in the world again.<br><br>During peak times, the server started to lag.  Sometimes, the text couldn<sq>t get to my PC before my character died in a fight.  I added another rule to look for <dq>You are severely wounded.<dq> and to <dq>flee<dq> in response.  This helped me, but my tank needs me to heal him...and if I lag then I can only watch him die when the server decides to let me see what happened.  So I added another rule to look for someone that is <dq>severely wounded<dq> and to cast a healing spell on them.  So if <dq>Rygar is severely wounded<dq> then I needed to <dq>cast heal Rygar.<dq><br><br>Now I had a problem...how do I make a rule to use someones name?  I read the manual, and I started using this funny <percent>s character in my rules.  So the rule would look for <dq><percent>s is severely wounded<dq> and then <dq>cast heal <percent>s<dq>.<br><br>At this point I hope you see what is happening.  I had 0 programming experience, but I was accidentally programming.  As time went on I built some really complicated rules.  I built a bot that would heal people that said <dq>heal me<dq> or <dq>make me a mushroom<dq> or <dq>make me a war pig<dq> if they had a low enough level and I would just let him sit in the square to help.  Some weekends I didn<sq>t even care about the game, I just wanted to sit and make more TinTin rules.  People learned about my rules and started using them for themselves.  I was actually kind of proud of that...<br><br>One day my Dad asked me what I was doing, and my brother was there.  So at the age of 15 I explained to him what TinTin was, showed him my rules and explained the MUD.  I didn<sq>t think anything of it, but my Dad was pretty impressed.  He asked my brother, he was in college at the time and taking a programming course, what he thought and my brother said <dq>This is just like C (I didn<sq>t know what that was at the time), but this is more advanced that what we are learning at school!  He<sq>s programming!<dq><br><br>Of course I never believed that what I was doing was programming, nor did I care.  I never called myself a programmer because of my TinTin experience, but it DID trick me into programming.<br><br>20 years later I<sq>m a software developer, I think that MUD got me on this path.<br><br>I do not think <dq>programming weapons systems<dq> is the way to go for an MMO.  I would go in the direction that you CAN write a small bit of code to perform a tedious task.  Make the MMO graphical, but console based.  Make them click a mushroom to eat it if they are hungry, or let them code a rule to look for <dq>You are hungry<dq> and click the mushroom automatically.  As long as the console describes what is happening on the screen, players can write a rule to look for events and react to them.  <br><br>TL;DR<colon> Let the users write <dq>bots<dq> to make their characters interact with their environment.  Don<sq>t force it, but make the game easier if they want to do it.<br><br>Edit<colon><br>Since this post is getting a few views I thought I<sq>d share what a TinTin script looks like, there are a bunch of them here<colon> http<colon>//tintin.sourceforge.net/scripts/.  It turns out I was definitely programming ;)<br></p>", 
                "question": "An MMO where kids <sq>accidentally<sq> get exposed programming."
            }, 
            "id": "cdjp95b"
        }, 
        {
            "body": {
                "answer": "<p>I am not sure about what exactly programming for a child would entail, but  I can tell you one thing it mustn<sq>t<colon><br><br>1) No confusing error messages a child wouldn<sq>t be able to parse. <br><br>Struggling with arcane error messages, whose meanings you don<sq>t know is a very important turn off!</p>", 
                "question": "An MMO where kids <sq>accidentally<sq> get exposed programming."
            }, 
            "id": "cdjks9a"
        }, 
        {
            "body": {
                "answer": "<p>Three people that I<sq>d recommend<colon><br><br>Jeremy Ashkenas - https<colon>//github.com/jashkenas<br><br>Paul Irish - https<colon>//github.com/paulirish<br><br>Mark Otto - https<colon>//github.com/mdo<br><br>And trending repos can be worth a peek, too<colon> https<colon>//github.com/trending?since=monthly</p>", 
                "question": "Model Github accounts from professional web developers I can learn from?"
            }, 
            "id": "ccyfck5"
        }, 
        {
            "body": {
                "answer": "<p>I like this idea.  I<sq>m of no help..but i<sq>m watching</p>", 
                "question": "Model Github accounts from professional web developers I can learn from?"
            }, 
            "id": "ccyevd7"
        }, 
        {
            "body": {
                "answer": "<p>Mahdi Yusuf I find his interests varied and awesome. JavaScript, python and objective-C.<br><br>http<colon>//github.com/myusuf3</p>", 
                "question": "Model Github accounts from professional web developers I can learn from?"
            }, 
            "id": "ccyi1pe"
        }, 
        {
            "body": {
                "answer": "<p>Have you gone to github and searched for some JS repositories?  That might be a good place to start. I know this doesn<sq>t outright help you with <dq>professional<dq> repositories, but you can start to grasp that by checking out their commit histories and whether or not they<sq>ve been starred, etc.<br><br>I hope that helps <colon>)</p>", 
                "question": "Model Github accounts from professional web developers I can learn from?"
            }, 
            "id": "ccyey3w"
        }, 
        {
            "body": {
                "answer": "<p>Your friend may have meant [Impostor Syndrome](http<colon>//en.wikipedia.org/wiki/Impostor_syndrome).  Dunning-Kruger is when you<sq>re dumb and feel smart.  Imposter syndrome is when you<sq>re smart and feel dumb.<br><br>I<sq>ve been in the industry about ten years.  I<sq>ve built large distributed systems, operating systems, compilers, assemblers, search engines, I can code in pretty much any language out there... but when I look at all the *stuff* out there to learn, even just in Computer Science, I feel like I don<sq>t know enough.<br><br>... and that<sq>s a good thing as long as it keeps you hungry enough to learn new things without affecting your confidence level such that it keeps you from starting new projects (e.g. <dq>I can<sq>t write a compiler.  That<sq>s too hard.  Other people do it because they<sq>re smarter than me<dq>).</p>", 
                "question": "I<sq>m currently a college senior less than a year away from finishing my BS in CS. When coding I feel like I have no idea what I<sq>m doing even though it works. Has anyone felt this and does it go away?"
            }, 
            "id": "c9hdrz6"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been coding all my life, without any formal education. The feeling that I<sq>m pretty fucking dumb has always been there. Especially when reading /r/haskell. But I just keep trying, because I love what I do.</p>", 
                "question": "I<sq>m currently a college senior less than a year away from finishing my BS in CS. When coding I feel like I have no idea what I<sq>m doing even though it works. Has anyone felt this and does it go away?"
            }, 
            "id": "c9he745"
        }, 
        {
            "body": {
                "answer": "<p>When I got my Master<sq>s Degree in CS I remember thinking that they shouldn<sq>t give degrees to people who knew as little as I do.  Once I got into industry and later into teaching I realized I was way ahead of many of my peers.  <br><br>Since graduating I have been on a lot of search committees and known a lot of IT people.  One thing I have learned is that some schools do a very good job of teaching their students self-confidence and not much else.  On the other hand some schools turn out people with strong IT skills but no self confidence.  What you say about programs that work makes me think you are in the later group. There are some jobs where confidence and the ability to sell yourself are more important that tech skills.   But if you can develop some confidence in yourself and back it up with some solid tech skills the sky is the limit.  Does your school offer some kind of mock interview service?  If so it might be a way to boost your ability to sell yourself.<br><br>By the way, the interview process itself does not help self confidence.  The people you meet at the company have usually been working in the same environment for quite a while.  They seem like they know so much and are throwing around terms you think you should know.  On the other hand you have been hopping from topic to topic every semester.  You never get a chance to master any one topic.   This is probably why you feel line you are a fraud during the interview.   Don<sq>t worry.   Six months after you are hired they will probably bring around another crop of new grads interviewing for a job; you will aww them with your expertise and make them feel like frauds without even trying.   Five years later you will actually be doing the hiring.   At that time remember to avoid the ones who are supremely confident and hire the ones that feel like frauds. </p>", 
                "question": "I<sq>m currently a college senior less than a year away from finishing my BS in CS. When coding I feel like I have no idea what I<sq>m doing even though it works. Has anyone felt this and does it go away?"
            }, 
            "id": "c9hiy9t"
        }, 
        {
            "body": {
                "answer": "<p>Wow. Thanks. I was trying to describe this effect the other day, and, as is usual for me these days, was falling short. <br><br>I recently suffered a traumatic brain injury. It<sq>s affected some of the speech and memory areas of my brain, and I have problems with word choice when writing. (I will never, ever, ever make fun of people who do goof up their/they<sq>re/there again. I<sq>m the son of an english teacher. You have no idea how painful that aspect of this injury has been.) One of the effects is that I feel like I<sq>ve forgotten how to code. But I ran myself through some codecademy lessons... and without any real effort, I was nailing all of the lessons on the first try in a language I didn<sq>t know. I would just jot something off with the expectation that it was going to fail miserably and I was going to iterate and try again ... and it would output the right things and really actually worked. Part of that is that the language (ruby) is quite nice, part of it is that apparently that part of my intelligence is still intact, but something (either a neurological or psychological issue) is keeping me from consciously accessing it. <br><br>I didn<sq>t have a name for that feeling until now. <br><br>Also<colon> Wear a helmet when you ride a bicycle. Truuust me on this one. </p>", 
                "question": "I<sq>m currently a college senior less than a year away from finishing my BS in CS. When coding I feel like I have no idea what I<sq>m doing even though it works. Has anyone felt this and does it go away?"
            }, 
            "id": "c9hizej"
        }, 
        {
            "body": {
                "answer": "<p>Pluralsight all the way for C# learning.<br><br>Begin with [Scott Allen<sq>s C# Fundamentals](https<colon>//app.pluralsight.com/library/courses/csharp-fundamentals-csharp5/table-of-contents)</p>", 
                "question": "Is the Microsoft Virtual Academy a good place to learn C#?"
            }, 
            "id": "dbzkwfk"
        }, 
        {
            "body": {
                "answer": "<p>For beginners that aren<sq>t fluent in other languages it<sq>s definitely great. If you<sq>re experienced you<sq>ll find it a little slow. Tabor knows what he<sq>s talking about though, stick with it.</p>", 
                "question": "Is the Microsoft Virtual Academy a good place to learn C#?"
            }, 
            "id": "dbzjej1"
        }, 
        {
            "body": {
                "answer": "<p>I thought Bob Tabor<sq>s courses on MVA were pretty good until I tried the [C# Track on Treehouse](http<colon>//referrals.trhou.se/ericwilhite) (note, referral link)<br><br>I like the pacing on Treehouse much more and the explanations are fantastic! I<sq>m not sure what it was about Tabor<sq>s course but he didn<sq>t really hold my attention. The content and explanations are all pretty solid, and some folks may prefer it. I just feel way more involved and like the content is making more sense from the Treehouse course.<br><br>I have some basic knowledge from Python, Java, & JS... so keeping that in mind I feel like the C# track is a good pace for slightly above beginner level programmers. Though I<sq>m sure a dedicated first-time learner could roll through it with the help of a little Googling.<br><br>If you<sq>re super motivated, you can probably finish the whole track within the free trial period.<br><br>They also have a ASP.NET track that looks pretty promising as well.</p>", 
                "question": "Is the Microsoft Virtual Academy a good place to learn C#?"
            }, 
            "id": "dbzj1hf"
        }, 
        {
            "body": {
                "answer": "<p>Tabor and his website Development University u are so good imo, that I focused primarily on C# as my first main language.</p>", 
                "question": "Is the Microsoft Virtual Academy a good place to learn C#?"
            }, 
            "id": "dbzndoz"
        }, 
        {
            "body": {
                "answer": "<p>The only thing you were asked to write was your `giveChange` method. You spent a lot of work on the rest of your program, but the `giveChange` method was the focus of the question.<br><br>But let<sq>s see.<br><br>* When your program asks for an item price, I can<sq>t enter 0.0025 or 0.005, even though \u00bcp coins and \u00bdp coins are valid units of currency. In fact, there<sq>s no possible way for your program to handle \u00bcp coins or \u00bdp coins at all\u2014it does not accept them in the price, it does not accept them in the amount the customer pays, and therefore it will never give them as part of the change.<br><br>* Your `giveChange` method relies on global state variables and produces output via `System.out` rather than a return value. This isn<sq>t very good design. It would be better for your `giveChange` method to accept an argument specifying the amount of change to make and to return some kind of object representing the set of coins that should be given.<br><br>* I can<sq>t enter `.1` as a value. Your program requires the leading zero; I have to enter it as `0.1`. This is annoying.<br><br>* Your program suffers from round-off error because you are using floating-point numbers. For example<colon><br><br>        $ java App<br>        <br>         Daniel Ahmed - Cloudbuy Tech Test - 25th February 2015 <br>        <br>        Item price<colon><br>        0.1<br>        Customer Pays<colon><br>        0.01<br>        You still owe me<colon> \u00a30.09<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.08<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.07<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.06<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.05<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.04<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.03<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.02<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.01<br>        Customer gives<colon> \u00a30.01<br>        You still owe me<colon> \u00a30.00<br>        Customer gives<colon> \u00a3<br><br>    You should read http<colon>//floating-point-gui.de/.<br><br>* Your constants are pointless<colon><br><br>        private static final double SEVENTYFIVE_PENCE = 0.75;<br><br>    What<sq>s the advantage of `SEVENTYFIVE_PENCE` over `0.75` in your program? It<sq>s longer to type and it<sq>s no more general, because you can<sq>t meaningfully change the value of the constant `SEVENTYFIVE_PENCE` to some other value without also changing the name of the constant. A better solution would be to use something like an array of coin denominations.<br><br>* `System.out.println(<dq>I owe you <dq> + halfPenceQuantity + <dq> 0.0050p coins.<dq>);`<br><br>    A halfpenny is a 0.5p coin, not a 0.005p coin. Likewise for a quarterpenny.</p>", 
                "question": "Failed Tech Interview Can you review my code and tell me what I<sq>ve done wrong?"
            }, 
            "id": "cp6a092"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "Failed Tech Interview Can you review my code and tell me what I<sq>ve done wrong?"
            }, 
            "id": "cp69vac"
        }, 
        {
            "body": {
                "answer": "<p>Agree with everything else posted, except that I think you were right to use the constants. Magic numbers in your code are a maintenance headache waiting to happen. Your code should be written for people to understand it.<br><br>I<sq>d like to add that your code isn<sq>t OO, it<sq>s procedural. Everything is static. Beyond the global state problems, you haven<sq>t demonstrated to the recruiting team that you understand the purpose of a class.<br><br>Pick up a copy of Head First Design Patterns or Head First Java. Or both.</p>", 
                "question": "Failed Tech Interview Can you review my code and tell me what I<sq>ve done wrong?"
            }, 
            "id": "cp6h0c6"
        }, 
        {
            "body": {
                "answer": "<p>Although it was not asked for, for a job application I would always add a set of unittests to prove the code is doing what it is supposed to do. It can be also used as a mechanism to ensure you<sq>ve understood the requirements correctly. <br><br>Overall the code does seem quite verbose, sections like<colon><br><br>     public static boolean hasOverPaid(double paid) {<br>\t\tif (paid > product) {<br>\t\t\treturn true;<br>\t\t}<br>\t\treturn false;<br>\t}<br><br>could be written as<colon><br><br>     public static boolean hasOverPaid(double paid) {<br>          return paid > product<br>     }<br><br>and as mentioned before giveChange is quite repetitive. Once is fine, twice is fine, but when you start doing it a third time try and change it into a loop. <br><br>Another important point, is that everything is static when it doesn<sq>t need to be. </p>", 
                "question": "Failed Tech Interview Can you review my code and tell me what I<sq>ve done wrong?"
            }, 
            "id": "cp6g4bt"
        }, 
        {
            "body": {
                "answer": "<p>Nice. I wish there was something this basic to understand Java EE as a beginner. </p>", 
                "question": "This article helped me understand how web technologies interact wanted to share."
            }, 
            "id": "cjdcik0"
        }, 
        {
            "body": {
                "answer": "<p>Yep, nice site.  They did a nice job with the graphic design of the site, and the content is clear and concise.<br><br> </p>", 
                "question": "This article helped me understand how web technologies interact wanted to share."
            }, 
            "id": "cjd53wo"
        }, 
        {
            "body": {
                "answer": "<p>This was a great article IMO. My story, in case somebody is writing an article for web tech<colon><br><br>As somebody that hasn<sq>t touched a webpage (much) in 10-years and had to spend the last weekend fiddling with PHP, jQuery, modernize, boostrap, CSS, etc I hope that such a tutorial would interlude into the <sq>actual<sq> frameworks people use (even ignoring stuff like knockout, angular, etc).<br><br>I took me awhile to rig up the ajax to POST to a PHP form that did server side validation. Back in my day we did naive POST in forms without concern for <dq>bots<dq> and input sanitizing! <br><br>Again, as somebody who is familiar with scripting and programming but in the dark with <dq>web<dq>, I think newbies would benefit with an overview of the frameworks/languages/client-server-side via an introduction to something like Firebug/Google Dev tools/Fiddler to see what<sq>s <dq>going on<dq> (I had to whip out Firebug to see why PHP wasn<sq>t redirecting when using a `header()` call).  <br><br> </p>", 
                "question": "This article helped me understand how web technologies interact wanted to share."
            }, 
            "id": "cjdjbds"
        }, 
        {
            "body": {
                "answer": "<p>Really useful. Articles like this that explain web development at a higher level are imperative to getting a solid grasp on the field</p>", 
                "question": "This article helped me understand how web technologies interact wanted to share."
            }, 
            "id": "cjd5jip"
        }, 
        {
            "body": {
                "answer": "<p>When it comes down to it, it<sq>s a job;  there will be good days and bad days.  <br><br>There are days that I sit at my desk, and all I accomplish for the day is Reddit.  I don<sq>t want to have anything to do with fixing whatever bug is assigned to me, or developing whatever feature is wanted next.  However, there are also days where I just can<sq>t get enough.  It will be a few hours after quittin<sq> time, and I<sq>ll be as motivated as ever to finish what I<sq>m working on.<br><br>Looking back at school, it<sq>s not really that different.  I remember sitting down to work on a programming project, and getting nothing -- and I mean *nothing* done.  Then there were times that I would sit down and hammer out the entire assignment, and typically throw in a few extras, just because I was in the mood to write code.<br><br>Finding an industry that you enjoy is key, but I think it<sq>s also important to remember that there are good days and there are bad days.</p>", 
                "question": "Programming Is Terrible"
            }, 
            "id": "cci73s7"
        }, 
        {
            "body": {
                "answer": "<p>I feel that in every industry, whether it is computer related or not, you will spend your first x years shoveling shit most of the time.<br><br>You work in an auto shop, you start repairing shitty 12 year old cars that barely run.  As a doctor you do a lot of menial work with shit hours, not even counting years of schooling.  In programming you cobble together broken web apps made by programmers who didn<sq>t give any more of a shit than you do.<br><br>But if you are talented and driven, and you stick with it, eventually you will eventually move up.  Perhaps you will start your own business.  Perhaps you will just end up in a strong company with a bunch of other sharp guys.  But it isn<sq>t going to be handed to you.  You have to go out there and acquire it otherwise you<sq>ll just be handed the things no one else wanted to do.</p>", 
                "question": "Programming Is Terrible"
            }, 
            "id": "cci84ol"
        }, 
        {
            "body": {
                "answer": "<p>Generic software engineer here.  Specialization scares me.  Not being employed because my skillset is not in demand is worrying.  It might be rare to happen but I also don<sq>t have the patience for complete mastery of a particular language.  Hell, I can<sq>t even use the right words half the time.  The idea of being unprepared is the worst feeling in the world.<br><br>About 1/3rd of my job is spent working with 3rd party applications.  My job is to customize them and make them match the desired business practices.  I see all kinds of shit in here.  The biggest one in recent memory was a single NVARCHAR column that caught all value types - bool, int, long, string, etc.  When I joined to it on an empty database, it worked.  When I joined to it on a decently sized database, it crashed with data type errors.  It<sq>s complete crap and poorly designed.  But that<sq>s the joy - I can see how people fucked up and created shortcuts and find ways to overcome them.   It<sq>s challenging.<br><br>On any given day I could be optimizing SQL, writing complex reports looking for specific answers, modifying SOA c# code, tricking someone elses code into doing my bidding, analyzing requirements, etc.  My jack of all trades job is exactly what I want and enjoy.<br></p>", 
                "question": "Programming Is Terrible"
            }, 
            "id": "cci8fbc"
        }, 
        {
            "body": {
                "answer": "<p>I suppose making app for mobile phone or Windows is not specific enough? Hmm...<br><br>It<sq>s perplexing really, because on one hand, I do enjoy programming in general, but if you were to ask me about specialized programming, I<sq>m gonna end up scratching my head for ages because I<sq>m not really sure what I really enjoy out of it</p>", 
                "question": "Programming Is Terrible"
            }, 
            "id": "cci65jo"
        }, 
        {
            "body": {
                "answer": "<p>For programming, not really. All those super fast coders in movies are a little over the top. In reality, you can only type as fast as you can think. The only time I ever look like one of them is when I<sq>m writing the easy/boilerplate code.<br><br>That said, working in IT isn<sq>t just about programming. Writing documentation, e-mails, design/solution documents, notes etc. You will spend plenty of time typing. That<sq>s generally true of any office job though tbf.<br><br>To summarise, yes, you should improve your typing speed. Perosnally, I wouldn<sq>t go for a typing course, I<sq>d just practice typing as much as posisble. Keeping a diary is a great way to make sure you write every day. You could also try writing short stories.</p>", 
                "question": "I am used to type with my index fingers and score 43 wpm. I tried to take a typing course online but it is seriously frustrating. I plan to word in the IT field. Is it recommended to continue and work my ass off for typing properly or is it alright?"
            }, 
            "id": "dg2fe19"
        }, 
        {
            "body": {
                "answer": "<p>Disregarding all arguments regarding speed, efficiency, or ergonomics, if you<sq>re getting into an IT field and your coworkers see you <dq>finger pecking<dq> be prepared for a lot of (hopefully good natured) ridicule. You<sq>ll likely be called the old man/woman of the office regardless of your age. And if you have to do any pair programming... <br><br>Finger pecking is associated (unfairly, but still) with technical incompetence. Likely based on the assumption that people who use computers frequently would have learned to type correctly and the trope of little grandmas finger pecking while eyeballing the keyboard through their bifocals.<br><br>So go learn how to type correctly. It<sq>s a skill that you<sq>ll use for the rest of your life. Good luck! </p>", 
                "question": "I am used to type with my index fingers and score 43 wpm. I tried to take a typing course online but it is seriously frustrating. I plan to word in the IT field. Is it recommended to continue and work my ass off for typing properly or is it alright?"
            }, 
            "id": "dg2mtvi"
        }, 
        {
            "body": {
                "answer": "<p>Proper keyboard usage isn<sq>t just about speed.<br><br>You will literally be in pain trying to type like that for a whole day.<br><br>Typing classes are effective.<br><br>Work on it.</p>", 
                "question": "I am used to type with my index fingers and score 43 wpm. I tried to take a typing course online but it is seriously frustrating. I plan to word in the IT field. Is it recommended to continue and work my ass off for typing properly or is it alright?"
            }, 
            "id": "dg2jnjw"
        }, 
        {
            "body": {
                "answer": "<p>https<colon>//www.keybr.com. My partner used this website just for fun so he could improve his typing skills, and he went from about 40wpm to a max of around 130wpm in a matter of weeks. Practicing is <sq>key<sq> <colon>)</p>", 
                "question": "I am used to type with my index fingers and score 43 wpm. I tried to take a typing course online but it is seriously frustrating. I plan to word in the IT field. Is it recommended to continue and work my ass off for typing properly or is it alright?"
            }, 
            "id": "dg2lrhn"
        }, 
        {
            "body": {
                "answer": "<p>It was just a beginner<sq>s introduction. You know enough about the languages to make a very basic website, but nothing more than that. To improve, I suggest making projects of your own and studying other websites.</p>", 
                "question": "I just finished Codecademy<sq>s CSS & HTML course. Do I know these languages proficiently or was that just a <dq>beginner<sq>s introduction?<dq>"
            }, 
            "id": "cjxfqnn"
        }, 
        {
            "body": {
                "answer": "<p>The thing about HTML and CSS, is that for the most part, once you understand how it works, the rest is just memorizing tags and whatnot. Of course, all languages are that way, and I have never met someone who did not need a reference document now and then. <br><br>Basically, I mean that you probably understand the basics now. You need to just dive in, which will give you the practice you need. Slowly, but surely, you will start needing documentation and Stack Overflow less and less. (Maybe someday, not at all. I doubt it though.)</p>", 
                "question": "I just finished Codecademy<sq>s CSS & HTML course. Do I know these languages proficiently or was that just a <dq>beginner<sq>s introduction?<dq>"
            }, 
            "id": "cjxg8ef"
        }, 
        {
            "body": {
                "answer": "<p>no one knows css proficiently. don<sq>t worry</p>", 
                "question": "I just finished Codecademy<sq>s CSS & HTML course. Do I know these languages proficiently or was that just a <dq>beginner<sq>s introduction?<dq>"
            }, 
            "id": "cjxnj08"
        }, 
        {
            "body": {
                "answer": "<p>Nothing from codeacademy leaves you at proficient.</p>", 
                "question": "I just finished Codecademy<sq>s CSS & HTML course. Do I know these languages proficiently or was that just a <dq>beginner<sq>s introduction?<dq>"
            }, 
            "id": "cjxp0ao"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]  <br> ^^^^^^^^^^^^^^^^0.5517 <br> > [What is this?](https<colon>//pastebin.com/64GuVi2F/94869)</p>", 
                "question": "A bunch of free programming ebooks"
            }, 
            "id": "ccey1iz"
        }, 
        {
            "body": {
                "answer": "<p>Are any of the books any good?</p>", 
                "question": "A bunch of free programming ebooks"
            }, 
            "id": "ccezt8y"
        }, 
        {
            "body": {
                "answer": "<p>try [it-ebooks.info](http<colon>//it-ebooks.info)<br><br>I<sq>ve found pretty much every book I<sq>ve needed to on there. Works best when you search by ISBN.</p>", 
                "question": "A bunch of free programming ebooks"
            }, 
            "id": "ccf3pxh"
        }, 
        {
            "body": {
                "answer": "<p>How do you download these books from this site?<br><br>Noob question, I know. Seems like a lot of them want you to sign up for blahblah.<br><br>Thanks,<br><br>Robster</p>", 
                "question": "A bunch of free programming ebooks"
            }, 
            "id": "ccf5dqs"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve left my secure, boring to death job in 2009 to join a tiny, tiny video-game studio. As the only full time developer, I was the de-facto lead dev. We had to develop a highly scalable game-server for a geolocalized real-time mobile game. Each single day for the next 4 years I went to work convinced that shit will hit the fan this day. Incredibly, shit never hit the fan... [*]<br><br>I<sq>m still convinced I<sq>m an impostor <colon>)<br><br><br><br>[*] I should have said<colon> when shit did hit the fan, it was not my fault...</p>", 
                "question": "r/learnprogramming let<sq>s talk Impostor Syndrome and Mental Health"
            }, 
            "id": "cofv546"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m an undergraduate with social anxiety who works at a small software company as a side job. Imposter Syndrome is an almost daily strain on my mental health. Don<sq>t get me wrong, there are times when everything works just fine, I do my job and feel like I accomplished something of value. But those are few and it feels like it takes forever to escape this vicious cycle. Now you may ask <sq>Why are you still working there?<sq> and I<sq>ll likely answer <sq>Because I actually like what I<sq>m doing<sq>. Doesn<sq>t make sense, right? But somehow, it<sq>s true. I<sq>m really good at what I<sq>m doing. After all, that<sq>s the reason why I<sq>m responsible for a variety of low-level, mission critical systems of our product. It makes me almost indispensable at the company. For most of those systems, I<sq>m actually the only one working on them.<br><br>So, why am I struggling? I guess I never really learned to deal with success. How can I, this wierd human being riddled with mostly negative experiences throughout his life, suddenly be *good* at something? It doesn<sq>t help that my work isn<sq>t something I can talk about with friends. Whenever I<sq>m asked to describe it, it feels like I come across like <dq>well, it<sq>s not visible [b/c it<sq>s only visible when it doesn<sq>t work] and I<sq>m unable to explain accurately [b/c you lack the foreknowledge and I suck at coming up with analogies], but please trust me, it<sq>s important!1!!<dq>. Sigh.<br><br>But whatever, it gets better gradually and I<sq>m confident that I<sq>m going to be able to stand above all that crap eventually.<br><br>**TL;DR**<colon> Funnily enough, just writing about it made me feel better.</p>", 
                "question": "r/learnprogramming let<sq>s talk Impostor Syndrome and Mental Health"
            }, 
            "id": "cofxbpm"
        }, 
        {
            "body": {
                "answer": "<p><dq>Imposter Syndrome<dq> or whatever you call it simply indicates that you are sane. It is perfectly normal to feel this way in an academic environment or at a new job, just go with it and accept it. It keeps you from screwing up. I work as the only IT person for a small company and I worry every day that I might terribly screw up, yet it never happens. Seriously, you should be worried if you *didn<sq>t* feel this way. </p>", 
                "question": "r/learnprogramming let<sq>s talk Impostor Syndrome and Mental Health"
            }, 
            "id": "cog0t0q"
        }, 
        {
            "body": {
                "answer": "<p>Yup, been suffering with this for years. Being so passionate about programming and being really bad at it for many years really upset me. However, since I improved my skills last year the feeling has lifted but not completely. I feel more comfortable with my abilities but I<sq>m still not as competent as I<sq>d like to be, especially being in the company of my extremely talented mentor. I think the other thing that has worried me is that I have a disorder called Dyspraxia which makes organisation difficult for me (although it doesn<sq>t affect me physically anymore) , which had made learning programming a little hellish and slow. I also found my skills were limited by imposter syndrome , being convinced I wouldn<sq>t be good enough to accomplish something which in actual fact if I tried, I surprised myself. </p>", 
                "question": "r/learnprogramming let<sq>s talk Impostor Syndrome and Mental Health"
            }, 
            "id": "cofxa9r"
        }, 
        {
            "body": {
                "answer": "<p>I am ashamed of myself now.</p>", 
                "question": "Thanks to r/learnprogramming I have learned java and developed a working particle system!"
            }, 
            "id": "c719op2"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s really cool!  How did you go about doing this?  I must admit I have little idea as to how I<sq>d write something like this.</p>", 
                "question": "Thanks to r/learnprogramming I have learned java and developed a working particle system!"
            }, 
            "id": "c718ab3"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s very inspirational.<br><br>As a web developer, I know how to code and understand Java but I have no clue how you go from writing code to something so visual (especially 3D and particles). How did you bridge that gap?</p>", 
                "question": "Thanks to r/learnprogramming I have learned java and developed a working particle system!"
            }, 
            "id": "c718y08"
        }, 
        {
            "body": {
                "answer": "<p>Any chance of putting this up on Github so we can take a look?  It<sq>s really impressive, I<sq>m curious to see what<sq>s going on under the hood.</p>", 
                "question": "Thanks to r/learnprogramming I have learned java and developed a working particle system!"
            }, 
            "id": "c719wab"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "One-year computer science post-bacc program discontinued in 2001 offered entirely online for free"
            }, 
            "id": "cl3ut6v"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for this. I<sq>ll be sharing <colon>-) and have an upvote</p>", 
                "question": "One-year computer science post-bacc program discontinued in 2001 offered entirely online for free"
            }, 
            "id": "cl3xltg"
        }, 
        {
            "body": {
                "answer": "<p>Wow, looks like a great resource. Thanks for sharing! I<sq>m curious, has anyone found the lecture videos online? According to the site they<sq>re free to be shared, but simply aren<sq>t directly from them due to bandwidth.</p>", 
                "question": "One-year computer science post-bacc program discontinued in 2001 offered entirely online for free"
            }, 
            "id": "cl3ur5w"
        }, 
        {
            "body": {
                "answer": "<p>It doesn<sq>t look like the lecture videos are free.</p>", 
                "question": "One-year computer science post-bacc program discontinued in 2001 offered entirely online for free"
            }, 
            "id": "cl42vy3"
        }, 
        {
            "body": {
                "answer": "<p>Congratulations!<br><br>Now you can experience the unadulterated joy of code maintenance as the team<sq>s sole java resource! </p>", 
                "question": "I am an intern at a large financial company. Today I watched the bastardized app that I inherited half a year ago deploy successfully to Dev and QA environments."
            }, 
            "id": "ch1zd3j"
        }, 
        {
            "body": {
                "answer": "<p>Noob here also, care to elaborate more on your learnings? I would love to hear!</p>", 
                "question": "I am an intern at a large financial company. Today I watched the bastardized app that I inherited half a year ago deploy successfully to Dev and QA environments."
            }, 
            "id": "ch1tahk"
        }, 
        {
            "body": {
                "answer": "<p>> Nothing I am learning in college can remotely prepare me for what I have been learning by doing this.<br><br>As a hiring manager, this is the most important thing I could possibly stress to people. <br><br>College teaches theory. It does not teach practical skills. At all.<br><br>So many people love to say <sq>I shouldn<sq>t have to do anything outside of school/work. They should train me at my job. I<sq>m not going to do anything at all if im not getting paid. I<sq>m not going to let the fat cats in management make me work for free.<sq><br><br>Ok, cool. You don<sq>t have to do anything outside of school/work. <br><br>But, if you actually do projects on your own, if you actually try, and care about programming,  and learn everything you can on your own time, the practical parts of programming, you will be above and beyond better than the asshats who are so worried that someone is taking advantage of them that they torpedo themselves.<br><br>This happens more often than not on Reddit.<br><br>And this is a perfect example of why those skills are needed.<br><br>Also, congrats man. That is a great feeling to see your code deployed.</p>", 
                "question": "I am an intern at a large financial company. Today I watched the bastardized app that I inherited half a year ago deploy successfully to Dev and QA environments."
            }, 
            "id": "ch21e4j"
        }, 
        {
            "body": {
                "answer": "<p></p>", 
                "question": "I am an intern at a large financial company. Today I watched the bastardized app that I inherited half a year ago deploy successfully to Dev and QA environments."
            }, 
            "id": "ch1ylbu"
        }, 
        {
            "body": {
                "answer": "<p>My return was from taking a job in an unrelated field that I ended up hating. It took me a year in a cycle of starting a project with no direction, losing focus, losing interest and fizzling out. At some point you have to pick something and just go with it. Think of how you would approach it if you were being contracted to build said project. Get your requirements straight. Identify the different modules. Plan your classes and structure of the application then dive in.<br><br>I had the same problem finding something to make. Ended up just doing a project for work outside of the scope of my job. I wasn<sq>t necessarily passionate about it, but I was able to dig deeper into design patterns and data structures I may not have needed for a toy project.<br><br>Everyone draws motivation from different places. For me it was really hating my job. Every time I had a bad day at work, I went home and spent extra time coding. Find your motivation and don<sq>t give up!</p>", 
                "question": "Returning to the world of programming after a 3 years break due to depression and other mental issues."
            }, 
            "id": "darzm8o"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>d like to take this as a chance to speak a bit about mental illness, which I think is an issue not spoken about nearly enough, especially in circles like this. <br><br>If any of you think you may be struggling with mental illness, it is important to -- if you have the means -- see a professional sooner rather than later. Mental illnesses typically do not go away on their own, but rather get worse over time. Regardless of what you are struggling with, there are treatments (with or without medication) that can reduce your symptoms and help you achieve a higher quality of life. Here is a [small list of hotlines and online chats](http<colon>//pastebin.com/raw/93YjVakw) that may help you make the first step.<br><br>Additionally, there are other resources available<colon><br><br>* Your school or university - most provide some counselling for no additional cost.<br>* Charities - in addition to mental health charities, there are many types offering counselling (for groups such as women, men, LGBTQ+ and young people) and community charities<br>* Benevolent funds - these are provided by some trade unions and associations for artists, musicians, writers, etc. They may provide funding for counselling<br></p>", 
                "question": "Returning to the world of programming after a 3 years break due to depression and other mental issues."
            }, 
            "id": "dascoop"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s odd, my programming job makes me depressed and anxious. And without it I couldn<sq>t afford the anti-depressants and anxiety meds just to keep me going. <br><br>Everyday I go to work and wonder if today is the day everyone is going to wise up and fire my ass. </p>", 
                "question": "Returning to the world of programming after a 3 years break due to depression and other mental issues."
            }, 
            "id": "das9zlr"
        }, 
        {
            "body": {
                "answer": "<p>Perfectionism is a thing that prevents progress on anything, not just programming.<br><br>But with programming, iteration is cheap, and the value of a lot of up-front planning is dubious, since you are probably trying to solve a problem that you don<sq>t understand. So the worst that can happen is you make some design choices that don<sq>t work out, and you have to build something again, but with a better understanding of the problem </p>", 
                "question": "Returning to the world of programming after a 3 years break due to depression and other mental issues."
            }, 
            "id": "das58yr"
        }, 
        {
            "body": {
                "answer": "<p>> WHERE DO YOU START? <br><br>The way I start<colon><br><br>- create the project directory structure<br>- create your version control repository<br>- write a small main program that just prints something out, such as a usage message<br><br>Make sure you can build everything and run the resulting executable. Check everything into the version control.<br><br>Now start adding features, a very small increment (maybe two or three lines of code) at a time, keep building, keep testing, keep things versioned. <br><br>Also<colon><br><br>> How do you know how to break it into the right parts? <br><br>You don<sq>t - there are no <dq>right parts<dq>. Any problem will have many perfectly good solutions, and worrying if the one you have come up with is the <dq>right one<dq> or the <dq>best one<dq> is completely pointless. Also, this is something you get better at over time.<br><br>> How do stop yourself from just throwing your hands up deleting all your code and go finding a github repository or prebuilt app with the parts you need?<br><br>Self control? But if the solution already exists, I don<sq>t see why you would not want to use it, maybe improving it. All my own projects have been things for which I could not find exact pre-existing functionality.<br><br>Edit<colon> WRT some other answers here, I would say _don<sq>t_ worry about classes too much when you are starting - it<sq>s perfectly possible to write excellent non-OO code, and trying to spot relevant classes up-front can be very difficult.<br><br></p>", 
                "question": "Can a professional programmer explain the thought process when beginning an application?"
            }, 
            "id": "c86yb4n"
        }, 
        {
            "body": {
                "answer": "<p>I am going to buck against the other devs here. Everyone is screaming at you to use a waterfall approach. PLEASE DON<sq>T DO THIS. First remember THERE IS NO CORRECT WAY TO DO ANYTHING. There are ways that are well tested, and patterns that people repeat because they worked before but there is no concept  of <dq>this is how you achieve X every time in every situation<dq><br><br>You know what you want your program to do right?<br><br>Lets say you want to make a simple system to look up, I dunno, recipes for cooking? And lets say you already know how you want to access/generally use such a system<colon><br><br>* I want to access it on the web<br>* I want to be able to search by recipe name or contents<br>* I want to store as many recipes as I want<br>* I want to be able to add more recipes.<br><br>So you know that for your program you want it to be able to do 4 things at a high level. Now just start coding one of those things. Seriously, just dig into google, grab some libs and start building. Don<sq>t worry about <dq>right or wrong<dq> as much at this stage. As you look for info on how to do what you want to do you will find comments, notes and articles that give you hints to some good ways to do what you want. <br><br>Once you have the basic code working, do some cleanup and re-factoring following these basic principals<colon><br><br>* Each class/method should be uniquely responsible for a single task<br>* Do not repeat yourself<br>* Encapsulate your code as best as possible - As a general rule, if you can<sq>t take a class file you wrote out of your program and use it elsewhere without bringing a bunch of other stuff with it, its not encapsulated. Look to common patterns to find ways to achieve what you need.<br><br>When writing code try not to think like you are creating something that is in stone. Rather treat it like an english paper. The first time you write, its going to be a rough draft, just getting the general idea out. Then over multiple passes and time to think over your work, you refine, simplify and improve the code. Don<sq>t be afraid to throw out code you have written either. Once you have done something it<sq>s much easier the second time and you<sq>ll skip mistakes you made the first time. In most of my applications I will throw out huge chunks of code for re-write 2 or 3 times before it<sq>s really ready. <br><br>The important thing to remember is that just because it works, does not mean its ready, if it does not fit the basic rules above you likely have more work ahead of you before it<sq>s really ready for use. </p>", 
                "question": "Can a professional programmer explain the thought process when beginning an application?"
            }, 
            "id": "c86ys1o"
        }, 
        {
            "body": {
                "answer": "<p>The biggest mistake I see junior developers make is not that they don<sq>t plan out their application, it<sq>s that they try to build the whole application in the first pass! They think that they<sq>re going to go from nothing, to a complete application, in one step. It doesn<sq>t work that way.<br><br>You need to build your application in pieces.<br><br>Start by writing <dq>Hello, world<dq>. If your application is a command-line program that takes command-line options and reads from a file and writes to another file, start with something that does nothing more complicated than open the files and print out that it succeeded.<br><br>If your program is a game, <dq>Hello world<dq> might be to open the 3-D graphics window and draw one triangle.<br><br>If your program is a website where you log in, <dq>Hello world<dq> might be simply the login form.<br><br>If your program is a Windows GUI, <dq>Hello world<dq> might be an empty window with a menu bar consisting of a single File menu.<br><br>The point is, start with something *really* small, then get it to compile and run. If you<sq>re stuck, find tutorials on the thing you<sq>re trying to do.<br><br>Once it<sq>s working, check it into version control, then think about the next feature. Try to figure out the smallest next step you can take that adds something to your program, rather than trying to add too much at once and getting overwhelmed.<br></p>", 
                "question": "Can a professional programmer explain the thought process when beginning an application?"
            }, 
            "id": "c86zdhk"
        }, 
        {
            "body": {
                "answer": "<p>* Read the specks<br>* Have many meetings<br>* Stare at the monitor.<br>* Go for a walk<br>* Browse the web<br>* Draw some useless diagrams that nobody will look at<br>* Make some Jira tasks<br>* Call more meetings<br>* make more jira tasks<br>* Stare at the monitor<br>* Make more useless diagrams<br>* Make a prototype<br>* Make more jira tasks<br>* Start sprinting and writing code<br>* Ignore previous drawings and prototypes.<br>* Write more code<br>* Start yelling at each other when time is running out.<br>* Start cutting corners like unit testing and documentation<br>* Some things don<sq>t need to be tested.<br>* Make a build<br>* Send off to the packagers.<br>* Tell customers product is ready for use<br>* Fix bugs...</p>", 
                "question": "Can a professional programmer explain the thought process when beginning an application?"
            }, 
            "id": "c870k2e"
        }, 
        {
            "body": {
                "answer": "<p>I have no question for you, but wish to commend you for /r/carlhprogramming <br><br>That was a great gift to the community.</p>", 
                "question": "[learnprogramming] I am a professional programmer (for last.. 15 years or so) AMA"
            }, 
            "id": "c6hcnp5"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a self taught programmer, I<sq>ve been learning for 1 year, and I would like to start working as a programmer after about 1 more year.  My problem is how do I choose an area to specialize in? Web programming or systems programming? Java apps or Mobile? I don<sq>t know what the next step should be.</p>", 
                "question": "[learnprogramming] I am a professional programmer (for last.. 15 years or so) AMA"
            }, 
            "id": "c6hc016"
        }, 
        {
            "body": {
                "answer": "<p>Favored OS? </p>", 
                "question": "[learnprogramming] I am a professional programmer (for last.. 15 years or so) AMA"
            }, 
            "id": "c6h9t2b"
        }, 
        {
            "body": {
                "answer": "<p>What do you look for in someone applying for an internship position?</p>", 
                "question": "[learnprogramming] I am a professional programmer (for last.. 15 years or so) AMA"
            }, 
            "id": "c6h9pgy"
        }, 
        {
            "body": {
                "answer": "<p>Check out [Automate the boring stuff](https<colon>//automatetheboringstuff.com/chapter0/)</p>", 
                "question": "Best way to learn python?"
            }, 
            "id": "cxtzo5i"
        }, 
        {
            "body": {
                "answer": "<p>+ [Invent Your Own Computer Games with Python](http<colon>//inventwithpython.com)<br>+ [Automate the Boring Stuff with Python](http<colon>//automatetheboringstuff.com) as /u/Criptictoumor suggested.<br><br>Both are free to read online, the former can be downloaded in various formats and there are also links to other books with more advanced topics. The books use a practically oriented approach and teach Python through building real world applications.<br><br>The author is an avid redditor /u/AlSweigart.</p>", 
                "question": "Best way to learn python?"
            }, 
            "id": "cxu07cl"
        }, 
        {
            "body": {
                "answer": "<p><br>I am going to explain something I learned the hard way that I think will help you learn anything going forward. <br><br>What does it mean to <dq>learn python.<dq> Once you learn python what exactly will you be able to do? I use to write exclusively in python for a HP Configuration Management DataBase. It was so cool. I wrote code that leveraged a bunch of processes to gather information about the routers, servers, applications that were running and show how they related to each other. It was a big job but very, very fun. <br><br>You would probably say I know python then. But my message to you is you know python when you know how to do something specific with it. If you were to ask me to use python for some other purpose I would learn more and more. <br><br>If you want to learn python first figure out what you want to build and then focus on what python you need to know to do that. Then build something else different. That is the way you learn a language. <br><br>This is also why so many people fail to learn a foreign language. You can<sq>t learn a language you don<sq>t have anything you really want to say. If I dropped you in the middle of South America in a Spanish speaking area and you had to go the bathroom that context helps your brain remember the words, syntax and lexicon revolving how to ask where a bathroom is. Your brain strengthens the paths so you don<sq>t forget. <br><br>You have to build something to create a context that your brain can hold on to and remember what you learn. I hope this helps. </p>", 
                "question": "Best way to learn python?"
            }, 
            "id": "cxuiiee"
        }, 
        {
            "body": {
                "answer": "<p>Following these tutorials now and find they<sq>re really good. It starts off a bit slow but picks up<colon><br><br>Learn python the hard way.com/book</p>", 
                "question": "Best way to learn python?"
            }, 
            "id": "cxu0mpd"
        }, 
        {
            "body": {
                "answer": "<p>You should check out [freecodecamp](http<colon>//www.freecodecamp.com). It<sq>s a community of people learning to code and they have plenty of chat rooms to get help when you need it or to talk about coding.</p>", 
                "question": "Learning HTML and CSS from scratch"
            }, 
            "id": "cww3vvq"
        }, 
        {
            "body": {
                "answer": "<p>Hi I am also learning. I<sq>ve bought a lot of books and looked at free resources online as well. I<sq>ve been using Shaye Howe<sq>s Learn HTML & CSS Book (which is in a free format online at his website, via google) and John Duckett<sq>s HTML&CSS + Javascript/JQuery.</p>", 
                "question": "Learning HTML and CSS from scratch"
            }, 
            "id": "cww42vd"
        }, 
        {
            "body": {
                "answer": "<p>For html and CSS, I recommend codeacademy.</p>", 
                "question": "Learning HTML and CSS from scratch"
            }, 
            "id": "cww410x"
        }, 
        {
            "body": {
                "answer": "<p>I made a playlist on Youtube for just this reason. It<sq>s all new content, so it<sq>s very up to date and with modern practices in mind. Check it out. https<colon>//www.youtube.com/playlist?list=PLLnpHn493BHHhCVlCRhAMpeFwDH2BTE3p</p>", 
                "question": "Learning HTML and CSS from scratch"
            }, 
            "id": "cwwatjz"
        }, 
        {
            "body": {
                "answer": "<p>Not that I want to discourage you from this list, but honestly I<sq>ve found that the best thing you can do is work on some side projects.  You<sq>ll do plenty of learning along the way, and it<sq>s easier to stay motivated on something you actually want to do, instead of just learning random stuff you may or may not use.  It<sq>s also more tangible evidence of your understanding of something, which will look much better on your resume than just saying <dq>I read through books x, y, z<dq>.  Just my 2 cents though.</p>", 
                "question": "i Couldn<sq>t find an internship for this summer so i decided to stay positive and learn stuffand here is my list"
            }, 
            "id": "craxl30"
        }, 
        {
            "body": {
                "answer": "<p>Ride by the windows of your colleagues in shorts and flip flops holding a Slurpee on your way to the beach.</p>", 
                "question": "i Couldn<sq>t find an internship for this summer so i decided to stay positive and learn stuffand here is my list"
            }, 
            "id": "crb348f"
        }, 
        {
            "body": {
                "answer": "<p>I haven<sq>t done any of those online courses personally. All I can say is that the best piece of self study I ever underwent was<colon><br><br>https<colon>//www.coursera.org/learn/machine-learning<br><br>It really is excellent.</p>", 
                "question": "i Couldn<sq>t find an internship for this summer so i decided to stay positive and learn stuffand here is my list"
            }, 
            "id": "crayxny"
        }, 
        {
            "body": {
                "answer": "<p>Pro Tip<colon> Line up your summer internship during the FALL semester.</p>", 
                "question": "i Couldn<sq>t find an internship for this summer so i decided to stay positive and learn stuffand here is my list"
            }, 
            "id": "crb4sc0"
        }, 
        {
            "body": {
                "answer": "<p>cute cat </p>", 
                "question": "Learn to program arcade games!"
            }, 
            "id": "c55wtho"
        }, 
        {
            "body": {
                "answer": "<p>Really great book. The only advice i can give you is to maybe add more programming problems at the end of each chapters. Problems that make you modify the program that you just crated. Good job</p>", 
                "question": "Learn to program arcade games!"
            }, 
            "id": "c55ta4w"
        }, 
        {
            "body": {
                "answer": "<p>Awesome.  I just started learning Python, and this<sq>ll be a great addition of stuff to work on.  I<sq>d bought a book on programming games in Python, and didn<sq>t realize until I got home it was for Python 3, so I<sq>m glad to find this. <br><br>EDIT<colon> Also, your cat actually has a neckbeard.</p>", 
                "question": "Learn to program arcade games!"
            }, 
            "id": "c55xpxo"
        }, 
        {
            "body": {
                "answer": "<p>Damn those paws are fluffy. Also, good post. I<sq>ll totally add this to my intro-programming resources.</p>", 
                "question": "Learn to program arcade games!"
            }, 
            "id": "c5674ja"
        }, 
        {
            "body": {
                "answer": "<p>Guess now it<sq>s a good time to learn about Github (or source control software in general).<br><br>Go there<colon> https<colon>//github.com/ make an account and create a project for your program. <br><br>Good work and keep on coding. <colon>)</p>", 
                "question": "After almost a month in C# I build my first program with a database."
            }, 
            "id": "d3a1iq8"
        }, 
        {
            "body": {
                "answer": "<p>Had some time to look at the code, some tips<colon><br><br>* Name your objects, no one will know what button5 or textBox4 are.<br>* Take a look into [SqlParameter](http<colon>//www.dotnetperls.com/sqlparameter) to avoid stuff like `Values (<sq><dq>+textBox1.Text+<dq><sq>,<sq><dq>+textBox2.Text+<dq><sq>,<sq><dq>+textBox3.Text+<dq><sq>,<sq><dq>+textBox4.Text+<dq><sq>)<dq>`<br>* Remove unused functions (button5_Click etc.)<br>* Bigger refactory topic<colon> Don<sq>t have any database code in your form.</p>", 
                "question": "After almost a month in C# I build my first program with a database."
            }, 
            "id": "d3a31qy"
        }, 
        {
            "body": {
                "answer": "<p>I like your code, the only thing you should change is the names of your methods or functions or however C# likes to call them. The idea is that those names are informative and help you and others understand the code you write.</p>", 
                "question": "After almost a month in C# I build my first program with a database."
            }, 
            "id": "d3a2ihz"
        }, 
        {
            "body": {
                "answer": "<p>1. You should be aware of your naming. If your project grows bigger and bigger, you<sq>ll get frustrated about something like Button1. Take a look at Microsofts Naming Guideline <colon>)<br><br>2. Instead of adding your data directly to listView1 in the while loop, you can build a List that contains ListViewItems (List<ListViewItem>) and simply add the <dq>adder<dq> to it and finally add all the rows to the ListView by using AddRange (outside the while loop of course) - this will increase the performance.</p>", 
                "question": "After almost a month in C# I build my first program with a database."
            }, 
            "id": "d3a64hq"
        }, 
        {
            "body": {
                "answer": "<p>There are many sites and in most of them you can somehow manage to find out easier and trickier tasks. However I dare to invite you to my own site<colon><br><br>**[http<colon>//www.codeabbey.com](http<colon>//www.codeabbey.com)**<br><br>Problems at each <dq>volume<dq> are ordered by decreasing the number of people who solved them so it is similar to <dq>increasing difficulty<dq>. Also when logged you can see the list of all problems at once (in the same order).<br><br>Currently here are about 150 exercises intended to teach basic algorithms, some data compression ([example](http<colon>//www.codeabbey.com/index/task_view/huffman-coding)), cryptography approaches besides Caesar<sq>s cipher ([example](http<colon>//www.codeabbey.com/index/task_view/fermat-goes-hacking-rsa)) etc.<br><br>&nbsp;<br><br>Also, if you seek for another site similar **in functionality** to CoderByte (i.e. with cool interactive features) I vote for **[HackerRank](http<colon>//hackerrank.com)** - they have very diverse set of tasks and periodical challenges. Great work and great team!<br><br>I suspect they are backed somehow by the Indian Institute of Technology and develop rapidly.</p>", 
                "question": "Are there any lists of programming challenges in order of difficulty?"
            }, 
            "id": "ck4j93d"
        }, 
        {
            "body": {
                "answer": "<p>[Project Euler](http<colon>//projecteuler.net/problems)</p>", 
                "question": "Are there any lists of programming challenges in order of difficulty?"
            }, 
            "id": "ck4j67a"
        }, 
        {
            "body": {
                "answer": "<p>/r/dailyprogrammer has 3 levels of difficulty</p>", 
                "question": "Are there any lists of programming challenges in order of difficulty?"
            }, 
            "id": "ck4inab"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been learning Python and I spent the last few days doing shit on <br><br>http<colon>//codingbat.com/python<br><br>and <br><br>http<colon>//www.checkio.org/<br><br>Former has easier stuff than the latter.</p>", 
                "question": "Are there any lists of programming challenges in order of difficulty?"
            }, 
            "id": "ck4m3h3"
        }, 
        {
            "body": {
                "answer": "<p>[Programmer competency matrix](http<colon>//sijinjoseph.com/programmer-competency-matrix/)</p>", 
                "question": "What do I need to learn to become a good programmer?"
            }, 
            "id": "cj228ye"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m afraid I<sq>m a little bit of a failure on answering your first actual question.  As I don<sq>t have a specific topic or the resources for it, but, my advice on what to learn is... Learn how to learn.  It seems redundant, but the better you are at acquiring new skills and covering new information quickly the easier your life as a programmer will be.<br><br>My own path was self taught C# developer that got an opportunity to work at a Ruby shop through social connections and i haven<sq>t looked back.  I make it a point to learn and experiment with everything i can.<br><br>The most valuable skill I believe I have as a programmer is the ability to dissect a problem.  Even if I don<sq>t know how to solve it specifically, I don<sq>t tend to become paralyzed by an unknown.  I break it down into the tasks I know need to be done and research the pieces I don<sq>t know about.    Being able to construct the map from point A to point B is incredibly useful. </p>", 
                "question": "What do I need to learn to become a good programmer?"
            }, 
            "id": "cj215fn"
        }, 
        {
            "body": {
                "answer": "<p>In my intro to object oriented programming course, about halfway through, the prof asked the class a question.<br><br><dq>Who<sq>s having trouble with the syntax?<dq><br><br>Some people raised their hands.<br><br><dq>Who<sq>s having trouble with the algorithms?<dq><br><br>Almost everyone raised their hands.<br><br><dq>Okay... who<sq>s *not* having trouble with the algorithms?<dq><br><br>3 people raised their hands.<br><br>One by one-<br><br>Prof<colon> <dq>What<sq>s your major?<dq>  <br><br>Student<colon> <dq>Math.<dq><br><br>So he summarized.<br><br>Prof<colon> <dq>If you want to be a great programmer, study math.<dq><br><br>Made a big impression on me.</p>", 
                "question": "What do I need to learn to become a good programmer?"
            }, 
            "id": "cj26unl"
        }, 
        {
            "body": {
                "answer": "<p>Read Code Complete<br>http<colon>//en.wikipedia.org/wiki/Code_Complete</p>", 
                "question": "What do I need to learn to become a good programmer?"
            }, 
            "id": "cj1ykk4"
        }, 
        {
            "body": {
                "answer": "<p>I run a Python programming youtube channel with about 140K subs and an associated programming website with about 100,000 monthly unique users, so I<sq>ve come into contact with a large group of the publishers both as a creator and consumer of content. I suspect I can offer a different perspective on this question.<br><br>Running frequent sales is the Udemy model. The vast majority of course purchases on Udemy are for coupons like these, it<sq>s a part of their setup and their plan.<br><br>Creators are lured into creating for Udemy with what appears to be attractive rates and fair fees. <br><br>Instead, what they get is courses selling for a fraction of what they expected, and almost no referrals unless they pay real money to advertise their course with their referral link, or they do marketing on their own on top.... which they could have done without using Udemy at all in the first place. <br><br>If a creator is searched for by name, or if the course is searched for by name on Udemy, this is <sq>organic,<sq> and Udemy takes a 50<percent> cut. If the user is linked directly to the course, and Udemy played no part in driving that traffic? Too bad, 50<percent> cut. It<sq>s only if the user uses your exact referral link. Nothing else matters.<br><br>Buyers on Udemy think they<sq>re getting a deal with the coupons, but really they<sq>re just paying the real value of the courses. <br><br>Everyone is tricked on Udemy...and for what? What<sq>s the reason for the trickery? All buyers know by now to just wait for the coupons, but it fools them into checking for them, or into feeling the pressure of time to snap up cheap courses when available, and sure, a small percentage of people might actually pay that full price, but this is not the majority. <br><br>For that reason, I stay far away from the company, both as a creator myself, but also as a consumer of education. Their business practices tell you exactly what they think of you as a consumer and creator, and it<sq>s just gross.<br><br>I<sq>ve dealt with Udemy and read their contracts on multiple occasions when they attempted to lure me in, and I am very thankful I never went to them. <br><br>As purely a consumer who uses coupons and gets a fair value this way, maybe all the above just simply doesn<sq>t matter to you, and maybe it shouldn<sq>t. It rubs me personally the wrong way, and you asked for opinions, so that<sq>s mine. The actual courses on Udemy can be of great quality, and the creators themselves are usually good people, but at least try to go way out of your way to use the instructor<sq>s referral link and don<sq>t be a part of Udemy<sq>s trickery. I am not sure if you can both use a coupon and referral link, I would not be surprised if you couldn<sq>t, but hopefully you can. <br><br>Lynda is straightforward and honest. I almost worked for them, but wasn<sq>t happy with the revenue share model they give, since I have my own distribution network and it would just make sense for me to continue working for myself...but at least they<sq>re upfront and honest to both their creators and students. For creators who don<sq>t have their own networks already Lynda is fair in my opinion, and they treat people with respect.<br><br>As for Laracast, I know nothing on them, so I can<sq>t offer much there. </p>", 
                "question": "Which is better. Udemy Lynda.com Laracast ?"
            }, 
            "id": "dcc6ca5"
        }, 
        {
            "body": {
                "answer": "<p>I use udemy, wait them out and theyll put $200 courses up for $10-$15. Over christmas i got $700 worth of courses for $60</p>", 
                "question": "Which is better. Udemy Lynda.com Laracast ?"
            }, 
            "id": "dcc0oax"
        }, 
        {
            "body": {
                "answer": "<p>I use Pluralsight.com, it<sq>s quite good.</p>", 
                "question": "Which is better. Udemy Lynda.com Laracast ?"
            }, 
            "id": "dcc4g5b"
        }, 
        {
            "body": {
                "answer": "<p>I have used Lynda, Udemy, Team Treehouse, Code Academy and StackSkills for some time and taken courses in Swift, PHP, jQuery, JavaScript, React, SQL and a few other things that escape me at the moment. Some feedback on each<colon><br><br>Udemy<br><br>Pros<br><br>1. Wait a week and you<sq>ll just pay the $10-15 for each course and that<sq>s all you should pay.<br><br>2. I<sq>ve found the instructors here are good for getting both practical examples of how to use what you<sq>re learning and for feedback. That said, I never buy a course without looking very thoroughly through the feedback and comparing reviews about teaching style and about the teacher<sq>s ability to quickly respond to questions on the message board.<br><br>Cons<br><br>1. If you want something, you might have to wait a week or two to get it for $15 as opposed to $400 or something insane.<br><br>2. You can easily get courses that are either poorly taught or are way over year head.<br><br>3. Sounds like instructors can be ripped off.<br><br>Lynda<br><br>Pros<br><br>1. Instructors are very knowledgeable and often focus on the very fundamentals. This is great if you have zero background in a skill you<sq>re trying to learn. <br><br>2. Courses are typically very, very thorough.<br><br>Cons<br><br>1. I find they are good for a thorough understanding of the basics but often fall short in practical examples. Sometimes I can watch three hours of a Lynda tutorial on something and not have any idea on who to actually use that piece of information then watch a Udemy instructor build an app with it in 20 minutes and have a much, much better understanding. Both are helpful, and using them in unison is best, but if you can pick only one, it<sq>s worth knowing that.<br><br>2. There appears to still be no way to get feedback from other students or the instructors if you get stuck.<br><br>Team Treehouse<br><br>Pros<br><br>1. Instructors are great at starting from the basics or scratch. Absolute beginners might have the easiest time here.<br><br>2. Their quiz system makes sure you<sq>re not just watching and copying examples but that you<sq>re understanding them. <br><br>3. Continually growing library of topics.<br><br>4. Pretty active message board to get help when you<sq>re stuck.<br><br>Cons<br><br>1. Maybe it has improved, but a year ago or so when I used them regularly, I someone frequently bumped into problems with their in-site ecosystem and twice had to ditch a course because something simply wouldn<sq>t work (and it wasn<sq>t just me, the message board was full of people who got stuck there with no solution).<br><br>2. The few tracks I completed I also thought lacked some final examples of real-world applications for what you learned (but I was then able to take those skills, watch something more advanced on Udemy and apply it).<br><br>Code Academy<br><br>Pros<br><br>1. Can really start you off with the basics in most cases, which is great.<br><br>2. Easily move ahead or back at your own speed.<br><br>3. 100 percent hands-on means no sitting through videos.<br><br>Cons<br><br>1. Lacking real-world, practical examples (but a very good launching point).<br><br>StackSkills<br><br>Pros<br><br>1. Courses are often pretty cheap, but you can usually just find the same thing on Udemy for $5 cheaper now.<br><br>Cons<br><br>1. No message board for questions.<br><br>2. I<sq>ve ended up getting tricked into buying a couple courses here that were discounted because they were severely outdated.</p>", 
                "question": "Which is better. Udemy Lynda.com Laracast ?"
            }, 
            "id": "dccbpaf"
        }, 
        {
            "body": {
                "answer": "<p>Reddit has an API - you can find the documentation [here](https<colon>//www.reddit.com/dev/api). You could also get the same result by parsing the HTML, but API will be easier and less likely to change in future.</p>", 
                "question": "How did /u/NSF_Zebras do this?"
            }, 
            "id": "d3odbix"
        }, 
        {
            "body": {
                "answer": "<p>so people ITT are saying that they used PRAW, but that<sq>s actually not right because when you scroll down, you can see that python was only used for the last step (and even then only for regex parsing, no PRAW imports at all), the first two are written in javascript.<br><br>regardless, i still think PRAW is a better way to do it because it is a very easy to use API that is tailor-made for reddit.  it also deals with a bunch of behind-the-scenes bullshit like request limits so you don<sq>t have to.</p>", 
                "question": "How did /u/NSF_Zebras do this?"
            }, 
            "id": "d3ofkhv"
        }, 
        {
            "body": {
                "answer": "<p>Whoever posted this left a how to with code they used at the bottom of their post. Seems relatively helpful.</p>", 
                "question": "How did /u/NSF_Zebras do this?"
            }, 
            "id": "d3os6ln"
        }, 
        {
            "body": {
                "answer": "<p>Lookup the <dq>PRAW<dq>, the Python Reddit API wrapper. It makes working with Reddit unbelievably easy. Follow the examples and go from there. </p>", 
                "question": "How did /u/NSF_Zebras do this?"
            }, 
            "id": "d3ofo3p"
        }, 
        {
            "body": {
                "answer": "<p>This is known as <dq>analysis paralysis<dq> and/or being an <dq>architecture astronaut<dq>. The fix is simple - set yourself a limited amount  thinking time (for undergraduate projects, half an hour should be enough), and then write some code. Get that code working - it may not be beautiful, but make it do something.  Then think some more, go back to the code and rework it.  <br><br>Contrary to what you may have been taught, it is not possible to completely design complete applications up-front. You need to have an iterative process.<br><br></p>", 
                "question": "How do I code faster?"
            }, 
            "id": "chmvw0i"
        }, 
        {
            "body": {
                "answer": "<p>First<colon><br><br>I big part of coding faster is just experience.  Once you<sq>ve ran into pattern A or pattern B three or four times you immediately recognize it and know what to do or not to do.  Only thing to do here is just to code more.  I learned more from my ambitious side projects when in school than I ever did from class.<br><br>Second<colon><br><br>It sounds like you over-engineer.  My favorite way to counter this is what the <dq>Pragmatic Programmer<dq> called <dq>Tracer Rounds<dq>. A tracer round misses the target but shows the way and the next shot is closer.  For the project you described I would have recommended that you implemented a working notepad on Day 1, cutting corners everywhere.  Half of the features can me missing or broken.  The code inside can be a totally hacked up mess.  But its WORKING on day 1.  Then you go in and start fixing bugs, adding features, and you only replace your terrible hack with a Command Pattern or whatnot when the friction of its absence is a real problem.<br><br>What this causes you to do is (1) always have a <dq>working<dq> product even if its missing features or has bugs and (2) you NEVER architect anything until its absense is causing pain.  This allows you to architect with hindsight (which is 20/20) rather than foresight which frequently has you over design things that you dont like after all and then throw away. <br><br>edit<colon> On any project, of those 10 cool patterns you think you need...  You actually only need 4 but you can<sq>t know which 4 until you<sq>ve got a working prototype.  So make the prototype before committing to any time-consuming engineering.</p>", 
                "question": "How do I code faster?"
            }, 
            "id": "chmxya9"
        }, 
        {
            "body": {
                "answer": "<p>I think you just need to code more on your free time.<br><br>It<sq>s likely that many of your peers have 4+ years of coding experience before college and have gotten very quick at banging out procedural solutions. This might put you behind in terms of experience and speed but you also probably have many fewer bad habits.<br><br>I know when I was two years in I certainly wasn<sq>t thinking about design patterns, I was writing haphazard procedural C++ code.</p>", 
                "question": "How do I code faster?"
            }, 
            "id": "chmvvpw"
        }, 
        {
            "body": {
                "answer": "<p>Experience is key. The more you do something, the quicker it will come to you the next time you do it. This applies to predicting your opponents moves in chess as well as programming. Don<sq>t worry if you<sq>re not an expert after two years. I<sq>ve been programming for well over 10 years and I<sq>m still slower than many of my peers who<sq>ve been doing it even more.<br><br>The thing you are noticing where you spend a lot of time coming up with a bad design? Those are the things you learn from. The next time that sort of situation pops up, you can immediately discard the bad idea and go to the correct idea.</p>", 
                "question": "How do I code faster?"
            }, 
            "id": "chmvww7"
        }, 
        {
            "body": {
                "answer": "<p>Games are also fun projects. I came up with a list of 49 game clone ideas based on games with simple mechanics that don<sq>t require a lot of graphics or level-design<colon> http<colon>//inventwithpython.com/blog/2012/02/20/i-need-practice-programming-49-ideas-for-game-clones-to-code/</p>", 
                "question": "AntiTutorials<colon>Learn Programming by Doing Projects"
            }, 
            "id": "cffas7e"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s much easier to learn by making something - by going for a goal - than by mindlessly repeating exactly what<sq>s in a book.<br><br>Probably 90<percent> of the programming I<sq>ve ever learned was because I wanted / needed to do something.  I started with a goal, and broke it down into bits.<br><br>My current ongoing project is the culmination of probably 20 programs I wrote as proof-of-concepts or learning exercises.</p>", 
                "question": "AntiTutorials<colon>Learn Programming by Doing Projects"
            }, 
            "id": "cffgqy6"
        }, 
        {
            "body": {
                "answer": "<p>Something about this website makes the text look *horrible* - like it isn<sq>t anti-aliased. I am running it 1920x1080 on Chrome/Windows at 100<percent> zoom.<br>Screenie<colon> http<colon>//i.imgur.com/UL1ksAD.png?1</p>", 
                "question": "AntiTutorials<colon>Learn Programming by Doing Projects"
            }, 
            "id": "cffg53g"
        }, 
        {
            "body": {
                "answer": "<p>> Apache runs native on Mac OSX<br><br>Where does it not run <sq>native<sq>?</p>", 
                "question": "AntiTutorials<colon>Learn Programming by Doing Projects"
            }, 
            "id": "cff8o7m"
        }, 
        {
            "body": {
                "answer": "<p>Mandatory link to the [Git Pro Book](http<colon>//www.git-scm.com/book) if you want to delve deeper into git.</p>", 
                "question": "Just wrote an extremely tiny git guide"
            }, 
            "id": "cc89vxt"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s pretty good for the purpose of single user, single branch repositories. What you should do now is make another document detailing how to create branches, merges, and pull requests!</p>", 
                "question": "Just wrote an extremely tiny git guide"
            }, 
            "id": "cc89fp0"
        }, 
        {
            "body": {
                "answer": "<p>Here<sq>s a nice interactive guide on the basics of git<colon><br><br>http<colon>//try.github.com</p>", 
                "question": "Just wrote an extremely tiny git guide"
            }, 
            "id": "cc8ffv8"
        }, 
        {
            "body": {
                "answer": "<p>This is the one thing I don<sq>t like about Github<colon> even an extremely tiny guide is several pages long.</p>", 
                "question": "Just wrote an extremely tiny git guide"
            }, 
            "id": "cc89wu9"
        }, 
        {
            "body": {
                "answer": "<p>All developers google and stackoverflow for 90<percent> of things every day. This is normal.<br><br>It<sq>s also easy to feel like you are running behind. Lots of programmers think they can finish up some coding project in a weekend. I<sq>ve never seen this happen with anything that was 1) actually significant in size or complexity and 2) something the developer had already done before.<br><br>Do keep at it. The feeling helps push you to keep learning. But if it<sq>s making you feel like crap to the point where you are getting burnt out, then try to remember that these feelings are normal. Vent with friends or other folks online sometimes.<br><br>The feeling of inadequecy as a developer is normal, and the good news is it goes away eventually. I<sq>ve been programming for over a decade. I expect it to go away any time now... <colon>)<br><br>EDIT<colon> 90<percent> of things *I haven<sq>t done before*. (10<percent> of the time I can sorta figure it out.) Sure, the 5th or 6th time I use some API I<sq>ll probably memorize it, but almost every day I<sq>m doing things I haven<sq>t done before. In many jobs you are using tools and platforms and APIs you might not have used much. (And error messages! God, how are we suppose to figure out anything from these opaque error messages without googling the error message to find the stack overflow post that explains what it *really* means.) You<sq>re going to end up googling for documentation, then looking up specific <dq>how do I do...<dq> questions on stackoverflow. In an industry where <dq>RTFM<dq> is a standard response, I<sq>m not going to knock anyone for always googling for info.</p>", 
                "question": "How to deal with Imposter Syndrome"
            }, 
            "id": "d44kilj"
        }, 
        {
            "body": {
                "answer": "<p>Sometimes it<sq>s not imposter syndrome. It<sq>s just that you are smart enough to know and realize that you are incompetent and inexperienced. Continue to improve yourself.</p>", 
                "question": "How to deal with Imposter Syndrome"
            }, 
            "id": "d44pk58"
        }, 
        {
            "body": {
                "answer": "<p>This problem is super easy to solve<colon><br><br>* Read book <dq>Hackers<colon> Heroes of the Computer Revolution<dq> by Stephen Levy ^[[0]] <br><br>* Come to the realization that you are incompetent when compared to CompSci pioneers.<br><br>* Keep doing what you<sq>re doing.<br><br>Every cliche has morsels of truth<colon> <dq>Rome wasn<sq>t built in a day<dq>, comes to mind. Most folk, like you and I, are just not geniuses. However, that doesn<sq>t mean we can<sq>t work toward being very proficient in a subject and become contributors.<br><br>Your coworkers are light years ahead of you, even if they started a few months ago. The growth of knowledge is exponential and they just spent more time at <dq>The Craft<dq>. As time goes on, levels will even out between proficient coworkers.<br><br>Also, please note, there are 18.2 million developers world ^[[1]]. Every time I can<sq>t get something or doubt myself, I always ask if I<sq>m dummer then the whole group who already achieved what I<sq>m trying to do. Usually, the answer is <dq>No<dq> and I continue to Google to fill my gaps of knowledge.<br><br>Presiden Abraham Lincoln once said<colon><br><br>> <dq>If I only had an hour to chop down a tree, I would spend the first 45 minutes sharpening my axe.<dq>^[[2]]<br><br>That means as a programmer, you will spend 75<percent> of your time learning/reading/searching and 25<percent> coding.<br><br><br>*Edit<colon> formating*<br><br><br>[0]<colon> https<colon>//www.amazon.com/Hackers-Heroes-Computer-Revolution-Anniversary/dp/1449388396/ref=sr_1_3?ie=UTF8&qid=1465623565&sr=8-3&keywords=hackers<br><br>[1]<colon> http<colon>//www.computerworld.com/article/2483690/it-careers/india-to-overtake-u-s--on-number-of-developers-by-2017.html <br><br>[2]<colon> http<colon>//lincolnarchives.com/LincolnQuotes.php</p>", 
                "question": "How to deal with Imposter Syndrome"
            }, 
            "id": "d44mqbz"
        }, 
        {
            "body": {
                "answer": "<p>I feel where you are coming from. I<sq>m a Jr Dev that started in October and I felt the same way, it<sq>s all a matter of how you handle yourself from that. Now what I do may not be for everyone and I understand that but below are some of the things I have done to improve my skills and my confidence<colon><br><br>\u2022 I code after hours for at least two hours during the week and 6 hours on the weekend. I come up with a project to work on and I build it. <br><br>\u2022 I<sq>m always looking for online classes I can do. Team Treehouse is a great site, it does cost money but it<sq>s worth it, Codewars is good for building on your skills.<br><br>\u2022 Finding small tasks that you do everyday at work and automate them, have a file that you need to grab off a server to generate a report in access, that<sq>s easy to do with a bat file and vb. Use Windows Task Scheduler to complete the automation. (I actually have a task that uses Python to write the bat/vb files based on the date)<br><br>\u2022 Asking questions to senior devs about more advanced concepts. <br><br>\u2022 Browse r/getmotivated<br><br>Feel free to PM me anytime you need a pep talk or if you are looking for resources to learn more. I have stuff for JS, Java, VB, SQL, HTML, Python, Ruby and PHP. <br><br><br>Edit<colon> Came across this article today on whether its an acceptable practice to use Google and Stackoverflow<br><br>Should A Programmer Use Google And Stack Overflow All The Time? - Fossbytes<br>https<colon>//apple.news/AIZlfopm5PSqozW43CpO5Vg</p>", 
                "question": "How to deal with Imposter Syndrome"
            }, 
            "id": "d44kj1x"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a senior in college in a CS program and I<sq>m an intern at a local software company. I just turned 46.</p>", 
                "question": "Am I too Old To have Career in Programming?"
            }, 
            "id": "cwo8874"
        }, 
        {
            "body": {
                "answer": "<p>Nope</p>", 
                "question": "Am I too Old To have Career in Programming?"
            }, 
            "id": "cwo5tcs"
        }, 
        {
            "body": {
                "answer": "<p>My brother is 27, did an irrelevant college degree, went travelling, moved abroad, worked in cheese shops, and then did a 6 month course in data analytics and now he<sq>s working in the head office of a bank doing programming for their data analytics.<br><br>Never too late chief! <colon>-)</p>", 
                "question": "Am I too Old To have Career in Programming?"
            }, 
            "id": "cwo782g"
        }, 
        {
            "body": {
                "answer": "<p>What job can you actually be too old to do... Stripper? I bet there<sq>s even a niche for that...</p>", 
                "question": "Am I too Old To have Career in Programming?"
            }, 
            "id": "cwo7bey"
        }, 
        {
            "body": {
                "answer": "<p>> I think people don\u2019t want to blog is because they\u2019re worried about taking time away from coding.<br><br>For me it<sq>s more about not seeing why anybody would be interested in reading *my* blog. And if nobody reads it, it feels really weird to write about stuff to just myself. Same reason I don<sq>t see a reason to use Twitter unless you<sq>re a celebrity trying to reach out to a fanbase. </p>", 
                "question": "One of the best ways to learn Programming is to Blog"
            }, 
            "id": "csr7kib"
        }, 
        {
            "body": {
                "answer": "<p>Congrats on creating a subreddit, and good luck growing it! I have a few tips for you<colon><br><br>1. Make rules more clear. Are links to individual blog posts allowed? Is it ok to post links to your own blogs/blogposts(i.e. self-promotion)? Is it ok to submit links to other people<sq>s blogs?<br>2. Make several submissions to your sub! Find a few interesting blogs and submit links to them. I guess people will be more willing to subscribe to a non-empty sub. most submissions to /r/ConTalks are made by a single person(the top mod) and the sub looks great anyway.<br>3. Make a top post meaningful. You should probably outline the ideas you have for your sub.<br>4. The sub is new, so I think you should submit it to subs like /r/newreddits and the like to gain a much-need first few dozens of subscribers. <br>5. Submitting a link to /r/programming and /r/coding won<sq>t hurt<br>6. If you have ideas for community events, that<sq>s great. First, it helps your community. Second, you can repost them to relevant subs(e.g. this one), so other people can join. </p>", 
                "question": "One of the best ways to learn Programming is to Blog"
            }, 
            "id": "csr4tkf"
        }, 
        {
            "body": {
                "answer": "<p>I read that title as actually writing a blog from scratch (coding I mean).<br><br>I learned a lot when I tried to build blogs in PHP/MySQL</p>", 
                "question": "One of the best ways to learn Programming is to Blog"
            }, 
            "id": "csr7hee"
        }, 
        {
            "body": {
                "answer": "<p>So you mean one of the best ways to programme is to *teach*. </p>", 
                "question": "One of the best ways to learn Programming is to Blog"
            }, 
            "id": "csrdc1b"
        }, 
        {
            "body": {
                "answer": "<p>This thread has been linked to from elsewhere on reddit.<br><br><br> - [/r/Weakpots] [The subject is different but the message is important, especially if you&#x27;re having a hard time in (or out) of the gym](http<colon>//np.reddit.com/r/Weakpots/comments/2p5fhp/the_subject_is_different_but_the_message_is/)<br><br><br>*^If ^you ^follow ^any ^of ^the ^above ^links, ^respect ^the ^rules ^of ^reddit ^and ^don<sq>t ^vote ^or ^comment. ^Questions? ^Abuse? [^Message ^me ^here.](http<colon>//www.reddit.com/message/compose?to=<percent>2Fr<percent>2Fmeta_bot_mailbag)*<br><br></p>", 
                "question": "If you ever get frustrated at your day-to-day progress think about where you were a year ago."
            }, 
            "id": "cmtj7df"
        }, 
        {
            "body": {
                "answer": "<p>A year ago I was finishing my first Computer Science class in college. At the time I knew about loops, if/else statements, and a little bit of Python.<br><br>Now I am in a different field, designing websites working from home (using HTML/CSS, PHP, and a bit of JS) and I will be starting at a different, more cost-effective school next month. I get the feeling that my experience and knowledge of web design/dev is at about the same level my Python/Java experience was at the end of last year.<br><br>At nineteen years old, I can<sq>t tell if I<sq>m doing the right thing by trying everything out, or if I should just start mastering one language (back end or front end).<br><br>No matter what, it<sq>s starting to become my job, which is exciting.</p>", 
                "question": "If you ever get frustrated at your day-to-day progress think about where you were a year ago."
            }, 
            "id": "cmtkdu0"
        }, 
        {
            "body": {
                "answer": "<p>Every time I look at code I wrote from a year ago I get sick to my stomach, that<sq>s how I know I am getting better. </p>", 
                "question": "If you ever get frustrated at your day-to-day progress think about where you were a year ago."
            }, 
            "id": "cmtmsg7"
        }, 
        {
            "body": {
                "answer": "<p>Started community college for web publishing over two years ago, five classes away from graduating. When I was sixteen I was making web pages all the time as a young teen on geocities and angelfire, totally forgot how to even set up a page or even properly use <p>. Flash forward to now and I can use php, jQuery, and commence ecommerce. Outside of school I was tutored by a friend in the industry. Thanks my Russian buddy!</p>", 
                "question": "If you ever get frustrated at your day-to-day progress think about where you were a year ago."
            }, 
            "id": "cmti817"
        }, 
        {
            "body": {
                "answer": "<p>I personally like to go trough the program. Look for some sort of main() and try to roughly figure out what all the classes/modules/files do. </p>", 
                "question": "How do you read through source code?"
            }, 
            "id": "cmsrfuo"
        }, 
        {
            "body": {
                "answer": "<p>Something the size of DOOM 3 is going to be daunting to any person. If you start with a random file, chances are great that you have started in the middle of the system with no context for how you get there or where it goes. Like being dropped into the middle of a forest with no map, it<sq>s going to be difficult to find your way out.<br><br>The task in understanding code is to build a mental model of how all of the pieces fit together. Keep in mind that software is a system built up of many parts. The design of these parts involves decomposition<colon> starting with a high-level problem, break it down into small parts that solve that problem, then break each of those parts down further, until you are down to something simple enough that the computer understands it. With that in mind, you want to try to rebuild the map of that decomposition.<br><br>For this, your best bet is often to start at the beginning. Look at the entry point to the program, such as <sq>main()<sq>, and follow the path of execution. Along the way, look for patterns<colon> this block reads in the configuration files, this block determines the command line arguments, this block reads in the data, this block modifies it, this block writes it back out. If you see a class referred to and it<sq>s not obvious what it is, jump over it to for a minute and see if you can tell more about its purpose from its comments and the names of its attributes and methods. Similarly, if you find yourself inside a method or attribute that you don<sq>t understand its purpose, do a search of the code base for references to it and see if the context in which it is used helps you to understand what it is and does. These two tools - jump to definition and find everywhere - are invaluable when trying to work on a large, complicated code base.<br><br>At the end of the day, how difficult this task will be depends largely on the quality of the code. Well-written code will clearly show the structure of its thought<colon> breaking methods up iteratively into smaller, simpler methods; sharing data along clear boundaries; using descriptive names for methods and attributes; and being clear and consistent in its language. Poorly-written code will be far more difficult to follow<colon> varibles will be reused in different contexts for different purposes; names will be terse, ambiguous, or nonsensical; large methods will perform many operations of multiple levels of abstraction; and names and patterns will change in subtle and contradictory ways. It<sq>s not difficult to write poor code, but it<sq>s difficult to understand what it does.<br><br>Seeing the patterns in code is a skill that one develops with practise. I recommend practising on smaller code bases to develop that skill. Try something with about a dozen files and see if you can piece together what each does. You should be able to find many small utilities that will be about that size, such as most of the GNU command line tools. Look through it, end to end, until you can confidently say you know what each piece does in the big picture. Then repeat on another, bigger project; perhaps 30-50 files. Keep doing this until you work your way up to something tremendous, like Firefox or OpenOffice.<br><br>Also, expect that this will take a long time. I<sq>ve been working as a developer at the same company on the same project for 7 years, and even now it might take as much as a couple of days to reverse-engineer a part of our code base that somebody who no longer works with us wrote 5 years ago. Experience and familiarity make it faster, but poorly-written code can be difficult for even experienced developers to grok.</p>", 
                "question": "How do you read through source code?"
            }, 
            "id": "cmstvn8"
        }, 
        {
            "body": {
                "answer": "<p>Look for comments! One of the reasons why the DOOM source code is considered well-written is because it<sq>s well-commented. Almost every method is commented to describe what<sq>s happening. So even if I<sq>m not sure what the code is doing, I can look at the comments and get an idea of what<sq>s going on. <br><br>http<colon>//blog.codinghorror.com/coding-without-comments/<br><br>It bothers me when developers (on a team, especially) write programs with minimal comments. It<sq>s always better to comment *too much* than too little.</p>", 
                "question": "How do you read through source code?"
            }, 
            "id": "cmst1o9"
        }, 
        {
            "body": {
                "answer": "<p>For what it<sq>s worth, we<sq>ve built a tool to help read source code. It<sq>s called [Code Connect](http<colon>//codeconnect.io) but it<sq>s only available for C# and VB .Net for now.<br><br>Basically, it visualizes the code on a function-by-function basis so you can quickly trace out what<sq>s happening in your program.</p>", 
                "question": "How do you read through source code?"
            }, 
            "id": "cmsvflj"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s kind of the same as the difference between construction work and figuring out what exactly a house is. Computer science is a branch of mathematics, and is very theoretical. The name is not very good, it should be <dq>computing science<dq> or something like that. Software engineering is about writing programs for computers. In practice, they overlap a lot because you can<sq>t program computers very well without understanding a lot about how computations work, and it<sq>s hard to work with computer science without writing programs. Most people with a computer science degree work as programmers, not as computer science researchers. A computer science education program likely contains a lot of software engineering classes for this reason.<br></p>", 
                "question": "What<sq>s the difference between software engineering and computer science?"
            }, 
            "id": "cjf5893"
        }, 
        {
            "body": {
                "answer": "<p>Computer science is more theory based. People in both majors are usually capable doing the same jobs. I<sq>m a computer science major and most internships and job offers for people in our program are software engineering positions.</p>", 
                "question": "What<sq>s the difference between software engineering and computer science?"
            }, 
            "id": "cjf4g7r"
        }, 
        {
            "body": {
                "answer": "<p>[deleted]</p>", 
                "question": "What<sq>s the difference between software engineering and computer science?"
            }, 
            "id": "cjf89rn"
        }, 
        {
            "body": {
                "answer": "<p>As a guy who has both his bachelors and masters in software engineering (and a minor in computer science), I<sq>d like to put in my two cents.  Software engineering is an extremely broad term to cover the many disciplines of creating software - NOT just programming.  I like to compare the entire field to a restaurant; first, the waiter will take your order (requirements engineering), and sends the order to the kitchen for them to figure out how to produce it (design engineering).  The kitchen will produce the food (software development/programming), and the waiter will deliver the food and make sure the customer stays happy (software testing and maintenance).  There<sq>s many other divisions that don<sq>t fit my little analogy such as configuration management, human computer interaction, and quality management, but you get the idea.<br><br>Computer science focuses in depth on the actual programmatically aspects of developing software.  You<sq>ll learn a variety of programming languages (java seems to be the latest <dq>basic<dq> language they start you on), the fundamental building blocks of programming (object oriented design), and the theory and mathematics behind algorithms.  You<sq>ll learn this in software engineering too, just at a slightly higher level.<br><br>In my school software engineers took their own separate classes from computer science majors, but for programming classes (c++ and java), the two majors were together.<br><br>In the real world, companies tend to use computer scientists and software engineers interchangeably.  I<sq>ve seen many jobs where software engineers were expected to be full time programmers, and computer scientist jobs which focused on configuration management and quality control.  My first job was as a computer scientist running small software maintenance and testing for big time applications, and have since moved on to be an enterprise architect. Good money if you can find the work!<br><br>**tl;dr Computer science focuses on programming, software engineering focuses on the entire business of software development.  In the real world though, these two terms get used interchangeably.**</p>", 
                "question": "What<sq>s the difference between software engineering and computer science?"
            }, 
            "id": "cjf9ci8"
        }, 
        {
            "body": {
                "answer": "<p>I interpret this as you simply wanting some good resources to help improve your skills and help you learn to approach problems the way more experienced programmers do. So here are some recommendations I have.<br><br>I would start listening to programming podcasts. Search around for ones that sound cool and give them a try. You might start with Ruby Rogues and Javascript Jabber. It is just experienced programmers talking about programming. You will probably come to realize how normal really good programmers are and how it just takes time to get good at the craft. You will also hear them talk about cool different technologies and hear how they approach different problems. You should also find some programming blogs to follow.<br><br>You should also start getting good at reading code. A book called Apprenticeship Patterns (available for free online [here](http<colon>//chimera.labs.oreilly.com/books/1234000001813/index.html)) says <dq>People who can quickly absorb knowledge directly from the code soon become much better programmers, because their teacher is every line of code written by every programmer ever born.<dq> This isnt easy at first but you can learn a lot about how great programmers solve problems by looking through and understanding their code.<br><br>You should definitely buy/borrow and read programming books, and not just dry ones about your own language. The first book I would recommend is the one I quoted in the previous paragraph, [Apprenticeship Patterns](http<colon>//chimera.labs.oreilly.com/books/1234000001813/index.html). It is about how to become a great software craftsman.<br><br>You should check meetup.com for any user groups in your area. There are user groups all over where programmers of all ages and experience levels get together to discuss programming, code together and teach each other. Plus you might meet someone who can help you get your next job.<br><br>I would highly recommend that you figure out some program you want to build and start building it. Then do that over and over. The best way to get good at programming is to program. Code wars and code katas are good for this but I think something more powerful happens when you build something you actually care about.<br><br>I also think you should checkout [railscasts.com](http<colon>//railscasts.com/) if you are at all interested in rails. It is exactly what you are describing for rails. It is stuff like how to use the carrierwave gem to upload videos or how to use omniauth to allow your users to sign on with facebook. <br><br>You can also check out [rubytapas.com](http<colon>//rubytapas.com/) this I think is exactly what you are looking for. It is just Avdi Grimm showing you how to do things in pure ruby.<br><br>Hope this helps.<br><br>EDIT<colon> Found another interesting site called [destroyallsoftware.com](https<colon>//www.destroyallsoftware.com/screencasts) which looks to be a screencast site about random programming topics. Looks really promising but I personally havent tried it out.<br><br>Also, anytime you are learning a new technology, chances are good that someone at some programming conference has given a presentation about it. The site [codefreaks.com](http<colon>//confreaks.com/videos) have a huge archive of these presentations some are better and more helpful than others, but often times there can be great intros into new ideas and tech.</p>", 
                "question": "Where can I go to watch programmers solve common problems do common tasks etc?"
            }, 
            "id": "chkt7h1"
        }, 
        {
            "body": {
                "answer": "<p>The grocery store in Mountain View. </p>", 
                "question": "Where can I go to watch programmers solve common problems do common tasks etc?"
            }, 
            "id": "chl0wv4"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been keeping a development diary for my current major project, and I think it<sq>ll be interesting when I finish it.<br><br>Until then, I don<sq>t have any recommendations offhand, except to hang out on IRC.  Chatrooms let you see people talking through their problems, often at a level you may not have reached yet.<br><br>Granted, many chatrooms suck, but just experiment.  Freenode<sq>s programming rooms tend to be pretty good.<br><br>When you get a couple professionals discussing a complex problem, you really start to see how different people think, and it<sq>s really good exposure.</p>", 
                "question": "Where can I go to watch programmers solve common problems do common tasks etc?"
            }, 
            "id": "chkqh9i"
        }, 
        {
            "body": {
                "answer": "<p>I, like you, wanted to see real developers work through real problems while being able to watch their screen. I searched and found this youtube channel called [AirPair](https<colon>//www.youtube.com/channel/UCX6ZQp3RdEU_9kFNrRB-rIQ)<br>They are consulting developers that are hired for an hour or so and work through a specific problem. They do mainly web frame works, but have many subjects. Some videos can be sort of hit or miss, but I have found really interesting ones that made me feel like I know what development is like in the real world. </p>", 
                "question": "Where can I go to watch programmers solve common problems do common tasks etc?"
            }, 
            "id": "chktwua"
        }, 
        {
            "body": {
                "answer": "<p>Make some stuff. Spend less time going over the concepts and more time actually doing things. Start small, and build on it.</p>", 
                "question": "I<sq>ve taken two years of high school CS and I still can<sq>t code. Something is seriously wrong with my brain."
            }, 
            "id": "dfaiilp"
        }, 
        {
            "body": {
                "answer": "<p>Imagine trying to learn a language like German, but all you did was read/memorize spelling and grammar.  You<sq>d never actually become fluent in the language.  You need to write code to get better at coding.  Start with simple stuff and an easy language like Python or Java, and just build from there</p>", 
                "question": "I<sq>ve taken two years of high school CS and I still can<sq>t code. Something is seriously wrong with my brain."
            }, 
            "id": "dfaiscn"
        }, 
        {
            "body": {
                "answer": "<p>This is the classic mistake of everyone who learns about programming from a book or from someone else but who spends little time trying to do it, or gives up too quickly. Everyone assumes because they can read code, that they can write it; and when they find out that they can<sq>t, they think they haven<sq>t read enough. No, that<sq>s not it at all. You haven<sq>t made enough mistakes yet. Keep going. Programming is hard.</p>", 
                "question": "I<sq>ve taken two years of high school CS and I still can<sq>t code. Something is seriously wrong with my brain."
            }, 
            "id": "dfalmn0"
        }, 
        {
            "body": {
                "answer": "<p>At one point in time, I could write a game from scratch, but I couldn<sq>t read or write data to a file. To me files were mysterious and difficult. One day I decided I had enough and just tried it. Yes it was difficult and mysterious, but I chiseled away at it over several days until I started seeing my (albeit mostly corrupted) data appearing in my debugger. PROGRESS! A weekend later I was happily writing and reading text and binary files.<br><br>The biggest reason we all do <dq>Hello World!<dq> is because it<sq>s the absolute simplest program<colon> Print text to the screen. However, in that <dq>simple<dq> program you<sq>ve written up the syntax, made function calls, ran it through a compiler or interpreter, and got it running without errors. Even that <dq>simple<dq> program had to go through all the same concepts <dq>large<dq> programs must do to build.<br><br>Also don<sq>t be so hard on yourself. Programming is difficult, despite the marketing copy. Give yourself permission to make mistakes. Often my best learning is when my program *doesn<sq>t* work, because I have to inspect the data by printing to a terminal or look up an error message I don<sq>t understand. That<sq>s normal. After a bit you will start to remember <dq>Hey this error means...<dq> even when it throws an unintelligible error in a completely separate file. When you hear the negative critic rising in your head, remind yourself that you<sq>re still learning.</p>", 
                "question": "I<sq>ve taken two years of high school CS and I still can<sq>t code. Something is seriously wrong with my brain."
            }, 
            "id": "dfaml9t"
        }, 
        {
            "body": {
                "answer": "<p>Do this - it<sq>s absurdly good. <br><br>http<colon>//mooc.fi/courses/2013/programming-part-1/</p>", 
                "question": "What are the best online Java courses to give me a broad understanding of a language for fifty dollars or less?"
            }, 
            "id": "d39lxjt"
        }, 
        {
            "body": {
                "answer": "<p>I wrote [Learn Java the Hard Way](https<colon>//learnjavathehardway.org/), which people seem to like.<br><br>PM me your email address if you want and I<sq>ll send you a code for a free book.<br><br>Edit<colon> The offer was intended for OP only... RIP my inbox.</p>", 
                "question": "What are the best online Java courses to give me a broad understanding of a language for fifty dollars or less?"
            }, 
            "id": "d39um5a"
        }, 
        {
            "body": {
                "answer": "<p>Head First Java. The fundamentals, done well. You can easily get it at your local library through PDF/ebook or a physical copy. And of course, purchase it online as well.<br><br>Taking tests and quizzes... there<sq>s quite a few sites. I<sq>d recommend practicing on sites like codingbat for problems.</p>", 
                "question": "What are the best online Java courses to give me a broad understanding of a language for fifty dollars or less?"
            }, 
            "id": "d39lfeq"
        }, 
        {
            "body": {
                "answer": "<p>Online classes are all fluff and cover only the most basic concepts. Read Thinking in Java if you want a good understanding of the language and its design.</p>", 
                "question": "What are the best online Java courses to give me a broad understanding of a language for fifty dollars or less?"
            }, 
            "id": "d39ey01"
        }, 
        {
            "body": {
                "answer": "<p>One more thing<colon> I think it would be incredibly helpful if you could add two to three standard cases where the pattern is used at the end of each chapter .</p>", 
                "question": "My free ebook<colon> A Primer on Design Patterns 1st Edition"
            }, 
            "id": "d1auucl"
        }, 
        {
            "body": {
                "answer": "<p>I only took a glance over the text, will read it in detail tomorrow.<br><br>I noticed a typo on page 5, in the second paragraph<colon> you wrote<colon> <dq>Think over what we acheived...<dq> instead of <dq>Think over what we achieved...<dq><br><br>Just want to help you make your book even more awesome ;)</p>", 
                "question": "My free ebook<colon> A Primer on Design Patterns 1st Edition"
            }, 
            "id": "d1auls3"
        }, 
        {
            "body": {
                "answer": "<p>Definitely consider migrating this book to [Wikibooks](https<colon>//en.wikibooks.org/wiki/Subject<colon>Computer_programming) so that others can add and expand to work.</p>", 
                "question": "My free ebook<colon> A Primer on Design Patterns 1st Edition"
            }, 
            "id": "d1b02w3"
        }, 
        {
            "body": {
                "answer": "<p>Thanks for posting this. I look forward to reading it!</p>", 
                "question": "My free ebook<colon> A Primer on Design Patterns 1st Edition"
            }, 
            "id": "d1b0sbb"
        }, 
        {
            "body": {
                "answer": "<p>An internship is probably your best bet. There<sq>s nothing like learning on the job with some pressure behind you. For some reason, you<sq>ll learn quicker and understand things realistically rather than theoretically. I<sq>ve always learned better on the job rather than by myself at home. <br><br>Also, look into ~~OpenHatch.com~~ OpenHatch.org. My bad! </p>", 
                "question": "How to make the jump from computer science coursework to real world programming"
            }, 
            "id": "czq4s1w"
        }, 
        {
            "body": {
                "answer": "<p>The best you can do is start a small project (a website, app, ..) in a language you<sq>re comfortable with.<br><br>For example, lately I<sq>ve had trouble deciding what to cook. So the <dq>obvious<dq> thing was to build an Android app, which will have a database of recepies and it will return one on random and that way I can spare valuable seconds (and maybe even diversify my eating habits).<br><br>Do I know how to make Android apps? Nope, but I<sq>m currently learning and it<sq>s a great feeling moving from the command line apps, to actually seeing your app working on a phone.<br><br>It boils down to what real world problems you<sq>re having and how your computer science knowledge can help you solve them. And from my experience, even the smallest things you can show to a potential employer on a GitHub profile are extremly valuable. Of course it helps if it<sq>s a nice looking app/website, with proper code convention and all that.<br><br></p>", 
                "question": "How to make the jump from computer science coursework to real world programming"
            }, 
            "id": "czqafh6"
        }, 
        {
            "body": {
                "answer": "<p>The jump from academic computer science classes to real world programming is one of the bigger jumps that have to be made. It<sq>s more than a tad frustrating because, in my experience, they<sq>re almost completely unrelated. But I digress...<br><br>The surefire solution to this really sucks, trust me, but it<sq>s the only way to start getting a grasp of what<sq>s going on. <br><br>Find a small open-source project and start documenting the whole thing. Take notes on each dependency, each import, each module used, and trace through each file to see how they<sq>re used and what they are sourced from. You<sq>re gonna fill up a legal pad worth of notes doing this, but chart out connections from each file to file, and see how the classes and functions fit together. <br><br>Like I said, it<sq>ll suck, but it<sq>ll guarantee that you know the software inside and out. After you repeat this process enough times, you<sq>ll be able to browse a code base and see these connections more easily. And frankly, there are only a few different types of patterns that you<sq>ll see over and over and over again. Eventually you<sq>ll have an intuitive grasp of not only how something is put together, but how to quickly put something together yourself. </p>", 
                "question": "How to make the jump from computer science coursework to real world programming"
            }, 
            "id": "czqcxwj"
        }, 
        {
            "body": {
                "answer": "<p>An internship *can* help a lot, but it depends greatly on where you work, your co-workers, and the work environment. <br><br>Things that I think are more important are learning how to code different systems well. If you haven<sq>t been introduced to design patterns yet, I think they<sq>re a good start. A YouTube channel, Derek Bansas (not sure on that last name) is really good. Additionally, if you can get your hands on a decent software architecture book that might help as well. Lastly, come up with a side project that interests you and try to apply some of the things you learned. Reading is one thing, but doing them is a whole different yes.</p>", 
                "question": "How to make the jump from computer science coursework to real world programming"
            }, 
            "id": "czq7cfr"
        }, 
        {
            "body": {
                "answer": "<p>Style is not just a personal preference from programmer to programmer, but can also vary by the company. For instance, [Google has their own set of style guides](https<colon>//code.google.com/p/google-styleguide/).<br><br>There<sq>s no *correct* way to program, necessarily. There are some practices which are generally frowned upon for various reasons, but they are often times still valid in terms of what you<sq>re trying to accomplish.<br><br><br>If you<sq>re interested in reading a little more about style preferences, [Wikipedia<sq>s article on programming style](http<colon>//en.wikipedia.org/wiki/Programming_style) shows a few examples.<br><br>Once you start talking about style, you should also start thinking about the actual structure and design of your code. This is something else entirely, but also worth your while to focus on. Books like [Clean Code](http<colon>//www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) are highly recommended for things like this.<br><br>---<br><br>On a side note, I think it<sq>d be interesting if a site like [codingstyleguide.com](http<colon>//codingstyleguide.com/) gained some traction. Then we<sq>d be able to see the general preference of programmers. It wouldn<sq>t be the end-all to style, but I think it would at least be fun. </p>", 
                "question": "In the spirit of today<sq>s XKCD what would be a good general style guide to read?"
            }, 
            "id": "cqfwnsq"
        }, 
        {
            "body": {
                "answer": "<p>Unless there is a serious dire pressing need, NEVER write your own style guide. It devolves into petty arguments among the team over things that don<sq>t really matter. Odds are there is a perfectly adequate style guide for your language already out there. Use that one. If you all dislike it equally, you<sq>ve done the right thing.</p>", 
                "question": "In the spirit of today<sq>s XKCD what would be a good general style guide to read?"
            }, 
            "id": "cqfy1b8"
        }, 
        {
            "body": {
                "answer": "<p>It really bears mention that this XKCD you posted is hilarious. The whole progression. I<sq>d love to see a coder debug an argument a couple is having in IKEA.</p>", 
                "question": "In the spirit of today<sq>s XKCD what would be a good general style guide to read?"
            }, 
            "id": "cqfz6bc"
        }, 
        {
            "body": {
                "answer": "<p>That<sq>s terrible!</p>", 
                "question": "In the spirit of today<sq>s XKCD what would be a good general style guide to read?"
            }, 
            "id": "cqg2pya"
        }, 
        {
            "body": {
                "answer": "<p>Can you elaborate on why it<sq>s the best?<br>I<sq>m considering buying it, but I don<sq>t know what<sq>s in it and what it<sq>s good for.</p>", 
                "question": "For those of you trying to learn Java i found the standard Oracle reference to be the best resource by far."
            }, 
            "id": "ckc4jct"
        }, 
        {
            "body": {
                "answer": "<p>Looks like it<sq>s a large book. How long did it took to go through it?</p>", 
                "question": "For those of you trying to learn Java i found the standard Oracle reference to be the best resource by far."
            }, 
            "id": "ckc4he9"
        }, 
        {
            "body": {
                "answer": "<p>I am assuming you already know programming but just not in Java, right?</p>", 
                "question": "For those of you trying to learn Java i found the standard Oracle reference to be the best resource by far."
            }, 
            "id": "ckc2rul"
        }, 
        {
            "body": {
                "answer": "<p>It<sq>s still so weird to me to see Oracle instead of Sun.</p>", 
                "question": "For those of you trying to learn Java i found the standard Oracle reference to be the best resource by far."
            }, 
            "id": "ckc4q8x"
        }, 
        {
            "body": {
                "answer": "<p>As a professional developer, I will honestly say that your web app didn<sq>t impress me. It<sq>s very evident that you haven<sq>t worked with other programmers much from the way your code is written.<br><br>https<colon>//github.com/KeynesYouDigIt/Vasco_de_data/blob/master/Vasco/ETL/Core_ETL.py<br><br>This file in particular speaks volumes about your experience. I can tell you that it<sq>s far too large, and handles too much. Variable names aren<sq>t very descriptive, comments are explaining exactly what the code does, not why it does. Expecting someone to go through this and easily be able to parse out behavior without a lot of effort is tough.<br><br>In terms of functions, keep them 10-15 lines. If you see repeated behavior, factor it out to a function. DRY. Don<sq>t repeat yourself. This, and two other little acronyms are extremely nice to keep in mind at all times. Just knowing about them can highly improve your codes readability. http<colon>//www.itexico.com/blog/bid/99765/Software-Development-KISS-YAGNI-DRY-3-Principles-to-simplify-your-life I<sq>d highly advice using a naming convention and sticking to it. Don<sq>t just name things willy nilly. You do a pretty good job of sticking to snake case, but some of your variable names feel meaningless. <br><br>Comments should never tell someone what the code does. The code should, through well named variables and functions. Comments should only be there specifically to tell you why someone is there. If there<sq>s a particularly crazy mathematical expression, a weird unexplained behavior, or a reason some really dumb piece of code is there(and in most cases these things should be refactored in time), then a comment is okay. <br><br>Lines 188 and 183 are literally the same thing, factoring out a function would be nice to see there. All the lines down should be massively extracted out to bite size pieces. It<sq>s tough to follow. <br><br>Being able to make working applications is great, but you gotta prove you can write code with others that they can understand. One of the nice things about college graduates is they<sq>ve often worked on group projects. At the very least, when I consider a junior developer for a position, I want to see that they<sq>re able to work with others, either in person, or via the internet.<br><br>Solo projects are great, but you just learn so much more if you<sq>re working with someone else. If you<sq>ve got anyone around you, or there<sq>s meet ups around you, I<sq>d highly recommend you attend them. meetup.com is a great place to find developer events in your area. Make connections, see if anyone<sq>s got a project you can help on, or you want to hack on some new stuff with them. Connections are your number one way into the industry, as well as your way to learn. Get yourself in some IRCs, ask if someone needs help from a junior developer on anything. Do anything you can to make connections. <br><br>I<sq>m a self taught developer as well, although I had been developing software since I was pretty young, so by the time I was old enough to get a job, I just got one.<br><br>That said, I can understand why it<sq>s hard to know when you<sq>re ready. Kudos on that project, it<sq>s a great start, and it shows promise. Keep it up, and keep improving. But if you can, and I would highly advise you to do so, start collaborating with others. Learn from people better than you, teach those who are less experienced. Not only can they help you improve as a developer, they can land you a job. </p>", 
                "question": "Applying for jobs vs wasting time as self taught coder (x post /r/cscareerquestions/"
            }, 
            "id": "d5a9eqg"
        }, 
        {
            "body": {
                "answer": "<p>I would not let a potential employer look at that demo.<br><br>It is not very well constructed, too much space everywhere. But also if I was hiring and saw these things I would stay clear...<br><br>>special thanks to initilizr (thanks guys, you rock!! srsly!) where i downloaded this web template.<br><br>The use of colloquial language and a web template. Why not make your own page, why the template if you are a web developer?<br><br>>>Vasco de Data | \u00a9 KeynesYouDigIt 2016 ... not really a copy right lol | my github | LinkedIn<br><br>The language again. 1 lol to end it all.<br><br></p>", 
                "question": "Applying for jobs vs wasting time as self taught coder (x post /r/cscareerquestions/"
            }, 
            "id": "d5afjaw"
        }, 
        {
            "body": {
                "answer": "<p>> would I be wasting my time applying for some junior dev jobs, or would it be worth the effort?<br>  <br>It would be 100<percent> worth the effort. I got my current job by periodically applying for junior dev jobs while working on projects while working my day job (part time). My strategy was to spend a little bit of time applying for jobs every week.<br>  <br>Best case scenario is that you get hired straight away. You will learn more in a week on the job than you will in a month of study. Even if they fire you after your first week (which I am only presenting as a worst case hypothetical) then it<sq>s like you just gained a month of studying. <br>  <br>Average case is that you don<sq>t get a job for a while. In this case you will be spending time <br>  <br> * looking at job ads (indeed.com is pretty good)<br> * tailoring your resume and cover letter<br> * polishing your portfolio<br> * potentially doing interviews<br><br>First of all, you will get good feedback just from reading job ads. You will get an impression for what is considered important skills in the industry and what kind of jobs are hiring more in your area. Secondly, putting together a good resume is an iterative process, and applying for jobs over time will let you revise it and make it better. Sitting in an interview is a good experience even if you don<sq>t get the job. You will improve your interviewing skills and get to know what employers want from a candidate. Applying and interviewing will focus your efforts on things that are important. Thirdly, many job openings only last for a few months. The jobs you will apply for in a months time will not be the same jobs as now. You are missing out by not applying constantly.<br>  <br>Of course, there is only a certain amount of time you can spend looking at job ads and writing resumes. You<sq>ll go crazy if you do it all day - doing it non-stop is super depressing. I would recommend that you set aside an hour every few days to look for an apply for jobs while you work on your programming. Even one day a week would be a good use of your time.<br><br>> I am certainly planning on continuing to work on new projects, but I am trying to figure out if they should be my exclusive focus or if I should start looking for a job as a dev where I could grow faster than my current support desk role. <br>  <br>Do both. There<sq>s only so much time you can spend applying for jobs in a week.<br><br>> Is going self taught a myth?<br>  <br>No, it<sq>s totally possible.</p>", 
                "question": "Applying for jobs vs wasting time as self taught coder (x post /r/cscareerquestions/"
            }, 
            "id": "d5abuvw"
        }, 
        {
            "body": {
                "answer": "<p>I understand not everyone wants to take programming professionally and that is perfectly fine. But if you want to make it your profession, at least treat it that way.<br><br>What production applications do you visit that have things like this on them?<br><br>> special thanks to initilizr (thanks guys, you rock!! srsly!) where i downloaded this web template.<br><br>> ... not really a copy right lol<br><br>> (a picture of a dude on a button)<br><br>If you want to build things that way, that<sq>s perfectly fine. But don<sq>t EVER think a potential employer wants to see that. It<sq>s so gimmicky and childish in a professional atmosphere.</p>", 
                "question": "Applying for jobs vs wasting time as self taught coder (x post /r/cscareerquestions/"
            }, 
            "id": "d5ah1ja"
        }, 
        {
            "body": {
                "answer": "<p>Amazon Web Service (AWS) offers a free 24/7/365 instance to anyone with a .edu email address.<br><br>It<sq>s not the most powerful server in the world, but for a simple python script it<sq>s probably far more than enough.</p>", 
                "question": "How can I run my Python script online 24/7 for free?"
            }, 
            "id": "cxjelaz"
        }, 
        {
            "body": {
                "answer": "<p>How about a raspberry pi? </p>", 
                "question": "How can I run my Python script online 24/7 for free?"
            }, 
            "id": "cxjofpx"
        }, 
        {
            "body": {
                "answer": "<p>What you might want to look at doing is getting the GitHub Student Dev pack. https<colon>//education.github.com/pack.<br><br>That will give you credits to AWS and digital ocean.<br><br>If you decide to run Linux on your VPS/EC2 you could set a cron job.<br><br>This guide for DigitalOcean should work on most any Ubuntu 14.04 instance regardless of where it<sq>s hosted. https<colon>//www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04<br><br>Then set your cron job. <br><br>I explained in a post on /r/learnruby the other day about doing this<colon> https<colon>//www.reddit.com/r/learnruby/comments/3uq4kj/scraping_data_and_emailing_myself_the_results/cxh0f7l.<br><br>A few caveats, if you go the cron route and you want to debug you<sq>re going to want to redirect output, but Ubuntu<sq>s cron is set up to send to email also and if you don<sq>t have an email service installed the entire job will fail. So go ahead and install postfix. You don<sq>t need to set it up or get it working, cron will just want to see it<sq>s there.<br><br>Then if there are errors in your cron and you redirect the output, the redirect will work.<br><br>If you want to make sure your cron job is set to go off as often as you want this is an awesome site<colon> http<colon>//crontab.guru/<br><br>Thanks!</p>", 
                "question": "How can I run my Python script online 24/7 for free?"
            }, 
            "id": "cxjkcuh"
        }, 
        {
            "body": {
                "answer": "<p>Heroku</p>", 
                "question": "How can I run my Python script online 24/7 for free?"
            }, 
            "id": "cxjpts5"
        }, 
        {
            "body": {
                "answer": "<p>Could you post this in /r/freeEBOOKS too? <colon>)</p>", 
                "question": "My free ebook<colon> A Primer on SQL 2nd Edition"
            }, 
            "id": "cfoh53w"
        }, 
        {
            "body": {
                "answer": "<p>Thanks</p>", 
                "question": "My free ebook<colon> A Primer on SQL 2nd Edition"
            }, 
            "id": "cfois9q"
        }, 
        {
            "body": {
                "answer": "<p>I am a slow witted doofus who can barely remember his sa password.  Would this book be accessible to a retard such as myself?</p>", 
                "question": "My free ebook<colon> A Primer on SQL 2nd Edition"
            }, 
            "id": "cfot2ql"
        }, 
        {
            "body": {
                "answer": "<p>Thank you! Looking to get a primer on SQL before taking my database classes</p>", 
                "question": "My free ebook<colon> A Primer on SQL 2nd Edition"
            }, 
            "id": "cfoml5d"
        }, 
        {
            "body": {
                "answer": "<p>SQL Server jobs pay quite well here in the US if you know your stuff.  <br><br>> But i never felt the need for a query that joins 5 table<br><br>Really depends on the database setup in question. Our billing system is incredibly complex. Is it the best? No, of course not. But we have to work with it. <br><br>Here<sq>s a query our Database Developer wrote last week<colon> https<colon>//gist.github.com/anonymous/a6a693046c154a8763ba1d3906c13687<br><br></p>", 
                "question": "How much SQL is really necessary nowadays?"
            }, 
            "id": "d7biv77"
        }, 
        {
            "body": {
                "answer": "<p>The subtext of the question is clear<colon> I don<sq>t really need this class, do I?<br><br>(I<sq>m a CS teacher, so excuse my outrage, please)<br><br>If you think you already know the content you have closed off the opportunity to learn.  I<sq>ve been doing this stuff for many years (and written some books about it) and I still have plenty to learn.  You don<sq>t know for sure what was covered in the lecture (because you weren<sq>t there) yet you<sq>re asking the community to validate your disdain for the content. <br><br>By implying that you not only know all you need to know already and you<sq>re pretty certain the stuff you don<sq>t know is unimportant anyway, you<sq>re either a genius beyond compare or you<sq>re setting yourself up for a really hard fall at some point.  <br><br>I genuinely hope that fall comes during the class because it will be less painful for you in the long run.  <br><br>I<sq>m not trying to be harsh here.  I<sq>d say the same thing to you if you showed up in my office.  Unfortunately, even if you were my student, I probably wouldn<sq>t see you until the end of the semester when you<sq>re asking for a withdrawal because you realize you can<sq>t possibly pass a class you didn<sq>t attend. (I see 20 students in that circumstance in the last weeks of every semester.) I would treat you with great dignity and respect, and I would not allow the withdrawal. You would be encouraged to retake the class instead. <br><br>Computing is a discipline that requires earned confidence and humility.  Even the things you know change all the time.<br><br>There is always plenty you don<sq>t know, and you should never pass up an opportunity to learn things even if you think you know plenty.  That may be a more important lesson than anything you learn about SQL in this course.<br></p>", 
                "question": "How much SQL is really necessary nowadays?"
            }, 
            "id": "d7br1s1"
        }, 
        {
            "body": {
                "answer": "<p>I can<sq>t remember the last time I had to write a query with under 5 joins haha.</p>", 
                "question": "How much SQL is really necessary nowadays?"
            }, 
            "id": "d7bnrc6"
        }, 
        {
            "body": {
                "answer": "<p>> So, how much SQL do you actually need to know nowadays, especially with ORMs and NoSQL solutions becoming more popular?<br><br>Neither of those mean you don<sq>t need to <sq>know<sq> SQL. Also you are really misunderstanding <sq>NoSQL<sq>; these systems are not taking over from relational databases. <br><br>So yeah; it<sq>s pretty much a requirement for being a dev. The chance of you not having to do any SQL as a dev is pretty much zero. Also because, compared to doing actual software development, SQL is pretty trivial. </p>", 
                "question": "How much SQL is really necessary nowadays?"
            }, 
            "id": "d7bhybe"
        }, 
        {
            "body": {
                "answer": "<p>Wix and Squarespace are hardly a threat to the web development industry, for a few major reasons.<br><br>The biggest issue is website creation tools like that don<sq>t offer anywhere near enough flexibility to create a lot of sites. Imagine trying to recreate reddit, GitHub or Wikipedia in Wix; it<sq>s completely impossible. Also, they don<sq>t offer much in terms of customisation compared to coding a website yourself - you<sq>re locked into the pre-made Wix designs or whatever the editor supports, whereas with HTML and CSS, you can create anything that the browser supports.<br><br>Also, the cost of both Wix and Squarespace seem very high for what you actually get - they charge $14 for 10GB bandwidth (for comparison, DigitalOcean will give you 2TB of bandwidth for $10!). You<sq>re also <sq>locked in<sq> to Wix/Squarespace<sq>s infrastructure, which is not very good for larger companies.<br><br>The only groups of people who might be tempted to use Wix would be very small businesses or individuals, who likely aren<sq>t going to cause the web development industry to collapse anyway. So, I<sq>d definitely recommend learning HTML/CSS/JS and a backend language (Ruby, Python, Node.js, etc.) if you want to make any sort of interactive web page.</p>", 
                "question": "How do websites like Wix and Squarespace affect the web dev industry should I bother to learn HTMLCSS Javascript Ruby etc.?"
            }, 
            "id": "d35be1j"
        }, 
        {
            "body": {
                "answer": "<p>Consider<colon> if you had an idea for a website like Facebook, Amazon, Dropbox, reddit, Twitter (etc etc...) would you build it with a drag and drop, zero coding, probably very inefficient and non-scalable technology like the ones you mentioned? Or would you hire experienced professionals to do things in a way that is right for your specific needs. <br><br>Yes, maybe a proof of concept mock up could be made with these sites. However, web technology changes faster than nearly every other field; and to really reap the rewards and big investment, your site needs to act like a cutting edge slice of the internet. You don<sq>t get that feeling from a site generator.</p>", 
                "question": "How do websites like Wix and Squarespace affect the web dev industry should I bother to learn HTMLCSS Javascript Ruby etc.?"
            }, 
            "id": "d35bgtk"
        }, 
        {
            "body": {
                "answer": "<p>If you learn html, css, javascript, and ruby, then you can build your own wix or squarespace...</p>", 
                "question": "How do websites like Wix and Squarespace affect the web dev industry should I bother to learn HTMLCSS Javascript Ruby etc.?"
            }, 
            "id": "d35khax"
        }, 
        {
            "body": {
                "answer": "<p>How do places like McDonalds and KFC affect the food industry? Should I bother with learning how to cook for myself?</p>", 
                "question": "How do websites like Wix and Squarespace affect the web dev industry should I bother to learn HTMLCSS Javascript Ruby etc.?"
            }, 
            "id": "d35tygt"
        }, 
        {
            "body": {
                "answer": "<p>Discrete math.  Things like logic/truth tables, set theory, coordinate graphs.  <br><br>Don<sq>t listen to the people telling you to learn calculus unless you plan on doing something that specifically involves it, like graphics programming (and for simple graphics programming you don<sq>t even need that much math).<br><br>Edit<colon> spelling</p>", 
                "question": "My knowledge of mathematics is very poor what areas of mathematics are most useful for programming?"
            }, 
            "id": "ci1jp9z"
        }, 
        {
            "body": {
                "answer": "<p>Understanding elementary algebra, which basically will study operations and their properties, helps because you<sq>ll have a more formal understanding of what it<sq>s generally expected out of simple stuff like plus or minus. This is important because it<sq>s not always obvious what it means to be commutative, to be associative, to have an identity element, and so forth. There is more to it than just that. Understanding of relations and all sorts of operational structures goes into this too. For example, what is ordering? Lots of fundamental concepts we deal in every day programming is studied by algebra.<br><br>Arithmetic also helps because you<sq>ll be dealing with numbers. Understand numerical properties can help in your coding. Just because of the fact we deal with numbers all the time. This is in the same reasoning as algebra<colon> lots of fundamental concepts we deal in every day programming is also studied by arithmetic.<br><br>However, the biggest winners in my opinion, are mathematical logic and set theory. If you had to pick one, I think you should pick mathematical logic.<br><br>This is, however, my opinions on math for programming. Math for computer science includes a lot more. There is a large focus on math for computational problem solving so you can use mathematical tools for doing algorithmic work (analysis of algorithms for example, or even mathematical modeling of problems). In there, there is also a concern with probability, combinatorics, graph theory, optimization, and more. Depending on a specific area, you can have more math of some kind and less of other. For example, in studying formal languages and automata theory you have a different kind of math in there.<br><br>If you have a poor math background, you could start by going through a high school math book, which you<sq>re expected to have gone through in many of the math books teaching these kinds of stuff. Not really because they require the knowledge you find in those books, but because those books somewhat set the grounds for being able to reason about less trivial math topics. You learn in them for example, basic ideas of math problem solving.</p>", 
                "question": "My knowledge of mathematics is very poor what areas of mathematics are most useful for programming?"
            }, 
            "id": "ci1hstj"
        }, 
        {
            "body": {
                "answer": "<p>It depends on what kind of programming you want to do. I<sq>ve been programming for 15yrs and I<sq>m just barely bothering to finish a degree and I<sq>m taking Discrete Math now. Building basic apps, tile-based games and/or databases requires little math.<br><br>It<sq>s actually programming that helped me learn math, not the other way around. I much better understand the concepts of functions used in Algebra thanks to C/C++, logic from Boolean values and some basic physics and calculus from time spent with graphics programming.<br><br>So far, the biggest hurdle I<sq>ve encountered is the graphics programming. It<sq>s painstaking doing that without the background in calculus or physics. That said, I<sq>m able to jump into ongoing projects and work just fine; I<sq>m just not about to write my own ray-tracing algorithm, but that<sq>s hardly necessary considering the access to Google these days.<br><br>IMHO, this isn<sq>t 1985. You don<sq>t need most math unless you<sq>re getting into cryptography, graphics or specialized industrial/academic systems that simply require math for their basic functions. You can easily understand C/C++ code more often than not. Unless you<sq>re trying to upgrade some graphics engine, you won<sq>t run into a whole lot of math anyway.<br><br>That said, if you want to be a professional, your 16-hour days could easily extend to 20 if you have to look up every math concept you don<sq>t understand. But to be a hobbyist, save yourself the money for the moment and just start coding.</p>", 
                "question": "My knowledge of mathematics is very poor what areas of mathematics are most useful for programming?"
            }, 
            "id": "ci1nnfe"
        }, 
        {
            "body": {
                "answer": "<p>if you feel like learning math head on over to www.khanacademy.org. they teach everything from basic addition to calculus. areas that are particularly useful are linear algebra, statistics, and probability, though I suggest going through some of the earlier stuff like arithmetic just to make sure you have a solid grasp on the basics.<br><br>I<sq>ve actually been using khan academy off and on for a couple years now and it has really helped me with areas i used to struggle with. i highly recommend it and its free so you can<sq>t get a better deal! </p>", 
                "question": "My knowledge of mathematics is very poor what areas of mathematics are most useful for programming?"
            }, 
            "id": "ci1kfj7"
        }, 
        {
            "body": {
                "answer": "<p>Woah, this sounds great. looking forward to it, i hope to learn coding soon(college). saved for future reference, i would playtest but im a noob and on mobile </p>", 
                "question": "Help us build CodeCombat<colon> a multiplayer programming game"
            }, 
            "id": "cd91wkc"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>m a recording engineer and music producer getting into the programming field. Need any music/sound fx?</p>", 
                "question": "Help us build CodeCombat<colon> a multiplayer programming game"
            }, 
            "id": "cd9abkp"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>ve been clicking around and I<sq>m having trouble finding a link to the github. Help us help you. Link it here, link it on your blog, link it on your <dq>contribute<dq> page. Everywhere you have the word <dq>archmage<dq> there should be a link to the repo.</p>", 
                "question": "Help us build CodeCombat<colon> a multiplayer programming game"
            }, 
            "id": "cd959wq"
        }, 
        {
            "body": {
                "answer": "<p>Do you guys have any use for a CS student whose strongest language is C++?</p>", 
                "question": "Help us build CodeCombat<colon> a multiplayer programming game"
            }, 
            "id": "cd9fmds"
        }, 
        {
            "body": {
                "answer": "<p>My mental process when I do the code thing<colon><br><br>1. How the ***F&#$*** do I even approach this?<br>2. Am I even a good enough programmer?<br>3. I<sq>m not cut out for this industry, I should have just become an electrician like my mother said.<br>4. What the ***S#$&*** does this guy on stack overflow mean?<br>5. This isn<sq>t an answer to my exact problem, why did he even make this post?<br>6. Oh I think I made a little progress.<br>7. Huh, that was actually easier than I thought.<br>8. ...<br>9. How the ***F&#$*** do I even approach this?<br><br>Seriously. After doing this for only 12 months, my mentality has changed from <dq>can I do this?<dq> to <dq>it<sq>s just a matter of time<dq>. It<sq>s kind of cool, you feel bulletproof once you<sq>ve adapted to constantly riding the learning curves.<br><br>While this may not be directly useful to you, what I am saying is hang in there and it will pay off. Good luck and post your problems online frequently</p>", 
                "question": "When learning to code hardest thing is frustration not learning or motivation"
            }, 
            "id": "d276hfc"
        }, 
        {
            "body": {
                "answer": "<p>I feel that and worry that all the time. Would I be good enough to get a job? Well I find a job in programming? Would I enjoy working for someone? How can I do it myself? These are my questions. I am about to receive my Associates in CS, I just turned 29 and don<sq>t have a portfolio. I understand where you come from, but for me the frustration of the code I love it. A puzzle that I get mad at but will not be bested by and when I finally solve that puzzle I have this overwhelming since of accomplishment and gratification. That is how I handle frustrating code. </p>", 
                "question": "When learning to code hardest thing is frustration not learning or motivation"
            }, 
            "id": "d26m32i"
        }, 
        {
            "body": {
                "answer": "<p>I heard someone say this about programming on a podcast<colon><br><br>#We are paid to be frustrated.<br><br>Trust me, when you get a job the enterprise level debugging is more frustrating than what you are dealing with right now. That is a topic for another day.<br><br>For now, you might want to focus on learning methods, increasing productivity, etc. If you are working full-time AND learning to code, then your frustration is probably more. What I would suggest is whenever you get frustrated, clear your mind by focusing on some other tasks. For example, go a problem solving spree on [uhunt](http<colon>//uhunt.felix-halim.net/), or go for a walk, or just do mundane tasks at home and then get back to your problem. Frustration will always be there. Set small goals and try to achieve it. After that give yourself a small reward. This way you can keep yourself motivated. Do not set a ridiculously high goal.<br><br>You are not alone.</p>", 
                "question": "When learning to code hardest thing is frustration not learning or motivation"
            }, 
            "id": "d26rvg7"
        }, 
        {
            "body": {
                "answer": "<p>The worst thing is when you do know how to code, you know *exactly* what you have to learn/know, but the documentation for whatever language/tool you<sq>re using is so non-existent, poorly written, unintuitive, or just entirely excluding the information that you need that you just can<sq>t find the information needed.</p>", 
                "question": "When learning to code hardest thing is frustration not learning or motivation"
            }, 
            "id": "d26w0kw"
        }, 
        {
            "body": {
                "answer": "<p>Yes. http<colon>//floating-point-gui.de/</p>", 
                "question": "I JUST installed python and this is literally my second line in Python or any code. Is this normal ? 2.2* =/= 6.6"
            }, 
            "id": "cun5psd"
        }, 
        {
            "body": {
                "answer": "<p>You know how some numbers, like 1/3rd, can<sq>t be accurately written as a decimal? Computers use binary, and numbers like 1/10 can<sq>t be accurately written using binary. So you get some rounding error, just like how 1 / 3 = 0.33333 and 0.33333 * 3 = 0.99999, not 1</p>", 
                "question": "I JUST installed python and this is literally my second line in Python or any code. Is this normal ? 2.2* =/= 6.6"
            }, 
            "id": "cun5v60"
        }, 
        {
            "body": {
                "answer": "<p>> Is this normal ?<br><br>Yes. [Floating points](http<colon>//floating-point-gui.de/) can<sq>t represent all values accurately. This is why you don<sq>t use them for stuff like money. This isn<sq>t Python specific by the way.</p>", 
                "question": "I JUST installed python and this is literally my second line in Python or any code. Is this normal ? 2.2* =/= 6.6"
            }, 
            "id": "cun5qwt"
        }, 
        {
            "body": {
                "answer": "<p>http<colon>//0.30000000000000004.com/</p>", 
                "question": "I JUST installed python and this is literally my second line in Python or any code. Is this normal ? 2.2* =/= 6.6"
            }, 
            "id": "cun9ubx"
        }, 
        {
            "body": {
                "answer": "<p>Are you a student with a an edu email? If so check out the company JetBrains. They make IDEs for all of the languages you mention. They can all be run on Linux. <br>Normally you have to pay for them but with an edu email you get them ALL free.  For C or c++ I would recommend visual studio code (I think runs on linux).  For Java I would recommend eclipse, NetBeans, or IntelliJ (especially IntelliJ if you have an edu email). <br><br></p>", 
                "question": "What IDE(s) should I use?"
            }, 
            "id": "d9epehb"
        }, 
        {
            "body": {
                "answer": "<p>JetBrains [IDEA](https<colon>//www.jetbrains.com/idea/) is a popular Java one, and it extends to multiple languages with plugins. [PyCharm](https<colon>//www.jetbrains.com/pycharm/?fromMenu) from the same company is Python specific.<br><br>These two have free community versions and all are multiplatform. <br><br>Don<sq>t use IDEA myself anymore, but I still get good mileage outta Pycharm. <br><br>*edit<colon>* Oh yeah, Google<sq>s (also free) [Android Studio](https<colon>//developer.android.com/studio/index.html) is based on IDEA/IntelliJ, so if you<sq>re familiar with that it eases adoption of those.</p>", 
                "question": "What IDE(s) should I use?"
            }, 
            "id": "d9epbfu"
        }, 
        {
            "body": {
                "answer": "<p>Atom it has great plugins for it and it<sq>s fully customizable </p>", 
                "question": "What IDE(s) should I use?"
            }, 
            "id": "d9ey0xk"
        }, 
        {
            "body": {
                "answer": "<p>Try out [VS Code](https<colon>//code.visualstudio.com). It<sq>s cross-platform, lightweight, and extensible. </p>", 
                "question": "What IDE(s) should I use?"
            }, 
            "id": "d9eoig5"
        }, 
        {
            "body": {
                "answer": "<p>If all the hype wasn<sq>t about <dq>programming<dq> but more about <dq>understanding the digital world you inhabit<dq>, it<sq>d be much easier to swallow.<br><br>We don<sq>t need anymore backseat programmers who think they know what they<sq>re doing, when in fact they don<sq>t. We need more citizens who have a clue about the world in general, and understanding how programs are made is a good thing, learning to actually program not so much.<br><br>But true to form, politicians are at the very forefront of ignorance and we<sq>re now stuck with the notion that anybody *should* learn to program. That<sq>s what<sq>s with all the hype.</p>", 
                "question": "Everyone should learn programming no matter what job you do?"
            }, 
            "id": "chp81i1"
        }, 
        {
            "body": {
                "answer": "<p>Programming encourages a rational, logical and methodical approach to problem-solving that is very valuable in one<sq>s mental toolkit. I<sq>d argue that if a higher percentage of the population tended to the habits of calm forward-planning that good programming requires, rather than snap emotional judgements, the world would be a better place.<br><br>On top of that, the world has become massively more <sq>electronic<sq>. Nodes of software are beavering away all over the place now... aside from the obvious places like our smartphones and the various layers of the internet we<sq>re increasingly relying on, we<sq>re also looking at the controllers in a modern car, the infrastructure behind municipal systems, the touchscreen cash register at a shop counter, the satellite or cable box on the TV, even the TV itself.<br><br>Having at least a basic understanding of the possibilities as well as the limitations and vulnerabilities inherent in these systems is becoming more and more an important modern skill.<br><br>And of course, if you end up in a PC-heavy environment at work, the advantages become obvious. Acquiring and processing data is very important in any modern business, and the accountant or salesman who can script together a quick scrape of 10 years of xls spreadsheets and make a nice report is a number of steps ahead of the accountant or salesman who can<sq>t... in the boss<sq> eyes, at least.<br><br>Sure, it<sq>s been rather hyperboled, and the immediate advantages are hard to quantify. Cooking and basic diy etc is _also_ very valuable, but to claim that they<sq>re <sq>far more<sq> valuable in the modern world is an extraordinary claim, verging on the ridiculous, like claiming that a screwdriver is more valuable than a hammer or an electric drill. <br><br>Like it or not, the modern world is driven by software. If you don<sq>t know the basics of how it works, you<sq>re gonna have to trust those who do. You a trusting person?<br><br>Edit<colon> for writing derps</p>", 
                "question": "Everyone should learn programming no matter what job you do?"
            }, 
            "id": "chp80l1"
        }, 
        {
            "body": {
                "answer": "<p>This is a lot of hype that<sq>s amounts to a bad idea, if it<sq>s even feasible.<br><br>Encouraging critical thought is good.  Understanding how software works at a finer level is good.<br><br>But, for one thing, some people just aren<sq>t going to get it.  As a former educator, myself, I<sq>ve really become convinced that there is a substantial subset of the population that just isn<sq>t going to get it.<br><br>Furthermore, I think this is bad for developers like me who work for a company that doesn<sq>t primarily create software, with managers who don<sq>t get it.<br><br> * I don<sq>t want to have to support the rat<sq>s nest of VBA that our heroic <dq>citizen coder<dq> accountant built after she leaves the company six months from now.  <br> * I don<sq>t want to get sucked into elaborate MS Access projects that an under-informed manager thinks look cool, based on a brief presentation of a nerd on the marketing team.<br> * I don<sq>t want to have to teach our design guy PHP, just because he found an <dq>inspiring<dq> Stack Overflow post.<br><br>Fear?  Maybe.  But it doesn<sq>t sound too unreasonable to my paranoid ear.</p>", 
                "question": "Everyone should learn programming no matter what job you do?"
            }, 
            "id": "chp9w3p"
        }, 
        {
            "body": {
                "answer": "<p>The founder of stackoverflow certainly agrees with you<colon><br>http<colon>//blog.codinghorror.com/please-dont-learn-to-code/</p>", 
                "question": "Everyone should learn programming no matter what job you do?"
            }, 
            "id": "chpel3d"
        }, 
        {
            "body": {
                "answer": "<p>Not commenting, and giving nonsense names to your variables.</p>", 
                "question": "What are some bad coding habits you would recommend a beginner avoid getting into?"
            }, 
            "id": "cb0v1k3"
        }, 
        {
            "body": {
                "answer": "<p>Copy/paste is a reminder to rethink how you can make the block reusable as a function. When tracking bugs down later it really sucks to fix the same thing 5 times because you felt lazy and went with the old Ctrl+c/Ctrl+v solution.<br><br>Always comment <dq>clever<dq> solutions because months later you will wonder why the hell you are doing <dq>something weird<dq> there.<br><br>Don<sq>t overuse any pattern you have learned. Sometimes solutions really are simple and do not require <dq>that trusty drill<dq> every single time.<br><br>Learn to write unit tests early in your experience. Lacking this routine makes you a poor developer later.<br><br>Don<sq>t spend <dq>100 days<dq> to decide a tech stack or framework for your latest idea. Attacking sooner is better than choosing the <dq>best framework<dq> 1 year from now.<br><br>Don<sq>t bitch about another person<sq>s code without offering a solution. As a beginner don<sq>t let somebody rip your code apart without asking how they would do it.</p>", 
                "question": "What are some bad coding habits you would recommend a beginner avoid getting into?"
            }, 
            "id": "cb0w5y9"
        }, 
        {
            "body": {
                "answer": "<p>Coding by exception<colon> start writing an algorithm with a data set, get it to work, find new data that<sq>s different and write an if statement to handle it. Find a new wrinkle, write a new if statement, lather, rinse, repeat. It generates truly awful unreadable code.</p>", 
                "question": "What are some bad coding habits you would recommend a beginner avoid getting into?"
            }, 
            "id": "cb0vfki"
        }, 
        {
            "body": {
                "answer": "<p>Read the book [Clean Code](http<colon>//www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). It<sq>s full of useful tips for beginners. This is seriously one of the most important books for any programmer.</p>", 
                "question": "What are some bad coding habits you would recommend a beginner avoid getting into?"
            }, 
            "id": "cb0ws3p"
        }, 
        {
            "body": {
                "answer": "<p>I think illustrating a non-positional number system like Roman or tally marks would add contrast to help your students understand there are different ways of representing numbers with base 2 just being one that is suited to the transitors in CPUs.<br><br>But other than that, I think your artwork is great. It<sq>s uncluttered and color-coded which makes it easy to follow.</p>", 
                "question": "My attempt to explain binary numbers to my students (complete beginners)"
            }, 
            "id": "dape5od"
        }, 
        {
            "body": {
                "answer": "<p>I use a coin example.  For example, I say I<sq>m developing a new currency.  Let<sq>s call the basic unit a penny (so I borrow the US system).  I<sq>m going to give you one penny at a time, but each time you reach 2 of any coin, you must exchange it for a coin worth that value.<br><br>For example,<br><br>* Give you 1 penny (you have 1)<br>* Give you 1 penny (you have 2, must exchange for a 2-penny coin)<br>* Give you 1 penny (you have 1 2-penny coin and 1 penny)<br>* Give you 1 penny (you ave 1 2-penny coins and 2 pennies, must exchange 2 pennies for 1 2-penny coin.  You now have 2 2-penny coins, must exchange for a 4-penny coin)<br><br>As you go up, you see what values each coin must have.</p>", 
                "question": "My attempt to explain binary numbers to my students (complete beginners)"
            }, 
            "id": "dapgogt"
        }, 
        {
            "body": {
                "answer": "<p>I think it has a pretty good explanation overall and I always tend to be fond of illustrative teachings. My only issue is your number 9s are 100<percent> lower case G<sq>s. I understand it<sq>s a style choice but I find it oddly distracting. </p>", 
                "question": "My attempt to explain binary numbers to my students (complete beginners)"
            }, 
            "id": "dapgteh"
        }, 
        {
            "body": {
                "answer": "<p>Just a minor thing, a brief mention of *why* we use a 2-base system in computing would be useful. <dq>Why do we use 2-base when working with computer binary?<dq> <dq>Because a CPU is basically a series of switches; on or off, 1 or 0<dq> or similar.</p>", 
                "question": "My attempt to explain binary numbers to my students (complete beginners)"
            }, 
            "id": "dapphva"
        }, 
        {
            "body": {
                "answer": "<p>Welcome to AI.</p>", 
                "question": "Can a programmer program a code that can program a random code by itself?"
            }, 
            "id": "d5f96vh"
        }, 
        {
            "body": {
                "answer": "<p>This is called Self-Modifying code and it is not very popular as it can get really complex quickly. There are languages and programs that do this, a very famous one being [Malbolge](http<colon>//www.lscheffer.com/malbolge.shtml). It is almost impossible to write in though because of this.<br><br>There is also a thesis on  a Unix kernel that was written to self modify itself a bit<colon> [Here](https<colon>//en.wikipedia.org\\<br>/wiki/Self-modifying_code#Massalin.27s_Synthesis_kernel).<br><br>Edit<colon> Should specify saying that it is not ever truly random.</p>", 
                "question": "Can a programmer program a code that can program a random code by itself?"
            }, 
            "id": "d5f99yi"
        }, 
        {
            "body": {
                "answer": "<p>It seems to me that all upvoted answers in this thread completely miss the question. Generating random programs has nothing to do with AI or self-modification. [CSmith](https<colon>//embed.cs.utah.edu/csmith/) would be an actual example of a program which generates random, C99 conforming C code. It<sq>s used to stress-test and benchmark compilers.</p>", 
                "question": "Can a programmer program a code that can program a random code by itself?"
            }, 
            "id": "d5fiaof"
        }, 
        {
            "body": {
                "answer": "<p>A random character generator would produce functional code eventually.</p>", 
                "question": "Can a programmer program a code that can program a random code by itself?"
            }, 
            "id": "d5fassj"
        }, 
        {
            "body": {
                "answer": "<p>All my life. Seriously, it<sq>s a never-ending endeavor. There<sq>s always more stuff to learn. The more you know, the more you see you still haven<sq>t learnt.  <br><br>A less philosophical answer would be<colon> one good book. There isn<sq>t a specific timeframe, but rather the amount of stuff you need to go through before you can achieve something like that, and that<sq>s the point you<sq>re usually left off after reading a good book.  <br><br>There<sq>s loads of good resources out there. Just be sure to look up which ones are tried and tested good ones, since there<sq>s loads of bad stuff too.  <br><br>A general book about OOP I would recommend is the Object-Oriented Though Process by Matt Weisfield.</p>", 
                "question": "How long did it take for you to <dq>get good<dq> at programming?"
            }, 
            "id": "d3ftfco"
        }, 
        {
            "body": {
                "answer": "<p>I wouldn<sq>t call what you<sq>re describing <dq>being good<dq> at programming. To me,  being good at programming is one thing<colon> consistently producing high quality code. <br><br>What you<sq>re describing is what it takes to move from <dq>beginner<dq> to <dq>novice<dq> programmer. <br><br>That doesn<sq>t answer the question though, so...<br><br>If you spend 10 hours per week trying stuff (without jumping all over the place, pick one language/library and go with it) you can expect to start building interesting things after a few weeks. That doesn<sq>t mean you will be <dq>good<dq> at programming,  it just means that you will be able to make the computer do stuff. <br><br>To become <dq>good<dq> at programming expect to do a lot of studying on common patterns,  coding guidelines, data structures, algorithms, mathematics, etc over years and years</p>", 
                "question": "How long did it take for you to <dq>get good<dq> at programming?"
            }, 
            "id": "d3fuqsx"
        }, 
        {
            "body": {
                "answer": "<p>I<sq>D SAY <dq>TWELVE YEARS<dq> BUT I DON<sq>T THINK I<sq>M THAT GOOD AT PROGRAMMING YET. LET<sq>S GIVE IT ANOTHER TWELVE AND SEE HOW IT GOES. </p>", 
                "question": "How long did it take for you to <dq>get good<dq> at programming?"
            }, 
            "id": "d3g1imp"
        }, 
        {
            "body": {
                "answer": "<p>It took me until the first feature I owned at a job. Collecting requirements, designing, implementing on a deadline, and prioritizing bugs is hard. Then you end up maintaining, extending and refactoring to rub in exactly how much you actually suck. If you pay attention, though, you<sq>ll learn and won<sq>t make those same mistakes again.<br><br>The best part is that you get that same experience with the next feature and the next after that and so on. As long as you aren<sq>t making the same mistakes, it<sq>s a measure of continued development.</p>", 
                "question": "How long did it take for you to <dq>get good<dq> at programming?"
            }, 
            "id": "d3fwm7x"
        }
    ]
}